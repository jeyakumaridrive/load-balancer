{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/js-utils/index.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/(webpack)/buildin/global.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/./node_modules/process/browser.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/(webpack)/buildin/module.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/TalkMutedDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedNotification.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/rttmonitor/rttmonitor.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/index.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-options.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://JitsiMeetJS/./node_modules/strophejs-plugin-stream-management/lib/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/timers-browserify/main.js","webpack://JitsiMeetJS/./node_modules/setimmediate/setImmediate.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PEERCONNECTION_READY","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","global","global$1","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","blockquote","br","cite","em","img","li","ol","span","strong","ul","body","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBareFromJid","ignoreNamespaceFragment","matchBare","user","getNamespace","elNamespace","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","HTTP","websocket","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","to","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","$msg","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","xml:lang","content","ver","xmpp:version","xmlns:xmpp","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","_hitError","xmpp:restart","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","version","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","__webpack_exports__","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","AVATAR_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","_BrowserCapabilities__WEBPACK_IMPORTED_MODULE_0__","BrowserCapabilities","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","_instances","require","__filename","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","loadCallStatsAPI","callStatsConfIDNamespace","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","dispose","size","emit","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","values","next","done","callStats","stopCallStats","tpc","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getCallStatsConfID","_getAllCallStatsInstances","csInstances","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","statistics","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","cs","roomName","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","sendDominantSpeakerEvent","roomJid","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","sendActiveDeviceListEvent","devicesData","globalSet","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","stats","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","eventToLog","properties","sendAnalytics","eventName","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferVideoCodec","codecName","payloadType","rtp","codec","payload","payloadTypes","payloads","payloadIndex","unshift","stripVideoCodec","removePts","rtxApts","item","rtxPts","fmtp","config","apply","keepPts","rtcpFb","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","_objectSpread","error_type","error_message","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","participant_id","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","media_type","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createRttByRegionEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","IS_SELECTED_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","AUDIO","PRESENTER","VIDEO","usesAdapter","availableDevices","availableDevicesPollTimer","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafariWithVP8","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","isElectron","screenShareAudio","desktopStream","chromeMediaSource","chromeMediaSourceId","bandwidth","firefox_fake_device","fake","_options$frameRate","screen","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","audio_input_device_count","audio_output_device_count","video_input_device_count","video_output_device_count","device_id","device_group_id","groupId","device_kind","device_label","label","rtcUtils","RTCUtils","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","Listenable","clearInterval","enumerateDevices","navigator","mediaDevices","then","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","_ref","getTrackID","_ref2","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","_ref3","_ref4","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","slice","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","useIPv6","googIPv6","p2pPcConstraints","Promise","resolve","reject","getUserMedia","catch","umDevices","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","devices","includes","_getAudioAndVideoStreams","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","_desktopStream","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingExtensionExternalInstallation","desktopSharingSources","gumOptions","trackOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","_this$_parseDesktopSh","_newGetUserMediaWithConstraints","getTracks","applyConstraints","_newGetDesktopMedia","maybeRequestCaptureDevices","requestedCaptureDevices","newGetConstraints","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","effects","_ref5","deviceType","mediaStream","release","url","revokeObjectURL","isDeviceChangeAvailable","deviceData","enable","googSuspendBelowMinBitrate","origAttachMediaStream","getAudioOutputDevice","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","_len","args","_key","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","metaData","_track$getSettings","getSettings","RTC","conference","peerConnections","localTracks","_channel","_channelOpen","_lastN","_lastNEndpoints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_assertThisInitialized","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","newObtainAudioAndVideoPermissions","obtainAudioAndVideoPermissions","eventType","isP2P","elSelector","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","setAudioOutputDevice","isUserStreamById","streamId","isDesktopSharingEnabled","_channelOpenListener","wsUrl","BridgeChannel","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","leavingLastNEndpoints","enteringLastNEndpoints","lastNEndpoints","oldLastNEndpoints","isInLastN","JitsiConferenceEvents","maxFrameHeight","ids","signaling","iceConfig","getPCConstraints","abtestSuspendVideo","setSuspendVideo","addPermanentProperties","supportsSdpSemantics","sdpSemantics","bundlePolicy","newConnection","TraceablePeerConnection","traceablePeerConnection","localVideo","getLocalTracks","localAudio","tracks","getType","remoteTracks","pcRemoteTracks","getRemoteTracks","mutePromises","audioTrack","mute","unmute","all","pos","owner","removedTracks","pcRemovedTracks","removeRemoteTracks","audioLevel","getTrackBySSRC","isAudioTrack","setAudioLevel","sendMessage","remoteAudioTracks","setAudioOutput","CHROME_EXTENSION_GENERIC_ERROR","CHROME_EXTENSION_INSTALLATION_ERROR","CHROME_EXTENSION_USER_GESTURE_REQUIRED","CHROME_EXTENSION_USER_CANCELED","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","FIREFOX_EXTENSION_NEEDED","GENERAL","NOT_FOUND","PERMISSION_DENIED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackErrors","constraint","failedConstraintName","getResolutionFromFailedConstraint","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","tmp","mediaSSRCs","_loop","mediaindex","mid","linessrc","idx","containsSSRC","medias","mangle","newdesc","rtpmap","removeSessionLines","prefix","removeMediaLines","toJingle","thecreator","assrcline","creator","amidline","afmtpline","rtcpFbToJingle","crypto","required","ssrcMap","_step$value","_slicedToArray","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","senders","transportToJingle","sctpmap","sctpAttrs","number","setup","payloadtype","subtype","rtcpFbFromJingle","each","$","fromJingle","jingle","sessionId","groups","contents","_","jingle2media","sctp","streamCount","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","SETUP_FAILED","VIDEOBRIDGE_NOT_AVAILABLE","_events","_maxListeners","isFunction","isObject","isUndefined","defaultMaxListeners","setMaxListeners","er","listeners","context","newListener","warned","trace","once","fired","g","list","position","listenerCount","evlistener","emitter","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","Chrome","Chromium","Opera","Firefox","Internet Explorer","Safari","_detectElectron","userAgent","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","checkTree","satisfies","_checkCondition","_defineProperty","BrowserDetection_BrowserDetection","browsers_namespaceObject","removeEventListener","off","WRONG_STATE","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","ssrcNumber","attrName","ssrcObj","ssrcNum","primarySSRC","msid","findGroup","fecGroup","findGroupByPrimarySSRC","videoSSRCs","getSSRCs","ssrcGroupInfo","secondarySsrc","groupInfo","oldSSRC","newSSRC","SdpTransformWrap","rawSDP","parsedSDP","transform","_createClass","selectedMLine","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","1080","order","fullhd","720","hd","960","540","qhd","360","640","vga","180","320","PENDING","ACTIVE","ENDED","_fabrics","wrtcFuncNames","fabricEvent","DEFAULT_REMOTE_USER","reportType","hasFabric","fabrics","backendInitialized","_addNewFabric","_emptyReportQueue","backend","atLeastOneFabric","defaultInstance","csInstance","defaultConfID","defaultPC","reportsQueue","report","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","_len2","theArguments","_key2","debugMethods","_loop2","_len3","_key3","originalReportError","exception","configParams","CallStatsBackend","callstats","_traceAndCatchBackendCalls","applicationVersion","getName","siteID","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","ret","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","_callStatsUserName","_machineId","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_0__","_util_UsernameGenerator__WEBPACK_IMPORTED_MODULE_1__","_util_UsernameGenerator__WEBPACK_IMPORTED_MODULE_1___default","getLocalStorage","storage","localStorage","_p8","callStatsUserName","username","UsernameGenerator","generateUsername","machineId","jitsiMeetId","ALPHANUM","randomElement","randomHexDigit","randomHexString","randomAlphanumStr","getConnectionPluginDefinition","base","_class","_base","_class2","_getPrototypeOf2","_inherits","ConnectionPluginListenable","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","enableWebsocketResume","_ref$serviceUrl","serviceUrl","websocketKeepAlive","XmppConnection","createConnection","bosh","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","supportsRtx","enableLipSync","rayo","_pingSupported","credentials","performance","statusStr","getStatusString","XMPPEvents","useStunTurn","p2p","getStunAndTurnCredentials","lastErrorMsg","pingJid","getFeaturesAndIdentities","identities","PING","ping","startInterval","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","_onPrivateMessage","password","JitsiConnectionEvents","anonymousConnectionFailed","connectionFailed","JitsiConnectionErrors","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","_resetState","connectionHandler","attaching","_this$options$hosts","hosts","anonymousdomain","configDomain","hostname","onCreateResource","roomjid","muc","mucNickname","emuc","createRoom","getLog","_this$connection$rayo","dial","isPingSupported","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2pStunServers","stunServers","iceTransportPolicy","MucConnectionPlugin","JingleConnectionPlugin","PingConnectionPlugin","RayoConnectionPlugin","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","room","jsonString","json","jsonMessage","parsedJson","tryParseJSONAndVerify","users","created_timestamp","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","_options","_resumeRetryN","_stropheConn","_usesWebsocket","_lastSuccessTracker","LastSuccessTracker","startTracking","CONN_STATUS_CHANGED","_this$_stropheConn","_this$_stropheConn2","_stropheConnectionCb","_this$_stropheConn3","targetCallback","_status","blockCallback","_maybeEnableStreamResume","_maybeStartWSKeepAlive","_tryResumingConnection","_wsKeepAlive","Events","_this$_stropheConn4","_resumeTimeout","_this$_stropheConn5","streamManagement","getResumeToken","intervalWithJitter","fetch","sendBeacon","resumeToken","retryTimeout","getJitterDelay","disco","ENVIRONMENT","chromeExtInstalled","chromeExtUpdateRequired","gumFunction","ScreenObtainer","intChromeExtPromise","desktopSharingChromeDisabled","desktopSharingChromeExtId","desktopSharingFirefoxDisabled","_createObtainStreamMethod","isNWJS","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","isOpera","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","append","getWebStoreInstallUrl","initInlineInstalls","checkChromeExtInstalled","installed","updateRequired","initChromeExtension","obtainScreenFromExtension","obtainScreenOnFirefox","errorCallback","streamCallback","failCallback","obtainWebRTCScreen","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingChromeSources","streamType","onGetStreamResponse","_this$options","doGetStreamFromExtensionOptions","chrome","runtime","getStream","sources","lastError","doGetStreamFromExtension","alert","handleExternalInstall","webStoreInstallUrl","checkForChromeExtensionOnInterval","checkAgain","waitInterval","retries","currentRetries","interval","waitForExtensionAfterInstall","getDisplayMedia","applyConstraintsPromise","videoTrack","getVersion","extVersion","minVersion","s1","s2","n1","n2","isUpdateRequired","desktopSharingChromeMinExtVersion","Function","DEFAULT_NOT_IN_LAST_N_TIMEOUT","DEFAULT_RTC_MUTE_TIMEOUT","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","_getVideoFrozenTimeout","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","_changeConnectionStatus","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","SDPUtils","generateIdentifier","localCName","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","rtcpFeedback","fb","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JingleSessionPC","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","JingleSession","jingleContents","videoContents","state","JingleSessionState","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","enableFirefoxSimulcast","testing","enableLayerSuspension","startSilent","createPeerConnection","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","signaling_state","reconnect","iceStarted","onnegotiationneeded","remoteDescription","usesUnifiedPlan","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","isSelected","setIsSelected","localSDP","ice","sdpMLineIndex","jcand","usedrip","dripContainer","sendIceCandidates","candidates","_assertNotEnded","initiatorJid","cands","sdpMid","fingerprintLine","newJingleErrorHandler","sessionInfo","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","jingleAnswer","jingleOfferAnswerIq","_this9","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","jingleOfferElem","_this10","originalOffer","clone","remove","newFingerprint","sendTransportAccept","_this11","accept","responder","responderJid","videoTransferActive","newSendersValue","sessionModify","_this12","transportAccept","medialines","transportReject","sendSessionTerminate","sessionTerminate","reasonDescription","terminate","reasonCondition","reasonText","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","_addOrRemoveRemoteStream","isAdd","_this13","logPrefix","readSsrcInfo","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceAdd","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","offerIq","remoteSdp","removeSsrcInfo","usesPlanB","findIndex","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","_this14","setRemoteDescription","createAnswer","answer","_this15","offer","oldTrack","newTrack","_this16","workFunction","isVideoTrack","clearRecvonlySsrc","replaceTrack","shouldRenegotiate","newLocalSDP","setMaxBitRate","sourceRemoveElem","ssrcLines","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","_addRemoveTrackAsMuteUnmute","isMute","_this17","oldLocalSDP","removeTrackMute","addTrackUnmute","_verifyNoSSRCChanged","audioActive","videoActive","_this18","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","_this19","newVideoSenders","parseVideoSenders","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","_this20","errResponse","errorElSel","errorReasonSel","errorMsgSel","_this21","clear","finishCallback","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","LARGE_ARRAY_SIZE","HASH_UNDEFINED","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","Uint8Array","getPrototype","getPrototypeOf","objectCreate","propertyIsEnumerable","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","isIndex","assignValue","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isArr","input","initCloneArray","copyArray","getTag","isFunc","buffer","copy","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","byteOffset","byteLength","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneSet","symbol","initCloneByTag","stacked","props","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","arrayBuffer","newValue","getMapData","getValue","cache","pairs","other","ArrayBuffer","ctorString","isLength","baseKeys","_SDPUtil__WEBPACK_IMPORTED_MODULE_0__","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","LocalStatsCollector","AudioContext","webkitAudioContext","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","newLevel","lastLevel","diff","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","currentExecutingScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","trackHandler2Prop","track_mute","track_unmute","track_ended","addMediaStreamInactiveHandler","oninactive","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_setHandler","container","_onTrackAttach","_maybeFireTrackAttached","_attachTTFMTracker","_onTrackDetach","active","getStreamId","trackId","getTrackId","createAudioContext","AudioContextImpl","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","onaudioprocess","destination","_disconnectAudioGraph","stopStream","getDeviceLabel","_connectAudioGraph","_destroyed","_cleanupResources","E2E_RTT_CHANGED","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","arrayTag","asyncTag","errorTag","nullTag","proxyTag","undefinedTag","typedArrayTags","freeProcess","nodeUtil","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","isArg","isBuff","isType","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","othLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","arrLength","seen","arrValue","othIndex","resIndex","arrayFilter","baseUnary","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","ERROR_FEATURE_VERSION_MISMATCH","compareIdentities","some","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","feature","versionToCapabilities","jidToVersion","rooms","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","submit","_generateVersion","removeFeature","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","addToPresence","_identities","_features","_notifyVersionChanged","oldVersion","ON","OFF","SIM_LAYER_1_RID","SIM_LAYER_2_RID","SIM_LAYER_3_RID","SIM_LAYER_RIDS","TPCUtils","simulcastEncodings","scaleResolutionDownBy","parsedSdp","reorderedSsrcs","isSimulcastOn","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","isVersionGreaterThan","getTrack","transceiverInit","getOriginalStream","sendEncodings","_getStreamEncodings","addTransceiver","getTransceivers","receiver","addStream","setEncodings","sender","localSSRCs","stopped","_addedStreams","_extractPrimarySSRC","setMediaTransferActive","getParameters","encodings","setParameters","transceivers","encoding","SpeakerStats","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","newName","isNowDominantSpeaker","isDominantSpeaker","timeElapsed","total","IDENTITY_UPDATED","__WEBPACK_AMD_DEFINE_RESULT__","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","_ref$effects","_setEffectInProgress","effect","isEnabled","_startStreamEffect","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","track_type","isReceivingData","_get","storedMSID","getMSID","_streamEffect","_originalStream","startEffect","stopEffect","_stopStreamEffect","_switchStreamEffect","cont","removeTrack","_queueSetMuted","setMuted","_setMuted","logMuteInfo","doesVideoMuteByStreamRemove","enabled","_removeStreamFromConferenceAsMute","_unregisterHandlers","streamOptions","getCameraFacingMode","assign","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","detach","bytesSent","getConnectionState","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","_trackMuteChanged","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","changeMuteState","isLocalAudioTrack","vadEmitter","getTrackLabel","_changeDetectorsMuteState","destroy","JibriSession","_mode","_setSessionID","setStatus","_sessionID","_initiator","_liveStreamViewURL","_terminator","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","app_data","recording_mode","streamid","you_tube_broadcast_id","errorIq","setError","children","VIDEO_PERMISSION_NAME","JitsiMediaDevices","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","supported","promises","results","every","permissionStatus","_this$_eventEmitter","consoleTransport","globalTransports","transportIdx","globalOptions","callerInfo","disableCallerInfo","fileLocation","column","getCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","sessionConfig","raddr","dir2","RecordingResult","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","getDisplayName","download","Blob","href","click","getRecordingResults","getFileType","getActiveAudioDevice","_JitsiTrackEvents__WEBPACK_IMPORTED_MODULE_1__","_RTC_RTC__WEBPACK_IMPORTED_MODULE_2__","_statistics_statistics__WEBPACK_IMPORTED_MODULE_3__","DETECTION_TIMEOUT","audioDevices","devicePromiseArray","micDevice","devicePromise","allSettled","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","timeoutS","_retryTimeout","reload","isOpen","closeEvent","_stopConnectionRetries","_startConnectionRetries","OPEN","colibriClass","msgPayload","jsonObject","lastN","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","_retryWebSocketConnection","AnalyticsAdapter","analyticsHandlers","permanentProperties","conferenceName","user_agent","browser_name","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","conference_name","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","isSafari","isVersionLessThan","isSafariWithWebrtc","ondevicechange","RTCRtpTransceiver","_getChromiumBasedVersion","chromium","ua","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","reverse","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Amazon Silk","Android Browser","Bada","BlackBerry","Epiphany","Focus","Generic","Google Search","Googlebot","K-Meleon","Maxthon","Microsoft Edge","MZ Browser","NAVER Whale Browser","Opera Coast","PhantomJS","Puffin","QupZilla","QQ","QQLite","Sailfish","Samsung Internet for Android","SeaMonkey","Sleipnir","Swing","Tizen","UC Browser","Vivaldi","WebOS Browser","WeChat","Yandex Browser","Roku","amazon_silk","android","bada","blackberry","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","f","isBrowser","compareVersion","isEngine","is","92","93","versionName","94","vendor","model","95","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","statsInterval","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","packetsReceived","packetsLost","packetsSent","bytesReceived","framerateMean","receiveBandwidth","sendBandwidth","remoteAddress","transportType","localAddress","activeConnection","googFrameHeightReceived","googFrameWidthReceived","googFrameHeightSent","googFrameWidthSent","googFrameRateReceived","googFrameRateSent","audioInputLevel","audioOutputLevel","currentRoundTripTime","remoteCandidateType","localCandidateType","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","startAudioLevelStats","getStats","processNewAudioLevelReport","processAudioLevelReport","processNewStatsReport","processStatsReport","itemStatByKey","stat","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","localip","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","bytesReceivedNow","bytesReceivedBefore","nowBytesTransmitted","timeMs","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","userResolutions","userFramerates","localAvgAudioLevels","avgAudioLevels","_this3$audioLevelRepo","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","remoteIpAddress","remotePort","localIpAddress","localPort","localIp","networkType","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","getLocalSSRC","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidStateError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","Event","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","onaddstream","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","RTCRtpSender","clonedStream","clonedTrack","removeStream","getSenders","getReceivers","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","end","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","RTCRtpReceiver","getCapabilities","isNewTrack","nativeTrack","states","new","checking","completed","disconnected","failed","connecting","numAudioTracks","numVideoTracks","offerOptions","offerToReceiveAudio","offerToReceiveVideo","remoteCodec","hdrExt","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","selector","MediaStreamTrack","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeMethod","audioTransferActive","_dtmfSender","_dtmfTonesQueue","localUfrag","remoteUfrag","_peerVideoTypeChanged","SignalingEvents","_peerMutedChanged","tpcUtils","updateLog","statsinterval","interop","Interop","Simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","what","time","_remoteStreamAdded","_remoteStreamRemoved","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","_processStat","statValue","endTime","times","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","_setVideoType","setMute","endpoints","endpointTrackMap","mediaTrack","getSSRC","findTrackById","onaddtrack","streamAudioTracks","streamVideoTracks","mediaLines","remoteSDP","mls","trackSsrc","ownerEndpointId","getSSRCOwner","peerMediaInfo","getPeerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","selectMedia","changed","videoMedia","toRawSDP","enforceSendRecv","transformStreamIdentifiers","prop","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","fidGroups","rtxSsrcMapping","rtxSsrc","_assertTrackBelongs","webRtcStream","_removeStream","supportsRtpSender","_handleSenderRemoveStream","doesBelong","isMediaStreamInPc","findSenderByKind","findSenderByStream","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","toUnifiedPlan","mungeRemoteDescription","currentDescription","_insertUnifiedPlanSimulcastReceive","_ensureCorrectOrderOfSsrcs","sendTones","tones","duration","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","_this$_dtmfTonesQueue","clearVideoSsrcCache","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","peerTracks","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_removePeerConnection","hasCameraTrack","peerConnection","_createOfferOrAnswer","isOffer","logName","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","groupSSRCs","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","extractSSRCMap","_processLocalSSRCsMap","handleFailure","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","videoSender","simIndex","handleLayerSuspension","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","getConnectionTimes","gumStart","gumEnd","gumDuration","ttfm","_playCallback","_this$track","_getStatus","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","removeSSRC","addSSRCAttribute","addSSRCGroup","modifyRtxSsrcs2","pcId","streamAndTrackIDs","_addMutedLocalVideoTracksToSDP","sessionDesc","audioMLine","_transformMediaIdentifiers","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","getRtxSSRC","dumpSSRCGroups","removeGroupsWithSSRC","correspondingRtxSsrcs","ssrcMapping","sdpTransformer","getSSRCCount","primaryVideoSsrcs","getPrimaryVideoSSRCs","getSSRCAttrValue","correspondingRtxSsrc","previousAssociatedRtxStream","containsAnySSRCGroups","findGroups","removeGroupsBySemantics","injectRecvOnly","newPrimarySsrc","getPrimaryVideoSsrc","replaceSSRC","AudioMixer","_started","_streamsToMix","_streamMSSArray","_mixedMSD","createMediaStreamDestination","streamMSS","getTokenAuthUrl","urlPattern","roleUpgrade","JitsiConnection","_service_statistics_AnalyticsEvents__WEBPACK_IMPORTED_MODULE_0__","_JitsiConference__WEBPACK_IMPORTED_MODULE_1__","_JitsiConnectionEvents__WEBPACK_IMPORTED_MODULE_2__","_modules_statistics_statistics__WEBPACK_IMPORTED_MODULE_3__","_modules_xmpp_xmpp__WEBPACK_IMPORTED_MODULE_4__","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","_this$xmpp","getJid","setToken","initJitsiConference","JitsiConference","eventManager","JitsiConferenceEventManager","_init","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_statsCurrentId","statisticsId","Settings","statsId","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","rttMonitor","RttMonitor","e2eping","E2ePing","setupRTCListeners","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","statisticsDisplayName","callStatsCustomScriptUrl","callstats_name","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","addVADDetectionService","_talkWhileMutedDetection","TalkMutedDetection","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","setLastN","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","setLocalParticipantProperty","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","closeBridgeChannel","_delayedIceFailed","cancel","removeXMPPListeners","onMemberLeft","getConnection","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getLocalAudioTrack","getLocalVideoTrack","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","getFromPresence","sendPrivateTextMessage","sendPrivateMessage","sendCommand","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","localVideoTrack","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","_setConference","removeLocalTrack","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","addLocalTrack","setAudioMute","setVideoMute","addAsUnmutePromises","addTrackAsUnmute","removeAsMutePromises","removeTrackAsMute","getRole","isHidden","hiddenDomain","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","selectEndpoints","pinParticipant","pinEndpoint","isInteger","RangeError","isVideoActive","getParticipantCount","countHidden","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","nick","statsID","botType","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","getFeatures","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","setAnswer","onTransportInfo","transportInfo","addIceCandidates","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","supportsP2P","errorMsg","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","acceptOffer","_suspendMediaTransferForJvbConnection","bridgeChannelType","webSocket","openBridgeChannel","initializeBridgeChannel","onCallEnded","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","getMeetingUniqueId","getMeetingId","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","getLogs","getJingleLog","metadata","getXmppLog","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","overallFeedback","detailedFeedback","remoteUserId","getUsageLabel","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","sendChannelMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedNotification","sendIceFailedNotification","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","isEqual","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","invite","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","setReceiverVideoConstraint","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","meetingId","strophe_js__WEBPACK_IMPORTED_MODULE_0__","_service_statistics_AnalyticsEvents__WEBPACK_IMPORTED_MODULE_1__","_service_authentication_AuthenticationEvents__WEBPACK_IMPORTED_MODULE_2__","_service_authentication_AuthenticationEvents__WEBPACK_IMPORTED_MODULE_2___default","_modules_util_EventEmitterForwarder__WEBPACK_IMPORTED_MODULE_3__","_modules_util_EventEmitterForwarder__WEBPACK_IMPORTED_MODULE_3___default","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_4__","_JitsiConferenceErrors__WEBPACK_IMPORTED_MODULE_5__","_JitsiConferenceEvents__WEBPACK_IMPORTED_MODULE_6__","_service_RTC_MediaType__WEBPACK_IMPORTED_MODULE_7__","_service_RTC_RTCEvents__WEBPACK_IMPORTED_MODULE_8__","_service_RTC_RTCEvents__WEBPACK_IMPORTED_MODULE_8___default","_service_RTC_VideoType__WEBPACK_IMPORTED_MODULE_9__","_service_RTC_VideoType__WEBPACK_IMPORTED_MODULE_9___default","_modules_statistics_statistics__WEBPACK_IMPORTED_MODULE_10__","_service_xmpp_XMPPEvents__WEBPACK_IMPORTED_MODULE_11__","_service_xmpp_XMPPEvents__WEBPACK_IMPORTED_MODULE_11___default","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","forward","getStatus","setTerminator","setInitiator","setParticipantPropertyListener","recorderSession","logObject","getError","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","_onByteSentStatsReceived","dest","srcEvent","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","jitsiTrack","isWebRTCTrackMuted","oldValue","_isMediaTypeMuted","_getFeaturesPromise","_JitsiConnectionEvents__WEBPACK_IMPORTED_MODULE_0__","_modules_xmpp_xmpp__WEBPACK_IMPORTED_MODULE_1__","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","createNonAnonymousRoom","packet2JSON","_arr","_arr2","json2packet","packet","filterNodeFromPresenceJSON","members","presHandlers","_removeConnListeners","noBridgeAvailable","Moderator","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","getInfo","meetingIdValEl","setMeetingId","getForm","form","formSubmit","var","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","_arr3","newRole","discoRoomInfo","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","tagHandlers","nickname","skipEvents","onMucMemberLeft","reasonSelect","doLeave","isKick","membersKeys","actorNick","actorSelect","onParticipantLeft","subjectText","stamp","dateParts","kickIQ","onError","onNotSupported","formsubmit","handlerIdx","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","onMucLeft","doReject","_settings_Settings__WEBPACK_IMPORTED_MODULE_1__","createExpBackoffTimer","step","count","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","openSctp","machineUID","machine-uid","session-id","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","retry","minDelay","LastRequestTracker","_lastSuccess","stropheConnection","originalRawInput","jvbIceConfig","p2pIceConfig","ConnectionPlugin","onJingle","fromJid","ack","sess","startMuted","modifyContents","replaceTransport","successTime","sendTransportReject","addRemoteStream","removeRemoteStream","me","onTerminated","iceservers","dict","credential","doInitialize","ssrcOwners","SignalingLayer","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","getMediaPresenceInfo","_queue","_processQueueTasks","_stopped","kill","task","setImmediate","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","that","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","strophe_js__WEBPACK_IMPORTED_MODULE_1__","_util_GlobalOnErrorHandler__WEBPACK_IMPORTED_MODULE_2__","_util_GlobalOnErrorHandler__WEBPACK_IMPORTED_MODULE_2___default","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","errStatusCapture","PING_TIMESTAMPS_TO_KEEP","failedPings","pingExecIntervals","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","onRayo","roomPass","callResource","StropheLogger","logIncoming","logOutgoing","_audioLevel","myUserID","_eventFired","_isLocalAudioTrack","_processing","_scoreArray","_active","_calculateVADScore","_setActiveState","_processTimeout","_audioLvlArray","_calculateNoisyScore","scoreAvg","audioLevelAvg","avgAudioLvl","posAudioLevels","_recordValues","_timeoutTrigger","_hasAudioInput","_clearTriggerTimeout","_audioTrack","_handleAudioInputStateChange","_handleNoAudioInputDetection","STATS_MESSAGE_TYPE","kSimulcastFormats","layers","target","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_calculateConnectionQuality","_canceled","_iceFailedTimeout","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_sessions","_chatRoom","_handleFocusPresence","_handleJibriPresence","getSession","getID","_addSession","_emitSessionUpdate","_createSession","_recordingXMLUtils$ge","setLiveStreamViewURL","PCMonitor","getStatsIntervalMs","getStatsInterval","rtts","startStatsInterval","handleCandidateRtt","rttTotal","candidateKey","responsesReceived","requestsSent","rttTotalDiff","responsesReceivedDiff","requestsResponsesDiff","supportsLocalCandidateRttStatistics","pcMonitors","startPCMonitors","initialDelay","AverageStatReport","calculate","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","supportsRTTStatistics","addNext","batchReport","conference_size","local_candidate_type","remote_candidate_type","transport_type","appendReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","supportsBandwidthStatistics","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","isAudioMuted","_this$_audioProblemCa","localAudioLevelsString","dominantSpeakerId","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","markAsHasLeft","newStats","speakerStatsToUpdate","newParticipant","SphinxService","BEFORE_STATE","audioRecorder","transcriptionService","transcription","lineLength","hasPopulatedArrays","twoDimensionalArray","callBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","getState","_statistics_statistics__WEBPACK_IMPORTED_MODULE_0__","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","ProxyConnectionService","jitsiConnection","otherOptions","_objectWithoutProperties","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","processMessage","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","lib_default","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","interop_Interop","[object Object]","sessionMedia","bLine","lodash_clonedeep_default","bundle","mids","msidSemantic","semantic","current","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","inactiveMid","cmLine","getAnalyticsAttributesFromOptions","audio_requested","video_requested","screen_sharing_requested","_mergeNamespaceAndModule","constants","recording","recordingConstants","sipVideoGW","events","detection","errorTypes","logLevels","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","emitEvent","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","oldResolution","newResolution","resName","getLowerResolution","old_resolution","new_resolution","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","isMultipleAudioInputSupported","isCollectingLocalStats","lineno","colno","hint","contentHint","util","AuthUtil","JitsiMeetJS","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptUrlFromStack","remainingStack","ignoreMessage","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","makeLine","formatStr","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","DEFAULT_NUM_OF_LAYERS","processVideo","validateDescription","clearSsrcCache","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","strophe_js","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","TranscriptionService","Word","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","audioBlob","getWord","getBeginTime","getEndTime","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","supportsUnifiedPlan","val","compactObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","endsWith","getusermedia_logging","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","oldStream","methodObj","origSetLocalDescription","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","shimPeerConnection","addIceCandidateNullSupported","nativeAddIceCandidate","fixNegotiationNeeded","getusermedia_shimGetUserMedia","getdisplaymedia_shimGetDisplayMedia","edge_shim_shimPeerConnection","origMSTEnabled","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","rtcpeerconnection_default","validTurn","shimReplaceTrack","setTrack","firefox_getusermedia_shimGetUserMedia","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","firefox_getdisplaymedia_shimGetDisplayMedia","preferredMediaSource","firefox_shim_shimOnTrack","RTCTrackEvent","firefox_shim_shimPeerConnection","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","safari_shim_shimGetUserMedia","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","audioTransceiver","setDirection","videoTransceiver","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","sdp_default","augmentedCandidate","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","canSendMMS","remoteIsFirefox","canSendMaxMessageSize","getCanSendMaxMessageSize","remoteMMS","getMaxMessageSize","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeAllowExtmapMixed","nativeSRD","adapter_core_adapter","shimChrome","shimFirefox","shimEdge","shimSafari","adapter","commonShim","common_shim_namespaceObject","chrome_shim_namespaceObject","browserShim","firefox_shim_namespaceObject","edge_shim_namespaceObject","safari_shim_namespaceObject","adapterFactory"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,GAAAH,GACA,iBAAAC,QACAA,QAAA,YAAAD,IAEAD,EAAA,YAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,qBCoMAtC,EAAOD,QAtRY,CAIfwC,yBAA0B,gCAI1BC,qBAAsB,4BACtBC,wBAAyB,+BACzBC,YAAa,mBAKbC,cAAe,2BAIfC,cAAe,2BAMfC,WAAY,wBACZC,oBAAqB,2BAGrBC,8BAA+B,qCAK/BC,uBAAwB,4BAIxBC,kBAAmB,yBAInBC,uBAAwB,8BAIxBC,oBAAqB,2BAIrBC,sBAAuB,6BAKvBC,0BAA2B,iCAI3BC,qBAAsB,4BAKtBC,gBAAiB,uBAKjBC,kBAAmB,yBACnBC,SAAU,gBACVC,mBAAoB,0BACpBC,WAAY,kBACZC,kBAAmB,yBAMnBC,eAAgB,qBAMhBC,oBAAqB,0BAWrBC,OAAQ,cAGRC,mBAAoB,yBAKpBC,eAAgB,sBAIhBC,iBAAkB,wBAIlBC,yBAA0B,gCAG1BC,4BAA6B,mCAG7BC,cAAe,qBAGfC,WAAY,kBAGZC,kBAAmB,yBAGnBC,gBAAiB,uBAGjBC,SAAU,gBAIVC,iBAAkB,wBAGlBC,iBAAkB,wBAIlBC,wBAAyB,mBAIzBC,wBAAyB,mBAMzBC,+BAAgC,kBAKhCC,4BAA6B,mCAC7BC,kBAAmB,yBACnBC,qBAAsB,4BAKtBC,qBAAsB,gCACtBC,kBAAmB,yBACnBC,gBAAiB,uBACjBC,iBAAkB,wBAGlBC,cAAe,qBAKfC,uBAAwB,4BAIxBC,aAAc,oBAKdC,qBAAsB,4BACtBC,kBAAmB,8BACnBC,mBAAoB,0BACpBC,+BAAgC,sCAChCC,gBAAiB,uBAKjBC,qBAAsB,4BAGtBC,qBAAsB,4BAItBC,6BAA8B,oCAY9BC,uBAAwB,8BAKxBC,uBAAwB,8BAKxBC,8BAA+B,qCAI/BC,uBAAwB,8BAIxBC,gBAAiB,uBAIjBC,iBAAkB,wBAQlBC,6BAA8B,oCAK9BC,eAAgB,4BAQhBC,kCAAmC,qCAUnCC,mCACI,qCAIJC,6BAA8B,oCAM9BC,sBAAuB,gDCnR3B,SAAAC,GAAA,IAAA/G,IAIC,WAAoB,aAErB,IAAAgH,OAAA,IAAAD,IACA,oBAAAE,UACA,oBAAA5G,cAAA,GAEA,SAAA6G,EAAAC,GAWA,OATAD,EADA,mBAAA1F,QAAA,iBAAAA,OAAA4F,SACA,SAAAD,GACA,cAAAA,GAGA,SAAAA,GACA,OAAAA,GAAA,mBAAA3F,QAAA2F,EAAAE,cAAA7F,QAAA2F,IAAA3F,OAAAa,UAAA,gBAAA8E,IAIAA,GAGA,SAAAG,EAAAC,GACA,OAGA,SAAAA,GACA,GAAAC,MAAAC,QAAAF,GAAA,CACA,QAAA9G,EAAA,EAAAiH,EAAA,IAAAF,MAAAD,EAAAI,QAA6DlH,EAAA8G,EAAAI,OAAgBlH,IAAAiH,EAAAjH,GAAA8G,EAAA9G,GAE7E,OAAAiH,GAPAE,CAAAL,IAWA,SAAAM,GACA,GAAArG,OAAA4F,YAAAjG,OAAA0G,IAAA,uBAAA1G,OAAAkB,UAAAyF,SAAAlH,KAAAiH,GAAA,OAAAL,MAAAO,KAAAF,GAZAG,CAAAT,IAeA,WACA,UAAAU,UAAA,mDAhBAC,GAoCA,IAAAC,EAAA,SAAAC,EAAAC,GACA,IAAAC,GAAA,MAAAF,IAAA,MAAAC,GAEA,OADAD,GAAA,KAAAC,GAAA,KAAAC,GAAA,KACA,SAAAA,GAeAC,EAAA,SAAAC,GACA,oBAAAA,EACA,UAAAC,MAAA,oCAKA,IAFA,IAAAC,EAAA,GAEAjI,EAAA,EAA6BA,EAAA,EAAA+H,EAAAb,OAAoBlH,GAAA,EACjDiI,EAAAjI,GAAA,SAAA+H,EAAAG,WAAAlI,EAAA,KAAAA,EAAA,GAGA,OAAAiI,GAoCAE,EAAA,SAAAC,EAAAC,EAAAC,EAAAX,EAAA5F,EAAAb,GACA,OAAAwG,GAxDAa,EAwDAb,IAAAW,EAAAD,GAAAV,EAAAC,EAAAzG,OAxDAsH,EAwDAzG,GAvDAwG,IAAA,GAAAC,EAuDAF,GAxDA,IAAAC,EAAAC,GA2DAC,EAAA,SAAAJ,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA5F,EAAAb,GACA,OAAAiH,EAAAG,EAAAjI,GAAAiI,EAAAhI,EAAA+H,EAAAC,EAAAX,EAAA5F,EAAAb,IAGAwH,EAAA,SAAAL,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA5F,EAAAb,GACA,OAAAiH,EAAAG,EAAAhI,EAAAD,GAAAC,EAAA+H,EAAAC,EAAAX,EAAA5F,EAAAb,IAGAyH,EAAA,SAAAN,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA5F,EAAAb,GACA,OAAAiH,EAAAG,EAAAjI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA5F,EAAAb,IAGA0H,EAAA,SAAAP,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA5F,EAAAb,GACA,OAAAiH,EAAA9H,GAAAiI,GAAAhI,GAAA+H,EAAAC,EAAAX,EAAA5F,EAAAb,IAOA2H,EAAA,SAAAlB,EAAAmB,GAEAnB,EAAAmB,GAAA,SAAAA,EAAA,GACAnB,EAAA,IAAAmB,EAAA,YAAAA,EAOA,IANA,IAIAC,EAAAC,EAAAC,EAAAC,EAJAb,EAAA,WACAC,GAAA,UACAjI,GAAA,WACAC,EAAA,UAGAN,EAAA,EAA6BA,EAAA2H,EAAAT,OAAclH,GAAA,GAC3C+I,EAAAV,EACAW,EAAAV,EACAW,EAAA5I,EACA6I,EAAA5I,EACA+H,EAAAI,EAAAJ,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,iBACAM,EAAAmI,EAAAnI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,kBACAK,EAAAoI,EAAApI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,iBACAsI,EAAAG,EAAAH,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,mBACAqI,EAAAI,EAAAJ,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,iBACAM,EAAAmI,EAAAnI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,kBACAK,EAAAoI,EAAApI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,mBACAsI,EAAAG,EAAAH,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,iBACAqI,EAAAI,EAAAJ,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,iBACAM,EAAAmI,EAAAnI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,mBACAK,EAAAoI,EAAApI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,eACAsI,EAAAG,EAAAH,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,oBACAqI,EAAAI,EAAAJ,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,kBACAM,EAAAmI,EAAAnI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,kBACAK,EAAAoI,EAAApI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,oBACAsI,EAAAG,EAAAH,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,mBACAqI,EAAAK,EAAAL,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,iBACAM,EAAAoI,EAAApI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,kBACAK,EAAAqI,EAAArI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,kBACAsI,EAAAI,EAAAJ,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,kBACAqI,EAAAK,EAAAL,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,iBACAM,EAAAoI,EAAApI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,gBACAK,EAAAqI,EAAArI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,mBACAsI,EAAAI,EAAAJ,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,kBACAqI,EAAAK,EAAAL,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,gBACAM,EAAAoI,EAAApI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,mBACAK,EAAAqI,EAAArI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,kBACAsI,EAAAI,EAAAJ,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,kBACAqI,EAAAK,EAAAL,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,mBACAM,EAAAoI,EAAApI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,gBACAK,EAAAqI,EAAArI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,kBACAsI,EAAAI,EAAAJ,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,oBACAqI,EAAAM,EAAAN,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,cACAM,EAAAqI,EAAArI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,mBACAK,EAAAsI,EAAAtI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,mBACAsI,EAAAK,EAAAL,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,kBACAqI,EAAAM,EAAAN,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,kBACAM,EAAAqI,EAAArI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,kBACAK,EAAAsI,EAAAtI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,kBACAsI,EAAAK,EAAAL,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,oBACAqI,EAAAM,EAAAN,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,iBACAM,EAAAqI,EAAArI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,kBACAK,EAAAsI,EAAAtI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,kBACAsI,EAAAK,EAAAL,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,gBACAqI,EAAAM,EAAAN,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,iBACAM,EAAAqI,EAAArI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,mBACAK,EAAAsI,EAAAtI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,kBACAsI,EAAAK,EAAAL,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,kBACAqI,EAAAO,EAAAP,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,iBACAM,EAAAsI,EAAAtI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,kBACAK,EAAAuI,EAAAvI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,oBACAsI,EAAAM,EAAAN,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,iBACAqI,EAAAO,EAAAP,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,kBACAM,EAAAsI,EAAAtI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,mBACAK,EAAAuI,EAAAvI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,iBACAsI,EAAAM,EAAAN,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,mBACAqI,EAAAO,EAAAP,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,iBACAM,EAAAsI,EAAAtI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,kBACAK,EAAAuI,EAAAvI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,mBACAsI,EAAAM,EAAAN,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,mBACAqI,EAAAO,EAAAP,EAAAC,EAAAjI,EAAAC,EAAAqH,EAAA3H,EAAA,iBACAM,EAAAsI,EAAAtI,EAAA+H,EAAAC,EAAAjI,EAAAsH,EAAA3H,EAAA,oBACAK,EAAAuI,EAAAvI,EAAAC,EAAA+H,EAAAC,EAAAX,EAAA3H,EAAA,iBACAsI,EAAAM,EAAAN,EAAAjI,EAAAC,EAAA+H,EAAAV,EAAA3H,EAAA,kBACAqI,EAAAX,EAAAW,EAAAU,GACAT,EAAAZ,EAAAY,EAAAU,GACA3I,EAAAqH,EAAArH,EAAA4I,GACA3I,EAAAoH,EAAApH,EAAA4I,GAGA,OAAAb,EAAAC,EAAAjI,EAAAC,IASA6I,EAAA,CACAC,UAAA,SAAArH,GACA,OAvIA,SAAAsH,GAIA,IAHA,IACAtB,EAAA,GAEA/H,EAAA,EAA6BA,EAAA,EAAAqJ,EAAAnC,OAAyBlH,IACtD+H,GAJA,mBAIAuB,OAAAD,EAAArJ,GAAA,IAAAA,EAAA,UAJA,mBAIAsJ,OAAAD,EAAArJ,GAAA,IAAAA,EAAA,QAGA,OAAA+H,EA+HAwB,CAAAV,EAAAf,EAAA/F,GAAA,EAAAA,EAAAmF,UAEAsC,KAAA,SAAAzH,GACA,OAxJA,SAAAkG,GAGA,IAFA,IAAAF,EAAA,GAEA/H,EAAA,EAA6BA,EAAA,GAAAiI,EAAAf,OAAqBlH,GAAA,EAClD+H,GAAA0B,OAAAC,aAAAzB,EAAAjI,GAAA,KAAAA,EAAA,QAGA,OAAA+H,EAiJA4B,CAAAd,EAAAf,EAAA/F,GAAA,EAAAA,EAAAmF,WAoBA,SAAA0C,EAAAjC,EAAAmB,GAEAnB,EAAAmB,GAAA,YAAAA,EAAA,GACAnB,EAAA,IAAAmB,EAAA,WAAAA,EACA,IAMA9I,EAAA6J,EAAA3I,EAAA6H,EAAAC,EAAAC,EAAAC,EAAAY,EANAC,EAAA,IAAAhD,MAAA,IACAsB,EAAA,WACAC,GAAA,UACAjI,GAAA,WACAC,EAAA,UACA0J,GAAA,WAGA,IAAAhK,EAAA,EAAyBA,EAAA2H,EAAAT,OAAclH,GAAA,IAOvC,IANA+I,EAAAV,EACAW,EAAAV,EACAW,EAAA5I,EACA6I,EAAA5I,EACAwJ,EAAAE,EAEAH,EAAA,EAA2BA,EAAA,GAAQA,IAEnCE,EAAAF,GADAA,EAAA,GACAlC,EAAA3H,EAAA6J,GAEAI,EAAAF,EAAAF,EAAA,GAAAE,EAAAF,EAAA,GAAAE,EAAAF,EAAA,IAAAE,EAAAF,EAAA,OAGA3I,EAAAgJ,IAAAD,EAAA5B,EAAA,GAAA8B,EAAAN,EAAAvB,EAAAjI,EAAAC,IAAA4J,IAAAF,EAAAD,EAAAF,IAAAO,EAAAP,KACAG,EAAA1J,EACAA,EAAAD,EACAA,EAAA4J,EAAA3B,EAAA,IACAA,EAAAD,EACAA,EAAAnH,EAGAmH,EAAA6B,EAAA7B,EAAAU,GACAT,EAAA4B,EAAA5B,EAAAU,GACA3I,EAAA6J,EAAA7J,EAAA4I,GACA3I,EAAA4J,EAAA5J,EAAA4I,GACAc,EAAAE,EAAAF,EAAAF,GAGA,OAAAzB,EAAAC,EAAAjI,EAAAC,EAAA0J,GAQA,SAAAG,EAAAjJ,EAAAoH,EAAAjI,EAAAC,GACA,OAAAY,EAAA,GACAoH,EAAAjI,GAAAiI,EAAAhI,EAGAY,EAAA,GACAoH,EAAAjI,EAAAC,EAGAY,EAAA,GACAoH,EAAAjI,EAAAiI,EAAAhI,EAAAD,EAAAC,EAGAgI,EAAAjI,EAAAC,EAOA,SAAA8J,EAAAlJ,GACA,OAAAA,EAAA,cAAAA,EAAA,cAAAA,EAAA,0BAOA,SAAAmJ,EAAA9I,EAAA+I,GACA,IAAAC,EAAAC,EAAAjJ,GAEAgJ,EAAArD,OAAA,KACAqD,EAAAX,EAAAW,EAAA,EAAAhJ,EAAA2F,SAMA,IAHA,IAAAuD,EAAA,IAAA1D,MAAA,IACA2D,EAAA,IAAA3D,MAAA,IAEA/G,EAAA,EAA6BA,EAAA,GAAQA,IACrCyK,EAAAzK,GAAA,UAAAuK,EAAAvK,GACA0K,EAAA1K,GAAA,WAAAuK,EAAAvK,GAGA,IAAAwJ,EAAAI,EAAAa,EAAAE,OAAAH,EAAAF,IAAA,MAAAA,EAAApD,QACA,OAAA0C,EAAAc,EAAAC,OAAAnB,GAAA,KAQA,SAAAU,EAAAvC,EAAAC,GACA,IAAAC,GAAA,MAAAF,IAAA,MAAAC,GAEA,OADAD,GAAA,KAAAC,GAAA,KAAAC,GAAA,KACA,SAAAA,EAOA,SAAAoC,EAAA1B,EAAAC,GACA,OAAAD,GAAAC,EAAAD,IAAA,GAAAC,EAQA,SAAAgC,EAAAzC,GAIA,IAHA,IAAAE,EAAA,GAGAjI,EAAA,EAA6BA,EAAA,EAAA+H,EAAAb,OAAoBlH,GAAA,EACjDiI,EAAAjI,GAAA,KAHA,IAGA+H,EAAAG,WAAAlI,EAAA,QAAAA,EAAA,GAGA,OAAAiI,EAOA,SAAA2C,EAAAvB,GAKA,IAJA,IAEAwB,EAAAhB,EADA9B,EAAA,GAGA/H,EAAA,EAA6BA,EAAA,EAAAqJ,EAAAnC,OAAyBlH,GAAA,EAGtD,IAFA6K,GAAAxB,EAAArJ,GAAA,SAAAA,EAAA,aAAAqJ,EAAArJ,EAAA,aAAAA,EAAA,cAAAqJ,EAAArJ,EAAA,aAAAA,EAAA,UAEA6J,EAAA,EAA2BA,EAAA,EAAOA,IAClC,EAAA7J,EAAA,EAAA6J,EAAA,GAAAR,EAAAnC,OACAa,GAAA,IAEAA,GAXA,mEAWAuB,OAAAuB,GAAA,KAAAhB,GAAA,IAKA,OAAA9B,EAOA,SAAA+C,EAAA7C,GAIA,IAHA,IAAAF,EAAA,GAGA/H,EAAA,EAA6BA,EAAA,GAAAiI,EAAAf,OAAqBlH,GAAA,EAClD+H,GAAA0B,OAAAC,aAAAzB,EAAAjI,GAAA,QAAAA,EAAA,GAHA,KAMA,OAAA+H,EAQA,IAAAgD,EAAA,CACAC,cAAA,SAAAzJ,EAAA+I,GACA,OAAAM,EAAAP,EAAA9I,EAAA+I,KAEAW,SAAA,SAAAlJ,GACA,OAAA6I,EAAAhB,EAAAY,EAAAzI,GAAA,EAAAA,EAAAmF,UAEA4D,WACAT,iBACAa,cAAA,SAAA3J,EAAA+I,GACA,OAAAQ,EAAAT,EAAA9I,EAAA+I,KAEAa,SAAA,SAAApJ,GACA,OAAA+I,EAAAlB,EAAAY,EAAAzI,GAAA,EAAAA,EAAAmF,WAIAkE,EACA,SAAArD,GACA,IAAA/H,EAAAK,EACAgL,EAAA,GACAvC,EAAAf,EAAAb,OAEA,IAAAlH,EAAA,EAA2BA,EAAA8I,EAAS9I,KACpCK,EAAA0H,EAAAG,WAAAlI,KAEA,GAAAK,GAAA,IACAgL,GAAAtD,EAAAuB,OAAAtJ,GACmBK,EAAA,MACnBgL,GAAA5B,OAAAC,aAAA,IAAArJ,GAAA,OACAgL,GAAA5B,OAAAC,aAAA,IAAArJ,GAAA,MACAgL,GAAA5B,OAAAC,aAAA,IAAArJ,GAAA,QAEAgL,GAAA5B,OAAAC,aAAA,IAAArJ,GAAA,MACAgL,GAAA5B,OAAAC,aAAA,IAAArJ,GAAA,OAIA,OAAAgL,GArBAD,EAuBA,SAAAE,GAsBA,QAAAC,KAFAD,KAAA,GAGA,GAAA5K,OAAAkB,UAAAC,eAAA1B,KAAAmL,EAAAC,GAAA,CACA,IAAAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAAL,EAAAC,GACAK,EAAA,WAAAnF,EAAAkF,GACAE,EAAAC,OAAAC,SAAAH,EAAAD,EAAA1K,MAAA0K,IAEAC,IACAJ,EAAAG,EAAAH,QAAA,YAAsDG,EAAAH,QAAA,GACtDC,EAAAE,EAAAF,OAAA,WAAoDE,EAAAF,OAAA,GACpDC,EAAAC,EAAAD,KAAA,SAAgDC,EAAAD,KAAA,IAGhDM,SAAAC,OAAAV,EAAA,IAAAM,EAAAL,EAAAC,EAAAC,IAkBA,SAAAQ,EAAA3L,EAAA4L,GACA,WAAAC,EAAAC,QAAA9L,EAAA4L,GA2BA,SAAAG,EAAAH,GACA,WAAAC,EAAAC,QAAA,KAAAF,GAaA,SAAAI,EAAAJ,GACA,WAAAC,EAAAC,QAAA,WAAAF,GAWA,IAAAC,EAAA,CAEAI,QAAA,YAqBAC,GAAA,CACAC,SAAA,sCACAC,KAAA,iBACAC,OAAA,gBACAC,KAAA,iBACAC,OAAA,mBACAC,QAAA,oBACAC,WAAA,wCACAC,YAAA,yCACAC,IAAA,iCACAC,KAAA,mCACAC,OAAA,mCACAC,QAAA,sCACAC,KAAA,mCACAC,QAAA,sCACAf,QAAA,oBACAgB,QAAA,sCACAC,SAAA,sCACAC,MAAA,gCASAA,MAAA,CACAC,KAAA,oFACAC,WAAA,CACAvF,EAAA,SACAwF,WAAA,UACAC,GAAA,GACAC,KAAA,UACAC,GAAA,GACAC,IAAA,uCACAC,GAAA,UACAC,GAAA,UACArM,EAAA,UACAsM,KAAA,UACAC,OAAA,GACAC,GAAA,UACAC,KAAA,IAEAC,IAAA,8IASAC,SAAA,SAAAC,GACA,QAAA1O,EAAA,EAAiCA,EAAAoM,EAAAsB,MAAAC,KAAAzG,OAA+BlH,IAChE,GAAA0O,IAAAtC,EAAAsB,MAAAC,KAAA3N,GACA,SAIA,UAUA2O,eAAA,SAAAD,EAAAE,GACA,YAAAxC,EAAAsB,MAAAE,WAAAc,IAAAtC,EAAAsB,MAAAE,WAAAc,GAAAxH,OAAA,EACA,QAAAlH,EAAA,EAAmCA,EAAAoM,EAAAsB,MAAAE,WAAAc,GAAAxH,OAA0ClH,IAC7E,GAAA4O,IAAAxC,EAAAsB,MAAAE,WAAAc,GAAA1O,GACA,SAKA,UAEA6O,SAAA,SAAAC,GACA,QAAA9O,EAAA,EAAiCA,EAAAoM,EAAAsB,MAAAc,IAAAtH,OAA8BlH,IAC/D,GAAA8O,IAAA1C,EAAAsB,MAAAc,IAAAxO,GACA,SAIA,WAoBA+O,OAAA,CACAC,MAAA,EACAC,WAAA,EACAC,SAAA,EACAC,eAAA,EACAC,SAAA,EACAC,UAAA,EACAC,aAAA,EACAC,cAAA,EACAC,SAAA,EACAC,SAAA,EACAC,YAAA,GACAC,aAAA,IAEAC,eAAA,CACAC,WAAA,aACAC,SAAA,WACAC,iBAAA,6BACAC,aAAA,eACAC,eAAA,WAYAC,SAAA,CACAC,MAAA,EACAC,KAAA,EACAC,KAAA,EACArB,MAAA,EACAsB,MAAA,GAUAC,YAAA,CACAC,OAAA,EACAC,KAAA,EACAC,MAAA,EACAC,SAAA,IAiBAC,QAAA,IACAC,kBAAA,GAcAC,aAAA,SAAAvQ,EAAAU,GACAmL,EAAAK,GAAAlM,GAAAU,GAiBA8P,aAAA,SAAAC,EAAAC,EAAAC,GACA,QAAAlR,EAAA,EAA+BA,EAAAgR,EAAAG,WAAAjK,OAA4BlH,IAAA,CAC3D,IAAAoR,EAAAJ,EAAAG,WAAAnR,GAEAoR,EAAAC,WAAAjF,EAAAmE,YAAAC,QAAAS,IAAAK,KAAAC,WAAAH,EAAAH,IACAC,EAAAE,KAkBAG,WAAA,SAAAC,EAAAjR,GACA,OAAAiR,EAAAC,UAAAlR,GAOAmR,cAAA,KAMAC,eAAA,WACA,IAAAC,EAWA,YAPAC,IAAA7F,SAAA8F,eAAAC,gBAAA/F,SAAA8F,eAAAC,gBAAA/F,SAAAgG,cAAAhG,SAAAgG,aAAA,IACAJ,EAAAN,KAAAW,gBACAC,YAAAN,EAAAO,cAAA,YAEAP,EAAA5F,SAAA8F,eAAAC,eAAA,gCAGAH,GASAQ,aAAA,WAKA,OAJAhG,EAAAsF,gBACAtF,EAAAsF,cAAAtF,EAAAuF,kBAGAvF,EAAAsF,eAWAO,aAAA,WAIA,IAHA,IAAAL,EAAA,KACAS,EAAA,kKAEA/R,EAAA,EAA+BA,EAAA+R,EAAAnL,QAC/B,OAAA0K,EADsDtR,IAEtD,IACAsR,EAAA,IAAAU,cAAAD,EAAA/R,IACqB,MAAA0J,GACrB4H,EAAA,KAOA,OAAAA,GAqBAW,WAAA,SAAAhS,GACA,IAAAA,EACA,YAMA,IAHA,IAAAiS,EAAApG,EAAAgG,eAAAD,cAAA5R,GAGA8H,EAAA,EAA+BA,EAAAoK,UAAAvL,OAAsBmB,IAAA,CACrD,IAAAqK,EAAAD,UAAApK,GAEA,GAAAqK,EAIA,oBAAAA,GAAA,iBAAAA,EACAF,EAAAN,YAAA9F,EAAAuG,YAAAD,SACmB,cAAAjM,EAAAiM,IAAA,mBAAAA,EAAAE,KACnB,QAAA5S,EAAA,EAAmCA,EAAA0S,EAAAxL,OAAgBlH,IAAA,CACnD,IAAA6S,EAAAH,EAAA1S,GAEA,WAAAyG,EAAAoM,IAAA,mBAAAA,EAAAD,WAAAf,IAAAgB,EAAA,WAAAA,EAAA,IACAL,EAAAM,aAAAD,EAAA,GAAAA,EAAA,SAGmB,cAAApM,EAAAiM,GACnB,QAAAK,KAAAL,EACAhS,OAAAkB,UAAAC,eAAA1B,KAAAuS,EAAAK,SAAAlB,IAAAa,EAAAK,IAAA,OAAAL,EAAAK,IACAP,EAAAM,aAAAC,EAAAL,EAAAK,IAMA,OAAAP,GAYAQ,UAAA,SAAAC,GAMA,OADAA,GADAA,GADAA,GADAA,GADAA,IAAAC,QAAA,gBACAA,QAAA,cACAA,QAAA,cACAA,QAAA,gBACAA,QAAA,gBAaAC,YAAA,SAAAF,GAMA,OADAA,GADAA,GADAA,GADAA,GADAA,IAAAC,QAAA,UAA2C,MAC3CA,QAAA,QAAyC,MACzCA,QAAA,QAAyC,MACzCA,QAAA,UAA2C,MAC3CA,QAAA,UAA2C,MAe3CP,YAAA,SAAAM,GACA,OAAA7G,EAAAgG,eAAAgB,eAAAH,IAYAI,YAAA,SAAAC,GACA,IAAAd,EAEAe,UAEAf,GADA,IAAAe,WACAC,gBAAAF,EAAA,cAEAd,EAAA,IAAAF,cAAA,qBACAmB,MAAA,QACAjB,EAAAkB,QAAAJ,IAGA,OAAAd,GAYAmB,QAAA,SAAA3C,GACA,IAAAA,EACA,YAGA,IAAAjJ,EAAA,GAEA,IAAAiJ,EAAAG,WAAAjK,QAAA8J,EAAAK,WAAAjF,EAAAmE,YAAAE,OACA1I,GAAAiJ,EAAA4C,WAGA,QAAA5T,EAAA,EAA+BA,EAAAgR,EAAAG,WAAAjK,OAA4BlH,IAC3DgR,EAAAG,WAAAnR,GAAAqR,WAAAjF,EAAAmE,YAAAE,OACA1I,GAAAiJ,EAAAG,WAAAnR,GAAA4T,WAIA,OAAAxH,EAAA4G,UAAAjL,IAeA8L,YAAA,SAAA7C,GACA,IAAAQ,EAEA,GAAAR,EAAAK,WAAAjF,EAAAmE,YAAAC,OAAA,CACAgB,EAAApF,EAAAmG,WAAAvB,EAAAS,SAEA,QAAAzR,EAAA,EAAiCA,EAAAgR,EAAApD,WAAA1G,OAA4BlH,IAC7DwR,EAAAsB,aAAA9B,EAAApD,WAAA5N,GAAA8T,SAAA9C,EAAApD,WAAA5N,GAAAiB,OAGA,QAAA8S,EAAA,EAAkCA,EAAA/C,EAAAG,WAAAjK,OAA6B6M,IAC/DvC,EAAAU,YAAA9F,EAAAyH,YAAA7C,EAAAG,WAAA4C,UAEiB/C,EAAAK,WAAAjF,EAAAmE,YAAAE,OACjBe,EAAApF,EAAAgG,eAAAgB,eAAApC,EAAA4C,YAGA,OAAApC,GAeAwC,WAAA,SAAAhD,GACA,IAAAQ,EAEA,GAAAR,EAAAK,WAAAjF,EAAAmE,YAAAC,OAAA,CACA,IAAA9B,EAAAsC,EAAA8C,SAAAG,cAEA,GAAA7H,EAAAsB,MAAAe,SAAAC,GACA,IACA8C,EAAApF,EAAAmG,WAAA7D,GAEA,QAAA1O,EAAA,EAAqCA,EAAAoM,EAAAsB,MAAAE,WAAAc,GAAAxH,OAA0ClH,IAAA,CAC/E,IAAA4O,EAAAxC,EAAAsB,MAAAE,WAAAc,GAAA1O,GACAiB,EAAA+P,EAAAkD,aAAAtF,GAEA,SAAA3N,GAAA,KAAAA,IAAA,IAAAA,GAAA,IAAAA,EASA,GALA,UAAA2N,GAAA,WAAAnI,EAAAxF,SAAA,IAAAA,EAAAkT,UACAlT,IAAAkT,SAIA,UAAAvF,EAAA,CAIA,IAHA,IAAAJ,EAAA,GACA4F,EAAAnT,EAAAoT,MAAA,KAEAxK,EAAA,EAAyCA,EAAAuK,EAAAlN,OAAqB2C,IAAA,CAC9D,IAAAgJ,EAAAuB,EAAAvK,GAAAwK,MAAA,KACAC,EAAAzB,EAAA,GAAAK,QAAA,WAAAA,QAAA,WAAAe,cAEA,GAAA7H,EAAAsB,MAAAmB,SAAAyF,GAAA,CACA,IAAAC,EAAA1B,EAAA,GAAAK,QAAA,WAAAA,QAAA,WACA1E,EAAAgG,KAAAF,EAAA,KAAAC,IAIA/F,EAAAtH,OAAA,IACAjG,EAAAuN,EAAAiG,KAAA,MACAjD,EAAAsB,aAAAlE,EAAA3N,SAGAuQ,EAAAsB,aAAAlE,EAAA3N,GAIA,QAAAyT,EAAA,EAAuCA,EAAA1D,EAAAG,WAAAjK,OAA8BwN,IACrElD,EAAAU,YAAA9F,EAAA4H,WAAAhD,EAAAG,WAAAuD,KAEqB,MAAA1K,GAErBwH,EAAApF,EAAAuG,YAAA,QAEmB,CACnBnB,EAAApF,EAAAgG,eAAAuC,yBAEA,QAAAC,EAAA,EAAqCA,EAAA5D,EAAAG,WAAAjK,OAA8B0N,IACnEpD,EAAAU,YAAA9F,EAAA4H,WAAAhD,EAAAG,WAAAyD,WAGiB,GAAA5D,EAAAK,WAAAjF,EAAAmE,YAAAI,SAAA,CACjBa,EAAApF,EAAAgG,eAAAuC,yBAEA,QAAAE,EAAA,EAAmCA,EAAA7D,EAAAG,WAAAjK,OAA8B2N,IACjErD,EAAAU,YAAA9F,EAAA4H,WAAAhD,EAAAG,WAAA0D,UAEiB7D,EAAAK,WAAAjF,EAAAmE,YAAAE,OACjBe,EAAApF,EAAAuG,YAAA3B,EAAA4C,YAGA,OAAApC,GAYAsD,WAAA,SAAAtC,GACA,uBAAAA,EACAA,EAGAA,EAAAU,QAAA,iBAAAA,QAAA,cAAAA,QAAA,aAAAA,QAAA,cAAAA,QAAA,cAAAA,QAAA,cAAAA,QAAA,cAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,cAYA6B,aAAA,SAAAvC,GACA,uBAAAA,EACAA,EAGAA,EAAAU,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,aAAAA,QAAA,eAYA8B,eAAA,SAAAC,GACA,OAAAA,EAAAC,QAAA,OACA,KAGAD,EAAAZ,MAAA,SAYAc,iBAAA,SAAAF,GACA,IAAAG,EAAAhJ,EAAAiJ,kBAAAJ,GAEA,GAAAG,EAAAF,QAAA,OACA,OAAAE,EAEA,IAAAE,EAAAF,EAAAf,MAAA,KAEA,OADAiB,EAAAC,OAAA,KACAD,EAAAb,KAAA,MAaAe,mBAAA,SAAAP,GACA,IAAAA,EACA,YAGA,IAAAlT,EAAAkT,EAAAZ,MAAA,KAEA,OAAAtS,EAAAmF,OAAA,EACA,MAGAnF,EAAAwT,OAAA,KACAxT,EAAA0S,KAAA,OAYAY,kBAAA,SAAAJ,GACA,OAAAA,IAAAZ,MAAA,cAMAoB,aAAA,SAAAzL,QACA,IAAAA,EAAA0L,OACAtJ,EAAAuJ,MAAA3L,EAAA0L,OAGA1L,EAAA4L,UACAxJ,EAAAuJ,MAAA,UAAArE,KAAAuE,QAAA,IAAA7L,EAAA4L,UAAA,IAAA5L,EAAA8L,KAAA,MAAA9L,EAAAzJ,KAAA,KAAAyJ,EAAA+L,SACiB/L,EAAAgM,SACjB5J,EAAAuJ,MAAA,UAAArE,KAAAuE,QAAA,IAAA7L,EAAAgM,SAAA,IAAAhM,EAAAiM,WAAA,MAAAjM,EAAAzJ,KAAA,KAAAyJ,EAAA+L,SAEA3J,EAAAuJ,MAAA,UAAA3L,EAAA+L,UAiCAG,IAAA,SAAAC,EAAAC,GACAD,IAAA7E,KAAApB,SAAAI,OAAA,WAAA7J,EAAA7G,OAAAyW,UAAA,mBAAAzW,OAAAyW,QAAAC,OACA1W,OAAAyW,QAAAC,MAAAF,IAUAG,MAAA,SAAAH,GACA9E,KAAA4E,IAAA5E,KAAApB,SAAAC,MAAAiG,IASAI,KAAA,SAAAJ,GACA9E,KAAA4E,IAAA5E,KAAApB,SAAAE,KAAAgG,IASAK,KAAA,SAAAL,GACA9E,KAAA4E,IAAA5E,KAAApB,SAAAG,KAAA+F,IASAE,MAAA,SAAAF,GACA9E,KAAA4E,IAAA5E,KAAApB,SAAAlB,MAAAoH,IASAT,MAAA,SAAAS,GACA9E,KAAA4E,IAAA5E,KAAApB,SAAAI,MAAA8F,IAYAM,UAAA,SAAA1F,GACA,IAAAA,EACA,YAGA,mBAAAA,EAAA2F,OACA3F,IAAA2F,QAGA,IAAAC,EAAA/P,EAAAE,MAAAiK,EAAApD,WAAA1G,QAAA2P,QAAAC,IAAA,SAAA9W,GACA,OAAAgR,EAAApD,WAAA5N,GAAA8T,WAGA8C,EAAAhE,OACA,IAAAmE,EAAAH,EAAAI,OAAA,SAAA3O,EAAA5G,GACA,SAAAkJ,OAAAtC,EAAA,KAAAsC,OAAAlJ,EAAA,MAAAkJ,OAAAyB,EAAA4G,UAAAhC,EAAApD,WAAAqJ,aAAAxV,GAAAR,OAAA,MACiB,IAAA0J,OAAAqG,EAAA8C,WAEjB,GAAA9C,EAAAG,WAAAjK,OAAA,GACA6P,GAAA,IAEA,QAAA/W,EAAA,EAAiCA,EAAAgR,EAAAG,WAAAjK,OAA4BlH,IAAA,CAC7D,IAAAkX,EAAAlG,EAAAG,WAAAnR,GAEA,OAAAkX,EAAA7F,UACA,KAAAjF,EAAAmE,YAAAC,OAEAuG,GAAA3K,EAAAsK,UAAAQ,GACA,MAEA,KAAA9K,EAAAmE,YAAAE,KAEAsG,GAAA3K,EAAA4G,UAAAkE,EAAAtD,WACA,MAEA,KAAAxH,EAAAmE,YAAAG,MAEAqG,GAAA,YAAAG,EAAAtD,UAAA,OAIAmD,GAAA,KAAA/F,EAAA8C,SAAA,SAEAiD,GAAA,KAGA,OAAAA,GAOAI,WAAA,EAMAC,mBAAA,GASAC,oBAAA,SAAA9W,EAAA+W,GACAlL,EAAAgL,mBAAA7W,GAAA+W,GA8CAjL,QAAA,SAAA9L,EAAA4L,GAEA,aAAA5L,GAAA,YAAAA,GAAA,OAAAA,IACA4L,MAAAoL,MACApL,EAAAoL,MAAAnL,EAAAK,GAAAG,OACiBT,IACjBA,EAAA,CACAoL,MAAAnL,EAAAK,GAAAG,UAMA0E,KAAAkG,SAAApL,EAAAmG,WAAAhS,EAAA4L,GAEAmF,KAAAkB,KAAAlB,KAAAkG,WAGApL,EAAAC,QAAAzK,UAAA,CAUA+U,KAAA,WACA,OAAArF,KAAAkG,UAaAnQ,SAAA,WACA,OAAA+E,EAAAsK,UAAApF,KAAAkG,WAaAC,GAAA,WAEA,OADAnG,KAAAkB,KAAAlB,KAAAkB,KAAAkF,WACApG,MAaAhS,KAAA,WAEA,OADAgS,KAAAkB,KAAAlB,KAAAkG,SACAlG,MAeAnF,MAAA,SAAAwL,GACA,QAAA5E,KAAA4E,EACAjX,OAAAkB,UAAAC,eAAA1B,KAAAwX,EAAA5E,UACAlB,IAAA8F,EAAA5E,GACAzB,KAAAkB,KAAAoF,gBAAA7E,GAEAzB,KAAAkB,KAAAM,aAAAC,EAAA4E,EAAA5E,KAKA,OAAAzB,MAmBAjR,EAAA,SAAAE,EAAA4L,EAAA8G,GACA,IAAAiE,EAAA9K,EAAAmG,WAAAhS,EAAA4L,EAAA8G,GAOA,OANA3B,KAAAkB,KAAAN,YAAAgF,GAEA,iBAAAjE,GAAA,iBAAAA,IACA3B,KAAAkB,KAAA0E,GAGA5F,MAiBAuG,MAAA,SAAA7G,GACA,IAAA8G,EACAC,EAAA3L,EAAAgG,eAEA,IACA0F,OAAAjG,IAAAkG,EAAAC,WACiB,MAAAhO,GACjB8N,GAAA,EAGA,IAAAG,EAAAH,EAAAC,EAAAC,WAAAhH,GAAA,GAAA5E,EAAAyH,YAAA7C,GAGA,OAFAM,KAAAkB,KAAAN,YAAA+F,GACA3G,KAAAkB,KAAAyF,EACA3G,MAeApQ,EAAA,SAAA+R,GACA,IAAAiE,EAAA9K,EAAAuG,YAAAM,GAEA,OADA3B,KAAAkB,KAAAN,YAAAgF,GACA5F,MAcA4G,EAAA,SAAA5E,GACA,IAAA6E,EAAAnM,SAAAmG,cAAA,QAEAgG,EAAAC,UAAA9E,EAIA,IAFA,IAAA+E,EAAAjM,EAAA4H,WAAAmE,GAEAE,EAAAlH,WAAAjK,OAAA,GACAoK,KAAAkB,KAAAN,YAAAmG,EAAAlH,WAAA,IAGA,OAAAG,OAiCAlF,EAAAkM,QAAA,SAAAzC,EAAAxU,EAAAd,EAAAgY,EAAAC,EAAAlR,EAAAmR,GACAnH,KAAAuE,UACAvE,KAAAjQ,KACAiQ,KAAA/Q,OACA+Q,KAAAiH,OACAjH,KAAAkH,KACAlH,KAAAmH,WAAA,CACAC,kBAAA,EACAC,yBAAA,GAGArH,KAAAmH,QAAAG,YACAxM,EAAAqK,KAAA,yEACAnF,KAAAmH,QAAAC,iBAAApH,KAAAmH,QAAAG,iBACAtH,KAAAmH,QAAAG,WAGAtH,KAAAmH,QAAAC,iBACApH,KAAAhK,OAAA8E,EAAAiJ,kBAAA/N,GAAA,KAEAgK,KAAAhK,OAIAgK,KAAAuH,MAAA,GAGAzM,EAAAkM,QAAA1W,UAAA,CAYAkX,aAAA,SAAA9H,GACA,IAAA+H,EAAA/H,EAAAkD,aAAA,SAMA,OAJA6E,GAAAzH,KAAAmH,QAAAE,0BACAI,IAAA1E,MAAA,SAGA0E,GAYAC,eAAA,SAAAhI,GACA,IAAAiI,EAAA3H,KAEA4H,GAAA,EAEA,OAAA5H,KAAAjQ,KAGA+K,EAAA2E,aAAAC,EAAA,cAAAA,GACAiI,EAAAH,aAAA9H,KAAAiI,EAAA5X,KACA6X,GAAA,KAGAA,GAAA5H,KAAAwH,aAAA9H,KAAAM,KAAAjQ,KAaA8X,QAAA,SAAAnI,GACA,IAAA1J,EAAA0J,EAAAkD,aAAA,QAEA5C,KAAAmH,QAAAC,mBACApR,EAAA8E,EAAAiJ,kBAAA/N,IAGA,IAAA8R,EAAApI,EAAAkD,aAAA,QAEA,SAAA5C,KAAA0H,eAAAhI,IAAAM,KAAA/Q,OAAA6L,EAAAmF,WAAAP,EAAAM,KAAA/Q,OAAA+Q,KAAAiH,OAAAxR,MAAAC,QAAAsK,KAAAiH,OAAA,IAAAjH,KAAAiH,KAAArD,QAAAkE,OAAA9H,KAAAiH,OAAAjH,KAAAkH,IAAAxH,EAAAkD,aAAA,QAAA5C,KAAAkH,IAAAlH,KAAAhK,UAAAgK,KAAAhK,OAiBA+R,IAAA,SAAArI,GACA,IAAA+F,EAAA,KAEA,IACAA,EAAAzF,KAAAuE,QAAA7E,GACiB,MAAAhH,GAGjB,MAFAoC,EAAAqJ,aAAAzL,GAEAA,EAGA,OAAA+M,GASA1P,SAAA,WACA,mBAAyBiK,KAAAuE,QAAA,IAAAvE,KAAA/Q,KAAA,IAAA+Q,KAAAkH,GAAA,IAAAlH,KAAAjQ,GAAA,OA6BzB+K,EAAAkN,aAAA,SAAAC,EAAA1D,GACAvE,KAAAiI,SACAjI,KAAAuE,UACAvE,KAAAkI,YAAA,IAAAC,MAAAC,UACApI,KAAAuH,MAAA,GAGAzM,EAAAkN,aAAA1X,UAAA,CAQAyX,IAAA,WAEA,OADA/H,KAAAkI,YAAA,IAAAC,MAAAC,UACApI,KAAAuE,WAMA8D,MAAA,WACArI,KAAAkI,YAAA,IAAAC,MAAAC,WASArS,SAAA,WACA,wBAAyBiK,KAAAuE,QAAA,IAAAvE,KAAAiI,OAAA,OA4JzBnN,EAAAwN,WAAA,SAAAC,EAAApB,GACA,IAAAqB,EAAAxI,KAGAA,KAAAuI,UAEAvI,KAAAmH,WAAA,GACA,IAAAsB,EAAAzI,KAAAmH,QAAAuB,UAAA,GAsDA,QAAAjH,KApDA,IAAA8G,EAAA3E,QAAA,YAAA2E,EAAA3E,QAAA,aAAA6E,EAAA7E,QAAA,MACA5D,KAAA2I,OAAA,IAAA7N,EAAA8N,UAAA5I,MAEAA,KAAA2I,OAAA,IAAA7N,EAAA+N,KAAA7I,MAKAA,KAAA2D,IAAA,GAGA3D,KAAA7F,OAAA,KAGA6F,KAAA8I,SAAA,KAEA9I,KAAA+I,WAAA,GACA/I,KAAAgJ,YAAA,EACAhJ,KAAAiJ,SAAA,EAEAjJ,KAAAkJ,cAAA,GACAlJ,KAAAmJ,SAAA,GACAnJ,KAAAoJ,aAAA,GACApJ,KAAAqJ,eAAA,GACArJ,KAAAsJ,UAAA,GACAtJ,KAAAuJ,YAAA,GACAvJ,KAAAwJ,sBAAA,CACAC,KAAA,GACAC,UAAA,IAEA1J,KAAA2J,aAAA,KACA3J,KAAA4J,mBAAA,KACA5J,KAAA6J,eAAA,EACA7J,KAAA8J,WAAA,EACA9J,KAAA+J,eAAA,EACA/J,KAAAgK,mBAAA,EACAhK,KAAAiK,QAAA,EACAjK,KAAAkK,UAAA,EACAlK,KAAAmK,MAAA,GACAnK,KAAAoK,UAAA,EACApK,KAAAqK,sBAAA,KACArK,KAAAsK,sBAAA,KACAtK,KAAAuK,wBAAA,KAEAvK,KAAAwK,WAAA,EAEAxK,KAAA2J,aAAAc,WAAA,WACA,OAAAjC,EAAAkC,WACe,KACf5Q,EAAAkG,KAAAmH,QAAAnN,SACAgG,KAAA2K,uBAAA3K,KAAAmH,QAAAyD,YAEA9P,EAAAgL,mBACA,GAAA1W,OAAAkB,UAAAC,eAAA1B,KAAAiM,EAAAgL,mBAAArE,GAAA,CACA,IAAAoJ,EAAA,aAEAA,EAAAva,UAAAwK,EAAAgL,mBAAArE,GACAzB,KAAAyB,GAAA,IAAAoJ,EACA7K,KAAAyB,GAAAqJ,KAAA9K,QAKAlF,EAAAwN,WAAAhY,UAAA,CAOA+X,MAAA,WACArI,KAAA2I,OAAAoC,SAGA/K,KAAAgJ,YAAA,EACAhJ,KAAAiJ,SAAA,EAEAjJ,KAAAkJ,cAAA,GACAlJ,KAAAmJ,SAAA,GACAnJ,KAAAoJ,aAAA,GACApJ,KAAAqJ,eAAA,GACArJ,KAAAsJ,UAAA,GACAtJ,KAAAuJ,YAAA,GACAvJ,KAAA6J,eAAA,EACA7J,KAAA8J,WAAA,EACA9J,KAAA+J,eAAA,EACA/J,KAAAkK,UAAA,EACAlK,KAAAmK,MAAA,GACAnK,KAAAgL,UAAA,GACAhL,KAAAoK,UAAA,GAYAa,MAAA,WACAjL,KAAAiK,QAAA,GAQAiB,OAAA,WACAlL,KAAAiK,QAAA,GAyBAkB,YAAA,SAAAC,GACA,IAAAC,EAAA,uCAAAzJ,QAAA,iBAAA7S,GACA,IAAAS,EAAA,GAAA8b,KAAAC,SAAA,EAEA,OADA,MAAAxc,EAAAS,EAAA,EAAAA,EAAA,GACAuG,SAAA,MAGA,uBAAAqV,GAAA,iBAAAA,EACAC,EAAA,IAAAD,EAEAC,EAAA,IA0BAG,wBAAA,SAAA9C,EAAA+C,EAAAC,GACA1L,KAAAwJ,sBAAAd,GAAA+C,GAAAC,GA2CAC,QAAA,SAAAhI,EAAAiI,EAAAF,EAAAG,EAAAC,EAAAC,EAAAC,GACAhM,KAAA2D,MAKA3D,KAAAiM,QAAAnR,EAAAiJ,kBAAA/D,KAAA2D,KAKA3D,KAAAgM,WAAAlR,EAAA4I,eAAA1D,KAAA2D,KAKA3D,KAAA4L,OAKA5L,KAAAkM,SAAA,OACAlM,KAAAmM,iBAAAT,EACA1L,KAAA+J,eAAA,EACA/J,KAAA8J,WAAA,EACA9J,KAAA6J,eAAA,EACA7J,KAAAkK,UAAA,EAEAlK,KAAA7F,OAAAW,EAAA+I,iBAAA7D,KAAA2D,KAEA3D,KAAAoM,qBAAAtR,EAAA2C,OAAAE,WAAA,MAEAqC,KAAA2I,OAAA0D,SAAAR,EAAAC,EAAAC,IA2BAO,OAAA,SAAA3I,EAAA4I,EAAAC,EAAAd,EAAAG,EAAAC,EAAAW,GACA,KAAAzM,KAAA2I,kBAAA7N,EAAA+N,MAEiB,CACjB,IAAA7D,EAAA,IAAAtO,MAAA,gEAEA,MADAsO,EAAA/V,KAAA,sBACA+V,EAJAhF,KAAA2I,OAAA+D,QAAA/I,EAAA4I,EAAAC,EAAAd,EAAAG,EAAAC,EAAAW,IAmCAE,QAAA,SAAAhJ,EAAA+H,EAAAG,EAAAC,EAAAW,GACA,IAAAzM,KAAA4M,2BAEiB,CACjB,IAAA5H,EAAA,IAAAtO,MAAA,iEAEA,MADAsO,EAAA/V,KAAA,sBACA+V,EAJAhF,KAAA2I,OAAAkE,SAAAlJ,EAAA+H,EAAAG,EAAAC,EAAAW,IAYAG,yBAAA,WACA,GAAA5M,KAAA2I,kBAAA7N,EAAA+N,KAAA,CACA,IAAAiE,KACA,SAGA,IACAC,eAAAC,QAAA,yBACAD,eAAAE,WAAA,aACmB,MAAAvU,GACnB,SAGA,SAGA,UAqBAwU,SAAA,SAAAxN,KAsBAyN,UAAA,SAAAzN,KAgBA0N,SAAA,SAAApU,KAgBAqU,UAAA,SAAArU,KAeAsU,aAAA,SAAAd,KAgBAe,KAAA,SAAA7N,GACA,UAAAA,EAAA,CAIA,sBAAAA,EAAA4B,KACA,QAAA5S,EAAA,EAAiCA,EAAAgR,EAAA9J,OAAiBlH,IAClDsR,KAAAwN,WAAA9N,EAAAhR,QAEiB,mBAAAgR,EAAA2F,KACjBrF,KAAAwN,WAAA9N,EAAA2F,QAEArF,KAAAwN,WAAA9N,GAGAM,KAAA2I,OAAA8E,UAWAC,MAAA,WAGAC,aAAA3N,KAAA2J,cAEA3J,KAAA0K,WAmBAkD,aAAA,SAAAlO,EAAAgM,EAAAmC,EAAAC,GACA,IAAAC,EAAA/N,KAEAgO,EAAA,KAEA,mBAAAtO,EAAA2F,OACA3F,IAAA2F,QAGA,IAAA6B,EAAAxH,EAAAkD,aAAA,MAQA,GANAsE,IAEAA,EAAAlH,KAAAmL,YAAA,gBACAzL,EAAA8B,aAAA,KAAA0F,IAGA,mBAAAwE,GAAA,mBAAAmC,EAAA,CACA,IAAAtJ,EAAAvE,KAAAiO,WAAA,SAAAC,GAEAF,GACAD,EAAAI,mBAAAH,GAGA,UAAAE,EAAAtL,aAAA,QACAiL,GACAA,EAAAK,GAEqBxC,GACrBA,EAAAwC,IAEmB,qBAAAhH,GAEnB4G,IACAE,EAAAhO,KAAAoO,gBAAAN,EAAA,WASA,OAPAC,EAAAM,cAAA9J,GAGAsJ,GACAA,EAAA,OAGA,KAMA,OADA7N,KAAAuN,KAAA7N,GACAwH,GAiBAoH,OAAA,SAAA5O,EAAAgM,EAAAmC,EAAAC,GACA,IAAAS,EAAAvO,KAEAgO,EAAA,KAEA,mBAAAtO,EAAA2F,OACA3F,IAAA2F,QAGA,IAAA6B,EAAAxH,EAAAkD,aAAA,MAQA,GANAsE,IAEAA,EAAAlH,KAAAmL,YAAA,UACAzL,EAAA8B,aAAA,KAAA0F,IAGA,mBAAAwE,GAAA,mBAAAmC,EAAA,CACA,IAAAtJ,EAAAvE,KAAAiO,WAAA,SAAAC,GAEAF,GACAO,EAAAJ,mBAAAH,GAGA,IAAAQ,EAAAN,EAAAtL,aAAA,QAEA,cAAA4L,EACA9C,GACAA,EAAAwC,OAEqB,cAAAM,EAIA,CACrB,IAAAxJ,EAAA,IAAAtO,MAAA,sBAAA2C,OAAAmV,IAEA,MADAxJ,EAAA/V,KAAA,eACA+V,EANA6I,GACAA,EAAAK,KAOmB,6BAAAhH,GAEnB4G,IACAE,EAAAhO,KAAAoO,gBAAAN,EAAA,WASA,OAPAS,EAAAF,cAAA9J,GAGAsJ,GACAA,EAAA,OAGA,KAMA,OADA7N,KAAAuN,KAAA7N,GACAwH,GAOAsG,WAAA,SAAAiB,GACA,UAAAA,MAAAtO,UAAAsO,EAAA5O,WAAA,CACA,IAAAmF,EAAA,IAAAtO,MAAA,gCAEA,MADAsO,EAAA/V,KAAA,eACA+V,EAGAhF,KAAAmK,MAAAjH,KAAAuL,IAMAC,aAAA,WACA,IAAAC,EAAA3O,KAEAA,KAAAmK,MAAAjH,KAAA,WAEAlD,KAAA2I,OAAA+F,eAEA1O,KAAA2J,aAAAc,WAAA,WACA,OAAAkE,EAAAjE,WACiB,MAyBjB0D,gBAAA,SAAAnG,EAAA1D,GACA,IAAAqK,EAAA,IAAA9T,EAAAkN,aAAAC,EAAA1D,GAEA,OADAvE,KAAAsJ,UAAApG,KAAA0L,GACAA,GAaAT,mBAAA,SAAAU,GAGA7O,KAAAoJ,aAAAlG,KAAA2L,IAmEAZ,WAAA,SAAA1J,EAAAxU,EAAAd,EAAAgY,EAAAC,EAAAlR,EAAAmR,GACA,IAAA2H,EAAA,IAAAhU,EAAAkM,QAAAzC,EAAAxU,EAAAd,EAAAgY,EAAAC,EAAAlR,EAAAmR,GAEA,OADAnH,KAAAuJ,YAAArG,KAAA4L,GACAA,GAaAT,cAAA,SAAAQ,GAGA7O,KAAAqJ,eAAAnG,KAAA2L,GAGA,IAAAngB,EAAAsR,KAAAuJ,YAAA3F,QAAAiL,GAEAngB,GAAA,GACAsR,KAAAuJ,YAAAtF,OAAAvV,EAAA,IAaAic,uBAAA,SAAAC,GACA5K,KAAA4K,WAAA,IACAA,KAAA,CAAA9P,EAAAiU,cAAAjU,EAAAkU,aAAAlU,EAAAmU,QAAAnU,EAAAoU,gBAAApU,EAAAqU,YAAArU,EAAAsU,UAAAtU,EAAAuU,WACAC,QAAAtP,KAAAuP,sBAAArf,KAAA8P,QAWAuP,sBAAA,SAAAC,GACAxP,KAAA4K,WAAA4E,EAAAlf,UAAArB,MAAAugB,GAmBAC,WAAA,SAAAC,GAKA,GAJA1P,KAAAoM,qBAAAtR,EAAA2C,OAAAQ,cAAAyR,GAEA5U,EAAAqK,KAAA,kCAAAuK,GAEA1P,KAAA8J,UAAA,CACA,IAAA6F,GAAA,EACA3P,KAAA+J,eAAA,EAEA/J,KAAA6J,gBACA8F,EAAA1U,EAAA,CACAgL,MAAAnL,EAAAK,GAAAG,OACA2L,KAAA,iBAKAjH,KAAA4J,mBAAA5J,KAAA4P,oBAAA,IAAA5P,KAAA6P,qBAAA3f,KAAA8P,OAEAA,KAAA2I,OAAAmH,YAAAH,QAEA7U,EAAAqK,KAAA,gEAEAnF,KAAA2I,OAAAoH,oBAEA/P,KAAAgQ,iBAcA5D,qBAAA,SAAA6D,EAAAC,EAAAxQ,GAEA,QAAA+B,KAAA3G,EAAAgL,mBACA,GAAA1W,OAAAkB,UAAAC,eAAA1B,KAAAiM,EAAAgL,mBAAArE,GAAA,CACA,IAAA0O,EAAAnQ,KAAAyB,GAEA,GAAA0O,EAAAC,cACA,IACAD,EAAAC,cAAAH,EAAAC,GACuB,MAAAG,GACvBvV,EAAAkK,MAAA,GAAA3L,OAAAoI,EAAA,iDAAApI,OAAAgX,KAOA,GAAArQ,KAAAmM,iBACA,IACAnM,KAAAmM,iBAAA8D,EAAAC,EAAAxQ,GACmB,MAAAhH,GACnBoC,EAAAqJ,aAAAzL,GAEAoC,EAAAkK,MAAA,iDAAA3L,OAAAX,MAWAsX,cAAA,SAAAE,GACA,iBAAAlQ,KAAA2J,cACAgE,aAAA3N,KAAA2J,cAIA,OAAA3J,KAAA4J,qBACA5J,KAAAmO,mBAAAnO,KAAA4J,oBACA5J,KAAA4J,mBAAA,MAGA9O,EAAAmK,MAAA,4BAEAjF,KAAA2I,OAAAqH,gBAEAhQ,KAAA6J,eAAA,EACA7J,KAAA+J,eAAA,EACA/J,KAAAkK,UAAA,EAEAlK,KAAAmJ,SAAA,GACAnJ,KAAAkJ,cAAA,GACAlJ,KAAAoJ,aAAA,GACApJ,KAAAqJ,eAAA,GACArJ,KAAAsJ,UAAA,GACAtJ,KAAAuJ,YAAA,GAEAvJ,KAAAoM,qBAAAtR,EAAA2C,OAAAO,aAAAkS,GAEAlQ,KAAA8J,WAAA,GAeAwG,UAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAzQ,KAEAlF,EAAAmK,MAAA,oBAEA,IAAAvF,EAAAM,KAAA2I,OAAA+H,WAAAH,GAEA,UAAA7Q,EAAA,CAqBA,IAjBAM,KAAAkN,WAAApS,EAAAwN,WAAAhY,UAAA4c,WACAxN,EAAA8C,WAAAxC,KAAA2I,OAAAgI,OAAAjR,EAAAG,WAAAjK,OACAoK,KAAAkN,SAAAxN,EAAAG,WAAA,IAEAG,KAAAkN,SAAAxN,IAIAM,KAAAoN,WAAAtS,EAAAwN,WAAAhY,UAAA8c,WACAoD,EACAxQ,KAAAoN,SAAAoD,GAEAxQ,KAAAoN,SAAAtS,EAAAsK,UAAA1F,KAKAM,KAAAqJ,eAAAzT,OAAA,IACA,IAAAkZ,EAAA9O,KAAAqJ,eAAAuH,MACAliB,EAAAsR,KAAAmJ,SAAAvF,QAAAkL,GAEApgB,GAAA,GACAsR,KAAAmJ,SAAAlF,OAAAvV,EAAA,GAKA,KAAAsR,KAAAuJ,YAAA3T,OAAA,GACAoK,KAAAmJ,SAAAjG,KAAAlD,KAAAuJ,YAAAqH,OAIA,GAAA5Q,KAAA+J,eAAA/J,KAAA2I,OAAAkI,cACA7Q,KAAAgQ,oBADA,CAMA,IAAA/I,EAAAvH,EAAAkD,aAAA,QAEA,UAAAqE,GAAA,cAAAA,EAAA,CAEA,GAAAjH,KAAA+J,cACA,OAIA,IAAA+G,EAAApR,EAAAkD,aAAA,aACAmO,EAAArR,EAAAsR,qBAAA,YAcA,OAZA,OAAAF,GACA,wBAAAA,GAAAC,EAAAnb,OAAA,IACAkb,EAAA,YAGA9Q,KAAAoM,qBAAAtR,EAAA2C,OAAAG,SAAAkT,IAEA9Q,KAAAoM,qBAAAtR,EAAA2C,OAAAG,SAAA9C,EAAAwD,eAAA2S,oBAGAjR,KAAAgQ,cAAAc,GAMAhW,EAAA2E,aAAAC,EAAA,cAAAkG,GAEA,IAAAsL,EAAAT,EAAAtH,SACAsH,EAAAtH,SAAA,GAEA,QAAAgI,EAAA,EAAmCA,EAAAD,EAAAtb,OAAsBub,IAAA,CACzD,IAAAC,EAAAF,EAAAC,GAGA,KACAC,EAAAvJ,QAAAjC,KAAA6K,EAAA5G,eAAAuH,EAAA7J,KAKAkJ,EAAAtH,SAAAjG,KAAAkO,GAJAA,EAAArJ,IAAAnC,IACA6K,EAAAtH,SAAAjG,KAAAkO,GAKqB,MAAA1Y,GAErBoC,EAAAqK,KAAA,wDAAAzM,EAAA+L,gBASAmG,WAAA,GAkBAyG,YAAA,SAAAd,EAAAe,EAAAd,GAGA,IAAAe,EAFAzW,EAAAmK,MAAA,0BACAjF,KAAA8J,WAAA,EAGA,IACAyH,EAAAvR,KAAA2I,OAAA+H,WAAAH,GACiB,MAAA7X,GACjB,GAAAA,EAAAzJ,OAAA6L,EAAAwD,eAAAC,WACA,MAAA7F,EAGAsH,KAAAoM,qBAAAtR,EAAA2C,OAAAG,SAAA9C,EAAAwD,eAAAC,YAEAyB,KAAAgQ,cAAAlV,EAAAwD,eAAAC,YAGA,GAAAgT,IAIAvR,KAAAkN,WAAApS,EAAAwN,WAAAhY,UAAA4c,WACAqE,EAAA/O,WAAAxC,KAAA2I,OAAAgI,OAAAY,EAAA1R,WAAAjK,OACAoK,KAAAkN,SAAAqE,EAAA1R,WAAA,IAEAG,KAAAkN,SAAAqE,IAIAvR,KAAAoN,WAAAtS,EAAAwN,WAAAhY,UAAA8c,WACAoD,EACAxQ,KAAAoN,SAAAoD,GAEAxQ,KAAAoN,SAAAtS,EAAAsK,UAAAmM,KAIAvR,KAAA2I,OAAA0I,YAAAE,KAEAzW,EAAA2C,OAAAG,UAaA,GANA2T,EAAAC,uBACAD,EAAAC,uBAAA1W,EAAAK,GAAAW,OAAA,YAAAlG,OAAA,EAEA2b,EAAAP,qBAAA,mBAAApb,OAAA,GAAA2b,EAAAP,qBAAA,YAAApb,OAAA,EAGA,CAMA,IAAA6b,EAAA,GACA7G,EAAA2G,EAAAP,qBAAA,aAEA,GAAApG,EAAAhV,OAAA,EACA,QAAAlH,EAAA,EAAiCA,EAAAkc,EAAAhV,OAAuBlH,IAAA,CACxD,IAAAgjB,EAAA5W,EAAAuH,QAAAuI,EAAAlc,IACAsR,KAAA4K,WAAA8G,IAAAD,EAAAvO,KAAAlD,KAAA4K,WAAA8G,IAIA,IAAAD,EAAA7b,QACA,IAAA2b,EAAAP,qBAAA,QAAApb,QASA,IAAAoK,KAAAgK,mBACAhK,KAAA2R,aAAAF,GAPAzR,KAAA2I,OAAAiJ,kBAAAN,QAnBAtR,KAAA2I,OAAAiJ,kBAAAN,IAuCAO,yBAAA,SAAAjH,GAEA,QAAAlc,EAAA,EAA+BA,EAAAkc,EAAAhV,OAAA,IAA2BlH,EAAA,CAG1D,IAFA,IAAAojB,EAAApjB,EAEA6J,EAAA7J,EAAA,EAAqC6J,EAAAqS,EAAAhV,SAAuB2C,EAC5DqS,EAAArS,GAAAjI,UAAAyhB,SAAAnH,EAAAkH,GAAAxhB,UAAAyhB,WACAD,EAAAvZ,GAIA,GAAAuZ,IAAApjB,EAAA,CACA,IAAAsjB,EAAApH,EAAAlc,GACAkc,EAAAlc,GAAAkc,EAAAkH,GACAlH,EAAAkH,GAAAE,GAIA,OAAApH,GAgBA+G,aAAA,SAAAF,GACAzR,KAAAiS,iBAAAR,IACAzR,KAAAkS,sBAiBAD,iBAAA,SAAArH,GACAA,EAAA5K,KAAA6R,yBAAAjH,GAAA,IAGA,IAFA,IAAAuH,GAAA,EAEAzjB,EAAA,EAA+BA,EAAAkc,EAAAhV,SAAuBlH,EACtD,GAAAkc,EAAAlc,GAAA4B,UAAA8hB,KAAApS,MAAA,CAIAA,KAAAqK,sBAAArK,KAAAqS,eAAArS,KAAAsS,iBAAApiB,KAAA8P,MAAA,0BACAA,KAAAsK,sBAAAtK,KAAAqS,eAAArS,KAAAuS,iBAAAriB,KAAA8P,MAAA,0BACAA,KAAAuK,wBAAAvK,KAAAqS,eAAArS,KAAAwS,mBAAAtiB,KAAA8P,MAAA,4BACAA,KAAAyS,gBAAA,IAAA7H,EAAAlc,GAEAsR,KAAAyS,gBAAAC,QAAA1S,MAEA,IAAA2S,EAAA/X,EAAA,QACAqL,MAAAnL,EAAAK,GAAAU,KACA2T,UAAAxP,KAAAyS,gBAAAxjB,OAGA,GAAA+Q,KAAAyS,gBAAAG,cAAA,CACA,IAAAC,EAAA7S,KAAAyS,gBAAAK,YAAA9S,KAAA,MAEA2S,EAAA/iB,EAAAmjB,KAAAF,IAGA7S,KAAAuN,KAAAoF,EAAAtN,QACA8M,GAAA,EACA,MAGA,OAAAA,GAOAK,mBAAA,SAAA9S,GACA,IAAAsT,EAAAC,KAAAnY,EAAAuH,QAAA3C,IAEAmT,EAAA7S,KAAAyS,gBAAAK,YAAA9S,KAAAgT,GAEA9E,EAAAtT,EAAA,YACAqL,MAAAnL,EAAAK,GAAAU,OAQA,MALA,KAAAgX,GACA3E,EAAAte,EAAAmjB,KAAAF,IAGA7S,KAAAuN,KAAAW,EAAA7I,SACA,GAOA6M,mBAAA,WACA,OAAApX,EAAA4I,eAAA1D,KAAA2D,MAGA3D,KAAAoM,qBAAAtR,EAAA2C,OAAAG,SAAA9C,EAAAwD,eAAAG,kBAEAuB,KAAAyP,WAAA3U,EAAAwD,eAAAG,oBAGAuB,KAAAoM,qBAAAtR,EAAA2C,OAAAI,eAAA,MAEAmC,KAAAqS,eAAArS,KAAAkT,sBAAAhjB,KAAA8P,MAAA,0BAEAA,KAAAuN,KAAAvS,EAAA,CACAiM,KAAA,MACAkM,GAAAnT,KAAA7F,OACA+M,GAAA,YACmBnY,EAAA,SACnBkX,MAAAnL,EAAAK,GAAAI,OACmBxM,EAAA,eAAkBa,EAAAkL,EAAA4I,eAAA1D,KAAA2D,MAAA0B,UAkBrC6N,sBAAA,SAAAxT,GAEA,IAAA0T,EAAApY,EAAA,CACAiM,KAAA,MACAC,GAAA,YACiBnY,EAAA,SACjBkX,MAAAnL,EAAAK,GAAAI,OACiBxM,EAAA,eAAkBa,EAAAkL,EAAA4I,eAAA1D,KAAA2D,MAAAwC,KAAApX,EAAA,YAAAa,EAAAoQ,KAAA4L,MAcnC,OAZA9Q,EAAAoJ,mBAAAlE,KAAA2D,OAIA3D,KAAA2D,IAAA7I,EAAAiJ,kBAAA/D,KAAA2D,KAAA,YAGAyP,EAAAjN,KAAApX,EAAA,eAAwCa,EAAAkL,EAAAoJ,mBAAAlE,KAAA2D,MAExC3D,KAAAqS,eAAArS,KAAAqT,UAAAnjB,KAAA8P,MAAA,0BAEAA,KAAAuN,KAAA6F,EAAA/N,SACA,GAYAiN,iBAAA,SAAA5S,GACA,IAAA4T,EAAAtT,KAEA,GAAAA,KAAA+I,WAAA,qBACA,IAAAwK,EAGAC,EAFAP,KAAAnY,EAAAuH,QAAA3C,IAEA+T,MADA,yBAOA,GAJA,MAAAD,EAAA,KACAD,EAAAC,EAAA,IAGAD,IAAAvT,KAAA+I,WAAA,oBAWA,OATA/I,KAAAqO,cAAArO,KAAAsK,uBACAtK,KAAAsK,sBAAA,KAEAtK,KAAAuK,0BACAvK,KAAAqO,cAAArO,KAAAuK,yBACAvK,KAAAuK,wBAAA,MAGAvK,KAAA+I,WAAA,GACA/I,KAAAuS,iBAAA,MAIAzX,EAAAoK,KAAA,kCAEAlF,KAAAyS,iBACAzS,KAAAyS,gBAAAiB,YAIA1T,KAAAqO,cAAArO,KAAAsK,uBACAtK,KAAAsK,sBAAA,KAEAtK,KAAAuK,0BACAvK,KAAAqO,cAAArO,KAAAuK,yBACAvK,KAAAuK,wBAAA,MAGA,IAAAoJ,EAAA,GAEAC,EAAA,SAAAzK,EAAAzJ,GACA,KAAAyJ,EAAAvT,QACA0d,EAAAjF,cAAAlF,EAAAyH,OAKA,OAFA0C,EAAAO,2BAAAnU,IAEA,GAYA,OATAiU,EAAAzQ,KAAAlD,KAAAqS,eAAA,SAAA3S,GACA,OAAAkU,EAAAD,EAAAjU,IACiB,mCACjBiU,EAAAzQ,KAAAlD,KAAAqS,eAAA,SAAA3S,GACA,OAAAkU,EAAAD,EAAAjU,IACiB5E,EAAAK,GAAAW,OAAA,uBAEjBkE,KAAA0O,gBAEA,GAUAmF,2BAAA,SAAAnU,GAEAM,KAAA8I,SAAApJ,EAEA,QAAAhR,EAAA,EAA+BA,EAAAgR,EAAAG,WAAAjK,OAA4BlH,IAAA,CAC3D,IAAAkX,EAAAlG,EAAAG,WAAAnR,GAEA,SAAAkX,EAAApD,WACAxC,KAAAiJ,SAAA,GAGA,YAAArD,EAAApD,WACAxC,KAAAgJ,YAAA,GAIA,OAAAhJ,KAAAiJ,SAIiBjJ,KAAAmH,QAAA2M,wBAGjB9T,KAAAoM,qBAAAtR,EAAA2C,OAAAY,aAAA,MAFA2B,KAAA9P,QAKA,IATA8P,KAAAoM,qBAAAtR,EAAA2C,OAAAK,SAAA,OAEA,IAuBA5N,KAAA,WACA,GAAA8P,KAAAiJ,QAAA,CAKAjJ,KAAAqS,eAAArS,KAAA+T,wBAAA7jB,KAAA8P,MAAA,+BAEA,IAAAgU,EAAAlZ,EAAAoJ,mBAAAlE,KAAA2D,KAEAqQ,EACAhU,KAAAuN,KAAAvS,EAAA,CACAiM,KAAA,MACAC,GAAA,iBACmBnY,EAAA,QACnBkX,MAAAnL,EAAAK,GAAAa,OACmBjN,EAAA,eAAkBa,EAAAokB,GAAA3O,QAErCrF,KAAAuN,KAAAvS,EAAA,CACAiM,KAAA,MACAC,GAAA,iBACmBnY,EAAA,QACnBkX,MAAAnL,EAAAK,GAAAa,OACmBqJ,aArBnBvK,EAAA8J,IAAA9J,EAAA8D,SAAAE,KAAA,oEAkCAiV,wBAAA,SAAArU,GAGA,IACAwQ,EAHA,aAAAxQ,EAAAkD,aAAA,QAWA,OAVA9H,EAAAqK,KAAA,4BACAzF,EAAAsR,qBAAA,YAGApb,OAAA,IACAsa,EAAApV,EAAAwD,eAAAE,UAGAwB,KAAAoM,qBAAAtR,EAAA2C,OAAAK,SAAAoS,EAAAxQ,IAEA,EAIA,IAAAxP,EAAAwP,EAAAsR,qBAAA,QAEA,KAAA9gB,EAAA0F,OAAA,GAmBA,OAJAkF,EAAAqK,KAAA,4BAEAnF,KAAAoM,qBAAAtR,EAAA2C,OAAAK,SAAA,KAAA4B,IAEA,EAlBA,IAAAuU,EAAA/jB,EAAA,GAAA8gB,qBAAA,OAEAiD,EAAAre,OAAA,IACAoK,KAAA2D,IAAA7I,EAAAuH,QAAA4R,EAAA,IAEAjU,KAAAgJ,WACAhJ,KAAAkU,qBAEAlU,KAAA6J,eAAA,EAEA7J,KAAAoM,qBAAAtR,EAAA2C,OAAAM,UAAA,SAoBAmW,kBAAA,WACA,IAAAlU,KAAAgJ,WACA,UAAAtS,MAAA,2EAAA2C,OAAAyB,EAAAK,GAAAc,QAAA,qCAGA+D,KAAAqS,eAAArS,KAAAmU,mBAAAjkB,KAAA8P,MAAA,kCAEAA,KAAAuN,KAAAvS,EAAA,CACAiM,KAAA,MACAC,GAAA,oBACiBnY,EAAA,WACjBkX,MAAAnL,EAAAK,GAAAc,UACiBoJ,SAqBjB8O,mBAAA,SAAAzU,GACA,cAAAA,EAAAkD,aAAA,QACA5C,KAAA6J,eAAA,EAEA7J,KAAAoM,qBAAAtR,EAAA2C,OAAAM,UAAA,WACiB,aAAA2B,EAAAkD,aAAA,QAKjB,OAJA9H,EAAAqK,KAAA,4BAEAnF,KAAAoM,qBAAAtR,EAAA2C,OAAAK,SAAA,KAAA4B,IAEA,EAGA,UAYA6S,iBAAA,SAAA7S,GAgBA,OAdAM,KAAAqK,wBACArK,KAAAqO,cAAArO,KAAAqK,uBACArK,KAAAqK,sBAAA,MAGArK,KAAAuK,0BACAvK,KAAAqO,cAAArO,KAAAuK,yBACAvK,KAAAuK,wBAAA,MAGAvK,KAAAyS,iBAAAzS,KAAAyS,gBAAA2B,YAEApU,KAAAoM,qBAAAtR,EAAA2C,OAAAK,SAAA,KAAA4B,IAEA,GAeA2T,UAAA,SAAA3T,GAWA,MAVA,WAAAA,EAAAkD,aAAA,SACA5C,KAAA6J,eAAA,EAEA7J,KAAAoM,qBAAAtR,EAAA2C,OAAAM,UAAA,OACiB,UAAA2B,EAAAkD,aAAA,UACjB5C,KAAAoM,qBAAAtR,EAAA2C,OAAAK,SAAA,KAAA4B,GAEAM,KAAAyP,WAAA,2BAGA,GAcAG,oBAAA,SAAA3H,EAAA1D,GACA,IAAAqK,EAAA,IAAA9T,EAAAkN,aAAAC,EAAA1D,GAGA,OAFAqK,EAAArH,MAAA,EACAvH,KAAAsJ,UAAApG,KAAA0L,GACAA,GAiBAyD,eAAA,SAAA9N,EAAAxU,EAAAd,EAAAgY,EAAAC,GACA,IAAA4H,EAAA,IAAAhU,EAAAkM,QAAAzC,EAAAxU,EAAAd,EAAAgY,EAAAC,GAGA,OAFA4H,EAAAvH,MAAA,EACAvH,KAAAuJ,YAAArG,KAAA4L,GACAA,GAYAe,qBAAA,WAUA,OATA/U,EAAAmK,MAAA,mCAEAjF,KAAAoM,qBAAAtR,EAAA2C,OAAAW,YAAA,MAEA4B,KAAA2I,OAAAkH,uBAGA7P,KAAAgQ,iBAEA,GASAtF,QAAA,WAMA,IALA,IAAA2J,EAAArU,KAKAA,KAAAsJ,UAAA1T,OAAA,GACAoK,KAAAkJ,cAAAhG,KAAAlD,KAAAsJ,UAAAsH,OAIA,KAAA5Q,KAAAoJ,aAAAxT,OAAA,IACA,IAAAgZ,EAAA5O,KAAAoJ,aAAAwH,MACAliB,EAAAsR,KAAAkJ,cAAAtF,QAAAgL,GAEAlgB,GAAA,GACAsR,KAAAkJ,cAAAjF,OAAAvV,EAAA,GAQA,IAHA,IAAA4lB,GAAA,IAAAnM,MAAAC,UACA8I,EAAA,GAEAqD,EAAA,EAAiCA,EAAAvU,KAAAkJ,cAAAtT,OAAiC2e,IAAA,CAClE,IAAAC,EAAAxU,KAAAkJ,cAAAqL,GAEA,GAAAvU,KAAA6J,gBAAA2K,EAAAjN,KACAiN,EAAAtM,WAAAsM,EAAAvM,OAEAqM,GAAA,EACAE,EAAAzM,OACAmJ,EAAAhO,KAAAsR,GAGAtD,EAAAhO,KAAAsR,GAKAxU,KAAAkJ,cAAAgI,EACAvD,aAAA3N,KAAA2J,cAEA3J,KAAA2I,OAAA+B,UAGA1K,KAAA8J,YACA9J,KAAA2J,aAAAc,WAAA,WACA,OAAA4J,EAAA3J,WACmB,QAqCnB5P,EAAA2Z,cAAA,SAAAxlB,EAAA2jB,EAAAb,GAIA/R,KAAA/Q,OAKA+Q,KAAA4S,gBAmBA5S,KAAA+R,YAGAjX,EAAA2Z,cAAAnkB,UAAA,CAmBA8hB,KAAA,SAAAsC,GACA,UASAhC,QAAA,SAAAgC,GACA1U,KAAA2U,YAAAD,GAcA5B,YAAA,SAAA4B,EAAA1B,GACA,UAAAtc,MAAA,6CAMA0d,UAAA,WACApU,KAAA2U,YAAA,MAMAjB,UAAA,WACA1T,KAAA2U,YAAA,OAoBA7Z,EAAAiU,cAAA,aAEAjU,EAAAiU,cAAAze,UAAA,IAAAwK,EAAA2Z,cAAA,mBAEA3Z,EAAAiU,cAAAze,UAAA8hB,KAAA,SAAAsC,GACA,cAAAA,EAAA1I,SAOAlR,EAAAsU,UAAA,aAEAtU,EAAAsU,UAAA9e,UAAA,IAAAwK,EAAA2Z,cAAA,eAEA3Z,EAAAsU,UAAA9e,UAAA8hB,KAAA,SAAAsC,GACA,cAAAA,EAAA1I,SAGAlR,EAAAsU,UAAA9e,UAAAwiB,YAAA,SAAA4B,GACA,IAAAE,EAAAF,EAAAzI,QAKA,OAJA2I,GAAA,KACAA,GAAAF,EAAA1I,QACA4I,GAAA,KACAA,GAAAF,EAAA9I,KACA9R,EAAA8a,IAOA9Z,EAAAuU,SAAA,aAEAvU,EAAAuU,SAAA/e,UAAA,IAAAwK,EAAA2Z,cAAA,qBAEA3Z,EAAAuU,SAAA/e,UAAA8hB,KAAA,SAAAsC,GACA,cAAAA,EAAA1I,SAGAlR,EAAAuU,SAAA/e,UAAAwiB,YAAA,SAAA4B,EAAA1B,EAAA6B,GACA,IAAAC,EAAAD,GAAAhd,EAAAC,UAAA,cAAAwT,KAAAC,UACAqJ,EAAA,KAAA9a,EAAA4a,EAAA1I,SAqEA,OApEA4I,GAAA,MACAA,GAAAE,EACAJ,EAAA3L,WAAA+L,SACAJ,EAAA3L,WAAA,6BAAA6L,EACAA,EAAA,MAAAA,EAEA5U,KAAA8S,YAAA,SAAA4B,EAAA1B,GAOA,IANA,IAAA+B,EAAAC,EAAAlf,EAAAmf,EAAAC,EAAAC,EAAAzmB,EAAA+S,EACA2T,EAAA,UACAC,EAAA,GAAAhc,OAAAqb,EAAA3L,WAAA,kCAAA1P,OAAA2Z,EAAA,KACA8B,EAAAJ,EAAA3L,WAAA+L,OACAQ,EAAA,wBAEAtC,EAAAS,MAAA6B,IAAA,CACA,IAAA9B,EAAAR,EAAAS,MAAA6B,GAGA,OAFAtC,IAAApR,QAAA4R,EAAA,OAEAA,EAAA,IACA,QACAuB,EAAAvB,EAAA,GACA,MAEA,QACAwB,EAAAxB,EAAA,GACA,MAEA,QACA1d,EAAA0d,EAAA,IAKA,GAAAuB,EAAAQ,OAAA,EAAAT,EAAAlf,UAAAkf,EAEA,OADAJ,EAAA3L,WAAA,GACA2L,EAAAnC,mBAIA8C,GADAD,GAAA,KAAAL,EAEAC,EAAA/B,KAAA+B,GACAA,GAAA,UACA,IAAApJ,EAAA9R,EAAA4a,EAAA9I,MAGA,IAFAqJ,EAAAE,EAAA1b,EAAAV,eAAA6S,EAAAoJ,GAEAtmB,EAAA,EAA2BA,EAAAoH,EAAUpH,IAAA,CAGrC,IAFAwmB,EAAAzb,EAAAV,eAAA6S,EAAAnS,EAAAD,SAAA2b,IAEA1T,EAAA,EAA6BA,EAAA,EAAOA,IACpCwT,EAAAxT,IAAAyT,EAAAzT,GAGA0T,EAAAD,EAGAD,EAAAxb,EAAAD,SAAAyb,GACA,IAAAO,EAAA/b,EAAAV,eAAAkc,EAAA,cACAQ,EAAAhc,EAAAG,cAAAqb,EAAA,cACAS,EAAAjc,EAAAV,eAAAU,EAAAI,SAAAJ,EAAAD,SAAAgc,IAAAH,GAGA,IAFAX,EAAA3L,WAAA,oBAAAtP,EAAAC,cAAA+b,EAAAJ,GAEA5T,EAAA,EAA2BA,EAAA,EAAOA,IAClC+T,EAAA/T,IAAAiU,EAAAjU,GAIA,OADA2T,GAAA,MAAArC,KAAAtZ,EAAAD,SAAAgc,KAIAZ,GAOA9Z,EAAAmU,QAAA,aAEAnU,EAAAmU,QAAA3e,UAAA,IAAAwK,EAAA2Z,cAAA,oBAEA3Z,EAAAmU,QAAA3e,UAAA8hB,KAAA,SAAAsC,GACA,cAAAA,EAAA1I,SAaAlR,EAAAmU,QAAA3e,UAAAqlB,OAAA,SAAAlf,GACA,UAAAA,EAAAmL,QAAA,cAAAA,QAAA,iBAGA9G,EAAAmU,QAAA3e,UAAAwiB,YAAA,SAAA4B,EAAA1B,EAAA6B,GAQA,IAPA,IAAAS,EAAA,mCACAR,EAAAD,GAAAhd,EAAAC,UAAA,cAAAwT,KAAAC,UACAqK,EAAA,GACAC,EAAA,KACAd,EAAA,GAGA/B,EAAAS,MAAA6B,IAAA,CACA,IAAA9B,EAAAR,EAAAS,MAAA6B,GAIA,OAHAtC,IAAApR,QAAA4R,EAAA,OACAA,EAAA,GAAAA,EAAA,GAAA5R,QAAA,iBAEA4R,EAAA,IACA,YACAoC,EAAApC,EAAA,GACA,MAEA,YACAuB,EAAAvB,EAAA,GACA,MAEA,UACAA,EAAA,GACA,MAEA,WACAqC,EAAArC,EAAA,IAKA,IAAAsC,EAAApB,EAAAxI,SAAA,IAAAwI,EAAAva,OAEA,OAAA0b,IACAC,IAAA,IAAAD,GAGA,IAAAE,EAAAjc,EAAA4a,EAAA1I,QAAA,IAAA4J,EAAA,IAAA5V,KAAA2U,YAAA/I,MACAoK,EAAAne,EAAAK,KAAA6d,GAAA,IAAAhB,EAAA,IAAAD,EACAmB,EAAA,gBAAAH,EACAV,EAAA,GAeA,OAdAA,GAAA,iBACAA,GAAA,YAAApV,KAAA2V,OAAA7b,EAAA4a,EAAA1I,UAAA,IACAoJ,GAAA,SAAApV,KAAA2V,OAAAC,GAAA,IACAR,GAAA,SAAApV,KAAA2V,OAAAZ,GAAA,IACAK,GAAA,eACAA,GAAA,UAAApV,KAAA2V,OAAAb,GAAA,IACAM,GAAA,cAAApV,KAAA2V,OAAAG,GAAA,IACAV,GAAA,YAAAvd,EAAAC,UAAAD,EAAAC,UAAAke,GAAA,IAAAjB,EAAA,aAAAD,EAAA,SAAAjd,EAAAC,UAAAme,IAAA,IACAb,GAAA,WAEApV,KAAA8S,YAAA,WACA,UAGAsC,GAOAta,EAAAoU,gBAAA,aAEApU,EAAAoU,gBAAA5e,UAAA,IAAAwK,EAAA2Z,cAAA,qBAEA3Z,EAAAoU,gBAAA5e,UAAA8hB,KAAA,SAAAsC,GACA,cAAAA,EAAA9I,MAGA9Q,EAAAoU,gBAAA5e,UAAAwiB,YAAA,SAAA4B,GACA,IAAAE,EAAA,KAYA,OAVA,OAAAF,EAAA1I,UACA4I,IAAA,KAAAF,EAAAzI,SAGA2I,GAAA,IACAA,GAAA,IACAA,GAAA,eACAA,GAAAF,EAAA9I,KACAgJ,GAAA,IAEA9a,EADA8a,GAAA,MAaA9Z,EAAAkU,aAAA,aAEAlU,EAAAkU,aAAA1e,UAAA,IAAAwK,EAAA2Z,cAAA,kBAEA3Z,EAAAkU,aAAA1e,UAAAwiB,YAAA,SAAA4B,GAQA,OAAAA,EAAA1I,UAAA0I,EAAAzI,QAAA,GAAAyI,EAAAzI,SAOAnR,EAAAqU,YAAA,aAEArU,EAAAqU,YAAA7e,UAAA,IAAAwK,EAAA2Z,cAAA,kBAEA3Z,EAAAqU,YAAA7e,UAAA8hB,KAAA,SAAAsC,GACA,cAAAA,EAAA9I,MAGA9Q,EAAAqU,YAAA7e,UAAAwiB,YAAA,SAAA4B,GACA,IAAAE,EAAA,KAQA,OANA,OAAAF,EAAA1I,UACA4I,GAAAF,EAAAzI,SAGA2I,GAAA,KACAA,GAAAF,EAAA9I,KACA9R,EAAA8a,IAEA,IAAAsB,EAAA,CACApb,UACAF,SACAI,MACAmb,KA/qHA,SAAAtb,GACA,WAAAC,EAAAC,QAAA,UAAAF,IA+qHAI,QACAxB,OACA5B,MACA6B,cAAAD,EAAAC,cACAC,SAAAF,EAAAE,SACAC,cAAAH,EAAAG,cACAC,SAAAJ,EAAAI,UASAuc,EAAAF,EAAApb,QACAub,EAAAH,EAAAtb,OAoBAwb,EAAAE,QAAA,SAAA5W,EAAAE,EAAA4M,EAAA+J,GACAvW,KAAAkH,KAAAkP,EAAAvQ,WACA7F,KAAAwW,QAAA9W,EACAM,KAAAhH,KAAAod,EAAAhR,UAAA1F,GAGAM,KAAAyW,SAAA7W,EACAI,KAAAJ,OACAI,KAAAwM,MACAxM,KAAA0W,KAAAC,IACA3W,KAAAuW,SAAA,EACAvW,KAAA4W,OAAA,EACA5W,KAAA6W,KAAA,KAEA7W,KAAA8W,IAAA,WACA,OAAA9W,KAAA0W,MAIA,IAAAvO,KACAnI,KAAA0W,MAAA,IAJA,GAOA1W,KAAA+W,SAAA,WACA,OAAA/W,KAAA6W,MAIA,IAAA1O,KACAnI,KAAA6W,MAAA,IAJA,GAOA7W,KAAAgX,IAAAhX,KAAAiX,WAGAb,EAAAE,QAAAhmB,UAAA,CAcA4mB,YAAA,WACA,IAAAhW,EAAA,KAEA,GAAAlB,KAAAgX,IAAAG,aAAAnX,KAAAgX,IAAAG,YAAAC,iBAGA,oBAFAlW,EAAAlB,KAAAgX,IAAAG,YAAAC,iBAEAjX,QAIA,MAHAiW,EAAApR,MAAA,6BACAoR,EAAApR,MAAA,iBAAAhF,KAAAgX,IAAA5B,cACAgB,EAAApR,MAAA,gBAAAoR,EAAAhR,UAAApF,KAAAgX,IAAAG,cACA,IAAAzgB,MAAA,oBAEiB,GAAAsJ,KAAAgX,IAAA5B,aAAA,CAKjB,GAHAgB,EAAAnR,MAAA,mFACA/D,GAAA,IAAAe,WAAAC,gBAAAlC,KAAAgX,IAAA5B,aAAA,mBAAAgC,iBAGA,UAAA1gB,MAAA,8BACmB,GAAAwK,EAAAmW,cAAA,gBACnBjB,EAAApR,MAAA,8BAAA9D,EAAAmW,cAAA,eAAAC,aACAlB,EAAApR,MAAA,iBAAAhF,KAAAgX,IAAA5B,cACA,IAAApQ,EAAA,IAAAtO,MAEA,MADAsO,EAAA/V,KAAAmnB,EAAA9X,eAAAC,WACAyG,GAIA,OAAA9D,GAWA+V,QAAA,WACA,IAAAD,EAAA,KAcA,OAZA1oB,OAAAipB,gBACAP,EAAA,IAAAO,gBAEAC,kBACAR,EAAAQ,iBAAA,2BAEiBlpB,OAAA0S,gBACjBgW,EAAA,IAAAhW,cAAA,sBAIAgW,EAAAS,mBAAAzX,KAAAJ,KAAA1P,KAAA,KAAA8P,MACAgX,IA4BAZ,EAAAvN,KAAA,SAAA6L,GACA1U,KAAA0X,MAAAhD,EAGA1U,KAAAwM,IAAAlB,KAAAqM,MAAA,WAAArM,KAAAC,UAGAvL,KAAAuM,IAAA,KAEAvM,KAAA8L,KAAA,EACA9L,KAAA6L,KAAA,GACA7L,KAAA1R,OAAA,EACA0R,KAAA4X,OAAA,EACA5X,KAAA6X,WAAA,KACA7X,KAAA8X,oBAAA,KACA9X,KAAAgL,UAAA,IAGAoL,EAAAvN,KAAAvY,UAAA,CAYAqgB,MAAA,KAQAoH,WAAA,WACA,IAAAxG,EAAA8E,EAAA,QACA7J,IAAAxM,KAAAwM,MACAvG,MAAAmQ,EAAAjb,GAAAC,WAaA,OAVA,OAAA4E,KAAAuM,KACAgF,EAAA1W,MAAA,CACA0R,IAAAvM,KAAAuM,MAIAvM,KAAA0X,MAAAvQ,QAAA6Q,WAAAhY,KAAA0X,MAAA9K,4BACA5M,KAAAiY,gBAGA1G,GAQAxG,OAAA,WACA/K,KAAAwM,IAAAlB,KAAAqM,MAAA,WAAArM,KAAAC,UACAvL,KAAAuM,IAAA,KACAvM,KAAA4X,OAAA,EAEA5X,KAAA0X,MAAA9K,4BACAte,OAAAye,eAAAE,WAAA,wBAGAjN,KAAA0X,MAAApK,aAAAtN,KAAAwM,MAQAH,SAAA,SAAAR,EAAAC,EAAAC,GACA/L,KAAA6L,QAAA7L,KAAA6L,KACA7L,KAAA8L,QAAA9L,KAAA8L,KACA9L,KAAA4X,OAAA,EAEA,IAAA3a,EAAA+C,KAAA+X,aAAAld,MAAA,CACAsY,GAAAnT,KAAA0X,MAAAvd,OACA+d,WAAA,KACArM,KAAA7L,KAAA6L,KACAC,KAAA9L,KAAA8L,KACAqM,QAAA,0BACAC,IAAA,MACAC,eAAA,MACAC,aAAAlC,EAAAjb,GAAAE,OAGA0Q,GACA9O,EAAApC,MAAA,CACAkR,UAIA,IAAAsF,EAAArR,KAAA0X,MAAArG,YAEArR,KAAAgL,UAAA9H,KAAA,IAAAkT,EAAAE,QAAArZ,EAAAoI,OAAArF,KAAAuY,sBAAAroB,KAAA8P,KAAAqR,EAAAnhB,KAAA8P,KAAA0X,QAAAza,EAAAoI,OAAAzC,aAAA,SAEA5C,KAAAwY,4BA2BA9L,QAAA,SAAA/I,EAAA4I,EAAAC,EAAAd,EAAAG,EAAAC,EAAAW,GACAzM,KAAA0X,MAAA/T,MACA3D,KAAAuM,MACAvM,KAAAwM,MACAxM,KAAA0X,MAAAvL,iBAAAT,EACA1L,KAAA0X,MAAAvd,OAAAic,EAAAvS,iBAAA7D,KAAA0X,MAAA/T,KACA3D,KAAA0X,MAAA7N,eAAA,EACA7J,KAAA0X,MAAA5N,WAAA,EACA9J,KAAA6L,QAAA7L,KAAA6L,KACA7L,KAAA8L,QAAA9L,KAAA8L,KACA9L,KAAA1R,OAAAme,GAAAzM,KAAA1R,OAEA0R,KAAA0X,MAAAtL,qBAAAgK,EAAA3Y,OAAAS,SAAA,OAsBA2O,SAAA,SAAAlJ,EAAA+H,EAAAG,EAAAC,EAAAW,GACA,IAAAgM,EAAA3L,KAAA4L,MAAApqB,OAAAye,eAAA4L,QAAA,yBAEA,WAAAF,KAAAjM,KAAAiM,EAAAlM,KAAAkM,EAAA9U,MAAA,MAAAA,GAAAyS,EAAArS,kBAAA0U,EAAA9U,OAAAyS,EAAArS,kBAAAJ,IAEA,OAAAyS,EAAA1S,eAAAC,IAAAyS,EAAAvS,iBAAA4U,EAAA9U,WAIiB,CACjB,IAAAqB,EAAA,IAAAtO,MAAA,qCAEA,MADAsO,EAAA/V,KAAA,sBACA+V,EANAhF,KAAA0X,MAAAxN,UAAA,EAEAlK,KAAA0M,QAAA+L,EAAA9U,IAAA8U,EAAAlM,IAAAkM,EAAAjM,IAAAd,EAAAG,EAAAC,EAAAW,IAeAwL,cAAA,WACAjY,KAAA0X,MAAA7N,cACA7J,KAAA0X,MAAA/T,KAAA3D,KAAAwM,KAAAxM,KAAAuM,KACAje,OAAAye,eAAAC,QAAA,uBAAAF,KAAA8L,UAAA,CACAjV,IAAA3D,KAAA0X,MAAA/T,IACA6I,IAAAxM,KAAAwM,IACAD,IAAAvM,KAAAuM,OAIAje,OAAAye,eAAAE,WAAA,yBAWAoE,YAAA,SAAAE,GACA,IAAAsH,EAAAtH,EAAA3O,aAAA,QAEA,UAAAiW,GAAA,cAAAA,EAAA,CAEA,IAAA/H,EAAAS,EAAA3O,aAAA,aACAwT,EAAApR,MAAA,2BAAA8L,GACA,IAAAC,EAAAQ,EAAAP,qBAAA,YAcA,OAZA,OAAAF,GACA,wBAAAA,GAAAC,EAAAnb,OAAA,IACAkb,EAAA,YAGA9Q,KAAA0X,MAAAtL,qBAAAgK,EAAA3Y,OAAAG,SAAAkT,IAEA9Q,KAAA0X,MAAAtL,qBAAAgK,EAAA3Y,OAAAG,SAAA,WAGAoC,KAAA0X,MAAA1H,cAAAc,GAEAsF,EAAA3Y,OAAAG,SAKAoC,KAAAuM,MACAvM,KAAAuM,IAAAgF,EAAA3O,aAAA,QAGA,IAAA6J,EAAA8E,EAAA3O,aAAA,YAEA6J,IACAzM,KAAA1R,OAAAwqB,SAAArM,EAAA,KAGA,IAAAX,EAAAyF,EAAA3O,aAAA,QAEAkJ,IACA9L,KAAA8L,KAAAgN,SAAAhN,EAAA,KAGA,IAAAD,EAAA0F,EAAA3O,aAAA,QAEAiJ,IACA7L,KAAA6L,KAAAiN,SAAAjN,EAAA,KAGA,IAAAgM,EAAAtG,EAAA3O,aAAA,cAEAiV,IACA7X,KAAA6X,WAAAiB,SAAAjB,EAAA,MAUA/H,YAAA,SAAAH,GACA3P,KAAA+Y,eAAApJ,IAQAK,cAAA,WACAhQ,KAAAuM,IAAA,KACAvM,KAAAwM,IAAAlB,KAAAqM,MAAA,WAAArM,KAAAC,UAEAvL,KAAA0X,MAAA9K,4BACAte,OAAAye,eAAAE,WAAA,wBAGAjN,KAAA0X,MAAApK,aAAAtN,KAAAwM,MASAqE,YAAA,WACA,WAAA7Q,KAAAgL,UAAApV,QASAojB,2BAAA,SAAAzI,GACA,IAAA0I,EAAAjZ,KAAAkZ,kBAAA3I,GAEA4I,EAAAnZ,KAAA0X,MAAAlO,sBAAAC,KAAAwP,GAEAE,GACAA,EAAAtqB,KAAAmR,KAAAiZ,IAcAG,UAAA,SAAAH,GACAjZ,KAAA4X,SACAxB,EAAAjR,KAAA,4BAAA8T,EAAA,uBAAAjZ,KAAA4X,QAEA5X,KAAA4X,OAAA,GACA5X,KAAA0X,MAAA7H,wBASA+B,kBAAA,SAAAlG,GACA0K,EAAAjR,KAAA,gGAGAuG,EADAA,EACAA,EAAAxb,KAAA8P,KAAA0X,OAEA1X,KAAA0X,MAAArG,YAAAnhB,KAAA8P,KAAA0X,OAGA,IAAAza,EAAA+C,KAAA+X,aAEA/X,KAAAgL,UAAA9H,KAAA,IAAAkT,EAAAE,QAAArZ,EAAAoI,OAAArF,KAAAuY,sBAAAroB,KAAA8P,KAAA0L,GAAAzO,EAAAoI,OAAAzC,aAAA,SAEA5C,KAAAwY,4BAQA3I,qBAAA,WACA7P,KAAA+P,qBAMAA,kBAAA,WACA,KAAA/P,KAAAgL,UAAApV,OAAA,IACA,IAAA2a,EAAAvQ,KAAAgL,UAAA4F,MAEAL,EAAAqG,OAAA,EACArG,EAAAyG,IAAAJ,QAEArG,EAAAyG,IAAAS,mBAAA,eASA/M,QAAA,WACA,IAAA1R,EAAAgH,KAAA0X,MAAAvN,MAOA,GALAnK,KAAA0X,MAAA7N,eAAA,IAAA7J,KAAAgL,UAAApV,QAAA,IAAAoD,EAAApD,SAAAoK,KAAA0X,MAAA3N,gBACAqM,EAAAnR,MAAA,wDACAjM,EAAAkK,KAAA,QAGAlD,KAAA0X,MAAAzN,OAAA,CAIA,GAAAjK,KAAAgL,UAAApV,OAAA,GAAAoD,EAAApD,OAAA,GAGA,IAFA,IAAAqH,EAAA+C,KAAA+X,aAEArpB,EAAA,EAAiCA,EAAAsK,EAAApD,OAAiBlH,IAClD,OAAAsK,EAAAtK,KACA,YAAAsK,EAAAtK,GACAuO,EAAApC,MAAA,CACAsY,GAAAnT,KAAA0X,MAAAvd,OACA+d,WAAA,KACAmB,eAAA,OACAf,aAAAlC,EAAAjb,GAAAE,OAGA4B,EAAAsJ,MAAAvN,EAAAtK,IAAAyX,aAKAnG,KAAA0X,MAAAvN,MACAnK,KAAA0X,MAAAvN,MAAA,GAEAnK,KAAAgL,UAAA9H,KAAA,IAAAkT,EAAAE,QAAArZ,EAAAoI,OAAArF,KAAAuY,sBAAAroB,KAAA8P,UAAA0X,MAAApH,UAAApgB,KAAA8P,KAAA0X,QAAAza,EAAAoI,OAAAzC,aAAA,SAEA5C,KAAAwY,2BAGA,GAAAxY,KAAAgL,UAAApV,OAAA,GACA,IAAA0jB,EAAAtZ,KAAAgL,UAAA,GAAA8L,MAEA,OAAA9W,KAAAgL,UAAA,GAAA6L,MACA7W,KAAAgL,UAAA,GAAA+L,WAAAzL,KAAAqM,MAAAvB,EAAA7W,kBAAAS,KAAA6L,OACA7L,KAAAwY,2BAIAc,EAAAhO,KAAAqM,MAAAvB,EAAA9W,QAAAU,KAAA6L,QACAuK,EAAAjR,KAAA,WAAAnF,KAAAgL,UAAA,GAAA9D,GAAA,oBAAAoE,KAAAqM,MAAAvB,EAAA9W,QAAAU,KAAA6L,MAAA,gCAEA7L,KAAAwY,+BAcAU,kBAAA,SAAA3I,EAAAgJ,GACA,IAAAN,EAEA,OAAA1I,EAAAyG,IAAAwC,WACA,IACAP,EAAA1I,EAAAyG,IAAA/G,OACmB,MAAAvX,GAGnB0d,EAAApR,MAAA,mEAAAiU,GAQA,YAJA,IAAAA,IACAA,EAAA,iBAAAM,IAAA,GAGAN,GAeAV,sBAAA,SAAA3Y,EAAA2Q,GAGA,GAFA6F,EAAAnR,MAAA,cAAAsL,EAAArJ,GAAA,IAAAqJ,EAAAgG,MAAA,qBAAAhG,EAAAyG,IAAAwC,YAEAjJ,EAAAqG,MACArG,EAAAqG,OAAA,OAIA,OAAArG,EAAAyG,IAAAwC,WAAA,CAKA,IAAAP,EAAAjZ,KAAAkZ,kBAAA3I,GAIA,GAFAvQ,KAAA8X,oBAAAvH,EAAAyG,IAAAyC,wBAEAzZ,KAAA+J,eAAAkP,GAAA,IAKA,OAJAjZ,KAAAoZ,UAAAH,QAEAjZ,KAAAgZ,2BAAAzI,GAKA,IAAAmJ,EAAAT,EAAA,GAAAA,EAAA,IACAU,EAAApJ,EAAAgG,MAAAvW,KAAA0X,MAAAlN,WASA,IAPAkP,GAAAC,KAEA3Z,KAAA4Z,eAAArJ,GAEA6F,EAAAnR,MAAA,cAAAsL,EAAArJ,GAAA,2BAGA,MAAA+R,EAAA,CAEA,IAAAY,EAAA7Z,KAAAgL,UAAA,KAAAuF,GACAvQ,KAAAgL,UAAA,KAAAuF,GAKAsJ,GAAA7Z,KAAAgL,UAAApV,OAAA,GAAAoK,KAAAgL,UAAA,GAAA8L,MAAAxL,KAAAqM,MAAAvB,EAAA7W,kBAAAS,KAAA6L,QACA7L,KAAA8Z,gBAAA,GAGA9Z,KAAA0X,MAAApK,aAAAyM,OAAAxJ,EAAA/D,KAAA,GAEA4J,EAAAnR,MAAA,cAAAsL,EAAArJ,GAAA,IAAAqJ,EAAAgG,MAAA,YACA3W,EAAA2Q,GAEAvQ,KAAA4X,OAAA,OACiB,IAAAqB,MAAA,KAAAA,EAAA,KAAAA,GAAA,MAEjB7C,EAAApR,MAAA,cAAAuL,EAAArJ,GAAA,IAAAqJ,EAAAgG,MAAA,UAAA0C,EAAA,aAEAjZ,KAAAoZ,UAAAH,GAEAjZ,KAAAgZ,2BAAAzI,GAEA0I,GAAA,KAAAA,EAAA,MACAjZ,KAAA0X,MAAAtL,qBAAAgK,EAAA3Y,OAAAQ,cAAA,MAEA+B,KAAA0X,MAAA1H,kBAGAoG,EAAApR,MAAA,cAAAuL,EAAArJ,GAAA,IAAAqJ,EAAAgG,MAAA,UAAA0C,EAAA,aAGAS,GAAAC,EAEiBA,IAAA3Z,KAAA0X,MAAA5N,WACjB9J,KAAA0X,MAAAtL,qBAAAgK,EAAA3Y,OAAAG,SAAA,aAFAoC,KAAAwY,6BAeAwB,gBAAA,SAAAtrB,GACA,IAAAiZ,EAAA3H,KAEAuQ,EAAAvQ,KAAAgL,UAAAtc,GAEAuqB,EAAAjZ,KAAAkZ,kBAAA3I,GAAA,GAGA,GAAAA,EAAAgG,MAAAvW,KAAA0X,MAAAlN,WACAxK,KAAA0X,MAAA7H,2BADA,CAMA,IAAAyJ,EAAA/I,EAAAuG,MACAmD,GAAAC,MAAAZ,MAAAhO,KAAAqM,MAAAvB,EAAA9W,QAAAU,KAAA6L,MACAsO,EAAA,OAAA5J,EAAAsG,MAAAtG,EAAAwG,WAAAzL,KAAAqM,MAAAvB,EAAA7W,kBAAAS,KAAA6L,MACAuO,EAAA,IAAA7J,EAAAyG,IAAAwC,aAAAP,EAAA,GAAAA,GAAA,KAgBA,IAdAgB,GAAAE,GAAAC,KACAD,GACA/D,EAAApR,MAAA,WAAA3L,OAAA2G,KAAAgL,UAAAtc,GAAAwY,GAAA,uCAGAqJ,EAAAqG,OAAA,EACArG,EAAAyG,IAAAJ,QAEArG,EAAAyG,IAAAS,mBAAA,aAEAzX,KAAAgL,UAAAtc,GAAA,IAAA0nB,EAAAE,QAAA/F,EAAAiG,QAAAjG,EAAAkG,SAAAlG,EAAA/D,IAAA+D,EAAAgG,OACAhG,EAAAvQ,KAAAgL,UAAAtc,IAGA,IAAA6hB,EAAAyG,IAAAwC,WAAA,CACApD,EAAAnR,MAAA,cAAAsL,EAAArJ,GAAA,IAAAqJ,EAAAgG,MAAA,YAEA,IACA,IAAA8D,EAAAra,KAAA0X,MAAAvQ,QAAAmT,aAAA,0BACA/J,EAAAyG,IAAAuD,KAAA,OAAAva,KAAA0X,MAAAnP,SAAAvI,KAAA0X,MAAAvQ,QAAAqT,WAEA,IAAAjK,EAAAyG,IAAAyD,kBAEAlK,EAAAyG,IAAAyD,iBAAA,eAAAJ,GAGAra,KAAA0X,MAAAvQ,QAAAuT,kBACAnK,EAAAyG,IAAA0D,iBAAA,GAEmB,MAAAC,GASnB,OARAvE,EAAApR,MAAA,oBAAA2V,EAAA5kB,YAEAiK,KAAA0X,MAAA5N,WACA9J,KAAA0X,MAAAtL,qBAAAgK,EAAA3Y,OAAAG,SAAA,oBAGAoC,KAAA0X,MAAAjI,aAOA,IAAAmL,EAAA,WAGA,GAFArK,EAAAmG,KAAA,IAAAvO,KAEAR,EAAA+P,MAAAvQ,QAAA0T,cAAA,CACA,IAAAC,EAAAnT,EAAA+P,MAAAvQ,QAAA0T,cAEA,QAAAE,KAAAD,EACA1rB,OAAAkB,UAAAC,eAAA1B,KAAAisB,EAAAC,IACAxK,EAAAyG,IAAAyD,iBAAAM,EAAAD,EAAAC,IAKAxK,EAAAyG,IAAAzJ,KAAAgD,EAAAvX,OAKA,GAAAuX,EAAAgG,MAAA,GAGA,IAAAyE,EAAA,IAAA1P,KAAA2P,IAAA3P,KAAAqM,MAAAvB,EAAA9W,QAAAU,KAAA6L,MAAAP,KAAA4P,IAAA3K,EAAAgG,MAAA,IACA9L,WAAA,WAEAmQ,KACqBI,QAErBJ,IAGArK,EAAAgG,QAEAvW,KAAA0X,MAAAvK,YAAAiJ,EAAA9N,WAAAhY,UAAA6c,YACAoD,EAAAiG,QAAAhU,WAAAxC,KAAA2Q,OAAAJ,EAAAiG,QAAA3W,WAAAjK,OACAoK,KAAA0X,MAAAvK,UAAAoD,EAAAiG,QAAA3W,WAAA,IAEAG,KAAA0X,MAAAvK,UAAAoD,EAAAiG,UAIAxW,KAAA0X,MAAArK,YAAA+I,EAAA9N,WAAAhY,UAAA+c,WACArN,KAAA0X,MAAArK,UAAAkD,EAAAvX,WAGAod,EAAAnR,MAAA,yBAAAvW,EAAA,gDAAA6hB,EAAAyG,IAAAwC,cAUAI,eAAA,SAAArJ,GACA6F,EAAAnR,MAAA,oBAEA,QAAAvW,EAAAsR,KAAAgL,UAAApV,OAAA,EAAuDlH,GAAA,EAAQA,IAC/D6hB,IAAAvQ,KAAAgL,UAAAtc,IACAsR,KAAAgL,UAAA/G,OAAAvV,EAAA,GAKA6hB,EAAAyG,IAAAS,mBAAA,aAEAzX,KAAAwY,4BASAsB,gBAAA,SAAAprB,GACA,IAAA6hB,EAAAvQ,KAAAgL,UAAAtc,GAEA,OAAA6hB,EAAAsG,OACAtG,EAAAsG,KAAA,IAAA1O,MAGAnI,KAAAga,gBAAAtrB,IAeAgiB,WAAA,SAAAH,GACA,IACA,OAAAA,EAAA2G,cACiB,MAAAxe,GACjB,mBAAAA,EAAA+L,QACA,MAAA/L,EAGAsH,KAAA0X,MAAAjI,WAAA,yBAWAsJ,eAAA,SAAApJ,GACAyG,EAAAnR,MAAA,6BAEA,IAAAhI,EAAA+C,KAAA+X,aAAAld,MAAA,CACAoM,KAAA,cAGA0I,GACA1S,EAAAsJ,MAAAoJ,EAAAtK,QAGA,IAAAkL,EAAA,IAAA6F,EAAAE,QAAArZ,EAAAoI,OAAArF,KAAAuY,sBAAAroB,KAAA8P,UAAA0X,MAAApH,UAAApgB,KAAA8P,KAAA0X,QAAAza,EAAAoI,OAAAzC,aAAA,QAEA5C,KAAAgL,UAAA9H,KAAAqN,GAEAvQ,KAAAwY,4BAQA/K,MAAA,WACA,IAAAjF,EAAAxI,KAEA2N,aAAA3N,KAAA0X,MAAA/N,cAEA3J,KAAAwY,2BAEAxY,KAAA0X,MAAA/N,aAAAc,WAAA,WACA,OAAAjC,EAAAkP,MAAAhN,WACiB,MAOjBgE,aAAA,WACA1O,KAAAwY,2BAEA7K,aAAA3N,KAAA0X,MAAA/N,eAUA6O,yBAAA,WACAxY,KAAAgL,UAGAoL,EAAAnR,MAAA,wCAAAjF,KAAAgL,UAAApV,OAAA,aAFAwgB,EAAAnR,MAAA,2DAKAjF,KAAAgL,WAAA,IAAAhL,KAAAgL,UAAApV,SAIAoK,KAAAgL,UAAApV,OAAA,GACAoK,KAAAga,gBAAA,GAGAha,KAAAgL,UAAApV,OAAA,GAAA0V,KAAA6P,IAAAnb,KAAAgL,UAAA,GAAAwB,IAAAxM,KAAAgL,UAAA,GAAAwB,KAAAxM,KAAA1R,QACA0R,KAAAga,gBAAA,MAWA,IAAAoB,EAAAlF,EAAApb,QACAugB,EAAAnF,EAAAtb,OAilBA,OAljBAwgB,EAAAxS,UAAA,SAAA8L,GACA1U,KAAA0X,MAAAhD,EACA1U,KAAA2Q,MAAA,UACA,IAAApI,EAAAmM,EAAAnM,QAEA,OAAAA,EAAA3E,QAAA,YAAA2E,EAAA3E,QAAA,SAGA,IAAA0X,EAAA,GAEA,OAAA5G,EAAAvN,QAAAuB,UAAA,WAAApa,OAAAitB,SAAA7S,SACA4S,GAAA,KAEAA,GAAA,MAGAA,GAAA,MAAAhtB,OAAAitB,SAAA1F,KAEA,IAAAtN,EAAA3E,QAAA,KACA0X,GAAAhtB,OAAAitB,SAAAC,SAAAjT,EAEA+S,GAAA/S,EAGAmM,EAAAnM,QAAA+S,IAIAF,EAAAxS,UAAAtY,UAAA,CAOAmrB,aAAA,WACA,OAAAJ,EAAA,QACApV,MAAAmV,EAAAjgB,GAAAY,QACAoX,GAAAnT,KAAA0X,MAAAvd,OACAuhB,QAAA,SAaAC,mBAAA,SAAApK,EAAAqK,GACA,IAAAhE,EAQA,QALAA,EADArG,EAAAC,uBACAD,EAAAC,uBAAA4J,EAAAjgB,GAAAW,OAAA,SAEAyV,EAAAP,qBAAA,iBAGApb,OACA,SAQA,IALA,IAAAoP,EAAA4S,EAAA,GACA1H,EAAA,GACAvO,EAAA,GAGAjT,EAAA,EAA+BA,EAAAsW,EAAAnF,WAAAjK,OAA6BlH,IAAA,CAC5D,IAAAgK,EAAAsM,EAAAnF,WAAAnR,GAEA,GALA,wCAKAgK,EAAAkK,aAAA,SACA,MAGA,SAAAlK,EAAA8J,SACAb,EAAAjJ,EAAA4e,YAEApH,EAAAxX,EAAA8J,SAIA,IAAAqZ,EAAA,2BAkBA,OAfAA,GADA3L,GAGA,UAGAvO,IACAka,GAAA,MAAAla,GAGAyZ,EAAApW,MAAA6W,GAEA7b,KAAA0X,MAAAtL,qBAAAwP,EAAA1L,GAEAlQ,KAAA0X,MAAA1H,iBAEA,GASAjF,OAAA,aAUAsB,SAAA,WAEArM,KAAA8b,eAGA9b,KAAA+b,OAAA,IAAAC,UAAAhc,KAAA0X,MAAAnP,QAAA,QACAvI,KAAA+b,OAAAE,OAAAjc,KAAAkc,QAAAhsB,KAAA8P,MACAA,KAAA+b,OAAAI,QAAAnc,KAAAoc,SAAAlsB,KAAA8P,MACAA,KAAA+b,OAAAM,QAAArc,KAAAsc,SAAApsB,KAAA8P,MACAA,KAAA+b,OAAAQ,UAAAvc,KAAAwc,oBAAAtsB,KAAA8P,OAWAqR,YAAA,SAAAE,GAGA,GAFAvR,KAAA2b,mBAAApK,EAAA6J,EAAA3d,OAAAG,UAGA,OAAAwd,EAAA3d,OAAAG,UAYA6e,mBAAA,SAAAhY,GACA,IAAAO,GAAA,EAEAjV,EAAA0U,EAAA7B,aAAA,SAEA,iBAAA7S,EACAiV,EAAA,4BACiBjV,IAAAqrB,EAAAjgB,GAAAY,UACjBiJ,EAAA,4BAAAjV,GAGA,IAAAqoB,EAAA3T,EAAA7B,aAAA,WAQA,MANA,iBAAAwV,EACApT,EAAA,8BACiB,QAAAoT,IACjBpT,EAAA,8BAAAoT,IAGApT,IACAhF,KAAA0X,MAAAtL,qBAAAgP,EAAA3d,OAAAG,SAAAoH,GAEAhF,KAAA0X,MAAA1H,iBAEA,IAYAwM,oBAAA,SAAA/X,GACA,OAAAA,EAAAzL,KAAA4K,QAAA,eAAAa,EAAAzL,KAAA4K,QAAA,UAEA,IAAA5K,EAAAyL,EAAAzL,KAAA4I,QAAA,uBACA,QAAA5I,EAAA,OACA,IAAA0jB,GAAA,IAAAza,WAAAC,gBAAAlJ,EAAA,YAAAoe,gBAEApX,KAAA0X,MAAAxK,SAAAwP,GAEA1c,KAAA0X,MAAAtK,SAAA3I,EAAAzL,MAGAgH,KAAAyc,mBAAAC,IAEA1c,KAAAqR,YAAAqL,QAEiB,OAAAjY,EAAAzL,KAAA4K,QAAA,YAGjB,IAAA+Y,GAAA,IAAA1a,WAAAC,gBAAAuC,EAAAzL,KAAA,YAAAoe,gBAEApX,KAAA0X,MAAAxK,SAAAyP,GAEA3c,KAAA0X,MAAAtK,SAAA3I,EAAAzL,MAEA,IAAA4jB,EAAAD,EAAA/Z,aAAA,iBAEA,GAAAga,EAAA,CACA,IAAArU,EAAAvI,KAAA0X,MAAAnP,SAEAA,EAAA3E,QAAA,YAAAgZ,EAAAhZ,QAAA,YAAA2E,EAAA3E,QAAA,aAGA5D,KAAA0X,MAAAtL,qBAAAgP,EAAA3d,OAAAU,SAAA,gDAEA6B,KAAA0X,MAAArP,QAEArI,KAAA0X,MAAAnP,QAAAqU,EAEA5c,KAAAqM,iBAGArM,KAAA0X,MAAAtL,qBAAAgP,EAAA3d,OAAAG,SAAA,2BAEAoC,KAAA0X,MAAA1H,oBAEiB,CACjB,IAAA6M,EAAA7c,KAAA8c,YAAArY,EAAAzL,MAEA0G,GAAA,IAAAuC,WAAAC,gBAAA2a,EAAA,YAAAzF,gBACApX,KAAA+b,OAAAQ,UAAAvc,KAAA+c,WAAA7sB,KAAA8P,MAEAA,KAAA0X,MAAArG,YAAA3R,EAAA,KAAA+E,EAAAzL,QAYA8W,YAAA,SAAAH,GACA,GAAA3P,KAAA+b,QAAA/b,KAAA+b,OAAAvC,aAAAwC,UAAAgB,OAAA,CACArN,GACA3P,KAAA0X,MAAAnK,KAAAoC,GAGA,IAAAsN,EAAA5B,EAAA,SACApV,MAAAmV,EAAAjgB,GAAAY,UAGAiE,KAAA0X,MAAAvK,UAAA8P,EAAA5X,QAEA,IAAA6X,EAAA9B,EAAAhW,UAAA6X,GAEAjd,KAAA0X,MAAArK,UAAA6P,GAEA,IACAld,KAAA+b,OAAAxO,KAAA2P,GACmB,MAAAxkB,GACnB0iB,EAAAjW,KAAA,iCAIAnF,KAAA0X,MAAA1H,iBAQAA,cAAA,WACAoL,EAAAnW,MAAA,uCAEAjF,KAAA8b,gBAOAgB,YAAA,SAAA5O,GACA,kBAAAA,EAAA,cAQA4N,aAAA,WACA,GAAA9b,KAAA+b,OACA,IACA/b,KAAA+b,OAAAM,QAAA,KACArc,KAAA+b,OAAAI,QAAA,KACAnc,KAAA+b,OAAAQ,UAAA,KACAvc,KAAA+b,OAAAkB,QACmB,MAAAvkB,GACnB0iB,EAAAnW,MAAAvM,EAAA+L,SAIAzE,KAAA+b,OAAA,MASAlL,YAAA,WACA,UAQAyL,SAAA,SAAA5jB,GACAsH,KAAA0X,MAAA5N,YAAA9J,KAAA0X,MAAA3N,eACAqR,EAAApW,MAAA,iCAEAhF,KAAA0X,MAAA1H,iBACiBtX,GAAA,OAAAA,EAAAykB,OAAAnd,KAAA0X,MAAA5N,WAAA9J,KAAA+b,QAKjBX,EAAApW,MAAA,iCAEAhF,KAAA0X,MAAAtL,qBAAAgP,EAAA3d,OAAAG,SAAA,0EAEAoC,KAAA0X,MAAA1H,iBAEAoL,EAAAnW,MAAA,qBASA2M,kBAAA,SAAAlG,GACA0P,EAAApW,MAAA,6DAEAhF,KAAA0X,MAAAtL,qBAAAgP,EAAA3d,OAAAG,SAAAwd,EAAA9c,eAAAI,cAEAgN,GACAA,EAAA7c,KAAAmR,KAAA0X,OAGA1X,KAAA0X,MAAA1H,iBAQAH,qBAAA,aAKAE,kBAAA,aAQAqM,SAAA,SAAApX,GACAoW,EAAApW,MAAA,mBAAAA,GAEAhF,KAAA0X,MAAAtL,qBAAAgP,EAAA3d,OAAAG,SAAA,0EAEAoC,KAAA8P,eAQApF,QAAA,WACA,IAAA1R,EAAAgH,KAAA0X,MAAAvN,MAEA,GAAAnR,EAAApD,OAAA,IAAAoK,KAAA0X,MAAAzN,OAAA,CACA,QAAAvb,EAAA,EAAiCA,EAAAsK,EAAApD,OAAiBlH,IAClD,UAAAsK,EAAAtK,GAAA,CACA,IAAAwf,OAAA,EAGAA,EADA,YAAAlV,EAAAtK,GACAsR,KAAAyb,eAAApW,OAEArM,EAAAtK,GAGA,IAAA0uB,EAAAhC,EAAAhW,UAAA8I,GAEAlO,KAAA0X,MAAAvK,UAAAe,GAEAlO,KAAA0X,MAAArK,UAAA+P,GAEApd,KAAA+b,OAAAxO,KAAA6P,GAIApd,KAAA0X,MAAAvN,MAAA,KA2BA4S,WAAA,SAAAtY,GACA,IAAA/E,EAEAud,EAAA,wDAEA,GAAAxY,EAAAzL,OAAAikB,EASA,OARAjd,KAAA0X,MAAAtK,SAAA6P,GAEAjd,KAAA0X,MAAAxK,SAAAzI,QAEAzE,KAAA0X,MAAA3N,eACA/J,KAAA0X,MAAA1H,iBAIiB,OAAAvL,EAAAzL,KAAAqkB,OAAA,WAIjB,GAFA3d,GAAA,IAAAuC,WAAAC,gBAAAuC,EAAAzL,KAAA,YAAAoe,iBAEApX,KAAAyc,mBAAA/c,GACA,WAEiB,CACjB,IAAA1G,EAAAgH,KAAA8c,YAAArY,EAAAzL,MAEA0G,GAAA,IAAAuC,WAAAC,gBAAAlJ,EAAA,YAAAoe,gBAGA,OAAApX,KAAA2b,mBAAAjc,EAAA0b,EAAA3d,OAAAC,YAAA,EAKAsC,KAAA0X,MAAA3N,eAAA,aAAArK,EAAA4d,WAAA9a,UAAA,gBAAA9C,EAAA4d,WAAA1a,aAAA,SACA5C,KAAA0X,MAAAxK,SAAAxN,QAEAM,KAAA0X,MAAAtK,SAAAgO,EAAAhW,UAAA1F,UAOAM,KAAA0X,MAAApH,UAAA5Q,EAAA+E,EAAAzL,OAQAkjB,QAAA,WACAd,EAAAnW,MAAA,kBAEA,IAAAsY,EAAAvd,KAAAyb,eAEAzb,KAAA0X,MAAAvK,UAAAoQ,EAAAlY,QAEA,IAAAmY,EAAApC,EAAAhW,UAAAmY,GAEAvd,KAAA0X,MAAArK,UAAAmQ,GAEAxd,KAAA+b,OAAAxO,KAAAiQ,IAcA9M,WAAA,SAAAxC,GACA,OAAAA,GAQAT,MAAA,WACAzN,KAAA0X,MAAAhK,SAOAgB,aAAA,WACAf,aAAA3N,KAAA0X,MAAA/N,cAEA3J,KAAA0X,MAAAhN,QAAAxa,KAAA8P,KAAA0X,MAAA1X,KAIA/K,EAAA6F,QAAAob,EAAApb,QACA7F,EAAA2F,OAAAsb,EAAAtb,OACA3F,EAAA+F,IAAAkb,EAAAlb,IACA/F,EAAAkhB,KAAAD,EAAAC,KACAlhB,EAAAgG,MAAAib,EAAAjb,MAEAib,GAzwLwE/nB,EAAAD,QAAAD,qDCDxEO,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,6CAAAC,IAAAlvB,EAAAQ,EAAAyuB,EAAA,wCAAAE,IAAAnvB,EAAAQ,EAAAyuB,EAAA,mCAAAG,IAAApvB,EAAAQ,EAAAyuB,EAAA,+CAAAI,IAAArvB,EAAAQ,EAAAyuB,EAAA,qCAAAK,IAAAtvB,EAAAQ,EAAAyuB,EAAA,sCAAAM,IAAAvvB,EAAAQ,EAAAyuB,EAAA,sCAAAO,IAAAxvB,EAAAQ,EAAAyuB,EAAA,oCAAAQ,IAAAzvB,EAAAQ,EAAAyuB,EAAA,2CAAAtsB,IAAA3C,EAAAQ,EAAAyuB,EAAA,2CAAApsB,IAAA7C,EAAAQ,EAAAyuB,EAAA,wCAAAnsB,IAAA9C,EAAAQ,EAAAyuB,EAAA,wCAAAS,IAAA1vB,EAAAQ,EAAAyuB,EAAA,yCAAAhsB,IAAAjD,EAAAQ,EAAAyuB,EAAA,6CAAAU,IAAA3vB,EAAAQ,EAAAyuB,EAAA,iDAAAW,IAAA5vB,EAAAQ,EAAAyuB,EAAA,yCAAAY,IAAA7vB,EAAAQ,EAAAyuB,EAAA,8CAAAa,IAAA9vB,EAAAQ,EAAAyuB,EAAA,kCAAAc,IAAA/vB,EAAAQ,EAAAyuB,EAAA,2BAAAvrB,IAAA1D,EAAAQ,EAAAyuB,EAAA,uCAAAe,IAAAhwB,EAAAQ,EAAAyuB,EAAA,6CAAAgB,IAAAjwB,EAAAQ,EAAAyuB,EAAA,uCAAAiB,IAAAlwB,EAAAQ,EAAAyuB,EAAA,0CAAAkB,IAAAnwB,EAAAQ,EAAAyuB,EAAA,qCAAAprB,IAAA7D,EAAAQ,EAAAyuB,EAAA,mCAAAmB,IAAApwB,EAAAQ,EAAAyuB,EAAA,8BAAAoB,IAAArwB,EAAAQ,EAAAyuB,EAAA,6CAAAnrB,IAAA9D,EAAAQ,EAAAyuB,EAAA,oDAAAqB,IAAAtwB,EAAAQ,EAAAyuB,EAAA,gDAAAvqB,IAAA1E,EAAAQ,EAAAyuB,EAAA,iDAAAsB,IAAAvwB,EAAAQ,EAAAyuB,EAAA,+BAAAuB,IAAAxwB,EAAAQ,EAAAyuB,EAAA,yCAAApqB,IAAA7E,EAAAQ,EAAAyuB,EAAA,uCAAAwB,IAAAzwB,EAAAQ,EAAAyuB,EAAA,2CAAA/pB,IAAAlF,EAAAQ,EAAAyuB,EAAA,sDAAA7oB,IAAApG,EAAAQ,EAAAyuB,EAAA,uDAAA5oB,IAAArG,EAAAQ,EAAAyuB,EAAA,+CAAAyB,IAAA1wB,EAAAQ,EAAAyuB,EAAA,kCAAA0B,IAAA3wB,EAAAQ,EAAAyuB,EAAA,oCAAAjpB,IAAAhG,EAAAQ,EAAAyuB,EAAA,qCAAAhpB,IAAAjG,EAAAQ,EAAAyuB,EAAA,qCAAA2B,IAAA5wB,EAAAQ,EAAAyuB,EAAA,gCAAA4B,IAAA7wB,EAAAQ,EAAAyuB,EAAA,8CAAA6B,IAAA9wB,EAAAQ,EAAAyuB,EAAA,uCAAA8B,IAAA/wB,EAAAQ,EAAAyuB,EAAA,kCAAA+B,IAAAhxB,EAAAQ,EAAAyuB,EAAA,iDAAA/oB,IAAAlG,EAAAQ,EAAAyuB,EAAA,gCAAAgC,IAAAjxB,EAAAQ,EAAAyuB,EAAA,8BAAAiC,IAAAlxB,EAAAQ,EAAAyuB,EAAA,sCAAAkC,IAAAnxB,EAAAQ,EAAAyuB,EAAA,wCAAAmC,IAAApxB,EAAAQ,EAAAyuB,EAAA,qCAAAoC,IAQO,IAAMnC,EAA2B,uCAK3BC,EAAsB,iCAKtBC,EAAiB,2BAOjBC,EAA6B,sCAK7BC,EAAmB,mBAKnBC,EAAoB,oBAMpBC,EAAoB,oBAKpBC,EAAkB,kBAOlB9sB,EAAyB,mCAOzBE,EAAyB,mCAMzBC,EAAsB,gCAKtB4sB,EAAsB,+BAKtBzsB,EAAuB,gCAKvB0sB,EAA2B,6BAK3BC,EAA+B,8BAK/BC,EAAuB,gCAMvBC,EAA4B,uCAgB5BC,EAAgB,0BAMhBrsB,EAAS,oBAOTssB,EAAqB,gCAUrBC,EAA2B,mCAK3BC,EAAqB,gCAOrBC,EAAwB,mCAKxBtsB,EAAmB,6BAKnBusB,EAAiB,4BAKjBC,EAAY,uBAKZvsB,EAA2B,oCAgB3BwsB,EACP,6CAKO5rB,EACP,yCAMO6rB,EACP,0CAOOC,EAAa,uBAKb3rB,EAAuB,gCAMvB4rB,EAAqB,+BAKrBvrB,EAAyB,kCAMzBkB,EACP,2CAWOC,EACP,2CAKOqqB,EACP,wCAKOC,EAAgB,2BAKhB3qB,EAAkB,4BAKlBC,EAAmB,6BAKnB2qB,EAAmB,8BAQnBC,EAAc,wBAKdC,EAA4B,gCAO5BC,EAAqB,8BAQrBC,EAAgB,0BAQhB9qB,EACP,wCAMO+qB,EAAc,wBAKdC,EAAY,sBAKZC,EAAoB,yBAKpBC,EAAsB,2BAKtBC,EAAmB,4DCzUhC,IAAAC,EAAAtxB,EAAA,IAEeivB,EAAA,MAAIsC,qBCYnB,IAAAC,EAAaxxB,EAAQ,IACrByxB,EAAmBzxB,EAAQ,KAwB3B0xB,EAAA,GAKAC,EAAA,GAKAC,EAAAJ,EAAAK,OAAAC,MAGAnyB,EAAAD,QAAA,CAMAqyB,mBAAA,SAAAC,GACAR,EAAAO,mBAAAC,IAOAC,sBAAA,SAAAD,GACAR,EAAAS,sBAAAD,IAMAE,iBAAA,SAAAvZ,GACA6Y,EAAAU,iBAAAvZ,IAMAwZ,UAAA,SAAAzZ,EAAA0Z,EAAAzZ,GACA,IAAA0Z,EAAA,IAAAb,EAAAI,EAAAlZ,EAAA0Z,EAAAzZ,GAOA,OANAD,GACAgZ,EAAAhZ,GAAAgZ,EAAAhZ,IAAA,GACAgZ,EAAAhZ,GAAAhE,KAAA2d,IAEAV,EAAAjd,KAAA2d,GAEAA,GASAC,gBAAA,SAAAjc,EAAAqC,GAEA,IADA,IAAAvY,EAAAuY,EAAAgZ,EAAAhZ,IAAA,GAAAiZ,EACAzxB,EAAA,EAAsBA,EAAAC,EAAAiH,OAAclH,IACpCC,EAAAD,GAAAqyB,SAAAlc,IAOAmc,YAAA,SAAAnc,GACAub,EAAAvb,EAEA,IADA,IAAAnW,EAAA,EACaA,EAAAyxB,EAAAvqB,OAAoBlH,IACjCyxB,EAAAzxB,GAAAqyB,SAAAlc,GAGA,QAAAqC,KAAAgZ,EAAA,CACA,IAAAvxB,EAAAuxB,EAAAhZ,IAAA,GACA,IAAAxY,EAAA,EAAsBA,EAAAC,EAAAiH,OAAclH,IACpCC,EAAAD,GAAAqyB,SAAAlc,KAOAwb,OAAAL,EAAAK,OAIAJ,oaCnHA,IAMIgB,EANEJ,EAASK,EAAQ,GAAqBP,UAAUQ,GAWlDC,GAAoB,EAmCxB,SAASC,EAAsBla,GACvBma,IAAUC,wBAITD,IAAUE,YAAY,CACvBC,YAAata,EAAQsa,YACrBC,gBAAiBva,EAAQua,gBACzBC,SAAUxa,EAAQwa,SAClBC,UAAWza,EAAQya,UACnBC,gBAAiB1a,EAAQ0a,gBACzBC,mBAAoB3a,EAAQ2a,mBAC5BC,OAAQ5a,EAAQ4a,UAEhBlB,EAAO7b,MAAM,+CAwEN,SAASgd,EAAWC,EAAM9a,GAMrCnH,KAAKkiB,YAAc,IAAIC,IACvBniB,KAAKoiB,aAAe,IAAIC,IACxBriB,KAAKiiB,KAAOA,EACZjiB,KAAKmH,QAAUA,GAAW,GAE1BnH,KAAKsiB,4BACCtiB,KAAKmH,QAAQsa,aAAezhB,KAAKmH,QAAQua,kBAKM,IAAzCM,EAAWO,0BACnBviB,KAAKsiB,8BACLtiB,KAAKwiB,iCACCxiB,KAAKmH,QAAQqb,iCACfC,IAAQC,gBACRrB,EAAsBrhB,KAAKmH,SAjIvC,SAA0BA,GACjBia,IACDuB,IAAWC,WACPzb,EAAQ0b,iBACD,uDACK,GACE,OACItiB,EACC,kBAAM8gB,EAAsBla,KAEnDia,GAAoB,GAyHhB0B,CAAiB9iB,KAAKmH,SAGrBnH,KAAKmH,QAAQ4a,QACdlB,EAAO1b,KAAK,2BAGXnF,KAAKmH,QAAQ4b,0BACdlC,EAAO1b,KAAK,8CAUpBnF,KAAKgjB,oBAAsB,IAAIb,IAE/BH,EAAWiB,UAAUC,IAAIljB,MA/E7BgiB,EAAWlX,KAAO,SAAS3D,GACvB6a,EAAWmB,oBAAsBhc,EAAQic,mBACF,iBAA5Bjc,EAAQkc,kBACfrB,EAAWqB,gBAAkBlc,EAAQkc,iBAGE,iBAAhClc,EAAQmc,sBACftB,EAAWsB,oBAAsBnc,EAAQmc,qBAG7CtB,EAAWO,0BAA4Bpb,EAAQob,2BAuEnDP,EAAWmB,oBAAqB,EAChCnB,EAAWsB,oBAAsB,IACjCtB,EAAWqB,gBAAkB,IAC7BrB,EAAWO,2BAA4B,EACvCP,EAAWuB,UAAYA,IAEvBn0B,OAAOC,eAAe2yB,EAAY,YAAa,CAM3CzyB,IAN2C,WAWvC,OAJK0xB,IACDA,EAAa,IAAIuC,KAGdvC,KAQfe,EAAW1xB,UAAUmzB,iBAAmB,SAASC,GAC7C1jB,KAAK2jB,gBAAgBD,GAErB,IACI,IAAME,EACA,IAAIC,IACFH,EACA1B,EAAWsB,oBACXtB,EAAWqB,gBACXrjB,KAAKoiB,cAEbwB,EAASrG,MAAMyE,EAAWmB,oBAC1BnjB,KAAKkiB,YAAY4B,IAAIJ,EAAexc,GAAI0c,GAC1C,MAAOlrB,GACLmoB,EAAO7b,MAAP,iDAAA3L,OAA8DX,MAItEspB,EAAW+B,WAAa,GAExB/B,EAAWgC,gBAAkB,SAASC,EAAQvY,GAC1C,GAAKsW,EAAWmB,mBAAhB,CAGA,IAAMY,EAAa,IAAIG,IAAWD,EAAQjC,EAAWsB,oBACjD5X,GAEJ1L,KAAK+jB,WAAW7gB,KAAK6gB,GACrBA,EAAWxG,UAGfyE,EAAW1xB,UAAU6zB,sBAAwB,SAASC,GAC7CpC,EAAWmB,oBAGhBnjB,KAAKoiB,aAAaiC,GAAGC,IAA8BF,IAGvDpC,EAAW1xB,UAAUi0B,yBAA2B,SAASH,GAChDpC,EAAWmB,oBAGhBnjB,KAAKoiB,aAAaoC,eAAeF,IAA8BF,IAGnEpC,EAAW1xB,UAAUm0B,0BAA4B,SAASL,GACtDpkB,KAAKoiB,aAAaiC,GAAGC,IAAkCF,IAG3DpC,EAAW1xB,UAAUo0B,6BAA+B,SAASN,GACzDpkB,KAAKoiB,aAAaoC,eACdF,IAAkCF,IAG1CpC,EAAW1xB,UAAUq0B,2BAA6B,SAASP,GACvDpkB,KAAKoiB,aAAaiC,GAAGC,IAAmCF,IAG5DpC,EAAW1xB,UAAUs0B,8BAAgC,SAASR,GAC1DpkB,KAAKoiB,aAAaoC,eACdF,IACAF,IAGRpC,EAAW1xB,UAAUu0B,yBAA2B,SAAST,GACrDpkB,KAAKoiB,aAAaiC,GAAGC,IAAkCF,IAG3DpC,EAAW1xB,UAAUw0B,4BAA8B,SAASV,GACxDpkB,KAAKoiB,aAAaoC,eAAeF,IAC7BF,IAGRpC,EAAW1xB,UAAUy0B,QAAU,WAC3B,IAQS/kB,KAAKgjB,oBAAoBgC,MAC1BhlB,KAAKoiB,aAAa6C,KAAKX,KAT3B,IAAAY,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAWA,QAAA8kB,EAAAC,EAAwBtlB,KAAKgjB,oBAAoBuC,SAAjD91B,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA2D,KAAhDQ,EAAgDL,EAAA11B,MACvDqQ,KAAK2lB,cAAcD,EAAUE,MAZjC,MAAAvV,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAAA,IAAAU,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAcA,QAAA0lB,EAAAC,EAAoBlmB,KAAKkiB,YAAY3c,OAArC9V,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA6C,KAAlCK,EAAkCF,EAAAt2B,MACzCqQ,KAAKomB,iBAAiBD,IAf1B,MAAA9V,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAiBIhmB,KAAKoiB,cACLpiB,KAAKoiB,aAAaiE,qBAlB1B,QAqBIrE,EAAWiB,UAAUqD,OAAOtmB,QAIpCgiB,EAAWuE,eAAiB,SAAStC,GACjC,GAAKjC,EAAWmB,mBAIhB,IAAK,IAAIz0B,EAAI,EAAGA,EAAIszB,EAAW+B,WAAWnuB,OAAQlH,IAC9C,GAAIszB,EAAW+B,WAAWr1B,GAAGu1B,SAAWA,EAAQ,CACzBjC,EAAW+B,WAAW9f,OAAOvV,EAAG,GAExC,GAAG83B,OACd,QAUZxE,EAAW1xB,UAAU81B,iBAAmB,SAASD,GAC7C,IAAMvC,EAAW5jB,KAAKkiB,YAAY3yB,IAAI42B,GAElCvC,IACAA,EAAS4C,OACTxmB,KAAKkiB,YAAYoE,OAAOH,KAQhCnE,EAAW1xB,UAAUqzB,gBAAkB,SAASiC,GAC5C5lB,KAAKomB,iBAAiBR,EAAI1e,KAW9B8a,EAAW1xB,UAAUm2B,eAAiB,SAASb,EAAKc,GAChD,GAAK1mB,KAAKsiB,4BAEH,GAAItiB,KAAKgjB,oBAAoB2D,IAAIf,EAAI1e,IACxC2Z,EAAO7b,MAAM,oDADV,CAMP6b,EAAO3b,KAAP,0BAAA7L,OAAsCusB,EAAtC,QAEA,IAAMgB,EACA,IAAItF,IACFsE,EACA,CACI7D,OAAQ/hB,KAAK6mB,sBACbH,iBAGZ1mB,KAAKgjB,oBAAoBc,IAAI8B,EAAI1e,GAAI0f,KASzC5E,EAAW8E,0BAA4B,WACnC,IAAMC,EAAc,IAAIvD,IADsBwD,GAAA,EAAAC,GAAA,EAAAC,OAAA3mB,EAAA,IAG9C,QAAA4mB,EAAAC,EAAyBpF,EAAWiB,UAApCxzB,OAAA4F,cAAA2xB,GAAAG,EAAAC,EAAA5B,QAAAC,MAAAuB,GAAA,EAA+C,KAApCK,EAAoCF,EAAAx3B,MAAA23B,GAAA,EAAAC,GAAA,EAAAC,OAAAjnB,EAAA,IAC3C,QAAAknB,EAAAC,EAAiBL,EAAWrE,oBAAoBuC,SAAhD91B,OAAA4F,cAAAiyB,GAAAG,EAAAC,EAAAlC,QAAAC,MAAA6B,GAAA,EAA0D,KAA/CK,EAA+CF,EAAA93B,MACtDo3B,EAAY7D,IAAIyE,IAFuB,MAAAtX,GAAAkX,GAAA,EAAAC,EAAAnX,EAAA,YAAAiX,GAAA,MAAAI,EAAA7B,QAAA6B,EAAA7B,SAAA,WAAA0B,EAAA,MAAAC,KAHD,MAAAnX,GAAA4W,GAAA,EAAAC,EAAA7W,EAAA,YAAA2W,GAAA,MAAAI,EAAAvB,QAAAuB,EAAAvB,SAAA,WAAAoB,EAAA,MAAAC,GAS9C,OAAOH,GASX/E,EAAW1xB,UAAUu2B,oBAAsB,WAEvC,OAAO7mB,KAAKmH,QAAQ4b,yBAAb,GAAA1pB,OACE2G,KAAKmH,QAAQ4b,yBADf,KAAA1pB,OAC2C2G,KAAKmH,QAAQygB,UACzD5nB,KAAKmH,QAAQygB,UAMvB5F,EAAW1xB,UAAUq1B,cAAgB,SAASC,GAC1C,IAAMiC,EAAoB7nB,KAAKgjB,oBAAoBzzB,IAAIq2B,EAAI1e,IAEvD2gB,IAUsC,IAAlC7nB,KAAKgjB,oBAAoBgC,MACzBhlB,KAAKoiB,aAAa6C,KAAKX,KAE3BtkB,KAAKgjB,oBAAoBsD,OAAOV,EAAI1e,IAGpC2gB,EAAkBC,uBAW1B9F,EAAW1xB,UAAUy3B,mBAAqB,WACtC,OAAO/nB,KAAKsiB,6BAShBN,EAAW1xB,UAAU03B,gCAAkC,SAASpC,EAAKqC,GACjE,IAAMC,EAAWloB,KAAKgjB,oBAAoBzzB,IAAIq2B,EAAI1e,IAE9CghB,GACAA,EAASC,sBAAsBF,IAQvCjG,EAAW1xB,UAAU83B,6BAA+B,SAASxC,GACzD,IAAMsC,EAAWloB,KAAKgjB,oBAAoBzzB,IAAIq2B,EAAI1e,IAE9CghB,GACAA,EAASE,gCAUjBpG,EAAW1xB,UAAU+3B,cAAgB,SAASzC,EAAK0C,EAAOrhB,GACtD,IAAMihB,EAAWtC,GAAO5lB,KAAKgjB,oBAAoBzzB,IAAIq2B,EAAI1e,IAEzDoa,IAAU+G,cAAcC,EAAOrhB,EAAMihB,IAUzClG,EAAW1xB,UAAUi4B,uBACf,SAAShL,EAAOiL,GAAM,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAApoB,EAAA,IACpB,QAAAqoB,EAAAC,EAAiB7oB,KAAKgjB,oBAAoBuC,SAA1C91B,OAAA4F,cAAAozB,GAAAG,EAAAC,EAAArD,QAAAC,MAAAgD,GAAA,EAAoD,CAAAG,EAAAj5B,MAC7C44B,uBAAuBhL,EAAOiL,IAFjB,MAAAnY,GAAAqY,GAAA,EAAAC,EAAAtY,EAAA,YAAAoY,GAAA,MAAAI,EAAAhD,QAAAgD,EAAAhD,SAAA,WAAA6C,EAAA,MAAAC,KAW5B3G,EAAW1xB,UAAUw4B,yBAA2B,SAASC,GAAS,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAA3oB,EAAA,IAC9D,QAAA4oB,EAAAC,EAAiBppB,KAAKgjB,oBAAoBuC,SAA1C91B,OAAA4F,cAAA2zB,GAAAG,EAAAC,EAAA5D,QAAAC,MAAAuD,GAAA,EAAoD,CAAAG,EAAAx5B,MAC7Cm5B,4BAFuD,MAAAzY,GAAA4Y,GAAA,EAAAC,EAAA7Y,EAAA,YAAA2Y,GAAA,MAAAI,EAAAvD,QAAAuD,EAAAvD,SAAA,WAAAoD,EAAA,MAAAC,GAM9DlpB,KAAKiiB,KAAK6G,yBAAyBC,IAQvC/G,EAAWqH,0BAA4B,SAASC,GAC5C,IAAMC,EAAYvH,EAAW8E,4BAE7B,GAAIyC,EAAUvE,KAAM,KAAAwE,GAAA,EAAAC,GAAA,EAAAC,OAAAnpB,EAAA,IAChB,QAAAopB,EAAAC,EAAiBL,EAAjB95B,OAAA4F,cAAAm0B,GAAAG,EAAAC,EAAApE,QAAAC,MAAA+D,GAAA,EAA4B,KAAjB7B,EAAiBgC,EAAAh6B,MACxB2xB,IAAU+H,0BAA0BC,EAAa3B,IAFrC,MAAAtX,GAAAoZ,GAAA,EAAAC,EAAArZ,EAAA,YAAAmZ,GAAA,MAAAI,EAAA/D,QAAA+D,EAAA/D,SAAA,WAAA4D,EAAA,MAAAC,SAKhBpI,IAAU+H,0BAA0BC,EAAa,OAmBzDtH,EAAW1xB,UAAUu5B,4BAA8B,SAC3CjE,EACA4C,EACAsB,EACAC,EACAC,EACAC,GACJ,IAAM/B,EAAWloB,KAAKgjB,oBAAoBzzB,IAAIq2B,EAAI1e,IAE9CghB,GACAA,EAAS2B,4BACLrB,EACAsB,EACAC,EACAC,EACAC,IAWZjI,EAAWkI,uBAAyB,SAASxxB,GACzC,IAAMsM,EACAtM,aAAayxB,IA5evB,SAA2CnlB,GACvC,IAAMqL,EAAM,IAAI3Z,MAkBhB,OAfA2Z,EAAIjM,MAAQY,EAAMZ,MAGlBiM,EAAIphB,MAAQ+V,EAAM/V,MAAQ,kBAAoB+V,EAAMolB,KAAOplB,EAAMolB,IAAIplB,OAC9DA,EAAMolB,IAAIplB,MAAM/V,KADuB,MAAAoK,OACV2L,EAAMolB,IAAIplB,MAAM/V,MAAS,IAK7DohB,EAAIga,eAAiBrlB,EAAMolB,KAAOplB,EAAMolB,IAAIE,YACtCxd,KAAK8L,UAAU5T,EAAMolB,IAAIE,aAAe,GAG9Cja,EAAI5L,QAAUO,EAAMP,QAEb4L,EA0dGka,CAAkC7xB,GAAKA,EAC3C6wB,EAAYvH,EAAW8E,4BAE7B,GAAIyC,EAAUvE,KAAM,KAAAwF,GAAA,EAAAC,GAAA,EAAAC,OAAAnqB,EAAA,IAChB,QAAAoqB,EAAAC,EAAiBrB,EAAjB95B,OAAA4F,cAAAm1B,GAAAG,EAAAC,EAAApF,QAAAC,MAAA+E,GAAA,EAA4B,KAAjB7C,EAAiBgD,EAAAh7B,MACxB2xB,IAAU4I,uBAAuBllB,EAAO2iB,IAF5B,MAAAtX,GAAAoa,GAAA,EAAAC,EAAAra,EAAA,YAAAma,GAAA,MAAAI,EAAA/E,QAAA+E,EAAA/E,SAAA,WAAA4E,EAAA,MAAAC,SAKhBpJ,IAAU4I,uBAAuBllB,EAAO,OAUhDgd,EAAW1xB,UAAUu6B,sBAAwB,SAASnyB,EAAGktB,GACrD,IAAMsC,EAAWloB,KAAKgjB,oBAAoBzzB,IAAIq2B,EAAI1e,IAE9CghB,GACAA,EAAS2C,sBAAsBnyB,IAUvCspB,EAAW1xB,UAAUw6B,uBAAyB,SAASpyB,EAAGktB,GACtD,IAAMsC,EAAWloB,KAAKgjB,oBAAoBzzB,IAAIq2B,EAAI1e,IAE9CghB,GACAA,EAAS4C,uBAAuBpyB,IAUxCspB,EAAW1xB,UAAUy6B,uBAAyB,SAASryB,EAAGktB,GACtD,IAAMsC,EAAWloB,KAAKgjB,oBAAoBzzB,IAAIq2B,EAAI1e,IAE9CghB,GACAA,EAAS6C,uBAAuBryB,IAUxCspB,EAAW1xB,UAAU06B,wBAA0B,SAAStyB,EAAGktB,GACvD,IAAMsC,EAAWloB,KAAKgjB,oBAAoBzzB,IAAIq2B,EAAI1e,IAE9CghB,GACAA,EAAS8C,wBAAwBtyB,IAUzCspB,EAAW1xB,UAAU26B,0BAA4B,SAASvyB,EAAGktB,GACzD,IAAMsC,EAAWloB,KAAKgjB,oBAAoBzzB,IAAIq2B,EAAI1e,IAE9CghB,GACAA,EAAS+C,0BAA0BvyB,IAS3CspB,EAAWkJ,QAAU,SAASp8B,GAC1B,IAAMq8B,EAAe,IAAI3H,IADI4H,GAAA,EAAAC,GAAA,EAAAC,OAAA/qB,EAAA,IAO7B,QAAAgrB,EAAAC,EAAoBxJ,EAAWiB,UAA/BxzB,OAAA4F,cAAA+1B,GAAAG,EAAAC,EAAAhG,QAAAC,MAAA2F,GAAA,EAA0C,KAA/BK,EAA+BF,EAAA57B,MACtC,GAAI87B,EAAMjJ,iCACN,OAGAiJ,EAAMzI,oBAAoBgC,MAC1BmG,EAAajI,IAAIuI,EAAMzI,oBAAoBuC,SAASC,OAAO71B,QAbtC,MAAA0gB,GAAAgb,GAAA,EAAAC,EAAAjb,EAAA,YAAA+a,GAAA,MAAAI,EAAA3F,QAAA2F,EAAA3F,SAAA,WAAAwF,EAAA,MAAAC,GAiB7B,GAAIH,EAAanG,KAAM,KAAA0G,GAAA,EAAAC,GAAA,EAAAC,OAAArrB,EAAA,IACnB,QAAAsrB,EAAAC,EAAyBX,EAAzB17B,OAAA4F,cAAAq2B,GAAAG,EAAAC,EAAAtG,QAAAC,MAAAiG,GAAA,EAAuC,KAA5BK,EAA4BF,EAAAl8B,MACnC2xB,IAAU0K,mBAAmBl9B,EAAGi9B,IAFjB,MAAA1b,GAAAsb,GAAA,EAAAC,EAAAvb,EAAA,YAAAqb,GAAA,MAAAI,EAAAjG,QAAAiG,EAAAjG,SAAA,WAAA8F,EAAA,MAAAC,SAKnBtK,IAAU0K,mBAAmBl9B,EAAG,OAYxCkzB,EAAW1xB,UAAU27B,aAAe,SAASC,EAASC,GAUlD,OAPAnK,EAAWuB,UAAU6I,UACjBC,IACA,CACIC,OAAQJ,EACRC,YAGD7K,IAAU2K,aAAajsB,KAAK6mB,sBAAuBqF,EAASC,IAGvEnK,EAAWuK,UAAYrL,EAAQ,KAAsCqL,UAOrEvK,EAAWwK,kBAAoB,SAASxnB,GAChCA,aAAiBmlB,KAAmBnlB,EAAMolB,IAC1CpI,EAAWkI,uBAAuBllB,GAElCgd,EAAWkJ,QAAQlmB,IAa3Bgd,EAAWyK,oBAAsB,SAASC,GAAwB,IAO1DC,EAPyCC,EAAiBzrB,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACrDurB,GAUDC,EADiB,WAAjBx3B,EAAOu3B,GACMA,EAEA,CACTz9B,KAAMy9B,EACNE,cAIR/L,EAAOjc,IAAIkI,KAAK8L,UAAU+T,IAG1B3sB,KAAKujB,UAAU6I,UAAUM,EAAOE,IApB5B/L,EAAO1b,KAAK,kCA8BpB6c,EAAW6K,cAAgB,SAASC,GAA4B,IAAjBF,EAAiBzrB,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACxDnB,KAAKujB,UAAU6I,UAAUU,EAAWF,udC/vBxC,IAAM/L,EAASF,oBAAUQ,GAKnB4L,EAAU,CACZC,mBADY,SACOrrB,GAIf,OAAOA,EAAOA,EAAKC,QAAQ,iBAAkB,IAAMD,GAEvDsrB,UAPY,SAOFC,EAAWC,GACjB,IACIC,EAAKC,EADLr0B,EAAO,KAeX,OAZKq0B,EAAQN,EAAQO,SAASJ,EAAW,eAAgBC,MAC7CC,EACEL,EAAQO,SACNJ,EACA,aACAC,MACZn0B,EAAO,CACHq0B,MAAON,EAAQQ,cAAcF,GAC7BD,IAAKL,EAAQS,YAAYJ,KAI1Bp0B,GAEXu0B,cAzBY,SAyBE/oB,GACV,OAAOA,EAAKipB,UAAU,KAE1BC,cA5BY,SA4BEC,GACV,qBAAAt0B,OAAsBs0B,IAE1BH,YA/BY,SA+BAhpB,GACR,OAAOA,EAAKipB,UAAU,KAE1BG,YAlCY,SAkCAR,GACR,mBAAA/zB,OAAoB+zB,IAExBS,SArCY,SAqCHrpB,GACL,OAAOA,EAAKipB,UAAU,IAE1BK,WAxCY,SAwCDtpB,GACP,IAAMxL,EAAO,GACPgL,EAAQQ,EAAKipB,UAAU,GAAG1qB,MAAM,KAUtC,OARA/J,EAAK+0B,MAAQ/pB,EAAMgqB,QACnBh1B,EAAKi1B,KAAOjqB,EAAMgqB,QAClBh1B,EAAKyP,MAAQzE,EAAMgqB,QACa,KAA5BhqB,EAAMA,EAAMpO,OAAS,IACrBoO,EAAM4M,MAEV5X,EAAKk1B,IAAMlqB,EAEJhL,GAEXm1B,WAtDY,SAsDDC,GACP,WAAA/0B,OACS+0B,EAAML,MADf,KAAA10B,OACwB+0B,EAAMH,KAD9B,KAAA50B,OACsC+0B,EAAM3lB,MAD5C,KAAApP,OAEQ+0B,EAAMF,IAAI/qB,KAAK,OAE3BkrB,YA3DY,SA2DA7pB,GACR,IAAMxL,EAAO,GACTgL,EAAQQ,EAAKipB,UAAU,GAAG1qB,MAAM,KAQpC,OANA/J,EAAKkO,GAAKlD,EAAMgqB,QAChBhqB,EAAQA,EAAM,GAAGjB,MAAM,KACvB/J,EAAK/J,KAAO+U,EAAMgqB,QAClBh1B,EAAKs1B,UAAYtqB,EAAMgqB,QACvBh1B,EAAKu1B,SAAWvqB,EAAMpO,OAASoO,EAAMgqB,QAAU,IAExCh1B,GAQXw1B,aA7EY,SA6EChqB,GACT,IAAMR,EAAQQ,EAAKipB,UAAU,IAAI1qB,MAAM,KAQvC,MAAO,CAPUiB,EAAM,GACNA,EAAM,GAGHA,EAAMpO,OAAS,EAAIoO,EAAM,GAAK,OAKtDyqB,YAxFY,SAwFAvuB,GACR,IAAIsE,EAAI,YAAAnL,OACU6G,EAAG0C,aAAa,MAD1B,KAAAvJ,OACmC6G,EAAG0C,aAAa,QADnD,KAAAvJ,OAEA6G,EAAG0C,aAAa,cAOxB,OALI1C,EAAG0C,aAAa,aACmB,MAAhC1C,EAAG0C,aAAa,cACnB4B,GAAI,IAAAnL,OAAQ6G,EAAG0C,aAAa,cAGzB4B,GAEXkqB,YApGY,SAoGAlqB,GACR,IAAMxL,EAAO,GACPgL,EAAQQ,EAAKipB,UAAU,GAAG1qB,MAAM,KAStC,OAPA/J,EAAKoE,IAAM4G,EAAMgqB,QACjBh1B,EAAK,gBAAkBgL,EAAMgqB,QAC7Bh1B,EAAK,cAAgBgL,EAAMgqB,QACvBhqB,EAAMpO,SACNoD,EAAK,kBAAoBgL,EAAMb,KAAK,MAGjCnK,GAEX21B,iBAjHY,SAiHKnqB,GACb,IAAMxL,EAAO,GACPgL,EAAQQ,EAAKipB,UAAU,IAAI1qB,MAAM,KAMvC,OAJA/J,EAAKd,KAAO8L,EAAMgqB,QAClBh1B,EAAK41B,YAAc5qB,EAAMgqB,QAGlBh1B,GAEX61B,UA3HY,SA2HFrqB,GACN,IAAMxL,EAAO,GACTgL,EAAQQ,EAAKzB,MAAM,KAEvBiB,EAAMgqB,QACNhqB,EAAQA,EAAMb,KAAK,KAAKJ,MAAM,KAC9B,IAAK,IAAIrU,EAAI,EAAGA,EAAIsV,EAAMpO,OAAQlH,IAAK,CAGnC,IAFA,IAAIuB,EAAM+T,EAAMtV,GAAGqU,MAAM,KAAK,GAEvB9S,EAAI2F,QAAqB,MAAX3F,EAAI,IACrBA,EAAMA,EAAIw9B,UAAU,GAExB,IAAM99B,EAAQqU,EAAMtV,GAAGqU,MAAM,KAAK,GAE9B9S,GAAON,EACPqJ,EAAKkK,KAAK,CAAEjU,KAAMgB,EACdN,UACGM,GAEP+I,EAAKkK,KAAK,CAAEjU,KAAM,GACdU,MAAOM,IAInB,OAAO+I,GAEX81B,kBArJY,SAqJMtqB,GACd,IAAMuqB,EAAY,GACZC,EAAQxqB,EAAKzB,MAAM,KAEzBgsB,EAAUE,WAAaD,EAAM,GAAGvB,UAAU,IAC1CsB,EAAUG,UAAYF,EAAM,GAC5BD,EAAUrmB,SAAWsmB,EAAM,GAAGrsB,cAC9BosB,EAAUhd,SAAWid,EAAM,GAC3BD,EAAUI,GAAKH,EAAM,GACrBD,EAAUd,KAAOe,EAAM,GAGvBD,EAAU9nB,KAAO+nB,EAAM,GACvBD,EAAUK,WAAa,EACvB,IAAK,IAAI1gC,EAAI,EAAGA,EAAIsgC,EAAMp5B,OAAQlH,GAAK,EACnC,OAAQsgC,EAAMtgC,IACd,IAAK,QACDqgC,EAAU,YAAcC,EAAMtgC,EAAI,GAClC,MACJ,IAAK,QACDqgC,EAAU,YAAcC,EAAMtgC,EAAI,GAClC,MACJ,IAAK,aACDqgC,EAAUK,WAAaJ,EAAMtgC,EAAI,GACjC,MACJ,IAAK,UACDqgC,EAAUM,QAAUL,EAAMtgC,EAAI,GAC9B,MACJ,QACImyB,EAAOjc,IAAP,sCAAAvL,OAEQ21B,EAAMtgC,GAFd,SAAA2K,OAEwB21B,EAAMtgC,EAAI,GAFlC,MAWR,OANAqgC,EAAUO,QAAU,IAIpBP,EAAU7nB,GAAKoE,KAAKC,SAASxV,SAAS,IAAIwf,OAAO,EAAG,IAE7CwZ,GAEXQ,kBA/LY,SA+LMC,GACd,IAAIhrB,EAAO,gBAAAnL,OACQm2B,EAAKP,YACpBO,EAAKN,UACLM,EAAK9mB,SACL8mB,EAAKzd,SACLyd,EAAKL,GACLK,EAAKvB,KACL,MACAuB,EAAKvoB,MACP9D,KAAK,KAGP,OADAqB,GAAQ,IACAgrB,EAAKvoB,MACb,IAAK,QACL,IAAK,QACL,IAAK,QACGuoB,EAAKC,gBAAgB,aACdD,EAAKC,gBAAgB,cAC5BjrB,GAAQ,QACRA,GAAQ,IACRA,GAAQgrB,EAAK,YACbhrB,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQgrB,EAAK,YACbhrB,GAAQ,KAchB,OAVIgrB,EAAKC,gBAAgB,aACrBjrB,GAAQ,UACRA,GAAQ,IACRA,GAAQgrB,EAAKH,QACb7qB,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQgrB,EAAKC,gBAAgB,cAAgBD,EAAKJ,WAAa,KAInEM,UAzOY,SAyOFC,GAON,IAHA,IAAM32B,EAAO,IAAImpB,IACXyN,EAAQD,EAAK5sB,MAAM,QAEhBrU,EAAI,EAAGA,EAAIkhC,EAAMh6B,OAAQlH,IAC9B,GAAiC,YAA7BkhC,EAAMlhC,GAAG++B,UAAU,EAAG,GAAkB,CAExC,IAAMjF,EAAOoH,EAAMlhC,GAAGqU,MAAM,WAAW,GAAGA,MAAM,KAAK,GAEhD/J,EAAKzJ,IAAIi5B,IACVxvB,EAAK8qB,IAAI0E,EAAM,IAGnBxvB,EAAKzJ,IAAIi5B,GAAMtlB,KAAK0sB,EAAMlhC,IAIlC,OAAOsK,GAEX62B,YA/PY,SA+PArrB,GACR,IAAMR,EAAQQ,EAAK+Q,OAAO,IAAIxS,MAAM,KAC9B/J,EAAO,GAMb,OAJAA,EAAK82B,GAAK9rB,EAAMgqB,QAChBh1B,EAAKiO,KAAOjD,EAAMgqB,QAClBh1B,EAAK+2B,OAAS/rB,EAEPhL,GAEXg3B,YAzQY,SAyQAxrB,GACR,IAAMR,EAAQQ,EAAK+Q,OAAO,GAAGxS,MAAM,KAC7B/J,EAAO,GAYb,OAVAA,EAAKrJ,MAAQqU,EAAMgqB,SACc,IAA7Bh1B,EAAKrJ,MAAMiU,QAAQ,KACnB5K,EAAKi3B,UAAY,QAEjBj3B,EAAKi3B,UAAYj3B,EAAKrJ,MAAM4lB,OAAOvc,EAAKrJ,MAAMiU,QAAQ,KAAO,GAC7D5K,EAAKrJ,MAAQqJ,EAAKrJ,MAAM4lB,OAAO,EAAGvc,EAAKrJ,MAAMiU,QAAQ,OAEzD5K,EAAKk3B,IAAMlsB,EAAMgqB,QACjBh1B,EAAK+2B,OAAS/rB,EAEPhL,GAEXs0B,SAzRY,SAyRH6C,EAAUC,EAAQC,GAGvB,IAFA,IAAIT,EAAQO,EAASptB,MAAM,QAElBrU,EAAI,EAAGA,EAAIkhC,EAAMh6B,OAAQlH,IAC9B,GAAIkhC,EAAMlhC,GAAG++B,UAAU,EAAG2C,EAAOx6B,UAAYw6B,EACzC,OAAOR,EAAMlhC,GAGrB,IAAK2hC,EACD,OAAO,EAIXT,EAAQS,EAAYttB,MAAM,QAC1B,IAAK,IAAIxK,EAAI,EAAGA,EAAIq3B,EAAMh6B,OAAQ2C,IAC9B,GAAIq3B,EAAMr3B,GAAGk1B,UAAU,EAAG2C,EAAOx6B,UAAYw6B,EACzC,OAAOR,EAAMr3B,GAIrB,OAAO,GAEX+3B,UA/SY,SA+SFH,EAAUC,EAAQC,GAIxB,IAHA,IAAIT,EAAQO,EAASptB,MAAM,QACrBwtB,EAAU,GAEP7hC,EAAI,EAAGA,EAAIkhC,EAAMh6B,OAAQlH,IAC1BkhC,EAAMlhC,GAAG++B,UAAU,EAAG2C,EAAOx6B,UAAYw6B,GACzCG,EAAQrtB,KAAK0sB,EAAMlhC,IAG3B,GAAI6hC,EAAQ36B,SAAWy6B,EACnB,OAAOE,EAIXX,EAAQS,EAAYttB,MAAM,QAC1B,IAAK,IAAIxK,EAAI,EAAGA,EAAIq3B,EAAMh6B,OAAQ2C,IAC1Bq3B,EAAMr3B,GAAGk1B,UAAU,EAAG2C,EAAOx6B,UAAYw6B,GACzCG,EAAQrtB,KAAK0sB,EAAMr3B,IAI3B,OAAOg4B,GAEXC,kBAtUY,SAsUMhsB,GAKd,GAAmC,IAA/BA,EAAKZ,QAAQ,cAEbY,EAAI,KAAAnL,OAAQmL,QACT,GAA8B,iBAA1BA,EAAKipB,UAAU,EAAG,IAMzB,OALA5M,EAAOjc,IACH,kEAEJic,EAAOjc,IAAIJ,GAEJ,KAE6B,SAApCA,EAAKipB,UAAUjpB,EAAK5O,OAAS,KAE7B4O,EAAOA,EAAKipB,UAAU,EAAGjpB,EAAK5O,OAAS,IAE3C,IAAMm5B,EAAY,GACZC,EAAQxqB,EAAKzB,MAAM,KAEzB,GAAiB,QAAbisB,EAAM,GAIN,OAHAnO,EAAOjc,IAAI,uCACXic,EAAOjc,IAAIJ,GAEJ,KAEXuqB,EAAUE,WAAaD,EAAM,GAAGvB,UAAU,IAC1CsB,EAAUG,UAAYF,EAAM,GAC5BD,EAAUrmB,SAAWsmB,EAAM,GAAGrsB,cAC9BosB,EAAUhd,SAAWid,EAAM,GAC3BD,EAAUI,GAAKH,EAAM,GACrBD,EAAUd,KAAOe,EAAM,GAGvBD,EAAU9nB,KAAO+nB,EAAM,GAEvBD,EAAUK,WAAa,IACvB,IAAK,IAAI1gC,EAAI,EAAGA,EAAIsgC,EAAMp5B,OAAQlH,GAAK,EACnC,OAAQsgC,EAAMtgC,IACd,IAAK,QACDqgC,EAAU,YAAcC,EAAMtgC,EAAI,GAClC,MACJ,IAAK,QACDqgC,EAAU,YAAcC,EAAMtgC,EAAI,GAClC,MACJ,IAAK,aACDqgC,EAAUK,WAAaJ,EAAMtgC,EAAI,GACjC,MACJ,IAAK,UACDqgC,EAAUM,QAAUL,EAAMtgC,EAAI,GAC9B,MACJ,QACImyB,EAAOjc,IAAP,oBAAAvL,OAA+B21B,EAAMtgC,GAArC,SAAA2K,OAA+C21B,EAAMtgC,EAAI,GAAzD,MASR,OANAqgC,EAAUO,QAAU,IAIpBP,EAAU7nB,GAAKoE,KAAKC,SAASxV,SAAS,IAAIwf,OAAO,EAAG,IAE7CwZ,GAEX0B,oBAxYY,SAwYQjB,GAChB,IAAIhrB,EAAO,eAEXA,GAAQgrB,EAAK5sB,aAAa,cAC1B4B,GAAQ,IACRA,GAAQgrB,EAAK5sB,aAAa,aAC1B4B,GAAQ,IAER,IAAIkE,EAAW8mB,EAAK5sB,aAAa,YAmBjC,OAfI6f,IAAQiO,aAA0C,WAA3BhoB,EAAS/F,gBAChC+F,EAAW,OAGflE,GAAQkE,EACRlE,GAAQ,IACRA,GAAQgrB,EAAK5sB,aAAa,YAC1B4B,GAAQ,IACRA,GAAQgrB,EAAK5sB,aAAa,MAC1B4B,GAAQ,IACRA,GAAQgrB,EAAK5sB,aAAa,QAC1B4B,GAAQ,IACRA,GAAQ,MACRA,GAAI,IAAAnL,OAAQm2B,EAAK5sB,aAAa,SAC9B4B,GAAQ,IACAgrB,EAAK5sB,aAAa,SAC1B,IAAK,QACL,IAAK,QACL,IAAK,QACG4sB,EAAK5sB,aAAa,aACX4sB,EAAK5sB,aAAa,cACzB4B,GAAQ,QACRA,GAAQ,IACRA,GAAQgrB,EAAK5sB,aAAa,YAC1B4B,GAAQ,IACRA,GAAQ,QACRA,GAAQ,IACRA,GAAQgrB,EAAK5sB,aAAa,YAC1B4B,GAAQ,KAchB,MAV+B,QAA3BkE,EAAS/F,gBACT6B,GAAQ,UACRA,GAAQ,IACRA,GAAQgrB,EAAK5sB,aAAa,WAC1B4B,GAAQ,KAEZA,GAAQ,aACRA,GAAQ,IACRA,GAAQgrB,EAAK5sB,aAAa,eAAiB,IAE3C,GAAAvJ,OAAUmL,EAAV,SAQJmsB,sBAtcY,SAscUC,GAClB,IAAMC,EAAWD,EAAWE,MACvBtrB,IAAI,SAAAurB,GAAQ,OAAIA,EAAS7pB,KACzB8pB,OAAO,SAACxI,EAAMyI,EAAOC,GAAd,OAAwBA,EAAMttB,QAAQ4kB,KAAUyI,IACvDr7B,OACCu7B,EACCP,EAAWQ,YAAcR,EAAWQ,WAAWx7B,QAAW,EAEjE,KAAIi7B,EAAW,GAAmB,IAAdM,GAApB,CAIA,IAAIE,EAAc,KAElB,GAAiB,IAAbR,EACAQ,EAAcT,EAAWE,MAAM,GAAG5pB,QAC/B,GAAiB,IAAb2pB,EAAgB,CAEvB,IAAMS,EACAV,EAAWQ,WAAWG,KACpB,SAAAC,GAAK,MAAwB,QAApBA,EAAMC,YAEnBH,IACAD,EAAcC,EAASR,MAAM/tB,MAAM,KAAK,SAEzC,GAAI8tB,GAAY,EAAG,CAEtB,IAAMa,EACAd,EAAWQ,WAAWG,KACpB,SAAAC,GAAK,MAAwB,QAApBA,EAAMC,YAEnBC,IACAL,EAAcK,EAASZ,MAAM/tB,MAAM,KAAK,IAIhD,OAAOsuB,IAOXM,aAjfY,WAkfR,OAAOC,IAAWC,UAAU,EAAG,aAYnCC,iBA9fY,SA8fKC,EAAOvJ,EAAMwJ,GAC1B,IAAK,IAAItjC,EAAI,EAAGA,EAAIqjC,EAAMjB,MAAMl7B,SAAUlH,EAAG,CACzC,IAAMujC,EAAWF,EAAMjB,MAAMpiC,GAE7B,GAAIujC,EAAS/qB,KAAOshB,GACbyJ,EAAS30B,YAAc00B,EAC1B,OAAOC,EAAStiC,QAa5BuiC,gBAjhBY,SAihBIC,GACZ,OAAOA,EACFrB,MACA/tB,MAAM,KACNyC,IAAI,SAAA4sB,GAAO,OAAItZ,SAASsZ,EAAS,OAS1CC,SA9hBY,SA8hBHC,EAAKrrB,GACV,OAAOqrB,EAAIvE,MAAMwD,KAAK,SAAAziC,GAAC,OAAIA,EAAEmY,OAASA,KAO1CsrB,SAtiBY,SAsiBHD,GACL,IAAME,EACAF,EAAIvvB,MAAM,MAAMiuB,OAAO,SAAAxsB,GAAI,OAAIA,EAAKiuB,WAAW,kBAErD,GAAID,EAAW58B,OAAS,EACpB,OAAO48B,EAAW,GAAGjd,OAAO,eAAe3f,SAenD88B,iBA1jBY,SA0jBK9B,EAAY+B,GACzB,IAAIC,EAAc,KAElB,GAAKhC,GAAe+B,EAApB,CAIA,IAAK,IAAIjkC,EAAI,EAAGA,EAAIkiC,EAAWiC,IAAIj9B,SAAUlH,EAAG,CAC5C,IAAMmkC,EAAMjC,EAAWiC,IAAInkC,GAE3B,GAAImkC,EAAIC,OACDD,EAAIC,MAAMnwB,gBAAkBgwB,EAAUhwB,cAAe,CACxDiwB,EAAcC,EAAIE,QAClB,OAGR,GAAIH,EAAa,CAIb,IAAMI,EACApC,EAAWqC,SACRl9B,WACAgN,MAAM,KACNyC,IAAI,SAAAhV,GAAC,OAAIsoB,SAAStoB,EAAG,MACxB0iC,EAAeF,EAAapvB,QAAQgvB,GAE1CI,EAAa/uB,OAAOivB,EAAc,GAClCF,EAAaG,QAAQP,GACrBhC,EAAWqC,SAAWD,EAAa7vB,KAAK,QAahDiwB,gBApmBY,SAomBIxC,EAAY+B,GACxB,GAAK/B,GAAe+B,EAApB,CAIA,IAAMU,EAAY,GALiBnO,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAOnC,QAAA8kB,EAAAC,EAAkBsL,EAAWiC,IAA7BpjC,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAkC,KAAvB2N,EAAuBxN,EAAA11B,MAC1BkjC,EAAIC,OACDD,EAAIC,MAAMnwB,gBAAkBgwB,EAAUhwB,eACzC0wB,EAAUnwB,KAAK2vB,EAAIE,UAVQ,MAAA1iB,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAcnC,GAAIiO,EAAUz9B,OAAS,EAAG,CAGtB,IAAM09B,EAAUD,EAAU7tB,IAAI,SAAA+tB,GAAI,aAAAl6B,OAAWk6B,KACvCC,EAAS5C,EAAW6C,KAAKzC,OAC3B,SAAAuC,GAAI,OAAsC,IAAlCD,EAAQ1vB,QAAQ2vB,EAAKG,UAEjCL,EAAUnwB,KAAVywB,MAAAN,EAAS99B,EAASi+B,EAAOhuB,IAAI,SAAA+tB,GAAI,OAAIA,EAAKR,YAK1C,IAIMa,EAJShD,EAAWqC,SACrBl9B,WACAgN,MAAM,KACNyC,IAAIuU,QACciX,OAAO,SAAAlB,GAAE,OAA+B,IAA3BuD,EAAUzvB,QAAQksB,KAE/B,IAAnB8D,EAAQh+B,QAERg7B,EAAW3C,KAAO,EAClB2C,EAAWX,UAAY,WACvBW,EAAWqC,SAAW,KAEtBrC,EAAWqC,SAAWW,EAAQzwB,KAAK,KAGvCytB,EAAWiC,IAAMjC,EAAWiC,IAAI7B,OAC5B,SAAAuC,GAAI,OAAuC,IAAnCK,EAAQhwB,QAAQ2vB,EAAKR,WACjCnC,EAAW6C,KAAO7C,EAAW6C,KAAKzC,OAC9B,SAAAuC,GAAI,OAAuC,IAAnCK,EAAQhwB,QAAQ2vB,EAAKR,WAC7BnC,EAAWiD,SACXjD,EAAWiD,OAASjD,EAAWiD,OAAO7C,OAClC,SAAAuC,GAAI,OAAuC,IAAnCK,EAAQhwB,QAAQ2vB,EAAKR,gBAMlChG,uyDCnoBR,IAAM+G,EAAmB,cAMnBC,EAAY,OAMZC,EAAa,QAMbC,EAAU,KAOVC,EAAwB,UAOxBC,EAA2B,yBAO3BC,EAA4B,4BAQ5BC,EAA2B,2BAO3BC,EAA0B,YAO1BC,EACP,6BAOOC,EACP,4BAOOC,EAAsB,UAOtBC,EAAyB,cAMzBC,EAAoB,SAOpBC,EAA2B,gBAuB3BC,EAAmB,mBAYnBC,EAA0B,0BAS1BzI,EAAW,WAgBX0I,EAAe,eAWfC,EACP,kCAgBOC,EAAoB,oBAQpBC,EAAgB,sBAUhBC,EAAgB,gBAMhBC,EAAwB,WAGjC,MAAO,CACHC,OAHe,cAIfC,cAJe,cAKfruB,KAAM6sB,IAUDyB,EACP,SAASC,EAAWC,EAAcC,GAChC,MAAO,CACHzuB,KAAM6sB,EACNuB,OAAQ,oBACR/4B,WAAUq5B,EAAA,CACNC,WAAcJ,EACdK,cAAiBJ,GACdC,KAYZ,SAASI,EAAsBT,EAAQ/4B,GAC1C,MAAO,CACH+4B,SACA/4B,aACAy5B,OAAQ,aACR9uB,KAAM6sB,GAeP,IAAMkC,EAAoC,SAASC,EAAO35B,GAC7D,IAAM+4B,EAAS,2BAEf,MAAO,CACHA,SACAC,cAAeW,EACf35B,aACAy5B,OAAQV,EACRpuB,KAAM6sB,IAWDoC,EAAoB,SAASC,EAAeC,EAAQC,GAO7D,MAAO,CACH/5B,WAPe,CACfg6B,eAAkBH,EAClBC,SACAC,OAKApnC,KAAM,UACNgY,KAAM6sB,IAODyC,EAAuB,WAGhC,MAAO,CACHlB,OAHW,aAIXC,cAJW,aAKXruB,KAAM6sB,IAYD0C,EAA0B,SAASnB,GAAyB,IAAjB/4B,EAAiB6E,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACjE,MAAO,CACH8F,KAAM6sB,EACNiC,OAAQ,iBACRV,SACA/4B,eAUKm6B,EAAyC,WAA0B,IAAjBn6B,EAAiB6E,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAGxE,MAAO,CACH8F,KAAM6sB,EACNiC,OAAQ,mBACRV,OALW,WAMX/4B,eASKo6B,EAAoB,SAASrB,GAAyB,IAAjB/4B,EAAiB6E,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAC3D,MAAO,CACH8F,KAAM6sB,EACNuB,SACAU,OAAQ,SACRz5B,eAWKq6B,EAA8B,SAASC,EAAWjnC,GAC3D,MAAO,CACH2M,WAAY,CACRu6B,WAAcD,EACdjnC,SAEJ0lC,OAAQ,4BACRpuB,KAAM6sB,IASDgD,EAAiB,SAASzB,GAAyB,IAAjB/4B,EAAiB6E,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACxD,MAAO,CACH8F,KAAM6sB,EACNuB,SACAU,OAAQ,MACRz5B,eAOKy6B,EAA2B,WACpC,MAAO,CACH9vB,KAAM6sB,EACNuB,OAAQ,mBA+CH2B,EAAsB,SAAS16B,GACxC,MAAO,CACH2K,KAAM6sB,EACNuB,OAAQ,YACR/4B,eAWK26B,EAAyB,SAAS36B,GAC3C,MAAO,CACH2K,KAAM6sB,EACNuB,OAAQ,gBACR/4B,eAWK46B,EAA4B,SAAS56B,GAC9C,MAAO,CACH2K,KAAM6sB,EACNuB,OAAQ,kBACR/4B,eAYD,SAAS66B,EAA8BC,EAAQC,EAAkBC,GACpE,MAAO,CACHrwB,KAAM6sB,EACNuB,OAAQ,uBACR/4B,WAAY,CACR86B,SACAC,mBACAC,sBAYL,IAAMC,EAAiC,SAASpa,EAAMzN,GACzD,MAAO,CACHzI,KAAM6sB,EACNuB,OAAQ,uBACR/4B,WAAY,CACR6gB,OACAzN,YAoBC8nB,EAAkB,SAASl7B,GACpC,OAAO05B,EAAkC,OAAQ15B,mBC5crDnO,EAAOD,QAxGW,CAIdupC,qBAAsB,2BAKtBC,oBAAqB,0BACrBC,kBAAmB,wBACnBC,6BAA8B,mCAC9BzZ,yBAA0B,+BAC1B0Z,uBAAwB,6BAOxBC,oBAAqB,0BAErBC,oBAAqB,yBAOrBC,oBAAqB,0BAQrBC,yBAA0B,+BAE1BC,eAAgB,qBAMhBC,mBAAoB,yBAIpBC,kBAAmB,wBAMnBC,qBAAsB,2BAItBC,oBAAqB,0BAKrBC,6BAA8B,mCAK9BC,8BAA+B,oCAC/BC,4BAA6B,kCAC7BC,oBAAqB,0BAKrBC,wBAAyB,8BACzBC,sBAAuB,4BAMvBta,0BAA2B,gCAS3Bua,oBAAqB,0BASrBC,qBAAsB,0DCrG1BtqC,EAAAQ,EAAAyuB,EAAA,sBAAAsb,IAAAvqC,EAAAQ,EAAAyuB,EAAA,sBAAAub,IAAAxqC,EAAAQ,EAAAyuB,EAAA,sBAAAwb,IAGO,IAAMF,EAAQ,QAKRC,EAAY,YAKZC,EAAQ,i8CCWrB,IAAMpY,EAASF,oBAAUQ,GAKrBsB,IAAQyW,eACRhY,EAAQ,KAGZ,IA8DIiY,EACAC,EA/DEhX,EAAe,IAAIC,IAenBgX,EAA0B,CAAE,QAAS,SAOrCC,EAAsB,CACxBC,MAAO,CACHC,OAAQ,CACJC,MAAO,IACPC,IAAK,IACLze,IAAK,OAQX0e,EAAwB,EAI1BC,EAAsB,UAEtBC,GAAqB,EAGrBC,GAAY,EAGZC,GAAa,EAGbC,GAAY,EAGZC,GAAa,EAGbC,GAAa,EAEXC,EAA0Bz/B,SAASmG,cAAc,SACjDu5B,OAC6C,IAAtCD,EAAwBE,UAyErC,SAASC,EAAeC,GAAkB,IAAdpzB,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAC5BmpB,EAAc,CAChBkQ,OAAO,EACPjB,OAAO,GAULkB,EACAhY,IAAQiO,aACHjO,IAAQiY,mBACRjY,IAAQC,gBAEnB,GAAI6X,EAAG32B,QAAQ,UAAY,EAAG,CAK1B,GAHA0mB,EAAYiP,MAAQ,CAAEoB,UAAW,GAC7BC,SAAU,IAEVzzB,EAAQ0zB,eACJJ,IAEAnQ,EAAYiP,MAAMuB,SAAW3zB,EAAQ0zB,gBAIzCvQ,EAAYiP,MAAMoB,UAAUI,SAAW5zB,EAAQ0zB,mBAC5C,CAMH,IAAMG,EAAa7zB,EAAQ6zB,YAAcC,IAAiBC,KAEtDT,IACAnQ,EAAYiP,MAAMyB,WAAaA,GAEnC1Q,EAAYiP,MAAMqB,SAAS13B,KAAK,CAC5B83B,gBAIJ7zB,EAAQg0B,QAAUh0B,EAAQi0B,QAAUj0B,EAAQk0B,QAGxCl0B,EAAQg0B,QAAUh0B,EAAQk0B,OAE1Bl0B,EAAQg0B,OAASh0B,EAAQg0B,QAAUh0B,EAAQk0B,IAC3C/Q,EAAYiP,MAAMoB,UAAUW,aAAen0B,EAAQg0B,QAEnDh0B,EAAQi0B,SACR9Q,EAAYiP,MAAMoB,UAAUY,aAAep0B,EAAQi0B,SAvGnE,SACQ9Q,EACAmQ,EACAe,GACAC,IAAYD,KACRf,IACAnQ,EAAYiP,MAAMmC,MAAQ,CACtBjC,MAAOgC,IAAYD,GAAYE,OAEnCpR,EAAYiP,MAAMC,OAAS,CACvBC,MAAOgC,IAAYD,GAAYhC,SAIvClP,EAAYiP,MAAMoB,UAAUgB,SAAWF,IAAYD,GAAYE,MAC/DpR,EAAYiP,MAAMoB,UAAUiB,UAAYH,IAAYD,GAAYhC,QAGhElP,EAAYiP,MAAMoB,UAAUgB,WAC5BrR,EAAYiP,MAAMoB,UAAUkB,SACtBvR,EAAYiP,MAAMoB,UAAUgB,UAGlCrR,EAAYiP,MAAMoB,UAAUiB,YAC5BtR,EAAYiP,MAAMoB,UAAUmB,UACtBxR,EAAYiP,MAAMoB,UAAUiB,WAkFlCG,CACIzR,EAAamQ,EAAgCtzB,EAAQq0B,YA+C7D,GA7CIjB,EAAG32B,QAAQ,UAAY,IACnB6e,IAAQC,gBAGR4H,EAAYkQ,OAAQ,EACb/X,IAAQiO,YACXvpB,EAAQ60B,YACR1R,EAAYkQ,MAAQ,CAChBG,UAAW,GACXG,SAAU3zB,EAAQ60B,YAClBpB,SAAU,CAAE,CACRG,SAAU5zB,EAAQ60B,eAG1B1R,EAAYkQ,OAAQ,GAIxBlQ,EAAYkQ,MAAQ,CAAEG,UAAW,GAC7BC,SAAU,IACVzzB,EAAQ60B,cACJvB,IAEAnQ,EAAYkQ,MAAMM,SAAW3zB,EAAQ60B,aAIzC1R,EAAYkQ,MAAMI,SAAS13B,KAAK,CAC5B63B,SAAU5zB,EAAQ60B,eAK1B1R,EAAYkQ,MAAMI,SAAS13B,KACvB,CAAE+4B,kBAAmBlC,IAAeD,GACpC,CAAEoC,sBAAuBnC,IAAeD,GACxC,CAAEqC,qBAAsBlC,IAAeH,GACvC,CAAEsC,sBAAuBpC,IAAcF,GACvC,CAAEuC,oBAAqBnC,IAAeJ,GACtC,CAAEwC,uBAAwBtC,IAAcF,GACxC,CAAEyC,uBAAwBxC,IAAeD,GACzC,CAAE0C,sBAAuBvC,IAAeH,MAIhDS,EAAG32B,QAAQ,WAAa,EACxB,GAAI6e,IAAQga,WACRnS,EAAYiP,MAAQ,CAChBoB,UAAW+B,EAAgB/G,EAAA,GACpBxuB,EADoB,CAEvB4uB,OAAQ,YAEZ6E,SAAU,SAGX,GAAInY,IAAQiO,YACfpG,EAAYiP,MAAQ,CAChBoD,eAAgB,SAChBC,YAAa,SACbC,UAAW11B,EAAQ01B,WAAa,CAC5B5hB,IAAK0e,EACLD,IAAKC,QAIV,CACH,IAAMmD,EACA,uEAGNC,IAAqBC,iBAAiB,IAAItmC,MAAMomC,IAChDjc,EAAO7b,MAAM83B,GAgDrB,OA7CIvC,EAAG32B,QAAQ,YAAc,IACzB0mB,EAAYiP,MAAQ,CAChBoB,UAAW+B,EAAgB/G,EAAA,GACpBxuB,EADoB,CAEvB4uB,OAAQ,aAEZ6E,SAAU,IAKVnY,IAAQwa,cAAgB91B,EAAQ+1B,kBAC5B/1B,EAAQg2B,cAAcv5B,QAAQ,WAAa,IAK/C0mB,EAAYkQ,MAAQ,CAAEG,UAAW,CAC7ByC,kBAAmB9S,EAAYiP,MAAMoB,UAAUyC,2BAG5C9S,EAAYiP,MAAMoB,UAAU0C,sBAIvCl2B,EAAQm2B,YACHhT,EAAYiP,QAEbjP,EAAYiP,MAAQ,CAAEoB,UAAW,GAC7BC,SAAU,KAElBtQ,EAAYiP,MAAMqB,SAAS13B,KAAK,CAAEo6B,UAAWn2B,EAAQm2B,aAOrD7a,IAAQiO,aAAevpB,EAAQo2B,sBAI/BjT,EAAYkT,MAAO,GAGhBlT,EAuGX,SAASoS,IAA+B,IAAdv1B,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAE5Bg8B,EAKAh2B,EALAg2B,cAFgCM,EAOhCt2B,EAJA01B,iBAHgC,IAAAY,EAGpB,CACRxiB,IAAK0e,EACLD,IAAKC,GALuB8D,EAQ5B/D,EAAamD,EAAbnD,IAAKze,EAAQ4hB,EAAR5hB,IAEPqP,EAAc,CAChB8S,kBAAmBj2B,EAAQ4uB,OAC3B8F,SAAUvtC,OAAOovC,OAAOhC,MACxBI,UAAWxtC,OAAOovC,OAAOlE,QAe7B,MAZmB,iBAARve,IACPqP,EAAYgR,aAAergB,GAGZ,iBAARye,IACPpP,EAAYiR,aAAe7B,QAGF,IAAlByD,IACP7S,EAAY+S,oBAAsBF,GAG/B7S,EASX,SAASqT,IAAoC,IAAdx2B,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAI/BmpB,EAAc,CAChBuS,UAAWlD,GAEPiE,EAA4Bz2B,EAA5By2B,wBAMR,OAJIA,GAA2BA,EAAwBlE,MACnDpP,EAAYuS,UAAYe,EAAwBlE,KAG7CpP,EASX,SAASuT,EAAyBtD,EAAItW,GAClC,IAAM6Z,EACAC,QAAQ9Z,IAAWA,EAAO+Z,iBAAiBpoC,OAAS,EACpDqoC,EACAF,QAAQ9Z,IAAWA,EAAOia,iBAAiBtoC,OAAS,EACpDuoC,EAAqB,IAEE,IAAzB5D,EAAG32B,QAAQ,WACXu6B,EAAmB5E,MAAQ0E,IAEF,IAAzB1D,EAAG32B,QAAQ,WACXu6B,EAAmB3D,MAAQsD,GAG/B1b,EAAa6C,KAAKmZ,IAAUtG,oBAAqBqG,GA4CrD,SAASE,EAA0BC,GAC/B,IAAMC,EACAD,EAAWtN,OAAO,SAAAhiC,GAAC,MAAe,eAAXA,EAAEwvC,OAAuB5oC,OAChD6oC,EACAH,EAAWtN,OAAO,SAAAhiC,GAAC,MAAe,gBAAXA,EAAEwvC,OAAwB5oC,OACjD8oC,EACAJ,EAAWtN,OAAO,SAAAhiC,GAAC,MAAe,eAAXA,EAAEwvC,OAAuB5oC,OAChD+oC,EACAL,EAAWtN,OAAO,SAAAhiC,GAAC,MAAe,gBAAXA,EAAEwvC,OAAwB5oC,OAEvD0oC,EAAWhvB,QAAQ,SAAAsvB,GACf,IAAMtiC,EAAa,CACfuiC,yBAA4BN,EAC5BO,0BAA6BL,EAC7BM,yBAA4BL,EAC5BM,0BAA6BL,EAC7BM,UAAaL,EAAO9D,SACpBoE,gBAAmBN,EAAOO,QAC1BC,YAAeR,EAAOJ,KACtBa,aAAgBT,EAAOU,OAG3Btd,IAAW6K,cAAcgI,IAAkBv4B,SAs9B7CijC,EAAW,gBAjzBb,SAAAC,IAAc,mGAAAC,CAAAz/B,KAAAw/B,GAAAE,EAAA1/B,KAAA2/B,EAAAH,GAAA3wC,KAAAmR,KACJoiB,0PALSwd,6CAiBA,IAAAj4B,EAAA3H,KAAdmH,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GA4BX,GA3BkC,kBAAvBgG,EAAQ4yB,aACfA,EAAa5yB,EAAQ4yB,WACrBlZ,EAAO3b,KAAP,gBAAA7L,OAA4B0gC,KAEC,kBAAtB5yB,EAAQ6yB,YACfA,EAAY7yB,EAAQ6yB,UACpBnZ,EAAO3b,KAAP,eAAA7L,OAA2B2gC,KAEE,kBAAtB7yB,EAAQ2yB,YACfA,EAAY3yB,EAAQ2yB,UACpBjZ,EAAO3b,KAAP,eAAA7L,OAA2BygC,KAEG,kBAAvB3yB,EAAQ8yB,aACfA,EAAa9yB,EAAQ8yB,WACrBpZ,EAAO3b,KAAP,gBAAA7L,OAA4B4gC,KAEE,kBAAvB9yB,EAAQ+yB,aACfA,EAAa/yB,EAAQ+yB,WACrBrZ,EAAO3b,KAAP,gBAAA7L,OAA4B6gC,KAGhCf,OAAmB54B,EACnBjS,OAAOuxC,cAAczG,GACrBA,OAA4B74B,EAE5BP,KAAK8/B,iBAlrBb,WACI,GAAIC,UAAUC,cAAgBD,UAAUC,aAAaF,iBACjD,OAAO,SAAAp0B,GACHq0B,UAAUC,aAAaF,mBAClBG,KAAKv0B,EAAU,kBAAMA,EAAS,OA8qBfw0B,GAEpBzd,IAAQ0d,iBACRngC,KAAKogC,sBAAwBC,kBAE7BrgC,KAAKsgC,kBACCC,EAAsB,SAAC9xB,EAASwV,GAC1BxV,IACAA,EAAQ+xB,UAAYvc,KAIhCjkB,KAAKygC,YAAc,SAAAC,GAAA,OAAAA,EAAGx5B,IACtBlH,KAAK2gC,WAAa,SAAAC,GAAA,OAAAA,EAAG15B,QAClB,KAAIub,IAAQoe,oBACRpe,IAAQC,gBAmCZ,CACH,IAAMje,EAAU,gDAGhB,MADAoc,EAAO7b,MAAMP,GACP,IAAI/N,MAAM+N,GArChBzE,KAAKogC,sBAAwBC,kBAE7BrgC,KAAKsgC,kBACCC,EAAsB,SAAC9xB,EAASwV,GAG9B,OApGpB,SAA4BxV,EAASwV,GAEjC,IAeI6c,EAfAC,EAAwB,YAEtBA,KAAyBtyB,IAC3BsyB,EAAwB,kBACOtyB,IAC3BsyB,EAAwB,MAG5BA,EACAtyB,EAAQsyB,GAAyB9c,GAQjCA,KACA6c,EAAM7c,EAAO+c,kBAKT/c,EAAO+c,eAAiBF,EAAMG,IAAIC,gBAAgBjd,KAG1DxV,EAAQqyB,IAAMA,GAAO,IAsELK,CAAmB1yB,EAASwV,GAErBxV,IAGfzO,KAAKygC,YAAc,SAAAW,GAAiB,IAANl6B,EAAMk6B,EAANl6B,GAO1B,MACkB,iBAAPA,EACDA,EACA6lB,IAAQC,mBAAmB9lB,IAEzClH,KAAK2gC,WAAa,SAAAU,GAAA,OAAAA,EAAGn6B,IAEhBo6B,YAAYhxC,UAAU4tC,iBACvBoD,YAAYhxC,UAAU4tC,eAAiB,WACnC,OAAOl+B,KAAKuhC,cAGfD,YAAYhxC,UAAU0tC,iBACvBsD,YAAYhxC,UAAU0tC,eAAiB,WACnC,OAAOh+B,KAAKwhC,cAUxBxhC,KAAKyhC,mBAAmBt6B,GAExBu6B,IAAe52B,KACX3D,EACAnH,KAAK2hC,4BAA4BzxC,KAAK8P,OAEtCA,KAAK4hC,yBACL5hC,KAAK8/B,iBAAiB,SAAA+B,GAClB1I,EAAmB0I,EAAG59B,OAAO,GAE7B4c,EAAO5b,MAAM,sBAAuBk0B,GACpCkF,EAA0BlF,GAE1B/W,EAAa6C,KACTmZ,IAAUxF,sBACVO,GAQJ,IAAM2I,EAAqB,kBAAMn6B,EAAKm4B,iBAAiB,SAAAiC,GAlRvE,IAAmCC,GApEnC,SAAsCC,GAClC,OAAIA,EAAWrsC,SAAWujC,EAAiBvjC,QAOvCqsC,EAAWz8B,IAAI08B,GAAuB5gC,OAAO6B,KAAK,MAC1Cg2B,EACC3zB,IAAI08B,GAAuB5gC,OAAO6B,KAAK,IAQpD,SAAS++B,EAAsBh9B,GAC3B,OAAO4H,KAAK8L,UAAU,CAClB4lB,KAAMt5B,EAAKs5B,KACX1D,SAAU51B,EAAK41B,SACfqE,QAASj6B,EAAKi6B,QACdG,MAAOp6B,EAAKo6B,MACZ6C,OAAQj9B,EAAKi9B,WA+TDC,CAA6BL,KAlRjD5I,GAD+B6I,EAoReD,GAnRXM,MAAM,GACzCxhB,EAAO3b,KACH,qCACAi0B,GAEJkF,EAA0BlF,GAG1B/W,EAAa6C,KAAKmZ,IAAUzF,wBAAyBqJ,GAErD5f,EAAa6C,KAAKmZ,IAAU1F,oBAAqBsJ,OA6QjCvf,IAAQ6f,4BACRvC,UAAUC,aAAauC,iBACnB,eACAT,GAIJ1I,EAA4B9qC,OAAOk0C,YAC/BV,EAr1BqB,kDAy2BtB36B,GACXsb,IAAQiO,YACR1wB,KAAKyiC,cAAgB,IACdhgB,IAAQoe,mBAAqBpe,IAAQC,mBAC5C1iB,KAAKyiC,cAAgB,CAAE7H,SAAU,CAC7B,CAAE8H,qBAAsB,GACxB,CAAEC,oBAAoB,GACtB,CAAEC,yBAA0B,KAC5B,CAAEC,yBAAyB,GAC3B,CAAEC,2BAA2B,GAC7B,CAAEC,yBAA0B,IAC5B,CAAEC,wBAAyB,MAG3B77B,EAAQ87B,SAERjjC,KAAKyiC,cAAc7H,SAAS13B,KAAK,CAAEggC,UAAU,IAGjDljC,KAAKmjC,iBACCr2B,KAAK4L,MAAM5L,KAAK8L,UAAU5Y,KAAKyiC,iBAGzCziC,KAAKmjC,iBAAmBnjC,KAAKmjC,kBAAoBnjC,KAAKyiC,kEAsB9BlI,GAAkB,IAAdpzB,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAChCmpB,EAAcgQ,EAAeC,EAAIpzB,GAIvC,OAFA0Z,EAAO3b,KAAK,wBAAyBolB,GAE9B,IAAI8Y,QAAQ,SAACC,EAASC,GACzBvD,UAAUC,aAAauD,aAAajZ,GACnC2V,KAAK,SAAAhc,GACFpD,EAAOjc,IAAI,sBACXi5B,EAAyBtD,EAAItW,GAC7Bof,EAAQpf,KAEXuf,MAAM,SAAAx+B,GACH6b,EAAO1b,KAAK,4CAAA9L,OACF2L,EADE,KAAA3L,OACOixB,EADP,MAEZuT,EAAyBtD,OAAIh6B,GAC7B+iC,EAAO,IAAInZ,IAAgBnlB,EAAOslB,EAAaiQ,gEAa3BkJ,GAA6B,IAAlBnZ,EAAkBnpB,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACrD,OAAO,IAAIiiC,QAAQ,SAACC,EAASC,GACzBvD,UAAUC,aAAauD,aAAajZ,GAC/B2V,KAAK,SAAAhc,GACFpD,EAAOjc,IAAI,sBACXi5B,EAAyB4F,EAAWxf,GACpCof,EAAQpf,KAEXuf,MAAM,SAAAx+B,GACH6b,EAAO1b,KAAK,4CAAA9L,OACF2L,EADE,KAAA3L,OACOixB,EADP,MAEZuT,EAAyB4F,OAAWljC,GACpC+iC,EAAO,IAAInZ,IAAgBnlB,EAAOslB,EAAamZ,oDAoB3Ct8B,GAAS,IAAAqB,EAAAxI,KACzB,OAAK0hC,IAAegC,eAAkBjhB,IAAQkhB,gBAKvC,IAAIP,QAAQ,SAACC,EAASC,GACzB5B,IAAekC,aACXp7B,EAAKq7B,4BAA4B18B,GACjC,SAAA8c,GACIof,EAAQpf,IAEZ,SAAAjf,GACIs+B,EAAOt+B,OAXRo+B,QAAQE,OACX,IAAI5sC,MAAM,+FA6BuB,IAAdyQ,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAMrC,OALAgG,EAAQ28B,QAAU38B,EAAQ28B,SAAgBzK,EAAxBhgC,SAClB8N,EAAQq0B,WAAar0B,EAAQq0B,YA9+BF,IAg/BDr0B,EAAQ28B,QAAQC,SAAS,aAEzBrC,IAAegC,cAC9BN,QAAQE,OACX,IAAI5sC,MAAM,sCAGXsJ,KAAKgkC,yBAAyB78B,GAAS84B,KAAK,SAAAgE,GAAO,OArblE,SAA2BA,EAASzI,GAChC,IAAI0I,EAAa/G,EAAegH,EAC1BC,EAAM,GAQZ,GAAIH,EAAS,CAIT,IAAMI,EAAaJ,EAAQI,WAE3B,GAAIA,EAAY,CACZ,IAAM7C,EAAc6C,EAAWrG,iBAE/B,GAAIwD,EAAY5rC,OAAQ,CACpBsuC,EAAc,IAAI5C,YAClB,IAAK,IAAI5yC,EAAI,EAAGA,EAAI8yC,EAAY5rC,OAAQlH,IACpCw1C,EAAYI,SAAS9C,EAAY9yC,IAIzC,IAAM6yC,EAAc8C,EAAWnG,iBAE/B,GAAIqD,EAAY3rC,OAAQ,CACpBuuC,EAAc,IAAI7C,YAClB,IAAK,IAAI/oC,EAAI,EAAGA,EAAIgpC,EAAY3rC,OAAQ2C,IACpC4rC,EAAYG,SAAS/C,EAAYhpC,UAOzC2rC,EAAcD,EAAQzJ,MACtB2J,EAAcF,EAAQ1K,MAG1B4D,EAAgB8G,EAAQM,QAG5B,GAAIpH,EAAe,KAAAqH,EAC0BrH,EAAjClZ,EADOugB,EACPvgB,OAAQ8W,EADDyJ,EACCzJ,SAAU0J,EADXD,EACWC,WAE1BL,EAAIlhC,KAAK,CACL+gB,SACA8W,WACA0J,aACAC,MAAOzgB,EAAOia,iBAAiB,GAC/BtH,UAAW+N,IACXC,UAAWC,IAAUC,UAqB7B,OAlBIZ,GACAE,EAAIlhC,KAAK,CACL+gB,OAAQigB,EACRQ,MAAOR,EAAYlG,iBAAiB,GACpCpH,UAAW+N,IACXC,UAAW,OAGfT,GACAC,EAAIlhC,KAAK,CACL+gB,OAAQkgB,EACRO,MAAOP,EAAYjG,iBAAiB,GACpCtH,UAAW+N,IACXC,UAAWC,IAAUE,OACrBvJ,eAID4I,EA2WCY,CAAkBf,EAAS98B,EAAQq0B,+DAYlBr0B,GAAS,IAAA4G,EAAA/N,KACxBilC,EAAoB99B,EAAQ28B,QAAQC,SAAS,WASnD,OAPA58B,EAAQ28B,QAAU38B,EAAQ28B,QAAQ9S,OAAO,SAAA4N,GAAM,MAChC,YAAXA,KAEez3B,EAAQ28B,QAAQluC,OAC7BoK,KAAK2hC,4BAA4Bx6B,EAAQ28B,QAAS38B,GAClDi8B,QAAQC,QAAQ,OAGjBpD,KAAK,SAAAiF,GAKF,IAAMC,EACAp3B,EAAKq3B,kBAAkBj+B,EAAQ28B,QAASoB,GAE9C,OAAIC,EAAcvvC,QACdmY,EAAKs3B,gBAAgBH,GAEdn3B,EAAK4zB,4BACRwD,EAAeh+B,GAId84B,KAAK,kBAAMmD,QAAQE,OAAO,IAAInZ,IAC3B,CAAEl7B,KAAM,gBACRqrC,EAAenzB,EAAQ28B,QAAS38B,GAChCg+B,OAGLD,IAEVjF,KAAK,SAAAoE,GACF,IAAKY,EACD,MAAO,CAAEZ,cAGb,GAAIl9B,EAAQm+B,2BAGR,MAFAv3B,EAAKs3B,gBAAgBhB,GAEf,IAAI3tC,MAAM,yEAIpB,OAAO,IAAI0sC,QAAQ,SAACC,EAASC,GACzB5B,IAAekC,aACX71B,EAAK81B,4BAA4B18B,GACjC,SAAAo9B,GAAO,OAAIlB,EAAQ,CACfgB,aACAE,aAEJ,SAAAv/B,GACQq/B,GACAt2B,EAAKs3B,gBAAgBhB,GAEzBf,EAAOt+B,qDAiBkB,IAA/BugC,EAA+BpkC,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAZ,GAAI8iB,EAAQ9iB,UAAAvL,OAAA,EAAAuL,UAAA,QAAAZ,EACvCilC,EAAiB,GAEjBC,EAAuBF,EAAiBxB,SAAS,SACjDjG,EACA7Z,GAAUA,EAAO+Z,iBAAiBpoC,OAAS,EAE7C6vC,IAAyB3H,GACzB0H,EAAetiC,KAAK,SAGxB,IAAMwiC,EAAuBH,EAAiBxB,SAAS,SACjD9F,EACAha,GAAUA,EAAOia,iBAAiBtoC,OAAS,EAMjD,OAJI8vC,IAAyBzH,GACzBuH,EAAetiC,KAAK,SAGjBsiC,sDAUiBr+B,GACxB,OAAAwuB,EAAA,GACOxuB,EAAQw+B,4CADf,CAEIC,sBAAuBz+B,EAAQy+B,sBAC/BC,WAAY,CACRhJ,UAAW11B,EAAQy2B,yBAEvBkI,aAAcnI,EAAsBx2B,+DAsBVA,GAAS,IAAAoH,EAAAvO,KACvC6gB,EAAO3b,KAAK,0BAEZ,IAAM6gC,EAAuB,GAYvBC,EAA4B,WAK9B,MAFwC,KAFtB7+B,EAAQ28B,SAAW,IAErBlgC,QAAQ,YAGpB,OAAOw/B,QAAQC,UANsB,IAUrCsC,EAIAx+B,EAJAw+B,4CACAL,EAGAn+B,EAHAm+B,2BACAM,EAEAz+B,EAFAy+B,sBACAhI,EACAz2B,EADAy2B,wBAKJ,GAAI0H,EAA4B,CAC5B,IAAMW,EACA9M,GAAoBA,EAAiB5H,KAAK,SAAAqN,GAAM,MAC9B,eAAhBA,EAAOJ,OACCI,EAAO9D,WAAawK,GACrB1G,EAAOU,QAAUgG,KAEhC,IAAKW,EACD,OAAO7C,QAAQE,OAAO,IAAInZ,IACtB,CAAEl7B,KAAM,+BACR,GACA,CAAEq2C,KAIV,IAf4BY,EAoBtBlmC,KAAK6jC,4BAA4B18B,GAD/B0+B,EAnBoBK,EAmBpBL,WAAYC,EAnBQI,EAmBRJ,aAGdxb,EAAc,CAChBiP,MAAK5D,EAAA,GACEkQ,EADF,CAED/K,SAAUmL,EAAenL,YAIjC,OAAO96B,KAAKmmC,gCAda,CAAE,SAeL7b,GACjB2V,KAAK,SAAAhc,GACF,IAAMygB,EAAQzgB,GAAUA,EAAOmiB,YAAY,GAM3C,OAJM1B,GAASA,EAAM2B,iBACX3B,EAAM2B,iBAAiBP,GACvB1C,QAAQC,WAGbpD,KAAK,WACF,MAAO,CACHwE,WAAY,SACZxgB,cAMxB,OAAOjkB,KAAKsmC,oBAAoB,CAC5BX,8CACAC,wBACAhI,6BAEN1tC,KAAK8P,MAqDDumC,EAA6B,WAC/B,IACMC,GADYr/B,EAAQ28B,SAAW,CAAE,QAAS,UACN9S,OAAO,SAAA4N,GAAM,MACxC,UAAXA,GACe,UAAXA,GAAsBnc,IAAQkhB,kBAEtC,IAAK6C,EAAwB5wC,OACzB,OAAOwtC,QAAQC,UAGnB,IAAM/Y,EAn9BlB,WAAkD,IAAvBiQ,EAAuBp5B,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAlB,GAAIgG,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAGpCmpB,EAAcxd,KAAK4L,MAAM5L,KAAK8L,UAChCzR,EAAQmjB,aAAegP,IAE3B,GAAIiB,EAAG32B,QAAQ,UAAY,EAKvB,GAJK0mB,EAAYiP,QACbjP,EAAYiP,MAAQ,IAGpBpyB,EAAQ0zB,eACRvQ,EAAYiP,MAAMuB,SAAW3zB,EAAQ0zB,mBAClC,CACH,IAAMG,EAAa7zB,EAAQ6zB,YAAcC,IAAiBC,KAE1D5Q,EAAYiP,MAAMyB,WAAaA,OAGnC1Q,EAAYiP,OAAQ,EA8CxB,OA3CIgB,EAAG32B,QAAQ,UAAY,GAClB0mB,EAAYkQ,OAAsC,kBAAtBlQ,EAAYkQ,QACzClQ,EAAYkQ,MAAQ,IASnBlQ,EAAYkQ,MAAMI,WACnBtQ,EAAYkQ,MAAMI,SAAW,IAGjCtQ,EAAYkQ,MAAMI,SAAS13B,KACvB,CAAE63B,SAAU5zB,EAAQ60B,aACpB,CAAEC,kBAAmBlC,IAAeD,GACpC,CAAEoC,sBAAuBnC,IAAeD,GACxC,CAAEqC,qBAAsBlC,IAAeH,GACvC,CAAEsC,sBAAuBpC,IAAcF,GACvC,CAAEuC,oBAAqBnC,IAAeJ,GACtC,CAAEwC,uBAAwBtC,IAAcF,GACxC,CAAEyC,uBAAwBxC,IAAeD,GACzC,CAAE0C,sBAAuBvC,IAAeH,KAG5CxP,EAAYkQ,OAAQ,EAGpBD,EAAG32B,QAAQ,YAAc,IACpB0mB,EAAYiP,OAAsC,kBAAtBjP,EAAYiP,QACzCjP,EAAYiP,MAAQ,IAGxBjP,EAAYiP,MAAQ,CAChBoB,UAAW+B,EAAgB/G,EAAA,GACpBxuB,EADoB,CAEvB4uB,OAAQ,eAKbzL,EAk5BqBmc,CAChBD,EAAyBr/B,GAI7B,OAFA0Z,EAAO3b,KAAK,0BAA2BolB,GAEhCtqB,KAAKmmC,gCACRK,EAAyBlc,IAC/Bp6B,KAAK8P,MA0CP,OAAOgmC,IACF/F,KAtGiC,SAAS9C,GAC3C,GAAKA,EAAL,CAD0D,IAKlDlZ,EAAiCkZ,EAAjClZ,OAAQ8W,EAAyBoC,EAAzBpC,SAAU0J,EAAetH,EAAfsH,WAEpBiC,EAAqBziB,EAAO+Z,iBAElC,GAAI0I,EAAmB9wC,OAAQ,CAC3B,IAAM+wC,EAAqB,IAAIrF,YAAYoF,GAE3CX,EAAqB7iC,KAAK,CACtB+gB,OAAQ0iB,EACR5L,WACA0J,aACAC,MAAOiC,EAAmB3I,iBAAiB,KAInD,IAAM4I,EAAqB3iB,EAAOia,iBAElC,GAAI0I,EAAmBhxC,OAAQ,CAC3B,IAAMixC,EAAqB,IAAIvF,YAAYsF,GAE3Cb,EAAqB7iC,KAAK,CACtB+gB,OAAQ4iB,EACR9L,WACA0J,aACAC,MAAOmC,EAAmB3I,iBAAiB,GAC3C0G,UAAWC,IAAUC,cAyE5B7E,KAAKsG,GACLtG,KAlC6B,SAASiF,GACvC,GAAKA,EAAL,CAIA,IAAM1D,EAAc0D,EAASlH,iBAE7B,GAAIwD,EAAY5rC,OAAQ,CACpB,IAAMsuC,EAAc,IAAI5C,YAAYE,GAEpCuE,EAAqB7iC,KAAK,CACtB+gB,OAAQigB,EACRQ,MAAOR,EAAYlG,iBAAiB,GACpC8I,QAAS3/B,EAAQ2/B,UAIzB,IAAMvF,EAAc2D,EAAShH,iBAE7B,GAAIqD,EAAY3rC,OAAQ,CACpB,IAAMuuC,EAAc,IAAI7C,YAAYC,GAEpCwE,EAAqB7iC,KAAK,CACtB+gB,OAAQkgB,EACRO,MAAOP,EAAYjG,iBAAiB,GACpC0G,UAAWC,IAAUE,OACrB+B,QAAS3/B,EAAQ2/B,cASxB7G,KAAK,kBAAM8F,IACXvC,MAAM,SAAAx+B,GAKH,OAJA+gC,EAAqBz2B,QAAQ,SAAAy3B,GAAgB,IAAb9iB,EAAa8iB,EAAb9iB,OAC5B1V,EAAK82B,gBAAgBphB,KAGlBmf,QAAQE,OAAOt+B,qDAW9B,OAAO+4B,QACHgC,UAAUC,cACHD,UAAUC,aAAaF,kEAUdkH,GACpB,MAAsB,WAAfA,GAA0C,gBAAfA,EAC5B5M,GACC3X,IAAQiY,0DAQHuM,GACZ,GAAKA,EAAL,CAIAA,EAAYb,YAAY92B,QAAQ,SAAAo1B,GACxBA,EAAMle,MACNke,EAAMle,SAKVygB,EAAYzgB,MACZygB,EAAYzgB,OAMZygB,EAAYC,SACZD,EAAYC,UAIhB,IAAMC,EAAMF,EAAYjG,eAEpBmG,WACOF,EAAYjG,eACnBC,IAAImG,gBAAgBD,uDASxB,OAAOzF,IAAegC,2DAWL5I,GACjB,OAAK96B,KAAKqnC,wBAAwB,UAK3BlN,EAAwBE,UAAUS,GACpCmF,KAAK,WACFrG,EAAsBkB,EACtBjB,GAAqB,EAErBhZ,EAAOjc,IAAP,8BAAAvL,OAAyCyhC,IAEzC1Y,EAAa6C,KAAKmZ,IAAU3F,4BACxBqC,KAZDsI,QAAQE,OACX,IAAI5sC,MAAM,+FAqBlB,OAAOkjC,8DASP,OAAOT,sDAOiByF,GACxB,IAAMN,EAAa,GACbgJ,EAAa,CACfxM,SAAY8D,EAAO9D,SACnB0D,KAAQI,EAAOJ,KACfc,MAASV,EAAOU,MAChBH,QAAWP,EAAOO,SAKtB,OAFAb,EAAWp7B,KAAKokC,GAET,CAAEhJ,sDAWGhU,EAAaid,GACpBjd,EAAYsQ,WACbtQ,EAAYsQ,SAAW,IAK3BtQ,EAAYsQ,SACNtQ,EAAYsQ,SAAS5J,OACnB,SAAAjiC,GAAC,OAAKA,EAAEwB,eAAe,gCAE3Bg3C,GACAjd,EAAYsQ,SAAS13B,KAAK,CAAEskC,2BAA4B,+CAapE,SAASjH,EAAsBkH,GAC3B,OAAO,SAASh5B,EAASwV,GAErB,IAAMmgB,EAAMqD,EAAsB9T,MAAM4L,EAAUp+B,WA4BlD,OA1BI8iB,GACOsb,EAAS8H,wBAAwB,WACjCpjB,EAAO+Z,gBACP/Z,EAAO+Z,iBAAiBpoC,QAGxBikC,GACPprB,EAAQ4rB,UAAUkF,EAASmI,wBACtBlE,MAAM,SAASmE,GACZ,IAAMt3B,EACA,IAAI8Z,IAAgBwd,EAAI,KAAM,CAAE,gBAEtC5K,IAAqB6K,8BAA8B,CAC/CC,QAAS7nC,KACT0P,OAAQW,IAGZwQ,EAAO1b,KACH,sGAGAsJ,EACA4B,KAIT+zB,GAIA7E,4DCpkDf,IAAMp2B,EAAW,GAGX2+B,EAAoBx5C,OAAO6tB,QAYjC,IAAM4rB,EAA0Bz5C,OAAO05C,qBAYvC15C,OAAO6tB,QAlBP,WAA0C,QAAA8rB,EAAA9mC,UAAAvL,OAANsyC,EAAM,IAAAzyC,MAAAwyC,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,GAAAhnC,UAAAgnC,GACtCh/B,EAASmG,QAAQ,SAAA/K,GAAO,OAAIA,EAAOovB,WAAP,EAAWuU,KACvCJ,GAAqBA,EAAiBnU,WAAjB,EAAqBuU,IAiB9C55C,OAAO05C,qBAPP,SAAuCtb,GACnCvjB,EAASmG,QAAQ,SAAA/K,GAAO,OAAIA,EAAQ,KAAM,KAAM,KAAM,KAAMmoB,EAAMhd,UAClEq4B,GAA2BA,EAAwBrb,IAOvD,IAAMqQ,EAAuB,CAKzB9uB,WALyB,SAKd1J,GACP4E,EAASjG,KAAKqB,IAOlBy4B,iBAbyB,SAaRh4B,GACb,IAAMojC,EAAa95C,OAAO6tB,QAErBisB,GAGLA,EAAW,KAAM,KAAM,KAAM,KAAMpjC,IAOvC4iC,8BA1ByB,SA0BK5iC,GAC1B,IAAMojC,EAAa95C,OAAO05C,qBAErBI,GAGLA,EAAWpjC,KAKnB7W,EAAOD,QAAU6uC,ijCC5DjB,IAAMlc,EAASF,oBAAUQ,GAMrBknB,EAA0B,EAO1BC,EAAoB,EAOxB,SAASC,EAAkBC,EAAYrhC,GACnC,IAAMshC,EAAY,GACd3N,EAAW,KAoBf,OAlBA0N,EAAWl5B,QAAQ,SAAAo5B,GACXA,EAAU9R,YAAc+N,IACxB7J,EAAW3zB,EAAQ60B,YACZ0M,EAAU9D,YAAcC,IAAUE,SACzCjK,EAAW3zB,EAAQ0zB,gBAEvByN,EAAoBK,YAAqBL,GACzC,IAAMM,EAAa,IAAIC,sUAAJlT,CAAA,GACZ+S,EADY,CAEf5N,WACAE,WAAY7zB,EAAQ6zB,WACpB8N,MAAOR,EACPxB,QAAS3/B,EAAQ2/B,WAGrB2B,EAAUvlC,KAAK0lC,KAGZH,EAkBX,SAASM,IACL,OADqD5nC,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,IACtBqE,IAAI,SAAAwjC,GAAY,IAEnCjO,EAMAiO,EANAjO,SACA0J,EAKAuE,EALAvE,WACAxgB,EAIA+kB,EAJA/kB,OACAygB,EAGAsE,EAHAtE,MACAE,EAEAoE,EAFApE,UACAkC,EACAkC,EADAlC,QAPmCmC,EAUNvE,EAAMwE,cAA/BpO,EAV+BmO,EAU/BnO,SAAUE,EAVqBiO,EAUrBjO,WAOlB,OAFAsN,EAAoBK,YAAqBL,GAElC,IAAIO,IAAgB,CACvB/N,WACAE,aACApE,UAAW8N,EAAMlG,KACjBsK,MAAOR,EACPvN,WACA0J,aACAxgB,SACAygB,QACAE,UAAWA,GAAa,KACxBkC,kBAQSqC,cAMjB,SAAAA,EAAYC,GAA0B,IAAAzhC,MAAdR,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAAI,mGAAAs+B,CAAAz/B,KAAAmpC,KAClCnpC,MAAA2H,MAAAg4B,EAAAwJ,GAAAt6C,KAAAmR,sDACKopC,WAAaA,EAMlBzhC,EAAK0hC,gBAAkB,IAAIlnB,IAE3Bxa,EAAK2hC,YAAc,GAEnB3hC,EAAKR,QAAUA,EAKfQ,EAAK4hC,SAAW,KAQhB5hC,EAAK6hC,cAAe,EAUpB7hC,EAAK8hC,QAAU,EAQf9hC,EAAK+hC,gBAAkB,KASvB/hC,EAAKgiC,qBAAkBppC,EAQvBoH,EAAKiiC,gBAAkB,KAQvBjiC,EAAKkiC,mBAAqB,GAG1BliC,EAAKmiC,qBAAuBniC,EAAKoiC,gBAAgB75C,KAArB85C,IAAAriC,KAE5BA,EAAKsiC,qBAAuBtiC,EAAKsiC,qBAAqB/5C,KAA1B85C,IAAAriC,KAC5BA,EAAKuiC,iCACCviC,EAAKuiC,iCAAiCh6C,KAAtC85C,IAAAriC,KAIF63B,IAAS6H,wBAAwB,YACjC7H,IAAS2K,YACL/L,IAAU3F,4BACV9wB,EAAKuiC,kCAGT1K,IAAS2K,YACL/L,IAAU1F,oBACV/wB,EAAKsiC,uBAvFqBtiC,wPANTi4B,0DAsID4I,GACxB,OAAOO,EAAsBP,0DAYKrhC,GAClC,IAAMg5B,EAAiB1d,IAAQ0d,iBAK/B,OAJ2BA,EACrBX,IAAS4K,kCAAkCjjC,GAC3Cq4B,IAAS6K,+BAA+BljC,IAEpB84B,KAAK,SAAAuI,GAC3B,OAAIrI,GACGh5B,EAAQ8c,SACPukB,EAAa,CAAC,CACVvkB,OAAQ9c,EAAQ8c,OAChBygB,MAAOv9B,EAAQ8c,OAAOia,iBAAiB,GACvC0G,UAAW,UACX7J,SAAU,YAGlBh2B,QAAQH,IAAI,uBAAuB4jC,GAC5BO,EAAsBP,IAE1BD,EAAkBC,EAAYrhC,yCAkL1BmjC,EAAWlmB,GAC1Bob,IAAS2K,YAAYG,EAAWlmB,0CAQdkmB,EAAWlmB,GAC7Bob,IAAShb,eAAe8lB,EAAWlmB,kCAOb,IAAdjd,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAGlB,OAFAnB,KAAKmH,QAAUA,EAERq4B,IAAS10B,KAAK9K,KAAKmH,kDAgONojC,GACpB,IAAM9H,EACA8H,EAAQ/K,IAAS2D,iBAAmB3D,IAASiD,cAEnD,OAAKA,EAIE31B,KAAK4L,MAAM5L,KAAK8L,UAAU6pB,IAHtB,6CAWU+H,EAAYvmB,GACjC,OAAOub,IAASc,kBAAkBkK,EAAYvmB,uCAO/BA,GACf,OAAOub,IAASiB,YAAYxc,sCAOdygB,GACd,OAAOlF,IAASmB,WAAW+D,mDAQ3B,OAAOlF,IAASoC,wEAUWoF,GAC3B,OAAOxH,IAAS6H,wBAAwBL,+CAYxC,OAAOvkB,IAAQihB,6DASf,OAAOlE,IAASkI,mFAShB,OAAOlI,IAASiL,wFAOe7L,GAC/B,OAAOY,IAASkL,4BAA4B9L,gDAUpB9D,GACxB,OAAO0E,IAASmL,qBAAqB7P,wCAerB7W,GAChB,OAAOklB,EAAIyB,iBAAiBpL,IAASiB,YAAYxc,6CAe7B4mB,GACpB,OAAOA,GAAyB,iBAAbA,GACC,YAAbA,2CAQan/B,GACpB8zB,IAASM,iBAAiBp0B,2CAQPu7B,GACnBzH,IAAS6F,gBAAgB4B,qDAQzB,OAAOzH,IAASsL,iEApoBhBtL,IAAShb,eACL4Z,IAAU3F,4BACVz4B,KAAKkqC,kCAGT1K,IAAShb,eACL4Z,IAAU1F,oBACV14B,KAAKiqC,sBAGTjqC,KAAKwkB,eACD4Z,IAAUvG,uBACV73B,KAAK8pC,sBAGL9pC,KAAK+qC,sBACL/qC,KAAKwkB,eACD4Z,IAAUzG,kBACV33B,KAAK+qC,sEAwDOrnB,EAAgBsnB,GAAO,IAAAxiC,EAAAxI,KAC3CA,KAAKupC,SAAW,IAAI0B,IAChBvnB,EAAgBsnB,EAAOhrC,KAAKoiB,cAEhCpiB,KAAK+qC,qBAAuB,WAExBviC,EAAKghC,cAAe,EAMpB,IACIhhC,EAAK+gC,SAAS2B,0BACV1iC,EAAKohC,iBACTphC,EAAK+gC,SAAS4B,6BACV3iC,EAAKqhC,yBAE2B,IAAzBrhC,EAAKmhC,iBACZnhC,EAAK+gC,SAAS6B,mCACV5iC,EAAKmhC,iBAEf,MAAO3kC,GACL+3B,IAAqBC,iBAAiBh4B,GACtC6b,EAAO7b,MACH,wBAAA3L,OAAwBmP,EAAK6iC,kBAA7B,eAAAhyC,OACYmP,EAAKohC,gBADjB,oBAAAvwC,OAEiBmP,EAAKmhC,gBAFtB,sBAGA3kC,GAGRwD,EAAKgc,eAAe4Z,IAAUzG,kBAC1BnvB,EAAKuiC,sBACTviC,EAAKuiC,qBAAuB,MAMP,IAAjBviC,EAAKihC,QACLjhC,EAAK+gC,SAAS+B,oBAAoB9iC,EAAKihC,SAI/CzpC,KAAKmqC,YAAY/L,IAAUzG,kBACvB33B,KAAK+qC,sBAGT/qC,KAAKmqC,YAAY/L,IAAUvG,uBACvB73B,KAAK8pC,qEAYT9pC,KAAKkqC,iCAAiC1K,IAASkI,kEAQd,IAE7B6D,EACAC,EAH6Bz9B,EAAA/N,KAArByrC,EAAqBtqC,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACvBuqC,EAAoB1rC,KAAK0pC,iBAAmB,GAIlD1pC,KAAK0pC,gBAAkB+B,EAEvBF,EAAwBG,EAAkB1a,OACtC,SAAA9pB,GAAE,OAAK6G,EAAK49B,UAAUzkC,KAE1BskC,EAAyBC,EAAeza,OACpC,SAAA9pB,GAAE,OAAuC,IAAnCwkC,EAAkB9nC,QAAQsD,KAEpClH,KAAKopC,WAAWhnB,aAAa6C,KACzB2mB,2BACAL,EACAC,yCAQAxrC,KAAKupC,WAODvpC,KAAKupC,UAAmC,cAAvBvpC,KAAKupC,SAAS15C,MAC/BmQ,KAAKupC,SAAStsB,QAGlBjd,KAAKupC,SAAW,KAChBvpC,KAAKwpC,cAAe,sDAaDqC,GACvB7rC,KAAK2pC,gBAAkBkC,EAEnB7rC,KAAKupC,UAAYvpC,KAAKwpC,cACtBxpC,KAAKupC,SAAS6B,mCAAmCS,2CAezCC,GACZ9rC,KAAK6pC,mBAAqBiC,EAEtB9rC,KAAKupC,UAAYvpC,KAAKwpC,cACtBxpC,KAAKupC,SAAS4B,6BAA6BW,uCAYvC5kC,GAERlH,KAAK4pC,gBAAkB1iC,EACnBlH,KAAKupC,UAAYvpC,KAAKwpC,cACtBxpC,KAAKupC,SAAS2B,0BAA0BhkC,gDAuD3B6kC,EAAWC,EAAWzB,EAAOpjC,GAC9C,IAAMs7B,EAAgB0G,EAAI8C,iBAAiB1B,QAED,IAA/BpjC,EAAQ+kC,qBACf1M,IAAS2M,gBAAgB1J,EAAet7B,EAAQ+kC,oBAEhDlqB,IAAWuB,UAAU6oB,uBACjB,CAAEF,mBAAoB/kC,EAAQ+kC,sBAIlCzpB,IAAQ4pB,yBACRL,EAAUM,aAAe,UAM7BN,EAAUO,aAAe,aAEzBlE,EAA0BM,YAAqBN,GAE/C,IAAMmE,EACA,IAAIC,IACFzsC,KACAqoC,EACA0D,EACAC,EAAWvJ,EACX8H,EAAOpjC,GAIf,OAFAnH,KAAKqpC,gBAAgBvlB,IAAI0oB,EAActlC,GAAIslC,GAEpCA,gDAYWE,GAClB,IAAMxlC,EAAKwlC,EAAwBxlC,GAEnC,QAAIlH,KAAKqpC,gBAAgB1iB,IAAIzf,KAEzBlH,KAAKqpC,gBAAgB/iB,OAAOpf,IAErB,yCAWDw9B,GACV,IAAKA,EACD,MAAM,IAAIhuC,MAAM,wCAGpBsJ,KAAKspC,YAAYpmC,KAAKwhC,GAEtBA,EAAM0E,WAAappC,KAAKopC,8CASxB,OAAOppC,KAAKypC,oDAQZ,IAAMkD,EAAa3sC,KAAK4sC,eAAejI,KAGvC,OAAOgI,EAAW/2C,OAAS+2C,EAAW,QAAKpsC,+CAQ3C,IAAMssC,EAAa7sC,KAAK4sC,eAAejI,KAGvC,OAAOkI,EAAWj3C,OAASi3C,EAAW,QAAKtsC,yCAShCq2B,GACX,IAAIkW,EAAS9sC,KAAKspC,YAAYjH,QAO9B,YALkB9hC,IAAdq2B,IACAkW,EAASA,EAAO9b,OACZ,SAAA0T,GAAK,OAAIA,EAAMqI,YAAcnW,KAG9BkW,0CASKlW,GACZ,IAAIoW,EAAe,GADI9nB,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAGvB,QAAA8kB,EAAAC,EAAkBtlB,KAAKqpC,gBAAgB9jB,SAAvC91B,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAiD,KACvC+nB,EADuC5nB,EAAA11B,MAClBu9C,qBAAgB3sC,EAAWq2B,GAElDqW,IACAD,EAAeA,EAAa3zC,OAAO4zC,KAPpB,MAAA58B,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAWvB,OAAO4nB,uCAQEr9C,GACT,IAAMw9C,EAAe,GASrB,OAPAntC,KAAK4sC,eAAejI,KAAiBr1B,QAAQ,SAAA89B,GAEzCD,EAAajqC,KAAKvT,EAAQy9C,EAAWC,OAASD,EAAWE,YAKtDlK,QAAQmK,IAAIJ,4CAONzI,GACb,IAAM8I,EAAMxtC,KAAKspC,YAAY1lC,QAAQ8gC,IAExB,IAAT8I,GAIJxtC,KAAKspC,YAAYrlC,OAAOupC,EAAK,8CAUdC,GACf,IAAIC,EAAgB,GADE5nB,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAGtB,QAAA0lB,EAAAC,EAAkBlmB,KAAKqpC,gBAAgB9jB,SAAvC91B,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAiD,KACvC6nB,EADuC1nB,EAAAt2B,MACjBi+C,mBAAmBH,GAE/CC,EAAgBA,EAAcr0C,OAAOs0C,IANnB,MAAAt9B,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAatB,OAJAnF,EAAO5b,MACH,6BAAA5L,OAA6Bo0C,GAA7B,WAAAp0C,OACiBq0C,EAAc93C,SAE5B83C,+CA6KH1tC,KAAKupC,WACLvpC,KAAKupC,SAAStsB,QACdjd,KAAKwpC,cAAe,EAEpBxpC,KAAKwkB,eAAe4Z,IAAUvG,uBAC1B73B,KAAK8pC,6DAYHlkB,EAAK4C,EAAMqlB,EAAY/jB,GACjC,IAAM4a,EAAQ9e,EAAIkoB,eAAetlB,GAE5Bkc,IAEOA,EAAMqJ,gBAIPrJ,EAAM5a,YAAcA,GAC3BjJ,EAAO7b,MAAP,GAAA3L,OACOqrC,EADP,qBAAArrC,OACgCywB,EAAU,KAAO,SADjD,WAIJ4a,EAAMsJ,cAAcH,EAAYjoB,IAR5B/E,EAAO1b,KAAP,6CAAA9L,OAAyDmvB,gDAqB9CrV,EAAI4f,GACnB,IAAI/yB,KAAKupC,SAGL,MAAM,IAAI7yC,MAAM,gCAFhBsJ,KAAKupC,SAAS0E,YAAY96B,EAAI4f,oCAY7BpjC,GACDqQ,KAAKypC,SAAW95C,IAChBqQ,KAAKypC,OAAS95C,EACVqQ,KAAKupC,UAAYvpC,KAAKwpC,cACtBxpC,KAAKupC,SAAS+B,oBAAoB37C,GAEtCqQ,KAAKoiB,aAAa6C,KAAKmZ,IAAUpG,oBAAqBroC,sCAUpDuX,GACN,OAAQlH,KAAK0pC,iBACN1pC,KAAK0pC,gBAAgB9lC,QAAQsD,IAAO,2DAWd4zB,GAC7B,IAAMoT,EAAoBluC,KAAKktC,gBAAgBvI,KADR3d,GAAA,EAAAC,GAAA,EAAAC,OAAA3mB,EAAA,IAGvC,QAAA4mB,EAAAC,EAAoB8mB,EAApBz+C,OAAA4F,cAAA2xB,GAAAG,EAAAC,EAAA5B,QAAAC,MAAAuB,GAAA,EAAuC,CAAAG,EAAAx3B,MAC7Bw+C,eAAerT,IAJc,MAAAzqB,GAAA4W,GAAA,EAAAC,EAAA7W,EAAA,YAAA2W,GAAA,MAAAI,EAAAvB,QAAAuB,EAAAvB,SAAA,WAAAoB,EAAA,MAAAC,yGC57B/C14B,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,mDAAA2wB,IAAA5/C,EAAAQ,EAAAyuB,EAAA,wDAAA4wB,IAAA7/C,EAAAQ,EAAAyuB,EAAA,2DAAA6wB,IAAA9/C,EAAAQ,EAAAyuB,EAAA,mDAAA8wB,IAAA//C,EAAAQ,EAAAyuB,EAAA,sCAAA+wB,IAAAhgD,EAAAQ,EAAAyuB,EAAA,kDAAAgxB,IAAAjgD,EAAAQ,EAAAyuB,EAAA,sDAAAixB,IAAAlgD,EAAAQ,EAAAyuB,EAAA,6CAAAkxB,IAAAngD,EAAAQ,EAAAyuB,EAAA,4BAAAmxB,IAAApgD,EAAAQ,EAAAyuB,EAAA,8BAAAoxB,IAAArgD,EAAAQ,EAAAyuB,EAAA,sCAAAqxB,IAAAtgD,EAAAQ,EAAAyuB,EAAA,sCAAAsxB,IAAAvgD,EAAAQ,EAAAyuB,EAAA,0CAAAuxB,IAAAxgD,EAAAQ,EAAAyuB,EAAA,2CAAAwxB,IAOO,IAAMb,EACP,qCAMOC,EACP,0CASOC,EACP,6CAMOC,EACP,qCAMOC,EAAoB,wBAMpBC,EACP,oCAMOC,EACP,wCAMOC,EAA2B,+BAK3BC,EAAU,cAKVC,EAAY,gBAMZC,EAAoB,wBAMpBC,EAAoB,0BAKpBC,EAAwB,wBAMxBC,EAAyB,4CC1EtC9gD,EAAOD,QAZW,CAId62C,OAAQ,SAKRD,QAAS,yCCdbt2C,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,wCAAAyxB,IAAA1gD,EAAAQ,EAAAyuB,EAAA,8CAAA6B,IAAA9wB,EAAAQ,EAAAyuB,EAAA,+CAAA0xB,IAAA3gD,EAAAQ,EAAAyuB,EAAA,uCAAA8B,IAAA/wB,EAAAQ,EAAAyuB,EAAA,4CAAA2xB,IAAA5gD,EAAAQ,EAAAyuB,EAAA,wCAAA4xB,IAGO,IAAMH,EAAsB,gBActB5vB,EAA4B,2BAK5B6vB,EAA6B,2BAK7B5vB,EAAqB,yBAKrB6vB,EAA0B,yBAM1BC,EAAsB,2SCpCnC,IAAMC,EAA6B,GAiDnC,SAASnlB,EAAgBnlB,EAAOmC,EAAS28B,GACrC,GAAqB,WAAjB3uC,EAAO6P,SAA4C,IAAfA,EAAM/V,KAkB1C,OARA+Q,KAAKoqB,IAAM,CACPplB,QACAslB,YAAanjB,EACb28B,QAASA,GAAWruC,MAAMC,QAAQouC,GAC5BA,EAAQzB,MAAM,QACd9hC,GAGFyE,EAAM/V,MACd,IAAK,kBACL,IAAK,wBACL,IAAK,gBACD+Q,KAAK/Q,KAAOsgD,oBACZvvC,KAAKyE,QACC6qC,EAA2BtvC,KAAK/Q,OAC3B+Q,KAAKoqB,IAAI0Z,SAAW,IAAI3gC,KAAK,MACxC,MACJ,IAAK,uBACL,IAAK,gBACDnD,KAAK/Q,KAAOsgD,YACZvvC,KAAKyE,QACC6qC,EAA2BtvC,KAAK/Q,OAC3B+Q,KAAKoqB,IAAI0Z,SAAW,IAAI3gC,KAAK,MACxC,MACJ,IAAK,8BACL,IAAK,uBACD,IAAMknB,EAAiBrlB,EAAMqlB,gBAAkBrlB,EAAMwqC,WAKjDroC,GACOA,EAAQoyB,SACNuK,GAAWA,EAAQlgC,QAAQ,UAAY,KACrB,aAAnBymB,GACsB,aAAnBA,GACmB,cAAnBA,GACmB,cAAnBA,GACmB,UAAnBA,GACmB,WAAnBA,GACmB,aAAnBA,IACXrqB,KAAK/Q,KAAOsgD,yBACZvvC,KAAKyE,QACC6qC,EAA2BtvC,KAAK/Q,MA6CtD,SAA2CwgD,EAAsBnlB,GAC7D,GAAIA,GAAeA,EAAYiP,OAASjP,EAAYiP,MAAMoB,UACtD,OAAQ8U,GACR,IAAK,QACD,OAAOnlB,EAAYiP,MAAMoB,UAAUgB,SACvC,IAAK,SACD,OAAOrR,EAAYiP,MAAMoB,UAAUiB,UACvC,QACI,OAAOtR,EAAYiP,MAAMoB,UAAU8U,IAAyB,GAIpE,MAAO,GAxDeC,CACErlB,EACAljB,KAEZnH,KAAK/Q,KAAOsgD,oBACZvvC,KAAKyE,QACC6qC,EAA2BtvC,KAAK/Q,MAC5B+V,EAAMqlB,gBAEpB,MAGJ,QACIrqB,KAAK/Q,KAAOsgD,UACZvvC,KAAKyE,QACCO,EAAMP,SAAW6qC,EAA2BtvC,KAAK/Q,UAGxD,IAAqB,iBAAV+V,EAWd,MAAM,IAAItO,MAAM,qBAVZ44C,EAA2BtqC,IAC3BhF,KAAK/Q,KAAO+V,EACZhF,KAAKyE,QAAU0C,GAAWmoC,EAA2BtqC,IAKrDhF,KAAKyE,QAAUO,EAMvBhF,KAAKoE,MAAQY,EAAMZ,QAAU,IAAI1N,OAAS0N,MAtI9CkrC,EAA2BC,0BACrB,sCACND,EAA2BC,uCACrB,qCACND,EACIC,0CACE,8FAEND,EAA2BC,kCACrB,+CACND,EAA2BC,kCACrB,sCACND,EAA2BC,iCACrB,mCACND,EAA2BC,qCACrB,kCACND,EAA2BC,WACrB,6BACND,EAA2BC,qBACrB,4CACND,EAA2BC,aACrB,2CACND,EAA2BC,qBACrB,sCACND,EAA2BC,qBACrB,kCACND,EAA2BC,yBACrB,iDA8GNplB,EAAgB75B,UAAYlB,OAAOY,OAAO0G,MAAMpG,WAChD65B,EAAgB75B,UAAUgF,YAAc60B,EAuBzBA,weC5JA,SAASwlB,EAAIrd,GAGxB,IAFA,IAAMvE,EAAQuE,EAAIvvB,MAAM,UAEfrU,EAAI,EAAGkH,EAASm4B,EAAMn4B,OAAQlH,EAAIkH,EAAQlH,IAAK,CACpD,IAAIkhD,EAAM,KAAAv2C,OAAQ00B,EAAMr/B,IAEpBA,IAAMkH,EAAS,IACfg6C,GAAU,QAEd7hB,EAAMr/B,GAAKkhD,EAEf,IAAMn3B,EAAO,GAAApf,OAAM00B,EAAMC,QAAZ,QAEbhuB,KAAK+tB,MAAQA,EACb/tB,KAAKwQ,IAAMiI,EAAUsV,EAAM5qB,KAAK,IAChCnD,KAAKyY,QAAUA,EASnBk3B,EAAIr/C,UAAUu/C,SAAU,EAMxBF,EAAIr/C,UAAUw/C,qBAAsB,EAMpCH,EAAIr/C,UAAUy/C,qBAAsB,EAKpCJ,EAAIr/C,UAAU0/C,gBAAkB,WAK5B,IAJA,IAEIC,EAFE/6C,EAAO8K,KACPkwC,EAAa,GAFoBC,EAAA,SAK9BC,GACLH,EAAMljB,IAAQuD,UAAUp7B,EAAK64B,MAAMqiB,GAAa,WAChD,IAGMriB,EAAQ,CACVqiB,aACAC,IAJEtjB,IAAQc,SACNd,IAAQO,SAASp4B,EAAK64B,MAAMqiB,GAAa,WAI7Ctf,MAAO,GACPM,WAAY,IAGhB8e,EAAWE,GAAcriB,EACzBkiB,EAAI3gC,QAAQ,SAAA9K,GACR,IAAM8rC,EAAW9rC,EAAKipB,UAAU,GAAG1qB,MAAM,KAAK,GAIzCgrB,EAAM+C,MAAMwf,KACbviB,EAAM+C,MAAMwf,GAAY,CACpB9nB,KAAM8nB,EACN1gB,MAAO,KAGf7B,EAAM+C,MAAMwf,GAAU1gB,MAAM1sB,KAAKsB,MAErCyrC,EAAMljB,IAAQuD,UAAUp7B,EAAK64B,MAAMqiB,GAAa,kBAC5C9gC,QAAQ,SAAA9K,GACR,IAAM+rC,EAAM/rC,EAAKZ,QAAQ,KACnB6tB,EAAYjtB,EAAK+Q,OAAO,EAAGg7B,GAAKh7B,OAAO,IACvCub,EAAQtsB,EAAK+Q,OAAO,GAAKkc,EAAU77B,QAAQmN,MAAM,KAEnD+tB,EAAMl7B,QACNm4B,EAAMqD,WAAWluB,KAAK,CAClBuuB,YACAX,aAnCPsf,EAAa,EAAGA,EAAal7C,EAAK64B,MAAMn4B,OAAQw6C,IAAcD,EAA9DC,GAyCT,OAAOF,GAQXP,EAAIr/C,UAAUkgD,aAAe,SAAShoB,GAElC,IAAMioB,EAASzwC,KAAKgwC,kBAChBvqC,GAAS,EAWb,OATArW,OAAOmW,KAAKkrC,GAAQnhC,QAAQ,SAAA8gC,GACpB3qC,GAGAgrC,EAAOL,GAAYtf,MAAMtI,KACzB/iB,GAAS,KAIVA,GAIXkqC,EAAIr/C,UAAUogD,OAAS,WACnB,IAAIhiD,EAAG6J,EAAGq3B,EAAOxB,EAAOuiB,EAASC,EAEjC,IAAKliD,EAAI,EAAGA,EAAIsR,KAAK+tB,MAAMn4B,OAAQlH,IAI/B,IAHAkhC,EAAQ5vB,KAAK+tB,MAAMr/B,GAAGqU,MAAM,SACtB6N,MAEc,WADpBwd,EAAQrB,IAAQe,WAAW8B,EAAM5B,UACvBD,MAAV,CAKA,IAFA4iB,EAAU,GACVviB,EAAMF,IAAIt4B,OAAS,EACd2C,EAAI,EAAGA,EAAIq3B,EAAMh6B,OAAQ2C,IAAK,CAC/B,GAA8B,cAA1Bq3B,EAAMr3B,GAAGgd,OAAO,EAAG,GAAoB,CAEvC,GAAoB,QADpBq7B,EAAS7jB,IAAQsB,YAAYuB,EAAMr3B,KACxBtJ,MAAiC,SAAhB2hD,EAAO3hD,KAC/B,SAEJm/B,EAAMF,IAAIhrB,KAAK0tC,EAAO1pC,IAE1BypC,GAAO,GAAAt3C,OAAOu2B,EAAMr3B,GAAb,QAEXyH,KAAK+tB,MAAMr/B,GAAX,GAAA2K,OAAmB0zB,IAAQoB,WAAWC,GAAtC,QAAA/0B,OAAmDs3C,GAEvD3wC,KAAKwQ,IAAMxQ,KAAKyY,QAAUzY,KAAK+tB,MAAM5qB,KAAK,KAI9CwsC,EAAIr/C,UAAUugD,mBAAqB,SAASC,GACxC,IAAM57C,EAAO8K,KACP4vB,EAAQ7C,IAAQuD,UAAUtwB,KAAKyY,QAASq4B,GAO9C,OALAlhB,EAAMtgB,QAAQ,SAAA9K,GACVtP,EAAKujB,QAAUvjB,EAAKujB,QAAQ7W,QAAb,GAAAvI,OAAwBmL,EAAxB,QAAoC,MAEvDxE,KAAKwQ,IAAMxQ,KAAKyY,QAAUzY,KAAK+tB,MAAM5qB,KAAK,IAEnCysB,GAKX+f,EAAIr/C,UAAUygD,iBAAmB,SAASX,EAAYU,GAClD,IAAM57C,EAAO8K,KACP4vB,EAAQ7C,IAAQuD,UAAUtwB,KAAK+tB,MAAMqiB,GAAaU,GAQxD,OANAlhB,EAAMtgB,QAAQ,SAAA9K,GACVtP,EAAK64B,MAAMqiB,GACLl7C,EAAK64B,MAAMqiB,GAAYxuC,QAAvB,GAAAvI,OAAkCmL,EAAlC,QAA8C,MAExDxE,KAAKwQ,IAAMxQ,KAAKyY,QAAUzY,KAAK+tB,MAAM5qB,KAAK,IAEnCysB,GAIX+f,EAAIr/C,UAAU0gD,SAAW,SAAStxC,EAAMuxC,GACpC,IAAIviD,EAAG6J,EAAGkJ,EAAGmuB,EAAOxB,EAAOwiB,EAAQpoB,EAAMynB,EAKzC,IADArgB,EAAQ7C,IAAQuD,UAAUtwB,KAAKyY,QAAS,aAC9B7iB,OACN,IAAKlH,EAAI,EAAGA,EAAIkhC,EAAMh6B,OAAQlH,IAAK,CAE/B,IAAM+iC,GADNwe,EAAMrgB,EAAMlhC,GAAGqU,MAAM,MACCirB,QAAQzY,OAAO,GAIrC,IAFA7V,EAAK3Q,EAAE,QAAS,CAAEkX,MAAO,kCACrBwrB,cACCl5B,EAAI,EAAGA,EAAI03C,EAAIr6C,OAAQ2C,IACxBmH,EAAK3Q,EAAE,UAAW,CAAEE,KAAMghD,EAAI13C,KAAM4N,KAExCzG,EAAKyG,KAGb,IAAKzX,EAAI,EAAGA,EAAIsR,KAAK+tB,MAAMn4B,OAAQlH,IAE/B,GAAsB,WADtB0/B,EAAQrB,IAAQe,WAAW9tB,KAAK+tB,MAAMr/B,GAAGqU,MAAM,QAAQ,KAC3CgrB,OACa,UAAhBK,EAAML,OACU,gBAAhBK,EAAML,MAFf,CAKA,IAAMmjB,EAAYnkB,IAAQO,SAASttB,KAAK+tB,MAAMr/B,GAAI,WAG9C85B,IADA0oB,GACOA,EAAUzjB,UAAU,GAAG1qB,MAAM,KAAK,GAK7CrD,EAAK3Q,EAAE,UAAW,CAAEoiD,QAASF,EACzBhiD,KAAMm/B,EAAML,QAChB,IAAMqjB,EAAWrkB,IAAQO,SAASttB,KAAK+tB,MAAMr/B,GAAI,UAEjD,GAAI0iD,EAAU,CAEV,IAAMf,EAAMtjB,IAAQc,SAASujB,GAE7B1xC,EAAK7E,MAAM,CAAE5L,KAAMohD,IAGvB,GAAItjB,IAAQO,SAASttB,KAAK+tB,MAAMr/B,GAAI,aAAakH,OAAQ,CAOrD,IANA8J,EAAK3Q,EAAE,cACH,CAAEkX,MAAO,6BACL8nB,MAAOK,EAAML,QACjBvF,GACA9oB,EAAK7E,MAAM,CAAE2tB,SAEZjwB,EAAI,EAAGA,EAAI61B,EAAMF,IAAIt4B,OAAQ2C,IAAK,CACnCq4C,EACM7jB,IAAQO,SACNttB,KAAK+tB,MAAMr/B,GADb,YAAA2K,OAEc+0B,EAAMF,IAAI31B,KAC9BmH,EAAK3Q,EAAE,eAAgBg+B,IAAQsB,YAAYuiB,IAI3C,IAAMS,EACAtkB,IAAQO,SACNttB,KAAK+tB,MAAMr/B,GADb,UAAA2K,OAEY+0B,EAAMF,IAAI31B,KAE5B,GAAI84C,EAIA,IAHApB,EAAMljB,IAAQ8B,UAAUwiB,GAGnB5vC,EAAI,EAAGA,EAAIwuC,EAAIr6C,OAAQ6L,IACxB/B,EAAK3Q,EAAE,YAAakhD,EAAIxuC,IAAI0E,KAKpCnG,KAAKsxC,eAAe5iD,EAAGgR,EAAM0uB,EAAMF,IAAI31B,IAEvCmH,EAAKyG,KAET,IAAMorC,EACAxkB,IAAQuD,UAAUtwB,KAAK+tB,MAAMr/B,GAAI,YAAasR,KAAKyY,SASzD,GAPI84B,EAAO37C,SACP8J,EAAK3Q,EAAE,aAAc,CAAEyiD,SAAU,IACjCD,EAAOjiC,QACH,SAAA9K,GAAI,OAAI9E,EAAK3Q,EAAE,SAAUg+B,IAAQ2B,YAAYlqB,IAAO2B,OACxDzG,EAAKyG,MAGLqiB,EAAM,CACN,IAAMipB,EAAU1kB,IAAQ2C,UAAU1vB,KAAK+tB,MAAMr/B,IADvCw2B,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAGN,QAAA8kB,EAAAC,EAAgDmsB,EAAhDhiD,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAyD,KAAAwsB,EAAAC,EAAAtsB,EAAA11B,MAAA,GAA5CiiD,EAA4CF,EAAA,GAA7BG,EAA6BH,EAAA,GACrDhyC,EAAK3Q,EAAE,SAAU,CACby5B,KAAMopB,EACN3rC,MAAO,oCAGX4rC,EAAeviC,QAAQ,SAAAwiC,GAEnB,IAAMvB,EAAMuB,EAAYluC,QAAQ,KAC1BmuC,EAAKD,EAAYv8B,OAAOg7B,EAAM,GAGpC,GADA7wC,EAAK3Q,EAAE,cACkB,IAArBgjD,EAAGnuC,QAAQ,KACXlE,EAAK7E,MAAM,CAAE5L,KAAM8iD,QAChB,CACH,IAAM9iD,EAAO8iD,EAAGhvC,MAAM,IAAK,GAAG,GAE9BrD,EAAK7E,MAAM,CAAE5L,SAEb,IAAI+iD,EAAID,EAAGhvC,MAAM,IAAK,GAAG,GAEzBivC,EAAIjlB,IAAQC,mBAAmBglB,GAC/BtyC,EAAK7E,MAAM,CAAElL,MAAOqiD,IAExBtyC,EAAKyG,OAGTzG,EAAKyG,MA9BH,MAAAkK,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAmCA2H,IAAQuD,UAAUtwB,KAAK+tB,MAAMr/B,GAAI,iBAExB4gB,QAAQ,SAAA9K,GACnB,IAAM+rC,EAAM/rC,EAAKZ,QAAQ,KACnB6tB,EAAYjtB,EAAK+Q,OAAO,EAAGg7B,GAAKh7B,OAAO,IACvCub,EAAQtsB,EAAK+Q,OAAO,GAAKkc,EAAU77B,QAAQmN,MAAM,KAEnD+tB,EAAMl7B,SACN8J,EAAK3Q,EAAE,aAAc,CAAE0iC,YACnBxrB,MAAO,oCACX6qB,EAAMxhB,QAAQ,SAAA7e,GAAC,OAAIiP,EAAK3Q,EAAE,SAAU,CAAEy5B,KAAM/3B,IAAK0V,OACjDzG,EAAKyG,QAKjB,IAAM8rC,EAAWllB,IAAQuD,UAAUtwB,KAAK+tB,MAAMr/B,GAAI,SAElD,GAAIujD,EAASr8C,QAAU6sB,IAAQyvB,uBAAwB,CAGnD,IAAMC,EAAOF,EACRzsC,IAAI,SAAA4sC,GAAO,OAAIA,EAAQrvC,MAAM,KAAK,KAClCyC,IAAI,SAAA6sC,GAAO,OAAIA,EAAQtvC,MAAM,KAAK,KAEvCovC,EAAK7iC,QAAQ,SAAA9C,GACT9M,EAAK3Q,EAAE,SAAU,CACbyd,MACAvG,MAAO,oCAEXvG,EAAKyG,OAGH4mB,IAAQO,SAASttB,KAAK+tB,MAAMr/B,GAAI,iBAGlCgR,EAAK3Q,EAAE,YAAa,CAChB0iC,UAAW,MACXxrB,MAAO,oCAEXksC,EAAK7iC,QAAQ,SAAA9C,GACT9M,EAAK3Q,EAAE,SAAU,CAAEyd,QAAOrG,OAE9BzG,EAAKyG,MAab,GATI4mB,IAAQO,SAASttB,KAAK+tB,MAAMr/B,GAAI,eAChCgR,EAAK3Q,EAAE,YAAYoX,KAIvBnG,KAAKsxC,eAAe5iD,EAAGgR,EAAM,MAG7BkwB,EAAQ7C,IAAQuD,UAAUtwB,KAAK+tB,MAAMr/B,GAAI,cAC/BkH,OACN,IAAK2C,EAAI,EAAGA,EAAIq3B,EAAMh6B,OAAQ2C,IAAK,CAS/B,GARA03C,EAAMljB,IAAQiD,YAAYJ,EAAMr3B,IAChCmH,EAAK3Q,EAAE,aAAc,CACjBkX,MAAO,wCACPiqB,IAAK+f,EAAI/f,IACThpB,GAAI+oC,EAAItgD,QAIRsgD,EAAI1/C,eAAe,aAGnB,OAAQ0/C,EAAIhgB,WACZ,IAAK,WACDvwB,EAAK7E,MAAM,CAAEy3C,QAAS,cACtB,MACJ,IAAK,WACD5yC,EAAK7E,MAAM,CAAEy3C,QAAS,cACtB,MACJ,IAAK,WACD5yC,EAAK7E,MAAM,CAAEy3C,QAAS,SACtB,MACJ,IAAK,WACD5yC,EAAK7E,MAAM,CAAEy3C,QAAS,SAM9B5yC,EAAKyG,KAGbzG,EAAKyG,KAITnG,KAAKuyC,kBAAkB7jD,EAAGgR,GAE1B,IAAM5Q,EAAIkR,KAAK+tB,MAAMr/B,GAEjBq+B,IAAQO,SAASx+B,EAAG,aAAckR,KAAKyY,SACvC/Y,EAAK7E,MAAM,CAAEy3C,QAAS,SACfvlB,IAAQO,SAASx+B,EAAG,aAAckR,KAAKyY,SAC9C/Y,EAAK7E,MAAM,CAAEy3C,QAAS,cACfvlB,IAAQO,SAASx+B,EAAG,aAAckR,KAAKyY,SAC9C/Y,EAAK7E,MAAM,CAAEy3C,QAAS,cACfvlB,IAAQO,SAASx+B,EAAG,aAAckR,KAAKyY,UAC9C/Y,EAAK7E,MAAM,CAAEy3C,QAAS,SAKP,MAAflkB,EAAMH,MAAiBlB,IAAQO,SAASx+B,EAAG,gBAAiBkR,KAAKyY,UAEjE/Y,EAAK7E,MAAM,CAAEy3C,QAAS,aAE1B5yC,EAAKyG,KAIT,OAFAzG,EAAKyG,KAEEzG,GAGXiwC,EAAIr/C,UAAUiiD,kBAAoB,SAASnC,EAAY1wC,GACnD,IAAIuwC,EACE/6C,EAAO8K,KAEbN,EAAK3Q,EAAE,aAGP,IAAMyjD,EACAzlB,IAAQO,SAASttB,KAAK+tB,MAAMqiB,GAAa,aAAcl7C,EAAKujB,SAElE,GAAI+5B,EAAS,CACT,IAAMC,EAAY1lB,IAAQyB,aAAagkB,GAEvC9yC,EAAK3Q,EAAE,UAAW,CACdkX,MAAO,yCACPysC,OAAQD,EAAU,GAClB/pC,SAAU+pC,EAAU,KAIpBA,EAAU78C,OAAS,GACnB8J,EAAK7E,MAAM,CAAEopC,QAASwO,EAAU,KAEpC/yC,EAAKyG,KA6BT,GAxBM4mB,IAAQuD,UACNtwB,KAAK+tB,MAAMqiB,GACX,iBACApwC,KAAKyY,SAEAnJ,QAAQ,SAAA9K,IACjByrC,EAAMljB,IAAQ4B,iBAAiBnqB,IAC3ByB,MAAQ,8BACZvG,EAAK3Q,EAAE,eAAea,EAAEqgD,EAAIrhB,oBACrBqhB,EAAIrhB,aAGXpqB,EACMuoB,IAAQO,SACNp4B,EAAK64B,MAAMqiB,GACX,WACAl7C,EAAKujB,YAETw3B,EAAI0C,MAAQnuC,EAAK+Q,OAAO,IAE5B7V,EAAK7E,MAAMo1C,GACXvwC,EAAKyG,OAET8pC,EAAMljB,IAAQE,UAAUjtB,KAAK+tB,MAAMqiB,GAAapwC,KAAKyY,SAC5C,CACLw3B,EAAIhqC,MAAQ,uCACZvG,EAAK7E,MAAMo1C,GAGX,IAAMrgB,EACA7C,IAAQuD,UACNtwB,KAAK+tB,MAAMqiB,GACX,eACApwC,KAAKyY,SAETmX,EAAMh6B,QACNg6B,EAAMtgB,QAAQ,SAAA9K,GACV,IAAMuqB,EAAYhC,IAAQyD,kBAAkBhsB,GAExCtP,EAAK26C,UACL9gB,EAAUI,GAAK,WAEnB,IAAMzmB,EACAqmB,GAA2C,iBAAvBA,EAAUrmB,SAC1BqmB,EAAUrmB,SAAS/F,cACnB,GAELzN,EAAK46C,sBACe,QAAbpnC,GAAmC,WAAbA,IAC1BxT,EAAK66C,qBAAoC,QAAbrnC,GAGpChJ,EAAK3Q,EAAE,YAAaggC,GAAW5oB,OAI3CzG,EAAKyG,MAITwpC,EAAIr/C,UAAUghD,eAAiB,SAASlB,EAAY1wC,EAAMkzC,GAEhD7lB,IAAQuD,UACNtwB,KAAK+tB,MAAMqiB,GADb,aAAA/2C,OAEeu5C,IAEftjC,QAAQ,SAAA9K,GACV,IAAMyrC,EAAMljB,IAAQ8C,YAAYrrB,GAEf,YAAbyrC,EAAIhpC,MACJvH,EAAK3Q,EAAE,kBAAmB,CACtBkX,MAAO,qCACPtW,MAAOsgD,EAAIlgB,OAAO,KAEtBrwB,EAAKyG,OAELzG,EAAK3Q,EAAE,UAAW,CACdkX,MAAO,qCACPgB,KAAMgpC,EAAIhpC,OAEVgpC,EAAIlgB,OAAOn6B,OAAS,GACpB8J,EAAK7E,MAAM,CAAEg4C,QAAW5C,EAAIlgB,OAAO,KAEvCrwB,EAAKyG,SAKjBwpC,EAAIr/C,UAAUwiD,iBAAmB,SAASpzC,EAAMkzC,GAC5C,IAAI7kB,EAAQ,GACRkiB,EACEvwC,EAAK6xB,KACH,gEAuBR,OArBI0e,EAAIr6C,SACJm4B,GAAS,uBACLkiB,EAAI1uC,KAAK,SACTwsB,GAASkiB,EAAI1uC,KAAK,SAElBwsB,GAAS,IAEbA,GAAS,SAEbkiB,EAAMvwC,EAAK6xB,KAAK,yDACZwhB,KAAK,WAELhlB,GAAK,aAAA10B,OAAiBu5C,EAAjB,KAAAv5C,OAAgC25C,EAAEhzC,MAAMuB,KAAK,SAC9CyxC,EAAEhzC,MAAMuB,KAAK,aACbwsB,GAAK,IAAA10B,OAAQ25C,EAAEhzC,MAAMuB,KAAK,aAE9BwsB,GAAS,SAKNA,GAIX4hB,EAAIr/C,UAAU2iD,WAAa,SAASC,GAChC,IAAMh+C,EAAO8K,KACPmzC,EAAYhrC,KAAKmM,MAGvBtU,KAAKwQ,IAAM,iBAAAnX,OACE85C,EADF,yBAEL,mBAKN,IAAMC,EACAJ,EAAEE,GAAQ3hB,KAAK,mDAEjB6hB,EAAOx9C,QACPw9C,EAAOL,KAAK,SAACxC,EAAK/e,GACd,IAAM6hB,EACAL,EAAExhB,GACCD,KAAK,YACL/rB,IAAI,SAAC8tC,EAAGn7B,GAAJ,OAAgBA,EAAQvV,aAAa,UACzCrT,MAEL8jD,EAASz9C,OAAS,IAClBV,EAAKsb,KAAL,WAAAnX,OAEQm4B,EAAM5uB,aAAa,cACZ4uB,EAAM5uB,aAAa,QAHlC,KAAAvJ,OAIQg6C,EAASlwC,KAAK,KAJtB,WASZnD,KAAKyY,QAAUzY,KAAKwQ,IACpB0iC,EAAO3hB,KAAK,YAAYwhB,KAAK,WAEzB,IAAMjkD,EAAIoG,EAAKq+C,aAAaP,EAAEhzC,OAE9B9K,EAAK64B,MAAM7qB,KAAKpU,KAWpBkR,KAAKwQ,IAAMxQ,KAAKyY,QAAUzY,KAAK+tB,MAAM5qB,KAAK,KAI9CwsC,EAAIr/C,UAAUijD,aAAe,SAASp7B,GAClC,IAAMwX,EAAOxX,EAAQoZ,KAAK,eACtBxD,EAAQ,GACN74B,EAAO8K,KACPwzC,EAAOr7B,EAAQoZ,KACjB,sEAEA0e,EAAM,CAAEliB,MAAO4B,EAAKpuB,KAAK,SAE7B0uC,KAAW,KAWX,GAVgC,aAA5B93B,EAAQ5W,KAAK,aAEb0uC,EAAIhiB,KAAO,KAEX9V,EAAQoZ,KAAK,0BAA0B37B,QAChC+5B,EAAK4B,KAAK,cAAc37B,OAC/Bq6C,EAAIxnC,MAAQ+qC,EAAK59C,OAAS,YAAc,YAExCq6C,EAAIxnC,MAAQ,WAEZ+qC,EAAK59C,OAAQ,CACbm4B,GAAK,iBAAA10B,OAAqB42C,EAAIhiB,KAAzB,eAAA50B,OACDm6C,EAAKjyC,KAAK,UADT,QAELwsB,GAAK,aAAA10B,OAAiBm6C,EAAKjyC,KAAK,UAA3B,KAAAlI,OAAwCm6C,EAAKjyC,KAAK,aAEvD,IAAMkyC,EAAcD,EAAKjyC,KAAK,WAG1BwsB,GADA0lB,EACK,IAAAp6C,OAAQo6C,EAAR,QAEI,YAGbxD,EAAI/hB,IACEyB,EACG4B,KAAK,gBACL/rB,IAAI,WAED,OAAOxF,KAAK4C,aAAa,QAE5BrT,MACTw+B,GAAK,GAAA10B,OAAO0zB,IAAQoB,WAAW8hB,GAA1B,QA8BT,OA3BAliB,GAAS,uBACJylB,EAAK59C,SACNm4B,GAAS,gCAEbkiB,EACM93B,EAAQoZ,KACN,6DACA37B,SACAq6C,EAAI1uC,KAAK,WACTwsB,GAAK,GAAA10B,OAAO0zB,IAAQW,cAAcuiB,EAAI1uC,KAAK,UAAtC,SAEL0uC,EAAI1uC,KAAK,SACTwsB,GAAK,GAAA10B,OAAO0zB,IAAQa,YAAYqiB,EAAI1uC,KAAK,QAApC,SAET0uC,EAAI1e,KAAK,gBAAgBwhB,KAAK,WAG1BhlB,GAAK,iBAAA10B,OAAqB2G,KAAK4C,aAAa,SAC5CmrB,GAAK,IAAA10B,OAAQ25C,EAAEhzC,MAAM2B,QACrBosB,GAAS,OACL/tB,KAAK4C,aAAa,WAClBmrB,GAAK,WAAA10B,OAAe2G,KAAK4C,aAAa,SAAjC,YAMTuV,EAAQ5W,KAAK,YACrB,IAAK,YACDwsB,GAAS,iBACT,MACJ,IAAK,YACDA,GAAS,iBACT,MACJ,IAAK,OACDA,GAAS,iBACT,MACJ,IAAK,OACDA,GAAS,iBAyIb,OAtIAA,GAAK,SAAA10B,OAAa8e,EAAQ5W,KAAK,QAA1B,QAMDouB,EAAK4B,KAAK,YAAY37B,SACtBm4B,GAAS,kBAGT4B,EAAK4B,KAAK,cAAc37B,QACxB+5B,EAAK4B,KAAK,qBAAqBwhB,KAAK,WAEhChlB,GAAK,YAAA10B,OAAgB2G,KAAK4C,aAAa,QACvCmrB,GAAK,IAAA10B,OAAQ2G,KAAK4C,aAAa,iBAC/BmrB,GAAK,IAAA10B,OAAQ2G,KAAK4C,aAAa,eAC3B5C,KAAK4C,aAAa,oBAClBmrB,GAAK,IAAA10B,OAAQ2G,KAAK4C,aAAa,oBAEnCmrB,GAAS,SAKjB4B,EAAK4B,KAAK,gBAAgBwhB,KAAK,WAE3BhlB,GAAK,GAAA10B,OAAO0zB,IAAQ0B,YAAYzuB,MAA3B,QACDgzC,EAAEhzC,MAAMuxB,KAAK,cAAc37B,SAC3Bm4B,GAAK,UAAA10B,OAAc2G,KAAK4C,aAAa,MAAhC,KACLmrB,GACOilB,EAAEhzC,MACAuxB,KAAK,aACL/rB,IAAI,WACD,IAAMvW,EAAO+Q,KAAK4C,aAAa,QAE/B,OACK3T,EAAI,GAAAoK,OAAMpK,EAAN,KAAgB,IACf+Q,KAAK4C,aAAa,WAE/BrT,MACA4T,KAAK,MACd4qB,GAAS,QAIbA,GAAS74B,EAAK49C,iBAAiBE,EAAEhzC,MAAOA,KAAK4C,aAAa,SAM9DmrB,GAAS74B,EAAK49C,iBAAiBnjB,EAAM,MAGrCsgB,EACMtgB,EAAK4B,KACH,+DACJwhB,KAAK,WAELhlB,GAAK,YAAA10B,OACc2G,KAAK4C,aAAa,MADhC,KAAAvJ,OAEG2G,KAAK4C,aAAa,OAFrB,UAOTuV,EACKoZ,KACG,sEAEHwhB,KAAK,WAEF,IAAIrqC,EAAW1I,KAAK4C,aAAa,YAEjC8F,EAC0B,iBAAbA,EAAwBA,EAAS/F,cAAgB,GAEzDzN,EAAK46C,sBACe,QAAbpnC,GAAmC,WAAbA,IAC1BxT,EAAK66C,qBAAoC,QAAbrnC,IAEzBxT,EAAK26C,SACZ7vC,KAAKwB,aAAa,KAAM,WAG5BusB,GAAShB,IAAQ0D,oBAAoBzwB,SAM7CmY,EACKoZ,KAAK,mEACLwhB,KAAK,WAEF,IAAMthB,EAAYzxB,KAAK4C,aAAa,aAC9BkuB,EACAkiB,EAAEhzC,MACCuxB,KAAK,WACL/rB,IAAI,WACD,OAAOxF,KAAK4C,aAAa,UAE5BrT,MAELuhC,EAAMl7B,SACNm4B,GAAK,gBAAA10B,OAAoBo4B,EAApB,KAAAp4B,OAAiCy3B,EAAM3tB,KAAK,KAA5C,YAMjB8sC,EACM93B,EAAQoZ,KACN,gEACJwhB,KAAK,WAEL,IAAMvqB,EAAOxoB,KAAK4C,aAAa,QAG/BowC,EAAEhzC,MAAMuxB,KAAK,cAAcwhB,KAAK,WAC5B,IAAM9jD,EAAO+Q,KAAK4C,aAAa,QAC3BjT,EAAQqQ,KAAK4C,aAAa,SAE9BjT,EAAQo9B,IAAQC,mBAAmBr9B,GACnCo+B,GAAK,UAAA10B,OAAcmvB,EAAd,KAAAnvB,OAAsBpK,GACvBU,GAASA,EAAMiG,SACfm4B,GAAK,IAAA10B,OAAQ1J,IAEjBo+B,GAAS,WAMVA,iCC10BXv/B,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,4CAAA7sB,IAAApC,EAAAQ,EAAAyuB,EAAA,+BAAAi2B,IAAAllD,EAAAQ,EAAAyuB,EAAA,yCAAAk2B,IAAAnlD,EAAAQ,EAAAyuB,EAAA,yCAAAm2B,IAAAplD,EAAAQ,EAAAyuB,EAAA,qCAAAo2B,IAAArlD,EAAAQ,EAAAyuB,EAAA,sCAAAq2B,IAAAtlD,EAAAQ,EAAAyuB,EAAA,uCAAA5rB,IAAArD,EAAAQ,EAAAyuB,EAAA,+BAAA3rB,IAAAtD,EAAAQ,EAAAyuB,EAAA,sCAAA1rB,IAAAvD,EAAAQ,EAAAyuB,EAAA,iDAAAs2B,IAAAvlD,EAAAQ,EAAAyuB,EAAA,wCAAAu2B,IAAAxlD,EAAAQ,EAAAyuB,EAAA,2CAAAw2B,IAAAzlD,EAAAQ,EAAAyuB,EAAA,sCAAAtqB,IAAA3E,EAAAQ,EAAAyuB,EAAA,sCAAA5pB,IAAArF,EAAAQ,EAAAyuB,EAAA,iCAAAy2B,IAAA1lD,EAAAQ,EAAAyuB,EAAA,8CAAA02B,IAOO,IAAMvjD,EAA0B,oCAK1B8iD,EAAa,uBAKbC,EAAuB,uBAKvBC,EAAuB,uBAKvBC,EAAmB,6BAMnBC,EAAoB,wCAKpBjiD,EAAqB,+BAKrBC,EAAa,uBAKbC,EAAoB,8BAMpBgiD,EACP,0CAKOC,EAAsB,+BAKtBC,EAAyB,kCAKzB9gD,EAAoB,8BAKpBU,EAAoB,8BAKpBqgD,EAAe,0BAKfC,EAA4B,oDChEzC,SAAA9xB,IACAriB,KAAAo0C,QAAAp0C,KAAAo0C,SAAA,GACAp0C,KAAAq0C,cAAAr0C,KAAAq0C,oBAAA9zC,EAwQA,SAAA+zC,EAAAlzC,GACA,yBAAAA,EAOA,SAAAmzC,EAAAnzC,GACA,uBAAAA,GAAA,OAAAA,EAGA,SAAAozC,EAAApzC,GACA,gBAAAA,EAnRAjT,EAAAD,QAAAm0B,EAGAA,iBAEAA,EAAA/xB,UAAA8jD,aAAA7zC,EACA8hB,EAAA/xB,UAAA+jD,mBAAA9zC,EAIA8hB,EAAAoyB,oBAAA,GAIApyB,EAAA/xB,UAAAokD,gBAAA,SAAAvkD,GACA,GA4PA,iBA5PAA,KAAA,GAAA+pB,MAAA/pB,GACA,MAAA+F,UAAA,+BAEA,OADA8J,KAAAq0C,cAAAlkD,EACA6P,MAGAqiB,EAAA/xB,UAAA20B,KAAA,SAAAhe,GACA,IAAA0tC,EAAApwC,EAAA/M,EAAA0wC,EAAAx5C,EAAAkmD,EAMA,GAJA50C,KAAAo0C,UACAp0C,KAAAo0C,QAAA,IAGA,UAAAntC,KACAjH,KAAAo0C,QAAApvC,OACAuvC,EAAAv0C,KAAAo0C,QAAApvC,SAAAhF,KAAAo0C,QAAApvC,MAAApP,QAAA,CAEA,IADA++C,EAAAxzC,UAAA,cACAzK,MACA,MAAAi+C,EAGA,IAAAtkC,EAAA,IAAA3Z,MAAA,yCAAAi+C,EAAA,KAEA,MADAtkC,EAAAwkC,QAAAF,EACAtkC,EAOA,GAAAmkC,EAFAjwC,EAAAvE,KAAAo0C,QAAAntC,IAGA,SAEA,GAAAqtC,EAAA/vC,GACA,OAAApD,UAAAvL,QAEA,OACA2O,EAAA1V,KAAAmR,MACA,MACA,OACAuE,EAAA1V,KAAAmR,KAAAmB,UAAA,IACA,MACA,OACAoD,EAAA1V,KAAAmR,KAAAmB,UAAA,GAAAA,UAAA,IACA,MAEA,QACA+mC,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACAoD,EAAAovB,MAAA3zB,KAAAkoC,QAEG,GAAAqM,EAAAhwC,GAIH,IAHA2jC,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GAEA3J,GADAo9C,EAAArwC,EAAA89B,SACAzsC,OACAlH,EAAA,EAAeA,EAAA8I,EAAS9I,IACxBkmD,EAAAlmD,GAAAilC,MAAA3zB,KAAAkoC,GAGA,UAGA7lB,EAAA/xB,UAAA65C,YAAA,SAAAljC,EAAAmd,GACA,IAAAt1B,EAEA,IAAAwlD,EAAAlwB,GACA,MAAAluB,UAAA,+BA2CA,OAzCA8J,KAAAo0C,UACAp0C,KAAAo0C,QAAA,IAIAp0C,KAAAo0C,QAAAU,aACA90C,KAAAilB,KAAA,cAAAhe,EACAqtC,EAAAlwB,YACAA,cAEApkB,KAAAo0C,QAAAntC,GAGAstC,EAAAv0C,KAAAo0C,QAAAntC,IAEAjH,KAAAo0C,QAAAntC,GAAA/D,KAAAkhB,GAGApkB,KAAAo0C,QAAAntC,GAAA,CAAAjH,KAAAo0C,QAAAntC,GAAAmd,GANApkB,KAAAo0C,QAAAntC,GAAAmd,EASAmwB,EAAAv0C,KAAAo0C,QAAAntC,MAAAjH,KAAAo0C,QAAAntC,GAAA8tC,SAIAjmD,EAHA0lD,EAAAx0C,KAAAq0C,eAGAhyB,EAAAoyB,oBAFAz0C,KAAAq0C,gBAKAvlD,EAAA,GAAAkR,KAAAo0C,QAAAntC,GAAArR,OAAA9G,IACAkR,KAAAo0C,QAAAntC,GAAA8tC,QAAA,EACAhwC,QAAAC,MAAA,mIAGAhF,KAAAo0C,QAAAntC,GAAArR,QACA,mBAAAmP,QAAAiwC,OAEAjwC,QAAAiwC,SAKAh1C,MAGAqiB,EAAA/xB,UAAA+zB,GAAAhC,EAAA/xB,UAAA65C,YAEA9nB,EAAA/xB,UAAA2kD,KAAA,SAAAhuC,EAAAmd,GACA,IAAAkwB,EAAAlwB,GACA,MAAAluB,UAAA,+BAEA,IAAAg/C,GAAA,EAEA,SAAAC,IACAn1C,KAAAwkB,eAAAvd,EAAAkuC,GAEAD,IACAA,GAAA,EACA9wB,EAAAuP,MAAA3zB,KAAAmB,YAOA,OAHAg0C,EAAA/wB,WACApkB,KAAAqkB,GAAApd,EAAAkuC,GAEAn1C,MAIAqiB,EAAA/xB,UAAAk0B,eAAA,SAAAvd,EAAAmd,GACA,IAAAgxB,EAAAC,EAAAz/C,EAAAlH,EAEA,IAAA4lD,EAAAlwB,GACA,MAAAluB,UAAA,+BAEA,IAAA8J,KAAAo0C,UAAAp0C,KAAAo0C,QAAAntC,GACA,OAAAjH,KAMA,GAHApK,GADAw/C,EAAAp1C,KAAAo0C,QAAAntC,IACArR,OACAy/C,GAAA,EAEAD,IAAAhxB,GACAkwB,EAAAc,EAAAhxB,WAAAgxB,EAAAhxB,oBACApkB,KAAAo0C,QAAAntC,GACAjH,KAAAo0C,QAAA5vB,gBACAxkB,KAAAilB,KAAA,iBAAAhe,EAAAmd,QAEG,GAAAmwB,EAAAa,GAAA,CACH,IAAA1mD,EAAAkH,EAAoBlH,KAAA,GACpB,GAAA0mD,EAAA1mD,KAAA01B,GACAgxB,EAAA1mD,GAAA01B,UAAAgxB,EAAA1mD,GAAA01B,aAAA,CACAixB,EAAA3mD,EACA,MAIA,GAAA2mD,EAAA,EACA,OAAAr1C,KAEA,IAAAo1C,EAAAx/C,QACAw/C,EAAAx/C,OAAA,SACAoK,KAAAo0C,QAAAntC,IAEAmuC,EAAAnxC,OAAAoxC,EAAA,GAGAr1C,KAAAo0C,QAAA5vB,gBACAxkB,KAAAilB,KAAA,iBAAAhe,EAAAmd,GAGA,OAAApkB,MAGAqiB,EAAA/xB,UAAA+1B,mBAAA,SAAApf,GACA,IAAAhX,EAAA2kD,EAEA,IAAA50C,KAAAo0C,QACA,OAAAp0C,KAGA,IAAAA,KAAAo0C,QAAA5vB,eAKA,OAJA,IAAArjB,UAAAvL,OACAoK,KAAAo0C,QAAA,GACAp0C,KAAAo0C,QAAAntC,WACAjH,KAAAo0C,QAAAntC,GACAjH,KAIA,OAAAmB,UAAAvL,OAAA,CACA,IAAA3F,KAAA+P,KAAAo0C,QACA,mBAAAnkD,GACA+P,KAAAqmB,mBAAAp2B,GAIA,OAFA+P,KAAAqmB,mBAAA,kBACArmB,KAAAo0C,QAAA,GACAp0C,KAKA,GAAAs0C,EAFAM,EAAA50C,KAAAo0C,QAAAntC,IAGAjH,KAAAwkB,eAAAvd,EAAA2tC,QACG,GAAAA,EAEH,KAAAA,EAAAh/C,QACAoK,KAAAwkB,eAAAvd,EAAA2tC,IAAAh/C,OAAA,IAIA,cAFAoK,KAAAo0C,QAAAntC,GAEAjH,MAGAqiB,EAAA/xB,UAAAskD,UAAA,SAAA3tC,GAQA,OANAjH,KAAAo0C,SAAAp0C,KAAAo0C,QAAAntC,GAEAqtC,EAAAt0C,KAAAo0C,QAAAntC,IACA,CAAAjH,KAAAo0C,QAAAntC,IAEAjH,KAAAo0C,QAAAntC,GAAAo7B,QAJA,IAQAhgB,EAAA/xB,UAAAglD,cAAA,SAAAruC,GACA,GAAAjH,KAAAo0C,QAAA,CACA,IAAAmB,EAAAv1C,KAAAo0C,QAAAntC,GAEA,GAAAqtC,EAAAiB,GACA,SACA,GAAAA,EACA,OAAAA,EAAA3/C,OAEA,UAGAysB,EAAAizB,cAAA,SAAAE,EAAAvuC,GACA,OAAAuuC,EAAAF,cAAAruC,kCC5RAzY,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,0CAAAg4B,IAAAjnD,EAAAQ,EAAAyuB,EAAA,6CAAAC,IAAAlvB,EAAAQ,EAAAyuB,EAAA,mCAAAmB,IAAApwB,EAAAQ,EAAAyuB,EAAA,qCAAAi4B,IAAAlnD,EAAAQ,EAAAyuB,EAAA,yCAAAk4B,IAAAnnD,EAAAQ,EAAAyuB,EAAA,wCAAAm4B,IAAApnD,EAAAQ,EAAAyuB,EAAA,yCAAAo4B,IAMO,IAAMJ,EAAwB,wBAQxB/3B,EAA2B,4BAO3BkB,EAAiB,0BAOjB82B,EAAmB,6BAWnBC,EAAuB,uBAYvBC,EAAsB,gCAQtBC,EAAuB,kDC3DpC,IAAAC,EAAatnD,EAAQ,KACrBunD,EAAavnD,EAAQ,KAErBN,EAAA8nD,MAAAD,EACA7nD,EAAAwqB,MAAAo9B,EAAAp9B,MACAxqB,EAAA+nD,gBAAAH,EAAAG,gBACA/nD,EAAAgoD,YAAAJ,EAAAI,YACAhoD,EAAAioD,cAAAL,EAAAK,cACAjoD,EAAAkoD,sBAAAN,EAAAM,sBACAloD,EAAAmoD,qBAAAP,EAAAO,qBACAnoD,EAAAooD,yBAAAR,EAAAQ,uDCVA9nD,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,qCAAA84B,IAAA/nD,EAAAQ,EAAAyuB,EAAA,qCAAA+4B,IAAAhoD,EAAAQ,EAAAyuB,EAAA,gCAAAg5B,IAAAjoD,EAAAQ,EAAAyuB,EAAA,6BAAAi5B,IAAAloD,EAAAQ,EAAAyuB,EAAA,8BAAAk5B,IAAAnoD,EAAAQ,EAAAyuB,EAAA,kCAAAm5B,IAAApoD,EAAAQ,EAAAyuB,EAAA,mCAAAo5B,IAAAroD,EAAAQ,EAAAyuB,EAAA,iCAAAq5B,IAAAtoD,EAAAQ,EAAAyuB,EAAA,wCAAAs5B,IAAAvoD,EAAAQ,EAAAyuB,EAAA,yCAAAu5B,IAIO,IAAMT,EAAmB,YAMnBC,EAAmB,YAOnBC,EAAc,OAMdC,EAAW,KAMXC,EAAY,MAMZC,EAAgB,UAOhBC,EAAiB,WAMjBC,EAAe,SAOfC,EAAsB,sBAOtBC,EAAuB,icC1DvBC,EAAS,SAETC,EAAQ,QAERC,EAAU,UAEVC,EAAoB,YAEpBC,EAAS,SAETC,EAAO,OAEPC,EAAW,WAEXC,EAAe,eAEfC,EAAU,wSCFvB,IAAMC,EAAwB,CAC1BC,OAAUV,EACVW,SAAYX,EACZY,MAASX,EACTY,QAAWX,EACXY,oBAAqBX,EACrBY,OAAUX,GAyCd,SAASY,IACL,IAAMC,EAAYnY,UAAUmY,UAE5B,GAAIA,EAAUzkC,MAAM,YAAa,CAC7B,IAAMiI,EAAUw8B,EAAUzkC,MAAM,sBAAsB,GAEtD,MAAO,CACHxkB,KAAMsoD,EACN77B,YAUZ,SAASy8B,IACL,IAAMD,EAAYnY,UAAUmY,UAE5B,GAAIA,EAAUzkC,MAAM,eAAgB,CAChC,IAAMiI,EAAUw8B,EAAUzkC,MAAM,yBAAyB,GAEzD,MAAO,CACHxkB,KAAMqoD,EACN57B,YASZ,SAAS08B,IACL,IAEI18B,EAOIzsB,EATFwkB,EACAssB,UAAUmY,UAAUzkC,MAAM,wCAOhC,GAAIA,GAA+B,gBAAtBssB,UAAUsY,QAUnB,OAPI5kC,GAASA,EAAM7d,OAAS,IACxB3G,EAAOwkB,EAAM,GACbiI,EAAUjI,EAAM,IAEpBxkB,IAASA,EAAO,gBAChBysB,IAAYA,EAAU,WAEf,CACHzsB,KAAMuoD,EACN97B,WAUZ,SAAS48B,EAAQC,GASb,IARA,IAAIC,EACEC,EAAY,CACdL,EACAH,EACAE,GAIKzpD,EAAI,EAAGA,EAAI+pD,EAAU7iD,OAAQlH,IAElC,GADA8pD,EAAcC,EAAU/pD,KAEpB,OAAO8pD,EAIf,IAAMvpD,EAAOspD,EAAOG,iBAEpB,OAAIzpD,KAAQyoD,EACD,CACHzoD,KAAMyoD,EAAsBzoD,GAC5BysB,QAAS68B,EAAOI,sBAKxBH,EAzHJ,WACI,IAAMN,EAAYnY,UAAUmY,UACtBM,EAAc,CAChBvpD,KAAMwoD,EACN/7B,aAASnb,GAGb,GAAI23C,EAAUzkC,MAAM,YAAcykC,EAAUzkC,MAAM,QAC9C,GAAIykC,EAAUzkC,MAAM,OAAQ,CACxB,IAAMiI,EAAUw8B,EAAUzkC,MAAM,iBAAiB,GAE7CsG,OAAOjB,SAAS4C,EAAS,IAAM,KAC/B88B,EAAYvpD,KAAOgoD,EACnBuB,EAAY98B,QAAUA,QAG1B88B,EAAYvpD,KAAOgoD,EACnBuB,EAAY98B,QAAUw8B,EAAUzkC,MAAM,oBAAoB,GAIlE,OAAO+kC,EAoGOI,KAKP,CACH3pD,KAAMwoD,EACN/7B,aAASnb,OAOIs4C,aAQjB,SAAAA,EAAYL,GACR,IAAIvpD,EAAMysB,EAGV,+FAJqB+jB,CAAAz/B,KAAA64C,GAGrB74C,KAAK84C,QAAUC,IAAOC,UAAUjZ,UAAUmY,gBACf,IAAhBM,EAA6B,CACpC,IAAMS,EAAsBX,EAAQt4C,KAAK84C,SAEzC7pD,EAAOgqD,EAAoBhqD,KAC3BysB,EAAUu9B,EAAoBv9B,aACvB88B,EAAYvpD,QAAQyoD,GAC3BzoD,EAAOyoD,EAAsBc,EAAYvpD,MACzCysB,EAAU88B,EAAY98B,UAEtBzsB,EAAOwoD,EACP/7B,OAAUnb,GAGdP,KAAKk5C,MAAQjqD,EACb+Q,KAAKm5C,SAAWz9B,2DAQhB,OAAO1b,KAAKk5C,yCAQZ,OAAOl5C,KAAKk5C,QAAUjC,oCAQtB,OAAOj3C,KAAKk5C,QAAUhC,sCAQtB,OAAOl3C,KAAKk5C,QAAU/B,wCAQtB,OAAOn3C,KAAKk5C,QAAU9B,qCAQtB,OAAOp3C,KAAKk5C,QAAU7B,mCAQtB,OAAOr3C,KAAKk5C,QAAU5B,uCAQtB,OAAOt3C,KAAKk5C,QAAU3B,0CAQtB,OAAOv3C,KAAKk5C,QAAU1B,uCAQtB,OAAOx3C,KAAKm5C,iDAgBAC,GACZ,GAAIp5C,KAAKm5C,SACL,OAAOn5C,KAAK84C,QAAQO,UAAUD,gDAajB19B,GACjB,OAAO1b,KAAKs5C,gBAALC,EAAA,GAAwBv5C,KAAKk5C,MAA7B,IAAA7/C,OAAyCqiB,+CAYlCA,GACd,OAAO1b,KAAKs5C,gBAALC,EAAA,GAAwBv5C,KAAKk5C,MAA7B,IAAA7/C,OAAyCqiB,8CAanCA,GACb,OAAO1b,KAAKs5C,gBAALC,EAAA,GAAwBv5C,KAAKk5C,MAA7B,IAAA7/C,OAAyCqiB,gDChVxDltB,EAAAQ,EAAAyuB,EAAA,sBAAA+7B,IAAAhrD,EAAAQ,EAAAyuB,EAAA,sBAAAg8B,iQCOqB7Z,aAMjB,SAAAA,IAA+C,IAAnCxd,EAAmCjhB,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAApB,IAAIkhB,iGAAgBod,CAAAz/B,KAAA4/B,GAC3C5/B,KAAKoiB,aAAeA,EAGpBpiB,KAAKuiC,iBAAmBviC,KAAKqkB,GAAKrkB,KAAKmqC,YACvCnqC,KAAK05C,oBAAsB15C,KAAK25C,IAAM35C,KAAKwkB,0EASnCsI,EAAW1I,GAAU,IAAAzc,EAAA3H,KAG7B,OAFAA,KAAKoiB,aAAa+nB,YAAYrd,EAAW1I,GAElC,kBAAMzc,EAAK+xC,oBAAoB5sB,EAAW1I,2CAStC0I,EAAW1I,GACtBpkB,KAAKoiB,aAAaoC,eAAesI,EAAW1I,sECxCpD51B,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,4CAAAqX,IAAAtmC,EAAAQ,EAAAyuB,EAAA,2CAAAtsB,IAAA3C,EAAAQ,EAAAyuB,EAAA,sCAAArsB,IAAA5C,EAAAQ,EAAAyuB,EAAA,gCAAAm8B,IAWO,IAAM9kB,EAA0B,oCAS1B3jC,EAAyB,mCAazBC,EAAoB,8BAMpBwoD,EAAc,sDCvC3BprD,EAAAQ,EAAAyuB,EAAA,sBAAAo8B,IAAArrD,EAAAQ,EAAAyuB,EAAA,sBAAAq8B,IAAAtrD,EAAAQ,EAAAyuB,EAAA,sBAAAs8B,IAAAvrD,EAAAQ,EAAAyuB,EAAA,sBAAAu8B,IAUO,IAAMH,EAAc,wBAOdC,EAAkB,6BAKlBC,EAAkB,6BASlBC,EAAmB,oeCxBzB,SAASC,EAAiBzoB,GAC7B,OAAO1Y,SAAS0Y,EAAMV,MAAM/tB,MAAM,KAAK,GAAI,IAQxC,SAASm3C,EAAmB1oB,GAC/B,OAAO1Y,SAAS0Y,EAAMV,MAAM/tB,MAAM,KAAK,GAAI,IAQ/C,SAASo3C,EAAcpoB,GACnB,OAAKA,EAAMjB,MAIJiB,EAAMjB,MACRtrB,IAAI,SAAAurB,GAAQ,OAAIA,EAAS7pB,KACzB8pB,OAAO,SAACxI,EAAMyI,EAAOC,GAAd,OAAwBA,EAAMttB,QAAQ4kB,KAAUyI,IACvDr7B,OANM,MAaTwkD,aAOF,SAAAA,EAAYroB,GACR,GADe0N,EAAAz/B,KAAAo6C,IACVroB,EACD,MAAM,IAAIr7B,MAAM,sBAGpBsJ,KAAK+xB,MAAQA,qDAyEAsoB,EAAYC,GACzB,IAAMh9C,EAAY0C,KAAK8wB,MAAMS,KACzB,SAAAgpB,GAAO,OAAIA,EAAQrzC,KAAOmzC,GACvBE,EAAQj9C,YAAcg9C,IAG7B,OAAOh9C,GAAaA,EAAU3N,yCAQvB6qD,GACFx6C,KAAK+xB,MAAMjB,OAAU9wB,KAAK+xB,MAAMjB,MAAMl7B,SAI3CoK,KAAK+xB,MAAMjB,MACL9wB,KAAK+xB,MAAMjB,MAAME,OAAO,SAAAupB,GAAO,OAAIA,EAAQrzC,KAAOszC,8CAQ3CD,GACbv6C,KAAK8wB,MAAM5tB,KAAKq3C,qCAWV9oB,EAAWX,GACjB,OAAO9wB,KAAKoxB,WAAWG,KACnB,SAAAC,GAAK,OACDA,EAAMC,YAAcA,KACXX,GAASA,IAAUU,EAAMV,4CASnCW,GACP,OAAOzxB,KAAKoxB,WAAWJ,OACnB,SAAAQ,GAAK,OAAIA,EAAMC,YAAcA,mDASdA,EAAWgpB,GAC9B,OAAOz6C,KAAKoxB,WAAWG,KACnB,SAAAC,GAAK,OAAIA,EAAMC,YAAcA,GACtBwoB,EAAiBzoB,KAAWipB,2CAS5BC,GACX,OAAO16C,KAAK8wB,MAAMS,KACd,SAAAgpB,GAAO,MAA0B,SAAtBA,EAAQj9C,YACF,OAATo9C,GAAiBH,EAAQ5qD,QAAU+qD,4CAQ/C,OAAOP,EAAcn6C,KAAK+xB,uDAS1B,YAAiCxxB,IAA1BP,KAAK+xB,MAAMX,yDASlB,IAAMwF,EAAY52B,KAAK+xB,MAAM9qB,KAE7B,GAAkB,UAAd2vB,EACA,MAAM,IAAIlgC,MAAJ,qCAAA2C,OACmCu9B,EADnC,MAMV,GAAiB,IAFAujB,EAAcn6C,KAAK+xB,OAIhC,OAAO/xB,KAAK+xB,MAAMjB,MAAM,GAAG5pB,GAI/B,GAAIlH,KAAK+xB,MAAMX,WAAY,CACvB,IAAMM,EAAW1xB,KAAK26C,UAAU,OAEhC,GAAIjpB,EACA,OAAOuoB,EAAiBvoB,GAE5B,IAAMJ,EAAWtxB,KAAK26C,UAAU,OAEhC,GAAIrpB,EACA,OAAO2oB,EAAiB3oB,GAE5B,IAAMspB,EAAW56C,KAAK26C,UAAU,UAEhC,GAAIC,EACA,OAAOX,EAAiBW,uCAczBvpB,GACP,IAAMC,EAAWtxB,KAAK66C,uBAAuB,MAAOxpB,GAGpD,OAAOC,GAAY4oB,EAAmB5oB,sCAQtC,OAAOtxB,KAAK8wB,MACPtrB,IAAI,SAAAurB,GAAQ,OAAIA,EAAS7pB,KACzB8pB,OAAO,SAACxI,EAAMyI,EAAOC,GAAd,OAAwBA,EAAMttB,QAAQ4kB,KAAUyI,mDAS5D,IAAM2F,EAAY52B,KAAK+xB,MAAM9qB,KAE7B,GAAkB,UAAd2vB,EACA,MAAM,IAAIlgC,MAAJ,0CAAA2C,OACwCu9B,IAGlD,IAAMkkB,EAAa96C,KAAK+6C,WARL71B,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAUnB,QAAA8kB,EAAAC,EAA4BtlB,KAAKoxB,WAAjC3hC,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA6C,KAAlC81B,EAAkC31B,EAAA11B,MAIzC,GAAgC,QAA5BqrD,EAAcvpB,WACqB,WAA5BupB,EAAcvpB,UAAwB,CAE7C,IAAMwpB,EAAgBf,EAAmBc,GAEzCF,EAAW72C,OACP62C,EAAWl3C,QAAQq3C,GAAgB,KApB5B,MAAA5qC,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAwBnB,OAAO01B,2CAOP,OAAOhuC,KAAK8L,UAAU5Y,KAAK+xB,MAAMX,yDAQhB5I,GACZxoB,KAAK+xB,MAAMX,aAIhBpxB,KAAK+xB,MAAMX,WAAapxB,KAAK+xB,MAAMX,WAC9BJ,OAAO,SAAAkqB,GAAS,OAA4C,IAAxCA,EAAUpqB,MAAMltB,QAAhB,GAAAvK,OAA2BmvB,uDAOhCiJ,GACfzxB,KAAK+xB,MAAMX,aAIhBpxB,KAAK+xB,MAAMX,WACLpxB,KAAK+xB,MAAMX,WACRJ,OAAO,SAAAkqB,GAAS,OAAIA,EAAUzpB,YAAcA,yCAQ7C0pB,EAASC,GACbp7C,KAAK+xB,MAAMjB,OACX9wB,KAAK+xB,MAAMjB,MAAMxhB,QAAQ,SAAAyhB,GACjBA,EAAS7pB,KAAOi0C,IAChBpqB,EAAS7pB,GAAKk0C,0CAWjB5pB,GACTxxB,KAAKoxB,WAAWluB,KAAKsuB,iCAvTrB,OAJKxxB,KAAK+xB,MAAMjB,QACZ9wB,KAAK+xB,MAAMjB,MAAQ,IAGhB9wB,KAAK+xB,MAAMjB,oBASZA,GACN9wB,KAAK+xB,MAAMjB,MAAQA,oCAQnB,OAAO9wB,KAAK+xB,MAAM9B,wBAORA,GACVjwB,KAAK+xB,MAAM9B,UAAYA,qCAYvB,OAJKjwB,KAAK+xB,MAAMX,aACZpxB,KAAK+xB,MAAMX,WAAa,IAGrBpxB,KAAK+xB,MAAMX,yBAQPA,GACXpxB,KAAK+xB,MAAMX,WAAaA,WA4RnBiqB,EAAb,WAOI,SAAAA,EAAYC,GAAQ7b,EAAAz/B,KAAAq7C,GAChBr7C,KAAKu7C,UAAYC,QAAgBF,GARzC,OAAAG,EAAAJ,EAAA,EAAAprD,IAAA,cAAAN,MAAA,SAoBgBinC,GACR,IAAM8kB,EACA17C,KAAKu7C,UAAUxtB,MAAMwD,KAAK,SAAAQ,GAAK,OAAIA,EAAM9qB,OAAS2vB,IAExD,OAAO8kB,EAAgB,IAAItB,EAAUsB,GAAiB,OAxB9D,CAAAzrD,IAAA,WAAAN,MAAA,WAiCQ,OAAO6rD,QAAgBx7C,KAAKu7C,eAjCpCF,EAAA,iCC9YA7sD,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,wCAAAk+B,IAAAntD,EAAAQ,EAAAyuB,EAAA,yCAAAm+B,IAGO,IAAMD,EAAsB,yBAMtBC,EAAuB,wDCC7B,SAASjT,EAAqB+J,GACjC,IAAImJ,EAAYnJ,EAMhB,OAJIA,GAAU34B,OAAO+hC,mBACjBD,EAAY,GAGTA,EAAY,EAShB,SAASE,EAAiBC,GAC7B,OAAOA,EAAWpmD,OAAS,EAAIomD,EAAWt2C,OAAO,SAAC3O,EAAGC,GAAJ,OAAUD,EAAIC,IAAKglD,EAAWpmD,OAAS,EAUrF,SAASqmD,EAAqBD,GACjC,OAAOA,EAAWhrB,OAAO,SAAArhC,GAAK,OAAIA,GAAS,IApC/CnB,EAAAQ,EAAAyuB,EAAA,sBAAAkrB,IAAAn6C,EAAAQ,EAAAyuB,EAAA,sBAAAs+B,IAAAvtD,EAAAQ,EAAAyuB,EAAA,sBAAAw+B,kCCFAztD,EAAAQ,EAAAyuB,EAAA,sBAAAy+B,IAIO,IAAMA,EAAU,CACnBC,OAAQ,iBACRtI,iBAAkB,+BAClBuI,SAAU,mBACVC,UAAW,oBACX1nD,eAAgB,iBAChB2nD,YAAa,8BCyDjBnuD,EAAOD,QAnEa,CAChBquD,KAAQ,CACJ7gB,MAAO,KACPlC,OAAQ,KACRgjB,MAAO,GAEXC,OAAU,CACN/gB,MAAO,KACPlC,OAAQ,KACRgjB,MAAO,GAEXE,IAAO,CACHhhB,MAAO,KACPlC,OAAQ,IACRgjB,MAAO,GAEXG,GAAM,CACFjhB,MAAO,KACPlC,OAAQ,IACRgjB,MAAO,GAEXI,IAAO,CACHlhB,MAAO,IACPlC,OAAQ,IACRgjB,MAAO,GAEXK,IAAO,CACHnhB,MAAO,IACPlC,OAAQ,IACRgjB,MAAO,GAEXM,IAAO,CACHphB,MAAO,IACPlC,OAAQ,IACRgjB,MAAO,GAIXO,IAAO,CACHrhB,MAAO,IACPlC,OAAQ,IACRgjB,MAAO,GAEXQ,IAAO,CACHthB,MAAO,IACPlC,OAAQ,IACRgjB,MAAO,GAEXS,IAAO,CACHvhB,MAAO,IACPlC,OAAQ,IACRgjB,MAAO,GAIXU,IAAO,CACHxhB,MAAO,IACPlC,OAAQ,IACRgjB,MAAO,GAEXW,IAAO,CACHzhB,MAAO,IACPlC,OAAQ,IACRgjB,MAAO,kCC/DfhuD,EAAAQ,EAAAyuB,EAAA,sBAAA2/B,IAAA5uD,EAAAQ,EAAAyuB,EAAA,sBAAA4/B,IAAA7uD,EAAAQ,EAAAyuB,EAAA,sBAAA6/B,IAMO,IAAMF,EAAU,UAQVC,EAAS,SAOTC,EAAQ,8UChBrB,IA8DIC,EA9DE18B,EAASK,EAAQ,GAAqBP,UAAUQ,GAQhDq8B,EACW,cADXA,EAEY,eAFZA,EAGmB,sBAHnBA,EAIoB,uBAJpBA,EAKe,kBALfA,EAMY,eANZA,EAOoB,uBAPpBA,EASc,iBASdC,EACU,aADVA,EAEY,eAFZA,EAGS,YAHTA,EAIW,cAJXA,EAKU,aALVA,EAMW,cANXA,EAUgB,mBAVhBA,EAWe,kBAXfA,EAYe,kBAZfA,EAagB,mBAOhBC,EAAsB,QAMtBC,EACK,QADLA,EAEK,QAFLA,EAGe,gBAqBAr8B,aAwcjB,SAAAA,EAAYsE,EAAKze,gGAASs4B,CAAAz/B,KAAAshB,GACtBthB,KAAK+hB,OAAS5a,EAAQ4a,OACtB/hB,KAAK4lB,IAAMA,EACX5lB,KAAK0jB,eAAiBkC,EAAIlC,eAC1B1jB,KAAK0mB,aAAevf,EAAQuf,cAAgBg3B,EAC5C19C,KAAK49C,WAAY,EAEjBt8B,EAAUu8B,QAAQ36B,IAAIljB,MAElBshB,EAAUw8B,qBACV99C,KAAK+9C,gBAK0B,IAA3Bz8B,EAAUu8B,QAAQ74B,MAClB1D,EAAU08B,kBAAkBh+C,oEAjdXgF,EAAOF,GAC5Bwc,EAAU28B,SAAqB,YAAVj5C,GACrB6b,EAAO7b,MAAP,sBAAA3L,OAAmC2L,EAAnC,UAAA3L,OAAiDyL,0CAUpCE,EAAOF,GAIxB,GAHA+b,EAAOjc,IAAP,yBAAAvL,OAAoC2L,EAApC,SAAA3L,OAAiDyL,IAGnC,YAAVE,EAAJ,CAIAsc,EAAUw8B,oBAAqB,EAG/B,IAAII,GAAmB,EACnBC,EAAkB,KAZOj5B,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAc7B,QAAA8kB,EAAAC,EAAgChE,EAAUu8B,QAAQt4B,SAAlD91B,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA4D,KAAjD2C,EAAiDxC,EAAA11B,MACnDk4B,EAAkB+1B,YACnB/8B,EAAO5b,MAAM,+BACT4iB,EAAkBk2B,kBAClBG,GAAmB,EACdC,IACDA,EAAkBt2B,MApBL,MAAAxX,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GA0BxB84B,GAIL58B,EAAU08B,kBAAkBG,8CASPC,GAIrB,IAAMC,EAAgBD,EAAWr8B,OAC3Bu8B,EAAYF,EAAW16B,eALIoC,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAQjC,QAAA0lB,EAAAC,EAAqB5E,EAAUi9B,aAA/B9uD,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA6C,KAAlC04B,EAAkCv4B,EAAAt2B,MACzC,GAAI6uD,EAAOv3C,OAAS02C,EAAkB,CAClC,IAAMc,EAAYD,EAAOxlD,KAEzBsoB,EAAUo9B,aACNN,EACAK,EAAUx3C,KACVw3C,EAAUz5C,MACVy5C,EAAUE,IAAML,QACjB,GAAIE,EAAOv3C,OAAS02C,EAAkB,CAIzC,IAAMiB,EAAYJ,EAAOxlD,KAEzBsoB,EAAU28B,QAAQY,gBACdL,EAAOG,IAAML,EACbM,EAAUlyB,MACV2xB,EACAO,EAAUA,gBACX,GAAIJ,EAAOv3C,OAAS02C,EAA4B,CACnD,IAAM3kD,EAAOwlD,EAAOxlD,KAEpBsoB,EAAU28B,QAAQa,uBACdN,EAAOG,IAAML,EACbtlD,EAAK+lD,YACLV,EACArlD,EAAKwvB,KACLxvB,EAAKgxB,WACLhxB,EAAKixB,eArCgB,MAAA5Z,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAyCjC1E,EAAUi9B,aAAa3oD,OAAS,uCAahB+xB,EAAI1gB,EAAMjC,EAAO25C,GACjC,IAAIK,EAASh6C,EAERg6C,IACDn+B,EAAO1b,KAAK,uBACZ65C,EAAS,IAAItoD,MAAM,kBAEnB4qB,EAAUw8B,oBAAsBn2B,EAChCrG,EAAU28B,QAAQgB,YAAYN,EAAIh3B,EAAG5F,OAAQ9a,EAAM+3C,GAEnD19B,EAAUi9B,aAAar7C,KAAK,CACxB+D,KAAM02C,EACN3kD,KAAM,CACFgM,MAAOg6C,EACPL,KACA13C,+CAkBI0gB,EAAI+E,EAAOkyB,GAC3B,IAAMD,EAAKh3B,GAAMA,EAAGjE,eACd3B,EAAS4F,GAAMA,EAAG5F,OAEpBT,EAAUw8B,oBAAsBn2B,EAChCrG,EAAU28B,QAAQY,gBAAgBF,EAAIjyB,EAAO3K,EAAQ68B,GAErDt9B,EAAUi9B,aAAar7C,KAAK,CACxB6e,SACA48B,KACA13C,KAAM02C,EACN3kD,KAAM,CAAE0zB,QACJkyB,kEAakBM,GAS9B,IARA,IAAMC,EAAkB,CACpB,yBACA,kBACA,oBAJsChP,EAAA,WASrC,IAAMiP,EAAcD,EAAJ18C,GACX48C,EAAiBH,EAAWE,GAElCF,EAAWE,GAAc,WACrB,IAAI,QAAAE,EAAAn+C,UAAAvL,OAD6B2pD,EAC7B,IAAA9pD,MAAA6pD,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAD6BD,EAC7BC,GAAAr+C,UAAAq+C,GACA,OAAOH,EAAe1rB,MAAMurB,EAAYK,GAC1C,MAAO7mD,GACLqkC,IAAqBC,iBAAiBtkC,MAPlD+J,EAAA,EAAAA,EAAyB08C,EAAzBvpD,OAAA6M,IAA0C0tC,IAmB1C,IARA,IAAMsP,EAAe,CACjB,yBACA,kBACA,oBAvBsCC,EAAA,WA4BrC,IAAMN,EAAcK,EAAJr8C,GACXi8C,EAAiBH,EAAWE,GAElCF,EAAWE,GAAc,WAA0B,QAAAO,EAAAx+C,UAAAvL,OAAd2pD,EAAc,IAAA9pD,MAAAkqD,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAdL,EAAcK,GAAAz+C,UAAAy+C,GAC/C/+B,EAAO5b,MAAMm6C,EAAYG,GACzBF,EAAe1rB,MAAMurB,EAAYK,KALzCn8C,EAAA,EAAAA,EAAyBq8C,EAAzB7pD,OAAAwN,IAAuCs8C,IAQvC,IAAMG,EAAsBX,EAAWD,YAGvCC,EAAWD,YAAc,SAASN,EAAIh3B,EAAI1gB,GAAe,QAAAghC,EAAA9mC,UAAAvL,OAANsyC,EAAM,IAAAzyC,MAAAwyC,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,EAAA,GAAAhnC,UAAAgnC,GAIjDlhC,IAASu2C,EAQJ/6B,IAAQC,iBACT3d,SAAWA,QAAQE,MAAM,cAAe05C,EAAIh3B,EAAI1gB,GAGpD4Z,EAAO5b,MAAP0uB,MAAA9S,EAAM,CAAO,cAAe89B,EAAIh3B,EAAI1gB,GAA9B5N,OAAuC6uC,IAEjD,IACI2X,EAAoBhxD,KAApB8kC,MAAAksB,EAAmB,CAAMX,EAAYP,EAAIh3B,EAAI1gB,GAA1B5N,OAAmC6uC,IACxD,MAAO4X,GACD74C,IAASu2C,EACTz4C,SAAWA,QAAQC,MAAM,cAAe86C,GAExC/iB,IAAqBC,iBAAiB8iB,yCAiCnC34C,GACf,GAAIma,EAAU28B,QACV,MAAM,IAAIvnD,MAAM,mDAEpB,IACI,IAWIqpD,EAXEC,EAAmBC,UAqBzB,GAnBA3+B,EAAU28B,QAAU,IAAI+B,EACxB1+B,EAAU4+B,2BAA2B5+B,EAAU28B,SAC/C38B,EAAU8V,OAAS,CACfxV,UAAWza,EAAQya,UACnBD,SAAUxa,EAAQwa,UAEtBL,EAAUG,YAActa,EAAQsa,YAChCH,EAAUI,gBAAkBva,EAAQua,gBAIhCva,EAAQ0a,kBACRk+B,EAAe,CACXI,mBAAkB,GAAA9mD,OACX8N,EAAQ0a,gBADG,MAAAxoB,OAEVopB,IAAQ29B,UAFE,OAMtBj5C,EAAQ4a,OAAQ,CAEhB,IAAMtO,EAAQtM,EAAQ4a,OAAOtO,MAAM,gBAGnCssC,EAAaM,OAAU5sC,GAASA,EAAM,IAAO,IAIjD6N,EAAU28B,QAAQqC,WACdh/B,EAAUG,YACVH,EAAUI,gBACVJ,EAAU8V,OACV9V,EAAUi/B,mBACVhgD,EACAw/C,GAEJ,IAAMj+B,EAAqB3a,EAAQ2a,mBAcnC,OAZIA,IACAR,EAAU28B,QAAQuC,uBAAuB1+B,GAEzCA,IAAqBme,KAAK,SAAAx6B,GAClBA,GACAob,EAAO3b,KAAK,2BACN4H,KAAK4L,MAAMjT,GAAQg7C,aAGhCjd,MAAM,gBAGJ,EACT,MAAO9qC,GAQL,OAJAqkC,IAAqBC,iBAAiBtkC,GACtC4oB,EAAU28B,QAAU,KACpBp9B,EAAO7b,MAAMtM,IAEN,kDAYX,OAAOqlC,QAAQzc,EAAU28B,2DASI30B,EAAa3B,GAC1CrG,EAAUo/B,aAAa/4B,EAAI81B,EAA8Bn0B,8CASnC5wB,EAAGivB,GACzB,IACIrG,EAAUo9B,aACN/2B,EACA61B,EACA9kD,EACAivB,GAAMA,EAAGjE,gBACf,MAAO1e,GAIDD,SAAqC,mBAAlBA,QAAQC,OAE3BD,QAAQC,MAAM,4BAA6BA,yCAcnC27C,EAAcz0B,EAASC,GACvC,OAAO,IAAIiX,QAAQ,SAACC,EAASC,GACzB,GAAIhiB,EAAU28B,QACV38B,EAAU28B,QAAQ2C,iBACdD,EACA,CACIvpB,OAAQ9V,EAAU8V,OAClBlL,UACAC,WAEJ,SAAClc,EAAQxL,GACU,YAAXwL,EACAozB,EAAQ5+B,GAER6+B,EAAO7+B,SAGhB,CACH,IAAMiL,EAAS,sDAEfmR,EAAO7b,MAAM0K,GACb4zB,EAAO5zB,qDAWWhX,EAAGivB,GAC7BrG,EAAUo9B,aAAa/2B,EAAI61B,EAA4B9kD,EAAG,4CASzC20C,EAAMpmC,EAAM0gB,GAC7B,IAAI+E,EAGAA,EADS,UAATzlB,EACQomC,EAAOoQ,EAAyBA,EAEhCpQ,EAAOoQ,EAAwBA,EAG3Cn8B,EAAUo/B,aAAa/4B,EAAI+E,mCA9L3B,OAJK6wB,IACDA,EAAW,IAAI/5B,KAGZ+5B,iDAwOP18B,EAAO3b,KAAK,eAAgBlF,KAAK0mB,cACjC,IACI,IAAMm6B,EAAmB,CACrBC,mBACI9gD,KAAK4lB,IAAI2kB,MACHjpB,EAAU28B,QAAQ8C,aAAaC,KAC/B1/B,EAAU28B,QAAQ8C,aAAaE,QAEvCC,EACA5/B,EAAU28B,QAAQkD,aAChBnhD,KAAK0jB,eACL1jB,KAAK0mB,aACLpF,EAAU28B,QAAQmD,YAAYC,UAC9BrhD,KAAK+hB,OACL8+B,EACAv/B,EAAUggC,uBAElBthD,KAAK49C,WAAY,EAEjB,IAAM2D,EAAyB,YAAfL,EAAIjxC,OAMpB,OAJKsxC,GACD1gC,EAAO7b,MAAM,kCAAmCk8C,EAAIz8C,SAGjD88C,EAET,MAAOv8C,GAGL,OAFA+3B,IAAqBC,iBAAiBh4B,IAE/B,uDAqBPwjB,EACAsB,EACA03B,EACAx3B,EACAC,GACJ,GAAK3I,EAAU28B,QAAf,CAIA,IAAMc,EAAcj1B,EAAUxI,EAAU8V,OAASoqB,EAE7ClgC,EAAUw8B,mBACVx8B,EAAU28B,QAAQa,uBACd9+C,KAAK0jB,eACLq7B,EACA/+C,KAAK+hB,OACLyG,EACAwB,EACAC,GAEJ3I,EAAUi9B,aAAar7C,KAAK,CACxB+D,KAAM02C,EACNgB,GAAI3+C,KAAK0jB,eACT1qB,KAAM,CACF+lD,cACA90B,cACAzB,OACAwB,oEAaZ1I,EAAUo/B,aAAa1gD,KAAMy9C,gDAQzBn8B,EAAUw8B,oBACVx8B,EAAU28B,QAAQY,gBACd7+C,KAAK0jB,eACLpC,EAAU28B,QAAQR,YAAYgE,iBAC9BzhD,KAAK+hB,QAEbT,EAAUu8B,QAAQv3B,OAAOtmB,6DAOzBshB,EAAUo9B,aACN1+C,KACAw9C,EACA,KACAx9C,KAAK0jB,8DAQShrB,GAClB4oB,EAAUo9B,aACN1+C,KAAMw9C,EAA2B9kD,EAAGsH,KAAK0jB,+DAQ1BhrB,GACnB4oB,EAAUo9B,aACN1+C,KAAMw9C,EAA4B9kD,EAAGsH,KAAK0jB,8DAQ5BuE,GAClB3G,EAAUo/B,aACN1gD,KACAioB,EAAWw1B,EAA2BA,kDAUvBlgC,EAAOiL,GAC1B,IAAIo2B,EAEAp2B,IACAo2B,EAAY,CAAEp2B,SAGlBlH,EAAUo/B,aACN1gD,KACAud,EAAQkgC,EAA+BA,EACvCmB,kDAQelmD,GACnB4oB,EAAUo9B,aACN1+C,KAAMw9C,EAAmC9kD,EAAGsH,KAAK0jB,gEAQjChrB,GACpB4oB,EAAUo9B,aACN1+C,KAAMw9C,EAAoC9kD,EAAGsH,KAAK0jB,kEAQhChrB,GACtB4oB,EAAUo9B,aACN1+C,KAAMw9C,EAA+B9kD,EAAGsH,KAAK0jB,yBAQzDpC,EAAU28B,QAAU,KAKpB38B,EAAUi9B,aAAe,GAOzBj9B,EAAUw8B,oBAAqB,EAM/Bx8B,EAAUG,YAAc,KAMxBH,EAAUI,gBAAkB,KAS5BJ,EAAU8V,OAAS,mFClyBnB,SAAAjW,GAAA,IAKIugC,EAEAC,EAPJC,EAAApzD,EAAA,GAAAqzD,EAAArzD,EAAA,IAAAszD,EAAAtzD,EAAA2B,EAAA0xD,GACMhhC,EAASF,oBAAUQ,GAqHzB,SAAS4gC,IACL,IAAIC,EAEJ,IAEIA,GAAW1zD,QAAU0R,MAAMiiD,aAC7B,MAAOj9C,GACL6b,EAAO7b,MAAMA,GAGjB,OAAOg9C,EAaX,SAASE,IACL,MAAO,GAAA7oD,OAAGiS,KAAKC,SAASxV,SAAS,IAA1B,aAAyCwf,OAAO,EAAG,GAlI/CkI,EAAA,GAKX0kC,wBACI,IAAKT,EAAoB,CACrB,IAAMO,EAAeF,IAEjBE,IACAP,EAAqBO,EAAatpC,QAAQ,sBAEzC+oC,IAqEPU,EAAWC,IAAkBC,mBAEnCzhC,EAAOjc,IAAI,0BAA2Bw9C,GAtE1BV,EAwELU,EAvESH,GACAA,EAAaj1C,QACT,oBACA00C,IA+DxB,IACUU,EA3DF,OAAOV,GAOXa,gBACI,IAAKZ,EAAY,CACb,IAAMM,EAAeF,IAEjBE,IACAN,EAAaM,EAAatpC,QAAQ,gBAEjCgpC,IAyDPa,EA8BCN,IAAQA,IAAQA,IAAQA,IA5B/BrhC,EAAOjc,IAAI,eAAgB49C,GA1Dfb,EA4DLa,EA3DSP,GACAA,EAAaj1C,QAAQ,cAAe20C,IAqDxD,IACUa,EAjDF,OAAOb,GAOXxO,gBAGI,IAAM8O,EAAeF,IAErB,OAAOE,EAAeA,EAAatpC,QAAQ,kBAAepY,GAO9D4yC,cAAcA,GACV,IAAM8O,EAAeF,IAEjBE,IACI9O,EACA8O,EAAaj1C,QAAQ,YAAammC,GAElC8O,EAAah1C,WAAW,2EC/ExC,IAAMw1C,EACA,iEAcN,SAAS5wB,EAAU5W,EAAKye,GACpB,OAAOpuB,KAAKqM,MAAMrM,KAAKC,UAAYmuB,EAAMze,EAAM,IAAMA,EAQzD,SAASynC,EAAcltD,GACnB,OAAOA,EAAIq8B,EAAU,EAAGr8B,EAAII,OAAS,IAqBzC,IAAMg8B,EAAa,CAKf+wB,eALe,WAMX,OAAOD,EA7CI,qBAoDfE,gBAbe,SAaCprD,GAGZ,IAFA,IAAI0pD,EAAM,GAEH1pD,KACH0pD,GAAOlhD,KAAK2iD,iBAGhB,OAAOzB,GAEXwB,gBACAG,kBApCJ,SAA2BjtD,GAGvB,IAFA,IAAI6P,EAAS,GAEJ/W,EAAI,EAAGA,EAAIkH,EAAQlH,GAAK,EAC7B+W,GAAUi9C,EAAcD,GAG5B,OAAOh9C,GA8BPosB,aAGJ1jC,EAAOD,QAAU0jC,i9BCrEjB,SAASkxB,IAA+C,IAAjBC,EAAiB5hD,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,8BAAA6hD,IAAAvjB,EAAAz/B,KAAAgjD,IAAA,GAIpD,gBAAAC,GAII,SAAAC,IAAqB,IAAAC,EAAAx7C,EAAA83B,EAAAz/B,KAAAkjD,GAAA,QAAAjb,EAAA9mC,UAAAvL,OAANsyC,EAAM,IAAAzyC,MAAAwyC,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,GAAAhnC,UAAAgnC,GAAA,OACjBxgC,EAAA+3B,EAAA1/B,MAAAmjD,EAAAxjB,EAAAujB,IAAAr0D,KAAA8kC,MAAAwvB,EAAA,CAAAnjD,MAAA3G,OAAS6uC,MACJxzB,WAAa,KAFD/M,YAJzB,yOAAAy7C,CAAAF,EAAqBH,KAArBG,KAAA,EAAAjzD,IAAA,OAAAN,MAAA,SAaS+kB,GACD1U,KAAK0U,WAAaA,kCAd1BwuC,EAAA,GAsBWJ,QAKR,IAAMO,EACPP,EAA8BljB,umCCjBpC,IAAM/e,EAASF,oBAAUQ,GA0ClB,IAAMmiC,EAAuB,CAChC,CAAEC,KAAM,gCACR,CAAEA,KAAM,iCACR,CAAEA,KAAM,kCASCC,EAAsB,OAKdC,cAcjB,SAAAA,EAAYt8C,EAASu8C,GAAO,IAAA/7C,EAAA,mGAAA83B,CAAAz/B,KAAAyjD,IACxB97C,EAAA+3B,EAAA1/B,KAAA2/B,EAAA8jB,GAAA50D,KAAAmR,QACK0U,WAAa,KAClB/M,EAAKg8C,sBAAuB,EAC5Bh8C,EAAKi8C,gBAAkB,GACvBj8C,EAAKR,QAAUA,EACfQ,EAAK+7C,MAAQA,EACb/7C,EAAKk8C,mBAAoB,EA9C7BC,cACAC,cAiDIp8C,EAAK+M,WAvEb,SAAAgsB,GAA2G,IAA/EsjB,EAA+EtjB,EAA/EsjB,sBAA+EC,EAAAvjB,EAAxDwjB,kBAAwD,IAAAD,EAA3C,aAA2CA,EAA7BP,EAA6BhjB,EAA7BgjB,MAAOS,EAAsBzjB,EAAtByjB,mBAOjF,OALIT,IAEAQ,GAAU,GAAA7qD,QAAoC,IAA7B6qD,EAAWtgD,QAAQ,KAAc,IAAM,IAA9C,UAAAvK,OAA0DqqD,IAGjE,IAAIU,IAAe,CACtBJ,wBACAE,aACAC,uBA6DkBE,CAAiB,CAC/BL,sBAAuB78C,EAAQ68C,sBAG/BE,WAAY/8C,EAAQ+8C,YAAc/8C,EAAQm9C,KAC1CZ,QACAS,mBAAoBh9C,EAAQg9C,qBAGhCx8C,EAAK48C,sBAEL58C,EAAK68C,KAAO,IAAIC,IAAK98C,EAAK+M,WAAY/M,EAAKR,QAAQu9C,YAGnD/8C,EAAKg9C,mBAOL3R,EAAE1kD,QAAQ+1B,GAAG,sBAAuB,SAAAugC,GAChCj9C,EAAK8H,WAAWm1C,GAAIphB,MAAM,gBAjCN77B,wPAdEi4B,yDA4D1B5/B,KAAKwkD,KAAKK,WAAW,qBACrB7kD,KAAKwkD,KAAKK,WAAW,8BACrB7kD,KAAKwkD,KAAKK,WAAW,wCACrB7kD,KAAKwkD,KAAKK,WAAW,+BACrB7kD,KAAKwkD,KAAKK,WAAW,0CACrB7kD,KAAKwkD,KAAKK,WAAW,kCACrB7kD,KAAKwkD,KAAKK,WAAW,mCAEhB7kD,KAAKmH,QAAQ29C,YAAcriC,IAAQsiC,eACpC/kD,KAAKwkD,KAAKK,WAAW,qBASzB7kD,KAAKwkD,KAAKK,WAAW,qBACrB7kD,KAAKwkD,KAAKK,WAAW,qBAKjBpiC,IAAQga,aAA6C,IAA/Bz8B,KAAKmH,QAAQ69C,gBACnCnkC,EAAO3b,KAAK,sBACZlF,KAAKwkD,KAAKK,WAAW,kCAGrB7kD,KAAK0U,WAAWuwC,MAChBjlD,KAAKwkD,KAAKK,WAAW,oEAUzB,OAA+B,IAAxB7kD,KAAKklD,uDAOZ,OAAOllD,KAAK0U,uDAciC,IAAAlM,EAAAxI,KAA/BmlD,EAA+BhkD,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAjB,GAAI8O,EAAa9O,UAAAvL,OAAA,EAAAuL,UAAA,QAAAZ,EAALuE,EAAK3D,UAAAvL,OAAA,EAAAuL,UAAA,QAAAZ,EACvC+T,EAAMhmB,OAAO82D,YAAY9wC,MACzB+wC,EAAYvqD,UAAQwqD,gBAAgBr1C,GAAQtN,cAQlD,GANA3C,KAAK4jD,gBAAgByB,GAAa/wC,EAClCuM,EAAOjc,IAAP,kBAAAvL,OACsBgsD,GADtBhsD,OACkCyL,EAAG,IAAAzL,OAAOyL,EAAP,KAAgB,GADrD,OAEIwP,GAEJtU,KAAKoiB,aAAa6C,KAAKsgC,IAAW/zD,0BAA2B2zD,EAAal1C,EAAQnL,GAC9EmL,IAAWnV,UAAQ2C,OAAOM,WACvBkS,IAAWnV,UAAQ2C,OAAOS,SAAU,EACnC8B,KAAKmH,QAAQq+C,aACTxlD,KAAKmH,QAAQs+C,KAAOzlD,KAAKmH,QAAQs+C,IAAID,cACzCxlD,KAAK0U,WAAWw+B,OAAOwS,4BAG3B7kC,EAAO3b,KAAP,iBAAA7L,OAA6B2G,KAAK0U,WAAW/Q,MAE7C3D,KAAK2lD,kBAAeplD,EAGpB,IAAMqlD,EAAU5lD,KAAK0U,WAAWva,OAGhC6F,KAAKwkD,KAAKqB,yBAAyBD,GAC9B3lB,KAAK,SAAAW,GAA8B,IAA3B93B,EAA2B83B,EAA3B93B,SAAUg9C,EAAiBllB,EAAjBklB,WACXh9C,EAAS6d,IAAI7rB,UAAQK,GAAG4qD,OACxBv9C,EAAK08C,gBAAiB,EACtB18C,EAAKkM,WAAWsxC,KAAKC,cAAcL,IAEnC/kC,EAAO1b,KAAP,yBAAA9L,OAAqCusD,IAIzCE,EAAWx2C,QAAQ,SAAA42C,GACO,iBAAlBA,EAASj/C,OACTuB,EAAK29C,6BAA+BD,EAASj3D,MAG3B,wBAAlBi3D,EAASj/C,OACTuB,EAAK49C,mCAAqCF,EAASj3D,SAIvDuZ,EAAK29C,8BACF39C,EAAK49C,qCACR59C,EAAKkM,WAAWzG,WACZzF,EAAK69C,kBAAkBn2D,KAAKsY,GAAO,KACnC,UAAW,KAAM,QAG5Bg7B,MAAM,SAAAx+B,GACH,IAAM83B,EAAS,0BAEfC,IAAqBC,iBACjB,IAAItmC,MAAJ,GAAA2C,OAAayjC,EAAb,MAAAzjC,OAAwB2L,KAC5B6b,EAAO7b,MAAM83B,EAAQ93B,KAGzBmgD,EAAYmB,WACZtmD,KAAK6jD,mBAAoB,GAEzB7jD,KAAK0U,YAAc1U,KAAK0U,WAAW5K,WAChChP,UAAQoJ,mBAAmBlE,KAAK0U,WAAW/Q,MAG9C3D,KAAKoiB,aAAa6C,KACdshC,yBACAzrD,UAAQoJ,mBAAmBlE,KAAK0U,WAAW/Q,WAEhD,GAAIsM,IAAWnV,UAAQ2C,OAAOG,SACrB,+BAARkH,EACA9E,KAAKwmD,2BAA4B,EAEjCxmD,KAAKymD,kBAAmB,EAE5BzmD,KAAK2lD,aAAe7gD,EACR,cAARA,GACA9E,KAAKoiB,aAAa6C,KACdshC,oBACAG,cAAmC5hD,QAExC,GAAImL,IAAWnV,UAAQ2C,OAAOC,MACjCsC,KAAK2lD,aAAe7gD,OACjB,GAAImL,IAAWnV,UAAQ2C,OAAOO,aAAc,CAE/CgC,KAAK0U,WAAWsxC,KAAKW,eACrB,IAAMC,EAA2B7oB,QAAQ/9B,KAAK2jD,sBACxCkD,EAAS/hD,GAAO9E,KAAK2lD,aAE3B,GAAI3lD,KAAKwmD,0BAELxmD,KAAKoiB,aAAa6C,KACdshC,oBACAG,0BACD,GAAI1mD,KAAKymD,iBACZzmD,KAAKoiB,aAAa6C,KACdshC,oBACAG,cACAG,OACAtmD,EACAP,KAAK8mD,0CACN,GAAIF,EACP5mD,KAAKoiB,aAAa6C,KACdshC,0BAA+CM,OAChD,CAMHhmC,EAAO7b,MAAM,4BAIb,IAAM+hD,EAAkBjsD,UAAQksD,qBAE5BD,GAAmB,KAAOA,EAAkB,IAC5C/mD,KAAKoiB,aAAa6C,KACdshC,oBACAG,eACAG,GAAU,oBACQtmD,EAClBP,KAAK8mD,qCAET9mD,KAAKoiB,aAAa6C,KACdshC,oBACAG,2BACAG,GAAU,gCACQtmD,EAClBP,KAAK8mD,2CAGV72C,IAAWnV,UAAQ2C,OAAOK,UAEjCkC,KAAKoiB,aAAa6C,KACdshC,oBACAG,oBACA5hD,EACAqgD,oCASHxhD,EAAK2iD,GA4BVtmD,KAAKinD,cACLjnD,KAAK0U,WAAW/I,QACZhI,EACA2iD,EACAtmD,KAAKknD,kBAAkBh3D,KAAK8P,KAAM,CAC9B2D,MACA2iD,6CAWLn/C,GACHnH,KAAKinD,cACL,IAAM3yC,EAAMtU,KAAK4jD,gBAAgBuD,UAAY74D,OAAO82D,YAAY9wC,MAEhEuM,EAAOjc,IAAI,8BAA+B0P,GAC1CtU,KAAK0U,WAAWpI,OAAOnF,EAAQxD,IAAKwD,EAAQoF,IACxCuM,SAAS3R,EAAQqF,IAAK,IAAM,EAC5BxM,KAAKknD,kBAAkBh3D,KAAK8P,KAAM,CAC9B2D,IAAKwD,EAAQxD,IACb2iD,SAAUn/C,EAAQm/C,kDAS1BtmD,KAAKwmD,2BAA4B,EACjCxmD,KAAKymD,kBAAmB,EACxBzmD,KAAK2lD,kBAAeplD,EACpBP,KAAK2jD,0BAAuBpjD,kCAQxBoD,EAAK2iD,GACT,IAAK3iD,EAAK,KAAAyjD,EAC8BpnD,KAAKmH,QAAQkgD,MAAzCC,EADFF,EACEE,gBAAiBntD,EADnBitD,EACmBjtD,OACrBotD,EAAeD,GAAmBntD,EAS9BohB,EAAajtB,OAAbitB,SAER,GAAI+rC,EAAiB,CACjB,IAAMjqC,EAAS9B,GAAYA,EAAS8B,QAE/BA,IAA4C,IAAlCA,EAAOzZ,QAAQ,eACnB5D,KAAK0jD,SACZ6D,EAAeptD,GAKvBwJ,EAAM4jD,GAAiBhsC,GAAYA,EAASisC,SAGhD,OAAOxnD,KAAKqM,SAAS1I,EAAK2iD,sCAanB1+B,EAAUzgB,EAASsgD,GAC1B,IAAIC,EAAO,GAAAruD,OAAMuuB,EAAN,KAAAvuB,OAAkB2G,KAAKmH,QAAQkgD,MAAMM,IAArC,KAELC,EAAcH,EACdA,EAAiBznD,KAAK0U,WAAW/Q,IAAK3D,KAAK6jD,mBAC3CjyB,IAAWgxB,gBAAgB,GAAGjgD,cAKpC,OAHAke,EAAO3b,KAAP,OAAA7L,OAAmB2G,KAAK0U,WAAW/Q,IAAnC,wBAAAtK,OAA6DuuD,IAC7DF,GAAWE,EAEJ5nD,KAAK0U,WAAWmzC,KAAKC,WAAWJ,EAAS,KAAMvgD,oCAStD,OAAOnH,KAAK0U,WAAW/Q,2CAQvB,IAAMuvC,EAASlzC,KAAK0U,WAAWw+B,OAG/B,OAAOA,EAASA,EAAO6U,SAAW,wCAOlC,OAAQ/nD,KAAK0U,WAAWmM,QAAU,IAAIjc,KAAO,oCAMnC,IAAAojD,GACVA,EAAAhoD,KAAK0U,WAAWuwC,MAAKgD,KAArBt0B,MAAAq0B,EAAA7mD,wCAUC2M,GAAS,IAAAC,EAAA/N,KACV,OAAO,IAAIojC,QAAQ,SAACC,EAASC,GACrBv1B,EAAKm6C,kBACLn6C,EAAK2G,WAAWsxC,KACXA,KAAKj4C,EAAK2G,WAAWva,OAAQkpC,EAASC,EAAQx1B,GAEnDw1B,EAAO,yFASf,OAAOtjC,KAAK0U,WAAWw+B,OAAOiV,4CAUvBvD,GAAI,IAAAr2C,EAAAvO,KACX,OAAIA,KAAK2jD,qBACE3jD,KAAK2jD,qBACJ3jD,KAAK0U,YAIjB1U,KAAK2jD,qBAAuB,IAAIvgB,QAAQ,SAAAC,GAQpC90B,EAAK6T,aAAaiC,GAAGkhC,IAAW/zD,0BAPL,SAArB42D,EAAsBjD,EAAal1C,GACjCA,IAAWnV,UAAQ2C,OAAOO,eAC1BqlC,IACA90B,EAAK6T,aAAaoC,eAAe+gC,IAAW/zD,0BAA2B42D,QAOnFpoD,KAAKqoD,uBAAuBzD,GAErB5kD,KAAK2jD,sBAhBDvgB,QAAQC,yDA4BAuhB,GAWnB,IAFC5kD,KAAK0U,WAAW4zC,kBAAoBtoD,KAAK0U,WAAWhH,SAEhD1N,KAAK0U,WAAW4zC,kBAAjB,MAAqC1D,EAA0C,CAC/E,IAAM2D,EAAS3D,EAAG39C,KAElB,IAAe,iBAAXshD,GAAwC,WAAXA,KAI7BvoD,KAAK0U,WAAWvN,QAAQqT,MAAO,EAG3Bxa,KAAK0U,WAAW8zC,yBAEhB,OAKZxoD,KAAK0U,WAAWjF,cAEqB,IAAjCzP,KAAK0U,WAAWvN,QAAQqT,MACxBxa,KAAK0U,WAAWhH,sDAQpB,IAAMs+B,EAAY,CACdyc,IAAK,CAAEC,WAAY,IACnBjD,IAAK,CAAEiD,WAAY,KAGjBC,EAAkB3oD,KAAKmH,QAAQs+C,KAC9BzlD,KAAKmH,QAAQs+C,IAAImD,aAAgBtF,EAEpC7tD,MAAMC,QAAQizD,KACd9nC,EAAO3b,KAAK,qBAAsByjD,GAClC3c,EAAUyZ,IAAIiD,WAAaC,GAG3B3oD,KAAKmH,QAAQs+C,KAAOzlD,KAAKmH,QAAQs+C,IAAIoD,qBACrChoC,EAAO3b,KAAK,6BACRlF,KAAKmH,QAAQs+C,IAAIoD,oBAErB7c,EAAUyZ,IAAIoD,mBACR7oD,KAAKmH,QAAQs+C,IAAIoD,oBAG3B7oD,KAAK0U,WAAW3O,oBAAoB,OAAQ,IAAI+iD,IAAoB9oD,OACpEA,KAAK0U,WAAW3O,oBAAoB,SAAU,IAAIgjD,IAAuB/oD,KAAMA,KAAKoiB,aAAc4pB,IAClGhsC,KAAK0U,WAAW3O,oBAAoB,OAAQ,IAAIijD,IAAqBhpD,OACrEA,KAAK0U,WAAW3O,oBAAoB,OAAQ,IAAIkjD,iEAUhD,IAAMvzB,EAAU,GAGhB,GAAI11B,KAAKmH,QAAQ+hD,gBACVlpD,KAAKmH,QAAQ+hD,eAAeC,OAC5BnpD,KAAK0U,WAAWoD,oBAAqB,CAGxC,IAAMsxC,EAAappD,KAAK0U,WAAWoD,oBAC9BuxC,OAAOtmD,MAAM,WACZ+X,EAAU,GAEhBsuC,EAAW95C,QAAQ,SAAA9K,GACf,IAAMR,EAAQQ,EAAKzB,MAAM,MACnBgY,EAAS/W,EAAMgqB,QACfr+B,EAAQqU,EAAMb,KAAK,MAEzB2X,EAAQC,GAAUprB,IAItB+lC,EAAQ4zB,cACFtpD,KAAKmH,QAAQ+hD,eAAeC,QACtBruC,EAAQ,iBAUxB,OAJA4a,EAAQ6zB,aAAevpD,KAAK0U,WAAWsxC,KAAKwD,qBAC5C9zB,EAAQ+zB,wBAA0BzpD,KAAK0U,WAAWg1C,0BAG3Ch0B,mDAQc3M,GAErB,GAAK/oB,KAAKmmD,8BAAiCp9B,EAA3C,CAIA,IAAMjkB,EAAMqR,eAAK,CAAEhD,GAAInT,KAAKmmD,+BAE5BrhD,EAAI/V,EAAE,eAAgB,CAClBkX,MAAO,2BACP0jD,KAAM5gC,IACL5iB,KAELnG,KAAK0U,WAAWnH,KAAKzI,kDAYH8kD,GAClB,IACI,IAAMC,EAAO/8C,KAAK4L,MAAMkxC,GASxB,GAAIC,GAAwB,WAAhB10D,EAAO00D,GAAmB,CAClC,IAAM5iD,EAAO4iD,EAAKrG,GAElB,QAAoB,IAATv8C,EACP,OAAO4iD,EAGXhpC,EAAO5b,MAAM,yDACM,UAAWgC,IAEpC,MAAOvO,GACL,OAAO,EAGX,OAAO,4CAUOoM,GACd,IAAM9O,EAAO8O,EAAIlC,aAAa,QAE9B,GAAM5M,IAASgK,KAAKmmD,8BACbnwD,IAASgK,KAAKomD,mCADrB,CAKA,IAAM0D,EAAc9W,EAAEluC,GAAKysB,KAAK,iBAC3B5vB,OACCooD,EAAa/pD,KAAKgqD,sBAAsBF,GAgB9C,OAdIC,GACuC,iBAApCA,EAAWvG,IACXuG,EAAWE,OACdjqD,KAAKoiB,aAAa6C,KACdsgC,IAAWlxD,uBAAwB01D,EAAWE,OAGlDF,GACuC,wBAApCA,EAAWvG,IACXuG,EAAWG,mBACdlqD,KAAKoiB,aAAa6C,KACdsgC,IAAWjxD,8BAA+By1D,EAAWG,oBAGtD,0GCxwBf17D,EAAAQ,EAAAyuB,EAAA,sBAAA0sC,IAAA37D,EAAAQ,EAAAyuB,EAAA,sBAAA2sC,IAMO,IAAMD,EAAqB,sBAOrBC,EAA0B,wDCbvC57D,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,6CAAA4sC,IAAA77D,EAAAQ,EAAAyuB,EAAA,gCAAA6sC,IAAA97D,EAAAQ,EAAAyuB,EAAA,sCAAAtqB,IAAA3E,EAAAQ,EAAAyuB,EAAA,iCAAA8sC,IAeO,IAAMF,EAA2B,0BAK3BC,EAAc,wBAKdn3D,EAAoB,8BAMpBo3D,EAAe,u/BCtB5B,IAAM1pC,EAASF,oBAAUQ,GAKJijC,cAiCjB,SAAAA,EAAA1jB,GAAuE,IAAA/4B,EAAzDq8C,EAAyDtjB,EAAzDsjB,sBAAuBG,EAAkCzjB,EAAlCyjB,mBAAoBD,EAAcxjB,EAAdwjB,WAAc,mGAAAzkB,CAAAz/B,KAAAokD,IACnEz8C,EAAA+3B,EAAA1/B,KAAA2/B,EAAAykB,GAAAv1D,KAAAmR,QACKwqD,SAAW,CACZxG,2BAAwD,IAA1BA,GAA+CA,EAC7EG,wBAAkD,IAAvBA,EAAqC,KAAgBpqC,OAAOoqC,IAQ3Fx8C,EAAK8iD,cAAgB,EACrB9iD,EAAK+iD,aAAe,IAAI5vD,UAAQwN,WAAW47C,GAC3Cv8C,EAAKgjD,eAAiBzG,EAAWzxB,WAAW,QAAUyxB,EAAWzxB,WAAW,QAG5E9qB,EAAK+iD,aAAalgD,WAAa,EAE/B7C,EAAKijD,oBAAsB,IAAIC,IAC/BljD,EAAKijD,oBAAoBE,cAAcnjD,EAAK+iD,cApBuB/iD,8OAjC/Bi4B,+CAOpC,MAAO,CACHmrB,oBAAqB,sDAUzB,OAAOjwD,UAAQ2C,0DAgJCxO,EAAMkhB,GACtBnQ,KAAK/Q,GAAQkhB,EACbA,EAAOrF,KAAK9K,2CAQI,IAAAgrD,GAChBA,EAAAhrD,KAAK0qD,cAAaz8C,WAAlB0lB,MAAAq3B,EAAA7pD,0CAUGwC,EAAK4I,EAAKC,EAAKd,GAAmB,QAAAu/C,EAAAhjB,EAAA9mC,UAAAvL,OAANsyC,EAAM,IAAAzyC,MAAAwyC,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,EAAA,GAAAhnC,UAAAgnC,IACrC8iB,EAAAjrD,KAAK0qD,cAAap+C,OAAlBqnB,MAAAs3B,EAAA,CAAyBtnD,EAAK4I,EAAKC,EAAKxM,KAAKkrD,qBAAqBh7D,KAAK8P,KAAM0L,IAA7ErS,OAA2F6uC,oCASvFvkC,EAAKiI,EAAMF,GAAmB,QAAAy/C,EAAA7L,EAAAn+C,UAAAvL,OAANsyC,EAAM,IAAAzyC,MAAA6pD,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAANtX,EAAMsX,EAAA,GAAAr+C,UAAAq+C,IAClC2L,EAAAnrD,KAAK0qD,cAAa/+C,QAAlBgoB,MAAAw3B,EAAA,CAA0BxnD,EAAKiI,EAAM5L,KAAKkrD,qBAAqBh7D,KAAK8P,KAAM0L,IAA1ErS,OAAwF6uC,iDAcvEkjB,EAAgBn7C,GACjCjQ,KAAKqrD,QAAUp7C,EAEf,IAAIq7C,GAAgB,EAcpB,GAZIr7C,IAAWnV,UAAQ2C,OAAOM,WAC1BiC,KAAKurD,2BACLvrD,KAAKwrD,yBACLxrD,KAAKyqD,cAAgB,GACdx6C,IAAWnV,UAAQ2C,OAAOO,gBAEjCstD,EAAgBtrD,KAAKyrD,2BAEjB99C,aAAa3N,KAAK0rD,gBAIrBJ,EAAe,SAAA3L,EAAAx+C,UAAAvL,OAjBwBsyC,EAiBxB,IAAAzyC,MAAAkqD,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAjBwB1X,EAiBxB0X,EAAA,GAAAz+C,UAAAy+C,GAChBwL,EAAcz3B,WAAd,GAAe1jB,GAAf5W,OAA0B6uC,IAC1BloC,KAAKoiB,aAAa6C,KAAKm/B,EAAeuH,OAAOZ,oBAAqB96C,6CAUtEjQ,KAAK0qD,aAAa/hD,QAAU3I,KAAK0qD,aAAa/hD,OAAOoT,QAAU/b,KAAK0qD,aAAa/hD,OAAOoT,OAAOkB,6CAQ/E,IAAA2uC,EAChBj+C,aAAa3N,KAAK6rD,gBAClBl+C,aAAa3N,KAAK0rD,eAClBE,EAAA5rD,KAAK0qD,cAAaj7C,WAAlBkkB,MAAAi4B,EAAAzqD,2CAQW,IAAA2qD,GACXA,EAAA9rD,KAAK0qD,cAAah9C,MAAlBimB,MAAAm4B,EAAA3qD,6DASA,OAAOnB,KAAK4qD,oBAAoBlB,6EAShC,GAAK1pD,KAAKwqD,SAASxG,sBAAnB,CADuB,IAMf+H,EAAqB/rD,KAAK0qD,aAA1BqB,iBAEH/rD,KAAKsoD,iBAEEyD,EAEAA,EAAiBroB,cAEjBqoB,EAAiBC,mBACzBnrC,EAAO3b,KAAK,uCACZ6mD,EAAiBxkB,QAAoB,IAHrC1mB,EAAO1b,KAAK,sEAFZ0b,EAAO1b,KAAK,+EAFZ0b,EAAO1b,KAAK,2GAiBK,IAAAqD,EAAAxI,KACbmkD,EAAuBnkD,KAAKwqD,SAA5BrG,mBAER,GAAInkD,KAAK2qD,gBAAkBxG,EAAqB,EAAG,CAC/CnkD,KAAK0rD,cAAgB7qC,EAAO3b,KAAP,kCAAA7L,OAA8C8qD,EAA9C,OACrBx2C,aAAa3N,KAAK0rD,cAElB,IAAMO,EACiC,GAArB9H,EAA0D,GAAhB74C,KAAKC,SAAiB44C,EAElFtjC,EAAO5b,MAAP,2CAAA5L,OAAwD4yD,EAAxD,OAEAjsD,KAAK0rD,aAAejhD,WAAW,WAC3B,IAAM08B,EAAM3+B,EAAKD,QAAQ3G,QAAQ,MAAO,SAASA,QAAQ,KAAM,QAE/DsqD,MAAM/kB,GAAK3D,MACP,SAAAx+B,GACI6b,EAAO7b,MAAP,wCAAA3L,OAAqD8tC,GAAO,CAAEniC,YAEjEi7B,KAAK,kBAAMz3B,EAAKgjD,4BACtBS,iCAUN/9C,GACD,IAAKlO,KAAK8J,UACN,MAAM,IAAIpT,MAAM,iBAEpBsJ,KAAK0qD,aAAan9C,KAAKW,kCAapBxO,EAAMgM,EAAUmC,EAASC,GAC5B,GAAK9N,KAAK8J,UAMV,OAAO9J,KAAK0qD,aAAap8C,OAAO5O,EAAMgM,EAAUmC,EAASC,GALrDD,EAAQ,sDAmBHnO,EAAMgM,EAAUmC,EAASC,GAC7B9N,KAAK8J,UAKV9J,KAAK0qD,aAAa98C,aAAalO,EAAMgM,EAAUmC,EAASC,GAJpDD,EAAQ,iEAaZ,IAAKkyB,UAAUosB,YAAcnsD,KAAK0qD,aAAa3gD,gBAAkB/J,KAAK0qD,aAAa5gD,UAC/E,OAAO,EAGX9J,KAAK0qD,aAAat+C,qBAAqBtR,UAAQ2C,OAAOQ,eACtD+B,KAAK0qD,aAAa3gD,eAAgB,EAElC,IAAM9M,EAAO+C,KAAK0qD,aAAa/hD,OAAOoP,aACjCld,MAAM,CACHoM,KAAM,cAER0I,EAAO1U,gBAAM,CACfgL,MAAOnL,UAAQK,GAAGG,OAClB2L,KAAM,gBAGVhK,EAAKsJ,MAAMoJ,EAAKtK,QAEhB,IAAM++B,EAAMrE,UAAUosB,WAAV,SAAA9yD,OACC2G,KAAKuI,SACdzN,UAAQsK,UAAUnI,EAAKoI,SAO3B,OALAwb,EAAO3b,KAAP,wCAAA7L,OAAoD+qC,IAEpDpkC,KAAK0qD,aAAa/hD,OAAOoH,oBACzB/P,KAAK0qD,aAAa16C,iBAEX,mDAWc,IAAAjC,EAAA/N,KACb+rD,EAAqB/rD,KAAK0qD,aAA1BqB,iBACFK,EAAcL,GAAoBA,EAAiBC,iBAEzD,GAAII,EAAa,CACbz+C,aAAa3N,KAAK6rD,gBAOlB7rD,KAAKyqD,cAAgBn/C,KAAK2P,IAAI,EAAGjb,KAAKyqD,cAAgB,GACtD,IAAM4B,EAAeC,YAAetsD,KAAKyqD,cAAe,KAAM,GAmB9D,OAjBA5pC,EAAO3b,KAAP,6CAAA7L,OAAyDgzD,EAAzD,OAEArsD,KAAK6rD,eAAiBphD,WAAW,WAC7BoW,EAAO3b,KAAK,wCAEZ,IAAMiiC,EAAM,IAAIlG,IAAIlzB,EAAK28C,aAAaniD,SAChC8U,EAAW8pB,EAAX9pB,OAENA,IAAmC,IAAzBA,EAAOzZ,QAAQ,KAAf,WAAAvK,OAAwC+yD,GAAxC,WAAA/yD,OAAmE+yD,GAE7EjlB,EAAI9pB,OAASA,EAEbtP,EAAK28C,aAAaniD,QAAU4+B,EAAIpxC,WAEhCg2D,EAAiB7gD,UAClBmhD,IAEI,EAGX,OAAO,oCA1YP,OAAOrsD,KAAKqrD,UAAYvwD,UAAQ2C,OAAOM,WAAaiC,KAAKqrD,UAAYvwD,UAAQ2C,OAAOS,uCASpF,OAAO8B,KAAK0qD,aAAa6B,4CASzB,OAA2C,IAApCvsD,KAAK0qD,aAAa3gD,6CASzB,OAAO/J,KAAK0qD,aAAavwD,gDASzB,OAAO6F,KAAK2qD,2CASZ,OAAO3qD,KAAK0qD,aAAa/mD,gDASzB,OAAO3D,KAAK0qD,aAAa/hD,QAAU3I,KAAK0qD,aAAa/hD,OAAOmP,mDAS5D,OAAO9X,KAAK0qD,aAAa7pC,uCASzB,OAAO7gB,KAAK0qD,aAAavjD,wCASzB,OAAOnH,KAAK0qD,aAAaniD,uCASzB,OAAOvI,KAAKqrD,8ECjJpBl9D,EAAOD,QAZkB,CAIrBs+D,YAAa,cAKbtxB,KAAM,sMCZV,IAAMra,EAASK,EAAQ,GAAqBP,UAAUQ,GAChD4b,EAAuB7b,EAAQ,IAMjCurC,GAAqB,EAOrBC,GAA0B,EAE1BC,EAAc,KAWZC,EAAiB,CAOnBC,oBAAqB,KAErBjpB,aAAc,KAYd94B,KArBmB,WAyBX,IAJH3D,EAIGhG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAJO,CACX2rD,8BAA8B,EAC9BC,0BAA2B,KAC3BC,+BAA+B,GAChC5iC,EAAKjpB,UAAAvL,OAAA,EAAAuL,UAAA,QAAAZ,EACJP,KAAKmH,QAAUA,EACfwlD,EAAcviC,EAEdpqB,KAAK4jC,aAAe5jC,KAAKitD,0BAA0B9lD,GAE9CnH,KAAK4jC,cACN/iB,EAAO3b,KAAK,6BAapB+nD,0BA7CmB,SA6CO9lD,GAAS,IAAAQ,EAAA3H,KAC/B,OAAIyiB,IAAQyqC,SACD,SAAC5Z,EAAG5/B,EAAWU,GAClB9lB,OAAO6+D,YAAYC,oBACf15C,EACA,SAAC1O,EAAOslB,GACJ,IAAI+iC,EAmBAA,EADAroD,GAAwB,sBAAfA,EAAM/V,KACF,IAAIk7B,IACbolB,kCAGS,IAAIplB,IACbnlB,EAAOslB,EAAa,CAAE,YAER,mBAAdlW,GACDA,EAAUi5C,MAGtB5qC,IAAQwa,aACRj9B,KAAKstD,uBACL7qC,IAAQga,YAAcha,IAAQ8qC,UACjC9qC,IAAQ+qC,4BACArmD,EAAQ2lD,6BAET9sD,KAAKytD,gCACLtmD,EAAQ2lD,+BACX3lD,EAAQ4lD,0BAEL,MAGXlsC,EAAO3b,KAAK,8CACZlF,KAAK6sD,oBAwYjB,SAA6B1lD,GAIzB,OAnBJ,SAA4BA,GAC2B,IAA/C6rC,EAAE,kCAAkCp9C,QACpCo9C,EAAE,QAAQ0a,OAAO,qCAErB1a,EAAE,kCAAkCzxC,KAAK,OACrCosD,EAAsBxmD,IAY1BymD,CAAmBzmD,GAEZ,IAAIi8B,QAAQ,SAAAC,GAEfwqB,EAAwB,SAACC,EAAWC,GAChCtB,EAAqBqB,EACrBpB,EAA0BqB,EAC1BltC,EAAO3b,KAAP,+BAAA7L,OAEQozD,EAFR,qBAAApzD,OAGQqzD,IACRrpB,KACDl8B,KArZO6mD,CAAoB7mD,GAAS84B,KAAK,WAChCt4B,EAAKklD,oBAAsB,OAG5B7sD,KAAKiuD,2BACLxrC,IAAQiO,YACXvpB,EAAQ6lD,8BACD,KACAvqC,IAAQ+qC,0BAERxtD,KAAKytD,gCAITztD,KAAKkuD,uBAGhBrtC,EAAOjc,IACH,wDACA6d,IAAQ29B,WAEL,OAQX1c,YA7HmB,WA8Hf,OAA6B,OAAtB1jC,KAAK4jC,cAQhBsqB,sBAtImB,SAsIG/mD,EAASuE,EAAUyiD,IA2L7C,SAA4BhnD,EAASinD,EAAgBC,GACjD1B,EAAY,CAAE,UAAYxlD,GACrB84B,KAAK,SAAAhc,GAAM,OAAImqC,EAAe,CAAEnqC,YAAWoqC,GA5L5CC,CAAmBnnD,EAAQ0+B,WAAYn6B,EAAUyiD,IAarDb,uBApJmB,WAoJwC,IAApCnmD,EAAoChG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAA1B,GAAIuS,EAAsBvS,UAAAvL,OAAA,EAAAuL,UAAA,QAAAZ,EAAX6T,EAAWjT,UAAAvL,OAAA,EAAAuL,UAAA,QAAAZ,EACvD,GAAIjS,OAAOigE,yBACJjgE,OAAOigE,wBAAwBC,kBAAmB,KAC7C5oB,EAAsCz+B,EAAtCy+B,sBAAuBC,EAAe1+B,EAAf0+B,WAE/Bv3C,OAAOigE,wBAAwBC,kBAC3B,CACI5oB,sBAAuBA,GAChB5lC,KAAKmH,QAAQsnD,6BAExB,SAAC5jB,EAAU6jB,GAAX,OACIC,EACI,CACI97C,SAAU,CACNg4B,WACA6jB,aACAxxB,iBANhB/7B,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,IAAAA,UAAA,IAQY0kC,cAEJnyB,EACAU,IAER,SAAA/D,GAAG,OAAI+D,EAAU,IAAI+V,IACjBolB,gCACAl/B,WAIR+D,EAAU,IAAI+V,IACVolB,uCAQZ0e,0BA1LmB,SA0LO9mD,EAASinD,EAAgBC,GAAc,IAAA7lD,EAAAxI,KAC7D,GAAiC,OAA7BA,KAAK6sD,oBAAT,CAD6D,IAAA+B,EAazD5uD,KAAKmH,QAFL4lD,EAXyD6B,EAWzD7B,0BACA0B,EAZyDG,EAYzDH,4BAIA5oB,EACA1+B,EADA0+B,WAGEgpB,EAAkC,CACpC9B,4BACA0B,4BACItnD,EAAQy+B,uBAAyB6oB,EACrC5oB,cAGA4mB,EAqNZ,SAAkCtlD,EAASinD,EAAgBC,GAAc,IAEjEI,EAGAtnD,EAHAsnD,4BACA1B,EAEA5lD,EAFA4lD,0BACAlnB,EACA1+B,EADA0+B,WAKJipB,OAAOC,QAAQ9gB,YACX8e,EACA,CACIiC,WAAW,EACXC,QAASR,GAEb,SAAA57C,GACI,GAAKA,EAYLgO,EAAOjc,IAAI,4BAA6BiO,GACxC87C,EACI,CACI97C,WACAgzB,cAEJuoB,EACAC,OAnBJ,CAEI,IAAMa,EAAYJ,OAAOC,QAAQG,UAEjCb,EAAaa,aAAqBx4D,MAC5Bw4D,EACA,IAAI/kC,IACFolB,iCACA2f,OA5OZC,CACIN,EACAT,EACAC,IAEA3B,GAEA0C,MACI,+FAMRpvD,KAAKqvD,sBAAsBloD,EAASinD,EAChCC,SAxCJruD,KAAK6sD,oBAAoB5sB,KAAK,WAC1Bz3B,EAAKylD,0BACD9mD,EAASinD,EAAgBC,MA4CzCgB,sBA1OmB,SA0OGloD,EAASinD,EAAgBC,EAAc31D,GACzD,IAAM42D,EAAqB3B,EAAsB3tD,KAAKmH,SAEtDA,EAAQid,SAAS,sBAAuBkrC,GACxCtvD,KAAKuvD,kCAAkCpoD,EAASinD,EAC5CC,EAAc31D,IAKtB62D,kCApPmB,SAoPepoD,EAASinD,EAAgBC,GAAc,IAAAtgD,EAAA/N,MACxC,IAAzBmH,EAAQqoD,aA6QpB,SAAsCroD,EAASsoD,EAAcC,GACzD,GAAgB,IAAZA,EACA,OAAOtsB,QAAQE,SAGnB,OAAO,IAAIF,QAAQ,SAACC,EAASC,GACzB,IAAIqsB,EAAiBD,EACfE,EAAWthE,OAAOk0C,YAAY,WAChCqrB,EAAwB,SAAAC,GAChBA,GACAx/D,OAAOuxC,cAAc+vB,GACrBvsB,KAGuB,MADvBssB,IAEIrsB,IACAh1C,OAAOuxC,cAAc+vB,KAG9BzoD,IACJsoD,KA3RHI,CAA6B7vD,KAAKmH,QAASA,EAAQyoD,SAAU,GACxD3vB,KAAK,WACFwsB,GAAqB,EACrBtlD,EAAQid,SAAS,kBACjBrW,EAAKkgD,0BAA0B9mD,EAC3BinD,EAAgBC,KAEvB7qB,MAAM,WACHz1B,EAAKwhD,kCAAkCpoD,EACnCinD,EAAgBC,KAdxBA,EAAa,IAAIlkC,IACbolB,yCAuBZke,gCA9QmB,SA8QatmD,EAASuE,EAAUyiD,GAC/CttC,EAAO3b,KAAK,6CAIR66B,UAAU+vB,gBACQ/vB,UAAU+vB,gBAAgB5/D,KAAK6vC,WAG/BA,UAAUC,aAAa8vB,gBAAgB5/D,KAAK6vC,UAAUC,eAG5D,CAAEzG,OAAO,EACrBiB,OAAO,IACNyF,KAAK,SAAAhc,GACF,IAAI8rC,EAEJ,GAAI9rC,GACGA,EAAOmiB,aACPniB,EAAOmiB,YAAYxwC,OAAS,EAAG,CAClC,IAAMo6D,EAAa/rC,EAAOia,iBAAiB,GAGvC8xB,IACAD,EAA0BC,EAAW3pB,iBAAiBl/B,EAAQ2+B,oBAGlEiqB,EAA0B3sB,QAAQC,UAGtC0sB,EAAwB9vB,KAAK,kBACzBv0B,EAAS,CACLuY,SACA8W,SAAU9W,EAAO/c,SAG5Bs8B,MAAM,kBACH2qB,EAAc,IAAIhkC,IAAgBolB,uCAyBlD,SAASoe,EAAsBxmD,GAC3B,mDAAA9N,OAEQ8N,EAAQ4lD,2BAkDpB,SAASc,EAAwBniD,EAAUvE,GACjB,oBAAX2nD,QAA2BA,QAAWA,OAAOC,QAMxDD,OAAOC,QAAQ9gB,YACX9mC,EAAQ4lD,0BACR,CAAEkD,YAAY,GACd,SAAAp9C,GACI,IAAKA,IAAaA,EAAS6I,QAMvB,OAJAmF,EAAO1b,KACH,6BAA8B2pD,OAAOC,QAAQG,gBACjDxjD,GAAS,GAAO,GAMpB,IAAMwkD,EAAar9C,EAAS6I,QAE5BmF,EAAOjc,IAAP,yBAAAvL,OAAoC62D,IACpC,IAAMnC,EAjElB,SAA0BoC,EAAYD,GAClC,IAMI,IALA,IAAME,EAAKD,EAAWptD,MAAM,KACtBstD,EAAKH,EAAWntD,MAAM,KAEtBvL,EAAM8T,KAAKouB,IAAI02B,EAAGx6D,OAAQy6D,EAAGz6D,QAE1BlH,EAAI,EAAGA,EAAI8I,EAAK9I,IAAK,CAC1B,IAAI4hE,EAAK,EACLC,EAAK,EAST,GAPI7hE,EAAI0hE,EAAGx6D,SACP06D,EAAKx3C,SAASs3C,EAAG1hE,GAAI,KAErBA,EAAI2hE,EAAGz6D,SACP26D,EAAKz3C,SAASu3C,EAAG3hE,GAAI,KAGrBwrB,MAAMo2C,IAAOp2C,MAAMq2C,GACnB,OAAO,EACJ,GAAID,IAAOC,EACd,OAAOD,EAAKC,EAMpB,OAAO,EACT,MAAO73D,GAIL,OAHAqkC,EAAqBC,iBAAiBtkC,GACtCmoB,EAAO7b,MAAM,oCAAqCtM,IAE3C,GAkCG83D,CACErpD,EAAQspD,kCACRP,GAERxkD,GAAUqiD,EAAgBA,KA1B9BriD,GAAS,GAAO,GAqKxB,SAASijD,IAMU,IALXxnD,EAKWhG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GALD,CACN0R,SAAU,GACVgzB,WAAY,IAEhBnyB,EACWvS,UAAAvL,OAAA,EAAAuL,UAAA,QAAAZ,EAAX6T,EAAWjT,UAAAvL,OAAA,EAAAuL,UAAA,QAAAZ,EAAAmgC,EAC2Cv5B,EAAQ0L,UAAY,GAAtEg4B,EADOnK,EACPmK,SAAU6jB,EADHhuB,EACGguB,WAAYxxB,EADfwD,EACexD,iBAAkBl4B,EADjC07B,EACiC17B,MAEhD,GAAI6lC,EAAU,CACV,IAAMhF,oUAAUlQ,CAAA,CACZwH,cAAe0N,EACf3N,oBACG/1B,EAAQ0+B,YAGf8mB,EAAY,CAAE,WAAa9mB,GACtB5F,KAAK,SAAAhc,GAAM,OAAIvQ,EAAU,CACtBuQ,SACA8W,SAAU8P,EACVpG,WAAYiqB,KACZt6C,OACL,CAIH,GAAiB,KAAby2B,EAIA,YAHAz2B,EAAU,IAAI+V,IACVolB,mCAKRn7B,EAAU,IAAI+V,IACVolB,iCACAvqC,KAIG4nD,kECjnBf,IAAAzX,EAGAA,EAAA,WACA,OAAAn1C,KADA,GAIA,IAEAm1C,KAAA,IAAAub,SAAA,iBACC,MAAAh4D,GAED,iBAAApK,SAAA6mD,EAAA7mD,QAOAH,EAAAD,QAAAinD,80BCTA,IAAMt0B,EAASF,oBAAUQ,GAQnBwvC,EAAgC,IAQhCC,EAA2B,IAsBpBC,EAA8B,CAIvCxT,OAAQ,SAQRyT,SAAU,WAKVC,YAAa,cAKbC,UAAW,aAOMC,aAmGjB,SAAAA,EAAYC,EAAK9nB,EAAYjiC,gGAASs4B,CAAAz/B,KAAAixD,GAClCjxD,KAAKkxD,IAAMA,EACXlxD,KAAKopC,WAAaA,EAQlBppC,KAAKmxD,YAAc,GAQnBnxD,KAAKoxD,kBAAoB,GAazBpxD,KAAKqxD,kBACsC,iBAA9BlqD,EAAQkqD,kBACXlqD,EAAQkqD,kBAAoBV,EAUtC3wD,KAAKsxD,eACmC,iBAA3BnqD,EAAQmqD,eACXnqD,EAAQmqD,eAAiBV,EAuBnC5wD,KAAKuxD,kBAAoB,GACzB1wC,EAAO3b,KAAP,0BAAA7L,OAAsC2G,KAAKsxD,iBAY3CtxD,KAAKwxD,sBAAwB,IAAIrvC,IASjCniB,KAAKyxD,gBAAkB,IAAItvC,IAQ3BniB,KAAK0xD,oBAAsB,IAAIvvC,kEA5K3BwvC,EACAhmB,EACAimB,EACAC,EACAC,GACJ,OAAKH,EAKME,EAIAhB,EAA4BxT,OAInC56B,IAAQsvC,qCACHD,EAGMnmB,EACAimB,EACDf,EAA4BE,YAC5BF,EAA4BG,UAG/BH,EAA4BC,SAPxBD,EAA4BxT,OAYpC1R,EACDklB,EAA4BxT,OAC5BwT,EAA4BC,SA1BvBD,EAA4BE,2DAyCbc,EAAcC,GACxC,OAAKrvC,IAAQsvC,qCAMNF,IAAiBC,EAClBjB,EAA4BxT,OAC5BwT,EAA4BE,YALvBF,EAA4BxT,6DAgIpBn2C,GACnB,OAAOlH,KAAKkxD,IAAIvlB,UAAUzkC,GACpBlH,KAAKsxD,eAAiBtxD,KAAKqxD,iDASjCrxD,KAAKgyD,6BACChyD,KAAKiyD,4BAA4B/hE,KAAK8P,MAE5CA,KAAKkxD,IAAI/mB,YACL/L,IAAUxG,6BACV53B,KAAKgyD,8BAGThyD,KAAKkyD,aAAelyD,KAAKmyD,8BAA8BjiE,KAAK8P,MAC5DA,KAAKopC,WAAW/kB,GAAGunB,aAAkC5rC,KAAKkyD,cAG1DlyD,KAAKoyD,YAAcpyD,KAAKqyD,WAAWniE,KAAK8P,MACxCA,KAAKopC,WAAW/kB,GAAGunB,YAAiC5rC,KAAKoyD,aAKrD3vC,IAAQsvC,uCAER/xD,KAAKsyD,iBAAmBtyD,KAAKuyD,gBAAgBriE,KAAK8P,MAClDA,KAAKkxD,IAAI/mB,YACL/L,IAAUhG,kBAAmBp4B,KAAKsyD,kBAEtCtyD,KAAKwyD,mBAAqBxyD,KAAKyyD,kBAAkBviE,KAAK8P,MACtDA,KAAKkxD,IAAI/mB,YACL/L,IAAU9F,oBAAqBt4B,KAAKwyD,oBAIxCxyD,KAAK0yD,oBAAsB1yD,KAAK2yD,mBAAmBziE,KAAK8P,MACxDA,KAAKopC,WAAW/kB,GACZunB,cACA5rC,KAAK0yD,qBAET1yD,KAAK4yD,sBAAwB5yD,KAAK6yD,qBAAqB3iE,KAAK8P,MAC5DA,KAAKopC,WAAW/kB,GACZunB,gBACA5rC,KAAK4yD,uBAIT5yD,KAAK8yD,yBACC9yD,KAAK+yD,wBAAwB7iE,KAAK8P,MAGxCA,KAAKgzD,yBACChzD,KAAKizD,wBAAwB/iE,KAAK8P,OAG5CA,KAAK+pC,gBAAkB/pC,KAAK+pC,gBAAgB75C,KAAK8P,MACjDA,KAAKopC,WAAW/kB,GACZunB,2BACA5rC,KAAK+pC,iBAET/pC,KAAKkzD,qBACClzD,KAAKmyD,8BAA8BjiE,KAAK8P,MAC9CA,KAAKkxD,IAAI7sC,GACL+Z,IAAUpG,oBAAqBh4B,KAAKkzD,wDASxClzD,KAAKkxD,IAAI1sC,eACL4Z,IAAUxG,6BACV53B,KAAKgyD,8BAELvvC,IAAQsvC,uCACR/xD,KAAKkxD,IAAI1sC,eACL4Z,IAAUhG,kBACVp4B,KAAKsyD,kBACTtyD,KAAKkxD,IAAI1sC,eACL4Z,IAAU9F,oBACVt4B,KAAKwyD,oBAETxyD,KAAKopC,WAAWuQ,IACZ/N,cACA5rC,KAAK0yD,qBACT1yD,KAAKopC,WAAWuQ,IACZ/N,gBACA5rC,KAAK4yD,wBAGb5yD,KAAKopC,WAAWuQ,IACZ/N,2BACA5rC,KAAK+pC,iBAET/pC,KAAKkxD,IAAI1sC,eACL4Z,IAAUpG,oBAAqBh4B,KAAKkzD,sBAExClzD,KAAKopC,WAAWuQ,IACZ/N,aAAkC5rC,KAAKkyD,cAE3ClyD,KAAKopC,WAAWuQ,IACZ/N,YAAiC5rC,KAAKoyD,aAI1C,IAFA,IAAMe,EAAiB/jE,OAAOmW,KAAKvF,KAAKmxD,aAExC1uD,EAAA,EAAAA,EAA4B0wD,EAA5Bv9D,OAAA6M,IAA4C,CAAvC,IAAM0zB,EAAiBg9B,EAAJ1wD,GACpBzC,KAAK2N,aAAawoB,GAClBn2B,KAAKozD,uBAAuBj9B,GAGhC,IAAK,IAAMjvB,KAAMlH,KAAK0xD,oBACd1xD,KAAK0xD,oBAAoBnhE,eAAe2W,IACxClH,KAAKqyD,WAAWnrD,GAKxBlH,KAAKoxD,kBAAoB,uDAUDiC,EAAYC,GAEpCzyC,EAAO5b,MAAP,mDAAA5L,OACuD8O,KAAKmM,MAD5D,OAAAjb,OAEQg6D,EAFR,MAAAh6D,OAEuBi6D,IAGnBD,IAAerzD,KAAKopC,WAAWmqB,aAE/BvzD,KAAKoxD,kBAAkBiC,GAAcC,EACrCtzD,KAAKwzD,0BAA0BH,oDASfI,EAAaC,GACjC,GAAID,EAAYE,wBAA0BD,EAAW,CAEjD,IAAML,EAAaI,EAAYG,QAE/BH,EAAYI,qBAAqBH,GAEjC7yC,EAAO5b,MAAP,6BAAA5L,OACiC8O,KAAKmM,MADtC,MAAAjb,OACgDg6D,EADhD,MAAAh6D,OAEQq6D,IAGR1xC,IAAWkJ,QACPpe,KAAK8L,UAAU,CACX1R,GAAI,mBACJusD,YAAaJ,EACbpjD,OAAQyjD,KAIhB1zD,KAAKopC,WAAWhnB,aAAa6C,KACzB2mB,kCACAynB,EAAYK,yCAWXv9B,GACLn2B,KAAKmxD,YAAYh7B,KACjB7nC,OAAOqf,aAAa3N,KAAKmxD,YAAYh7B,IACrCn2B,KAAKmxD,YAAYh7B,GAAiB,qDAUnBA,GACnBn2B,KAAKuxD,kBAAkBp7B,GAAiB,gDAUzB29B,GAAa,IAAAnsD,EAAA3H,KACvB8zD,EAAYhqC,WACNgqC,EAAY/mB,YAAcpI,MAEjC9jB,EAAO5b,MAAP,uCAAA5L,OAEQy6D,EAAYC,qBAEpBD,EAAYzvC,GACR2vC,qBACAh0D,KAAK8yD,0BACTgB,EAAYzvC,GACR2vC,0BACA,SAAApvB,GAAS,OAAIj9B,EAAKqrD,yBAAyBc,EAAalvB,mDAW/CkvB,GACjB,IAAKA,EAAYhqC,WACNgqC,EAAY/mB,YAAcpI,IAAiB,CAElD,IAAM0uB,EAAaS,EAAYC,mBAE/BlzC,EAAO5b,MAAP,qCAAA5L,OAAkDg6D,IAElDS,EAAYna,IACRqa,qBACAh0D,KAAK8yD,0BAET9yD,KAAK2N,aAAa0lD,GAClBrzD,KAAKozD,uBAAuBC,GAE5BrzD,KAAKwzD,0BAA0BH,+CAiBpBI,GACf,IAAKhxC,IAAQsvC,qCACT,OAAO,EAGX,IAAM7qD,EAAKusD,EAAYG,QACjBK,EAAsBR,EAAYS,8BAClC3C,EAAoBvxD,KAAKuxD,kBAAkBrqD,GAC3C4G,EAAU9N,KAAKm0D,uBAAuBjtD,GAE5C,OAAO+sD,GAC6B,iBAAtB1C,GACNppD,KAAKmM,MAAQi9C,GAAsBzjD,0DAS3C,IAAMsmD,EAAep0D,KAAKopC,WAAWirB,kBADTnvC,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAG5B,QAAA8kB,EAAAC,EAA0B8uC,EAA1B3kE,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAwC,KAA7BuuC,EAA6BpuC,EAAA11B,MACpCqQ,KAAKwzD,0BAA0BC,EAAYG,UAJnB,MAAAvjD,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,sDAcNle,GACtB,IAAMusD,EAAczzD,KAAKopC,WAAWkrB,mBAAmBptD,GAEvD,GAAKusD,EAAL,CAWA,IAAMc,EAAYv0D,KAAKopC,WAAWorB,cAC5BC,EAAsBz0D,KAAK00D,qBAAqBxtD,GAChDytD,EAAwC,IAAxB30D,KAAKkxD,IAAI0D,WAIzB/C,EAAe4B,EAAY5B,gBAAkB8C,EAC7C7C,EAAqB9xD,KAAK8xD,mBAAmB2B,GAC7C9nB,EAAY3rC,KAAKkxD,IAAIvlB,UAAUzkC,GACjC2tD,EAAoB70D,KAAKoxD,kBAAkBlqD,GAEd,kBAAtB2tD,IAGPh0C,EAAO5b,MAAM,uDACb4vD,GAAoB,GAGxB,IAAMC,EACAP,EACItD,EAAmC8D,uBACjClD,EACAC,GACFb,EAAmC+D,uBACjCH,EACAlpB,EACA8oB,EACA5C,EACAC,GAIRgD,IAAajE,EAA4BG,WACzChxD,KAAKi1D,qBAAqB/tD,GAG9B2Z,EAAO5b,MAAP,8BAAA5L,OACkC6N,EADlC,sBAAA7N,OAEQw4D,EAFR,qBAAAx4D,OAGQw7D,EAHR,yBAAAx7D,OAIQy4D,EAJR,eAAAz4D,OAKQk7D,EALR,mBAAAl7D,OAMQsyC,EANR,iCAAAtyC,OAOQo6D,EAAYE,sBAPpB,QAAAt6D,OAOgDy7D,IAEhD,IAAMI,EAAsBl1D,KAAK0xD,oBAAoBxqD,IAAO,GAI5D,KAAM,QAASguD,GACN,qBAAsBA,GACxBA,EAAoBzP,MAAQ8O,GAC5BW,EAAoBC,mBAAqBL,GAAU,CAEtD,IAAMM,EAAQjtD,KAAKmM,MAanB,GAXAtU,KAAKq1D,0CAA0CnuD,EAAIkuD,GAEnDp1D,KAAK0xD,oBAAoBxqD,GAAzByuB,EAAA,GACOu/B,EADP,CAEIC,iBAAkBL,EAClBrP,IAAK8O,EACLe,UAAWF,MAKT,cAAep1D,KAAK0xD,oBAAoBxqD,IAAM,CAChD,IAAMq6B,EAAckyB,EAAY8B,qBAAqB5wB,KAEjDlvC,MAAMC,QAAQ6rC,IAAuC,IAAvBA,EAAY3rC,SAC1CoK,KAAK0xD,oBAAoBxqD,GAAI09B,UAAYrD,EAAY,GAAGqD,YAIpE5kC,KAAKw1D,wBAAwB/B,EAAaqB,QAhFtCj0C,EAAO5b,MAAP,gDAAA5L,OAA6D6N,sEA0F3BA,EAAIkuD,GAC1C,IAAMK,EAA8Bz1D,KAAK0xD,oBAAoBxqD,GAEzDuuD,GACG,cAAeA,GACf,cAAeA,GACf,qBAAsBA,GACtB,QAASA,IACZA,EAA4B9lE,MAAQylE,EAAQK,EAA4BH,UACxEtzC,IAAW6K,cACP4J,YAAuCg/B,+CAYI,IAAvCC,EAAuCv0D,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAxB,GAAIw0D,EAAoBx0D,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACzCmT,EAAMnM,KAAKmM,MAEjBuM,EAAO5b,MACH,yBAA0BywD,EAAcC,EAAerhD,GAJR,IAAAwR,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAMnD,QAAA0lB,EAAAC,EAAiBwvC,EAAjBjmE,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA+B,KAApB5e,EAAoB+e,EAAAt2B,MAC3BqQ,KAAKwxD,sBAAsBlrC,OAAOpf,GAClClH,KAAKi1D,qBAAqB/tD,GAC1BlH,KAAKwzD,0BAA0BtsD,IATgB,MAAAmJ,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAAA,IAAAgB,GAAA,EAAAC,GAAA,EAAAC,OAAA3mB,EAAA,IAWnD,QAAA4mB,EAAAC,EAAiBuuC,EAAjBlmE,OAAA4F,cAAA2xB,GAAAG,EAAAC,EAAA5B,QAAAC,MAAAuB,GAAA,EAAgC,KAArB9f,EAAqBigB,EAAAx3B,MAE5BqQ,KAAKwxD,sBAAsB1tC,IAAI5c,EAAIoN,GACnCtU,KAAKwzD,0BAA0BtsD,IAdgB,MAAAmJ,GAAA4W,GAAA,EAAAC,EAAA7W,EAAA,YAAA2W,GAAA,MAAAI,EAAAvB,QAAAuB,EAAAvB,SAAA,WAAAoB,EAAA,MAAAC,iDA0BlCiP,GACjB,IAAMy/B,EAAS51D,KAAKyxD,gBAAgBliE,IAAI4mC,GAEpCy/B,IACAjoD,aAAaioD,GACb51D,KAAKyxD,gBAAgBnrC,OAAO6P,iDAkBfA,GAAe,IAAA3tB,EAAAxI,KAC1BwxD,EACAxxD,KAAKwxD,sBAAsBjiE,IAAI4mC,GAErC,SAAIq7B,GACIrpD,KAAKmM,MAAQk9C,GAptBK,OA4tBXxxD,KAAKyxD,gBAAgBliE,IAAI4mC,IAGpCn2B,KAAKyxD,gBAAgB3tC,IAAIqS,EAAe1rB,WACpC,kBAAMjC,EAAKgrD,0BAA0Br9B,IAhuBnB,OAouBnB,sCAQAjvB,GACPlH,KAAKq1D,0CAA0CnuD,EAAIiB,KAAKmM,cACjDtU,KAAK0xD,oBAAoBxqD,2CASpBw9B,GAAO,IAAA32B,EAAA/N,KACbm2B,EAAgBuO,EAAMqvB,mBACtBN,EAAczzD,KAAKopC,WAAWkrB,mBAAmBn+B,GAGvD,GADAtV,EAAO5b,MAAP,6BAAA5L,OAA0C88B,GAAiBhuB,KAAKmM,OAC3Dm/C,GAML,GADAzzD,KAAKuxD,kBAAkBp7B,GAAiBhuB,KAAKmM,OACxCm/C,EAAY5B,eAAgB,CAI7B7xD,KAAK2N,aAAawoB,GAGlB,IAAMroB,EAAU9N,KAAKm0D,uBAAuBh+B,GAE5Cn2B,KAAKmxD,YAAYh7B,GAAiB7nC,OAAOmc,WAAW,WAChDoW,EAAO5b,MAAP,6BAAA5L,OACiC88B,EADjC,4BAAA98B,OAEUyU,EAFV,QAGAC,EAAKJ,aAAawoB,GAClBpoB,EAAKylD,0BAA0Br9B,IAChCroB,SApBH+S,EAAO7b,MAAP,0BAAA3L,OAAuC88B,8CA8B7BuO,GACd,IAAMvO,EAAgBuO,EAAMqvB,mBAE5BlzC,EAAO5b,MAAP,+BAAA5L,OACmC88B,GAAiBhuB,KAAKmM,OAEzDtU,KAAK2N,aAAawoB,GAClBn2B,KAAKozD,uBAAuBj9B,GAE5Bn2B,KAAKwzD,0BAA0Br9B,mDASXuO,GACpB,IAAMvO,EAAgBuO,EAAMqvB,mBAE5BlzC,EAAO5b,MAAP,8CAAA5L,OACkD88B,GAC9CuO,EAAMmxB,WAEV71D,KAAKwzD,0BAA0Br9B,mDAUXuO,EAAOz9B,GAC3B,IAAMC,EAAKw9B,EAAMqvB,mBACXqB,EAAQjtD,KAAKmM,MAEnBtU,KAAKq1D,0CAA0CnuD,EAAIkuD,GAEnDp1D,KAAK0xD,oBAAoBxqD,GAAzByuB,EAAA,GACO31B,KAAK0xD,oBAAoBxqD,IAAO,GADvC,CAEI09B,UAAW39B,EACXquD,UAAWF,8GCv2BvB,IAAAU,EAAA,CAIAC,mBAAA,WACA,OAAAzqD,KAAAC,SAAAxV,SAAA,IAAAwf,OAAA,QAIAugD,EAAAE,WAAAF,EAAAC,qBAGAD,EAAAG,WAAA,SAAAC,GACA,OAAAA,EAAA7M,OAAAtmD,MAAA,MAAAyC,IAAA,SAAAhB,GACA,OAAAA,EAAA6kD,UAIAyM,EAAAK,cAAA,SAAAD,GAEA,OADAA,EAAAnzD,MAAA,QACAyC,IAAA,SAAA4wD,EAAAnlC,GACA,OAAAA,EAAA,OAAAmlC,KAAA/M,OAAA,UAKAyM,EAAAO,eAAA,SAAAH,GACA,IAAAI,EAAAR,EAAAK,cAAAD,GACA,OAAAI,KAAA,IAIAR,EAAAS,iBAAA,SAAAL,GACA,IAAAI,EAAAR,EAAAK,cAAAD,GAEA,OADAI,EAAAtoC,QACAsoC,GAIAR,EAAAU,YAAA,SAAAN,EAAAplB,GACA,OAAAglB,EAAAG,WAAAC,GAAAllC,OAAA,SAAAxsB,GACA,WAAAA,EAAAZ,QAAAktC,MAOAglB,EAAAW,eAAA,SAAAjyD,GAqBA,IApBA,IAAAR,EAQA+qB,EAAA,CACAE,YANAjrB,EADA,IAAAQ,EAAAZ,QAAA,gBACAY,EAAAipB,UAAA,IAAA1qB,MAAA,KAEAyB,EAAAipB,UAAA,IAAA1qB,MAAA,MAIA,GACAmsB,UAAApW,SAAA9U,EAAA,OACA0E,SAAA1E,EAAA,GAAArB,cACAoP,SAAA+G,SAAA9U,EAAA,OACAmrB,GAAAnrB,EAAA,GACA0yD,QAAA1yD,EAAA,GACAiqB,KAAAnV,SAAA9U,EAAA,OAEAiD,KAAAjD,EAAA,IAGAtV,EAAA,EAAiBA,EAAAsV,EAAApO,OAAkBlH,GAAA,EACnC,OAAAsV,EAAAtV,IACA,YACAqgC,EAAA4nC,eAAA3yD,EAAAtV,EAAA,GACA,MACA,YACAqgC,EAAA6nC,YAAA99C,SAAA9U,EAAAtV,EAAA,OACA,MACA,cACAqgC,EAAA8nC,QAAA7yD,EAAAtV,EAAA,GACA,MACA,YACAqgC,EAAA1B,MAAArpB,EAAAtV,EAAA,GACAqgC,EAAA+nC,iBAAA9yD,EAAAtV,EAAA,GACA,MACA,QACAqgC,EAAA/qB,EAAAtV,IAAAsV,EAAAtV,EAAA,GAIA,OAAAqgC,GAIA+mC,EAAAiB,eAAA,SAAAhoC,GACA,IAAAuD,EAAA,GACAA,EAAApvB,KAAA6rB,EAAAE,YACAqD,EAAApvB,KAAA6rB,EAAAG,WACAoD,EAAApvB,KAAA6rB,EAAArmB,SAAAsuD,eACA1kC,EAAApvB,KAAA6rB,EAAAhd,UACAugB,EAAApvB,KAAA6rB,EAAA2nC,SAAA3nC,EAAAI,IACAmD,EAAApvB,KAAA6rB,EAAAd,MAEA,IAAAhnB,EAAA8nB,EAAA9nB,KAkBA,OAjBAqrB,EAAApvB,KAAA,OACAovB,EAAApvB,KAAA+D,GACA,SAAAA,GAAA8nB,EAAA4nC,gBACA5nC,EAAA6nC,cACAtkC,EAAApvB,KAAA,SACAovB,EAAApvB,KAAA6rB,EAAA4nC,gBACArkC,EAAApvB,KAAA,SACAovB,EAAApvB,KAAA6rB,EAAA6nC,cAEA7nC,EAAA8nC,SAAA,QAAA9nC,EAAArmB,SAAA/F,gBACA2vB,EAAApvB,KAAA,WACAovB,EAAApvB,KAAA6rB,EAAA8nC,WAEA9nC,EAAA+nC,kBAAA/nC,EAAA1B,SACAiF,EAAApvB,KAAA,SACAovB,EAAApvB,KAAA6rB,EAAA+nC,kBAAA/nC,EAAA1B,QAEA,aAAAiF,EAAAnvB,KAAA,MAKA2yD,EAAAmB,gBAAA,SAAAzyD,GACA,OAAAA,EAAA+Q,OAAA,IAAAxS,MAAA,MAKA+yD,EAAAoB,YAAA,SAAA1yD,GACA,IAAAR,EAAAQ,EAAA+Q,OAAA,GAAAxS,MAAA,KACAo0D,EAAA,CACAvkC,YAAA9Z,SAAA9U,EAAAgqB,QAAA,KAUA,OAPAhqB,IAAA,GAAAjB,MAAA,KAEAo0D,EAAAloE,KAAA+U,EAAA,GACAmzD,EAAAC,UAAAt+C,SAAA9U,EAAA,OACAmzD,EAAA5oC,SAAA,IAAAvqB,EAAApO,OAAAkjB,SAAA9U,EAAA,SAEAmzD,EAAAE,YAAAF,EAAA5oC,SACA4oC,GAKArB,EAAAwB,YAAA,SAAAxkC,GACA,IAAAhD,EAAAgD,EAAAF,iBACAryB,IAAAuyB,EAAAykC,uBACAznC,EAAAgD,EAAAykC,sBAEA,IAAAhpC,EAAAuE,EAAAvE,UAAAuE,EAAAukC,aAAA,EACA,kBAAAvnC,EAAA,IAAAgD,EAAA7jC,KAAA,IAAA6jC,EAAAskC,WACA,IAAA7oC,EAAA,IAAAA,EAAA,YAMAunC,EAAA9lC,YAAA,SAAAxrB,GACA,IAAAR,EAAAQ,EAAA+Q,OAAA,GAAAxS,MAAA,KACA,OACAmE,GAAA4R,SAAA9U,EAAA,OACAisB,UAAAjsB,EAAA,GAAAJ,QAAA,OAAAI,EAAA,GAAAjB,MAAA,mBACAmtB,IAAAlsB,EAAA,KAMA8xD,EAAA0B,YAAA,SAAAC,GACA,mBAAAA,EAAAvwD,IAAAuwD,EAAAC,cACAD,EAAAxnC,WAAA,aAAAwnC,EAAAxnC,UACA,IAAAwnC,EAAAxnC,UACA,IACA,IAAAwnC,EAAAvnC,IAAA,QAMA4lC,EAAAjnC,UAAA,SAAArqB,GAIA,IAHA,IACAutC,EADAolB,EAAA,GAEAnzD,EAAAQ,EAAA+Q,OAAA/Q,EAAAZ,QAAA,QAAAb,MAAA,KACAxK,EAAA,EAAiBA,EAAAyL,EAAApO,OAAkB2C,IAEnC4+D,GADAplB,EAAA/tC,EAAAzL,GAAA8wD,OAAAtmD,MAAA,MACA,GAAAsmD,QAAAtX,EAAA,GAEA,OAAAolB,GAIArB,EAAA6B,UAAA,SAAA7kC,GACA,IAAAtuB,EAAA,GACAsrB,EAAAgD,EAAAF,YAIA,QAHAryB,IAAAuyB,EAAAykC,uBACAznC,EAAAgD,EAAAykC,sBAEAzkC,EAAA8kC,YAAAxoE,OAAAmW,KAAAutB,EAAA8kC,YAAAhiE,OAAA,CACA,IAAAm6B,EAAA,GACA3gC,OAAAmW,KAAAutB,EAAA8kC,YAAAtoD,QAAA,SAAAuoD,GACA/kC,EAAA8kC,WAAAC,GACA9nC,EAAA7sB,KAAA20D,EAAA,IAAA/kC,EAAA8kC,WAAAC,IAEA9nC,EAAA7sB,KAAA20D,KAGArzD,GAAA,UAAAsrB,EAAA,IAAAC,EAAA5sB,KAAA,KAAiD,OAEjD,OAAAqB,GAKAsxD,EAAAgC,YAAA,SAAAtzD,GACA,IAAAR,EAAAQ,EAAA+Q,OAAA/Q,EAAAZ,QAAA,QAAAb,MAAA,KACA,OACAkE,KAAAjD,EAAAgqB,QACA+pC,UAAA/zD,EAAAb,KAAA,OAIA2yD,EAAAkC,YAAA,SAAAllC,GACA,IAAAlD,EAAA,GACAE,EAAAgD,EAAAF,YAYA,YAXAryB,IAAAuyB,EAAAykC,uBACAznC,EAAAgD,EAAAykC,sBAEAzkC,EAAAmlC,cAAAnlC,EAAAmlC,aAAAriE,QAEAk9B,EAAAmlC,aAAA3oD,QAAA,SAAA4oD,GACAtoC,GAAA,aAAAE,EAAA,IAAAooC,EAAAjxD,MACAixD,EAAAH,WAAAG,EAAAH,UAAAniE,OAAA,IAAAsiE,EAAAH,UAAA,IACA,SAGAnoC,GAKAkmC,EAAAqC,eAAA,SAAA3zD,GACA,IAAA4zD,EAAA5zD,EAAAZ,QAAA,KACAI,EAAA,CACAwkB,KAAA1P,SAAAtU,EAAA+Q,OAAA,EAAA6iD,EAAA,QAEAC,EAAA7zD,EAAAZ,QAAA,IAAAw0D,GAOA,OANAC,GAAA,GACAr0D,EAAA1G,UAAAkH,EAAA+Q,OAAA6iD,EAAA,EAAAC,EAAAD,EAAA,GACAp0D,EAAArU,MAAA6U,EAAA+Q,OAAA8iD,EAAA,IAEAr0D,EAAA1G,UAAAkH,EAAA+Q,OAAA6iD,EAAA,GAEAp0D,GAGA8xD,EAAAwC,eAAA,SAAA9zD,GACA,IAAAR,EAAAQ,EAAA+Q,OAAA,IAAAxS,MAAA,KACA,OACA0uB,UAAAztB,EAAAgqB,QACA8C,MAAA9sB,EAAAwB,IAAA,SAAAgjB,GACA,OAAA1P,SAAA0P,EAAA,QAOAstC,EAAAyC,OAAA,SAAAC,GACA,IAAAnoB,EAAAylB,EAAAU,YAAAgC,EAAA,aACA,GAAAnoB,EACA,OAAAA,EAAA96B,OAAA,IAIAugD,EAAAnnC,iBAAA,SAAAnqB,GACA,IAAAR,EAAAQ,EAAA+Q,OAAA,IAAAxS,MAAA,KACA,OACA01D,UAAAz0D,EAAA,GAAArB,cACAhT,MAAAqU,EAAA,KAOA8xD,EAAA4C,kBAAA,SAAAF,EAAAnoC,GAKA,OACAsoC,KAAA,OACAC,aANA9C,EAAAU,YAAAgC,EAAAnoC,EACA,kBAKA7qB,IAAAswD,EAAAnnC,oBAKAmnC,EAAA+C,oBAAA,SAAA9oC,EAAA+oC,GACA,IAAAxmC,EAAA,WAAAwmC,EAAA,OAIA,OAHA/oC,EAAA6oC,aAAAtpD,QAAA,SAAAypD,GACAzmC,GAAA,iBAAAymC,EAAAN,UAAA,IAAAM,EAAAppE,MAAA,SAEA2iC,GAKAwjC,EAAAkD,gBAAA,SAAAx0D,GACA,IAAAR,EAAAQ,EAAA+Q,OAAA,GAAAxS,MAAA,KACA,OACA3F,IAAA0b,SAAA9U,EAAA,OACAi1D,YAAAj1D,EAAA,GACAk1D,UAAAl1D,EAAA,GACAm1D,cAAAn1D,EAAAq+B,MAAA,KAIAyzB,EAAAsD,gBAAA,SAAAxB,GACA,kBAAAA,EAAAx6D,IAAA,IACAw6D,EAAAqB,YAAA,KACA,iBAAArB,EAAAsB,UACApD,EAAAuD,qBAAAzB,EAAAsB,WACAtB,EAAAsB,YACAtB,EAAAuB,cAAA,IAAAvB,EAAAuB,cAAAh2D,KAAA,SACA,QAKA2yD,EAAAwD,qBAAA,SAAAJ,GACA,OAAAA,EAAAt1D,QAAA,WACA,YAEA,IAAAI,EAAAk1D,EAAA3jD,OAAA,GAAAxS,MAAA,KACA,OACAw2D,UAAA,SACAC,QAAAx1D,EAAA,GACAy1D,SAAAz1D,EAAA,GACA01D,SAAA11D,EAAA,GAAAA,EAAA,GAAAjB,MAAA,aAAAxC,EACAo5D,UAAA31D,EAAA,GAAAA,EAAA,GAAAjB,MAAA,aAAAxC,IAIAu1D,EAAAuD,qBAAA,SAAAH,GACA,OAAAA,EAAAK,UAAA,IACAL,EAAAM,SACAN,EAAAO,SAAA,IAAAP,EAAAO,SAAA,KACAP,EAAAQ,UAAAR,EAAAS,UACA,IAAAT,EAAAQ,SAAA,IAAAR,EAAAS,UACA,KAIA7D,EAAA8D,oBAAA,SAAApB,EAAAnoC,GAGA,OAFAylC,EAAAU,YAAAgC,EAAAnoC,EACA,aACA7qB,IAAAswD,EAAAkD,kBAMAlD,EAAA+D,iBAAA,SAAArB,EAAAnoC,GACA,IAAAhD,EAAAyoC,EAAAU,YAAAgC,EAAAnoC,EACA,mBACAjD,EAAA0oC,EAAAU,YAAAgC,EAAAnoC,EACA,iBACA,OAAAhD,GAAAD,EAGA,CACA0pC,iBAAAzpC,EAAA9X,OAAA,IACA+wC,SAAAl5B,EAAA7X,OAAA,KAJA,MASAugD,EAAAgE,mBAAA,SAAA/pC,GACA,qBAAAA,EAAA+mC,iBAAA,iBACA/mC,EAAAu2B,SAAA,QAIAwP,EAAAiE,mBAAA,SAAAvB,GASA,IARA,IAAAwB,EAAA,CACAC,OAAA,GACAC,iBAAA,GACAC,cAAA,GACAC,KAAA,IAGAhsC,EADA0nC,EAAAG,WAAAuC,GACA,GAAAz1D,MAAA,KACArU,EAAA,EAAiBA,EAAA0/B,EAAAx4B,OAAkBlH,IAAA,CACnC,IAAAohC,EAAA1B,EAAA1/B,GACA2rE,EAAAvE,EAAAU,YACAgC,EAAA,YAAA1oC,EAAA,QACA,GAAAuqC,EAAA,CACA,IAAAvnC,EAAAgjC,EAAAoB,YAAAmD,GACAC,EAAAxE,EAAAU,YACAgC,EAAA,UAAA1oC,EAAA,KAQA,OANAgD,EAAA8kC,WAAA0C,EAAA1kE,OAAAkgE,EAAAjnC,UAAAyrC,EAAA,OACAxnC,EAAAmlC,aAAAnC,EAAAU,YACAgC,EAAA,aAAA1oC,EAAA,KACAtqB,IAAAswD,EAAAgC,aACAkC,EAAAC,OAAA/2D,KAAA4vB,GAEAA,EAAA7jC,KAAA+nE,eACA,UACA,aACAgD,EAAAG,cAAAj3D,KAAA4vB,EAAA7jC,KAAA+nE,iBAWA,OAJAlB,EAAAU,YAAAgC,EAAA,aAAAlpD,QAAA,SAAA9K,GACAw1D,EAAAE,iBAAAh3D,KAAA4yD,EAAA9lC,YAAAxrB,MAGAw1D,GAKAlE,EAAAyE,oBAAA,SAAA/7B,EAAAgmB,GACA,IAAAlyB,EAAA,GAGAA,GAAA,KAAAkM,EAAA,IACAlM,GAAAkyB,EAAAyV,OAAArkE,OAAA,UACA08B,GAAA,sBACAA,GAAAkyB,EAAAyV,OAAAz0D,IAAA,SAAAstB,GACA,YAAAvyB,IAAAuyB,EAAAykC,qBACAzkC,EAAAykC,qBAEAzkC,EAAAF,cACGzvB,KAAA,YAEHmvB,GAAA,uBACAA,GAAA,8BAGAkyB,EAAAyV,OAAA3qD,QAAA,SAAAwjB,GACAR,GAAAwjC,EAAAwB,YAAAxkC,GACAR,GAAAwjC,EAAA6B,UAAA7kC,GACAR,GAAAwjC,EAAAkC,YAAAllC,KAEA,IAAA0nC,EAAA,EAiBA,OAhBAhW,EAAAyV,OAAA3qD,QAAA,SAAAwjB,GACAA,EAAA0nC,aACAA,EAAA1nC,EAAA0nC,YAGAA,EAAA,IACAloC,GAAA,cAAAkoC,EAAA,QAEAloC,GAAA,iBAEAkyB,EAAA0V,kBACA1V,EAAA0V,iBAAA5qD,QAAA,SAAAmrD,GACAnoC,GAAAwjC,EAAA0B,YAAAiD,KAIAnoC,GAKAwjC,EAAA4E,2BAAA,SAAAlC,GACA,IAcAvd,EAdA0f,EAAA,GACAX,EAAAlE,EAAAiE,mBAAAvB,GACAoC,GAAA,IAAAZ,EAAAG,cAAAv2D,QAAA,OACAi3D,GAAA,IAAAb,EAAAG,cAAAv2D,QAAA,UAGAktB,EAAAglC,EAAAU,YAAAgC,EAAA,WACAhzD,IAAA,SAAAhB,GACA,OAAAsxD,EAAAqC,eAAA3zD,KAEAwsB,OAAA,SAAAhtB,GACA,gBAAAA,EAAA1G,YAEA+zB,EAAAP,EAAAl7B,OAAA,GAAAk7B,EAAA,GAAAtI,KAGAsyC,EAAAhF,EAAAU,YAAAgC,EAAA,oBACAhzD,IAAA,SAAAhB,GAEA,OADAA,EAAA+Q,OAAA,IAAAxS,MAAA,KACAyC,IAAA,SAAA4wD,GACA,OAAAt9C,SAAAs9C,EAAA,QAGA0E,EAAAllE,OAAA,GAAAklE,EAAA,GAAAllE,OAAA,GAAAklE,EAAA,QAAAzpC,IACA4pB,EAAA6f,EAAA,OAGAd,EAAAC,OAAA3qD,QAAA,SAAAwjB,GACA,WAAAA,EAAA7jC,KAAA+nE,eAAAlkC,EAAA8kC,WAAAmD,IAAA,CACA,IAAAC,EAAA,CACAxyC,KAAA6I,EACA4pC,iBAAAniD,SAAAga,EAAA8kC,WAAAmD,IAAA,KAEA1pC,GAAA4pB,IACA+f,EAAAE,IAAA,CAAwB1yC,KAAAyyB,IAExB0f,EAAAz3D,KAAA83D,GACAJ,KACAI,EAAAluD,KAAA4L,MAAA5L,KAAA8L,UAAAoiD,KACAG,IAAA,CACA3yC,KAAA6I,EACA7hB,UAAAqrD,EAAA,oBAEAF,EAAAz3D,KAAA83D,OAIA,IAAAL,EAAA/kE,QAAAy7B,GACAspC,EAAAz3D,KAAA,CACAslB,KAAA6I,IAKA,IAAAiM,EAAAw4B,EAAAU,YAAAgC,EAAA,MAeA,OAdAl7B,EAAA1nC,SAEA0nC,EADA,IAAAA,EAAA,GAAA15B,QAAA,WACAkV,SAAAwkB,EAAA,GAAA/nB,OAAA,OACK,IAAA+nB,EAAA,GAAA15B,QAAA,SAEL,IAAAkV,SAAAwkB,EAAA,GAAA/nB,OAAA,WACA,UAEAhV,EAEAo6D,EAAArrD,QAAA,SAAAygB,GACAA,EAAAqrC,WAAA99B,KAGAq9B,GAIA7E,EAAAuF,oBAAA,SAAA7C,GACA,IAAA8C,EAAA,GAIAC,EAAAzF,EAAAU,YAAAgC,EAAA,WACAhzD,IAAA,SAAAhB,GACA,OAAAsxD,EAAAqC,eAAA3zD,KAEAwsB,OAAA,SAAA57B,GACA,gBAAAA,EAAAkI,YACK,GACLi+D,IACAD,EAAAE,MAAAD,EAAA5rE,MACA2rE,EAAA9yC,KAAA+yC,EAAA/yC,MAKA,IAAAizC,EAAA3F,EAAAU,YAAAgC,EAAA,gBACA8C,EAAAI,YAAAD,EAAA7lE,OAAA,EACA0lE,EAAAK,SAAA,IAAAF,EAAA7lE,OAIA,IAAAgmE,EAAA9F,EAAAU,YAAAgC,EAAA,cAGA,OAFA8C,EAAAM,MAAAhmE,OAAA,EAEA0lE,GAKAxF,EAAA+F,UAAA,SAAArD,GACA,IAAAx0D,EACA83D,EAAAhG,EAAAU,YAAAgC,EAAA,WACA,OAAAsD,EAAAlmE,OAEA,OAAYquB,QADZjgB,EAAA83D,EAAA,GAAAvmD,OAAA,GAAAxS,MAAA,MACY,GAAA2hC,MAAA1gC,EAAA,IAEZ,IAAA+3D,EAAAjG,EAAAU,YAAAgC,EAAA,WACAhzD,IAAA,SAAAhB,GACA,OAAAsxD,EAAAqC,eAAA3zD,KAEAwsB,OAAA,SAAAgrC,GACA,eAAAA,EAAA1+D,YAEA,OAAAy+D,EAAAnmE,OAAA,EAEA,CAAYquB,QADZjgB,EAAA+3D,EAAA,GAAApsE,MAAAoT,MAAA,MACY,GAAA2hC,MAAA1gC,EAAA,SAFZ,GASA8xD,EAAAmG,qBAAA,SAAAzD,GACA,IAEA0D,EAFA9tC,EAAA0nC,EAAAhoC,WAAA0qC,GACA2D,EAAArG,EAAAU,YAAAgC,EAAA,uBAEA2D,EAAAvmE,OAAA,IACAsmE,EAAApjD,SAAAqjD,EAAA,GAAA5mD,OAAA,SAEA2E,MAAAgiD,KACAA,EAAA,OAEA,IAAAE,EAAAtG,EAAAU,YAAAgC,EAAA,gBACA,GAAA4D,EAAAxmE,OAAA,EACA,OACAq4B,KAAAnV,SAAAsjD,EAAA,GAAA7mD,OAAA,QACA7M,SAAA0lB,EAAAF,IACAguC,kBAIA,GADApG,EAAAU,YAAAgC,EAAA,cACA5iE,OAAA,GACA,IAAAoO,EAAA8xD,EAAAU,YAAAgC,EAAA,iBACAjjD,OAAA,IACAxS,MAAA,KACA,OACAkrB,KAAAnV,SAAA9U,EAAA,OACA0E,SAAA1E,EAAA,GACAk4D,oBAUApG,EAAAuG,qBAAA,SAAAtuC,EAAAylB,GACA,IAAA8oB,EAAA,GAiBA,OAfAA,EADA,cAAAvuC,EAAArlB,SACA,CACA,KAAAqlB,EAAAyQ,KAAA,MAAAzQ,EAAArlB,SAAA,IAAA8qC,EAAA9qC,SAAA,OACA,uBACA,eAAA8qC,EAAAvlB,KAAA,QAGA,CACA,KAAAF,EAAAyQ,KAAA,MAAAzQ,EAAArlB,SAAA,IAAA8qC,EAAAvlB,KAAA,OACA,uBACA,aAAAulB,EAAAvlB,KAAA,IAAAulB,EAAA9qC,SAAA,mBAGAnI,IAAAizC,EAAA0oB,gBACAI,EAAAp5D,KAAA,sBAAAswC,EAAA0oB,eAAA,QAEAI,EAAAn5D,KAAA,KAOA2yD,EAAAyG,kBAAA,WACA,OAAAjxD,KAAAC,SAAAxV,WAAAwf,OAAA,OAQAugD,EAAA0G,wBAAA,SAAAC,EAAAC,EAAAC,GACA,IACAjhD,OAAAnb,IAAAm8D,IAAA,EAQA,mBAFAC,GAAA,qBAGA,KARAF,GAGA3G,EAAAyG,qBAKA,IAAA7gD,EACA,yCAKAo6C,EAAA8G,kBAAA,SAAAC,EAAArY,EAAAv9C,EAAAgd,GACA,IAAAqO,EAAAwjC,EAAAyE,oBAAAsC,EAAAr+B,KAAAgmB,GAyBA,GAtBAlyB,GAAAwjC,EAAAgE,mBACA+C,EAAAC,YAAAC,sBAGAzqC,GAAAwjC,EAAA+C,oBACAgE,EAAAG,cAAAD,qBACA,UAAA91D,EAAA,oBAEAqrB,GAAA,SAAAuqC,EAAAxsB,IAAA,OAEAwsB,EAAA5sC,UACAqC,GAAA,KAAAuqC,EAAA5sC,UAAA,OACG4sC,EAAAI,WAAAJ,EAAAK,YACH5qC,GAAA,iBACGuqC,EAAAI,UACH3qC,GAAA,iBACGuqC,EAAAK,YACH5qC,GAAA,iBAEAA,GAAA,iBAGAuqC,EAAAI,UAAA,CAEA,IAAAviB,EAAA,QAAAz2B,EAAA/c,GAAA,IACA21D,EAAAI,UAAAv4B,MAAAx9B,GAAA,OACAorB,GAAA,KAAAooB,EAGApoB,GAAA,UAAAuqC,EAAAM,uBAAA,GAAA30C,KACA,IAAAkyB,EACAmiB,EAAAM,uBAAA,GAAAjC,MACA5oC,GAAA,UAAAuqC,EAAAM,uBAAA,GAAAjC,IAAA1yC,KACA,IAAAkyB,EACApoB,GAAA,oBACAuqC,EAAAM,uBAAA,GAAA30C,KAAA,IACAq0C,EAAAM,uBAAA,GAAAjC,IAAA1yC,KACA,QAUA,OANA8J,GAAA,UAAAuqC,EAAAM,uBAAA,GAAA30C,KACA,UAAAstC,EAAAE,WAAA,OACA6G,EAAAI,WAAAJ,EAAAM,uBAAA,GAAAjC,MACA5oC,GAAA,UAAAuqC,EAAAM,uBAAA,GAAAjC,IAAA1yC,KACA,UAAAstC,EAAAE,WAAA,QAEA1jC,GAIAwjC,EAAAsH,aAAA,SAAA5E,EAAAnoC,GAGA,IADA,IAAAT,EAAAkmC,EAAAG,WAAAuC,GACA9pE,EAAA,EAAiBA,EAAAkhC,EAAAh6B,OAAkBlH,IACnC,OAAAkhC,EAAAlhC,IACA,iBACA,iBACA,iBACA,iBACA,OAAAkhC,EAAAlhC,GAAA6mB,OAAA,GAKA,OAAA8a,EACAylC,EAAAsH,aAAA/sC,GAEA,YAGAylC,EAAAuH,QAAA,SAAA7E,GAGA,OAFA1C,EAAAG,WAAAuC,GACA,GAAAz1D,MAAA,KACA,GAAAwS,OAAA,IAGAugD,EAAAwH,WAAA,SAAA9E,GACA,YAAAA,EAAAz1D,MAAA,WAGA+yD,EAAAhoC,WAAA,SAAA0qC,GACA,IACAx0D,EADA8xD,EAAAG,WAAAuC,GACA,GAAAjjD,OAAA,GAAAxS,MAAA,KACA,OACAy7B,KAAAx6B,EAAA,GACAiqB,KAAAnV,SAAA9U,EAAA,OACA0E,SAAA1E,EAAA,GACAkqB,IAAAlqB,EAAAq+B,MAAA,GAAAl/B,KAAA,OAIA2yD,EAAAyH,WAAA,SAAA/E,GACA,IACAx0D,EADA8xD,EAAAU,YAAAgC,EAAA,SACAjjD,OAAA,GAAAxS,MAAA,KACA,OACAq/C,SAAAp+C,EAAA,GACAmvC,UAAAnvC,EAAA,GACAw5D,eAAA1kD,SAAA9U,EAAA,OACAy5D,QAAAz5D,EAAA,GACA05D,YAAA15D,EAAA,GACA0yD,QAAA1yD,EAAA,KAKA8xD,EAAA6H,WAAA,SAAAzH,GACA,oBAAAA,GAAA,IAAAA,EAAAtgE,OACA,SAGA,IADA,IAAAg6B,EAAAkmC,EAAAG,WAAAC,GACAxnE,EAAA,EAAiBA,EAAAkhC,EAAAh6B,OAAkBlH,IACnC,GAAAkhC,EAAAlhC,GAAAkH,OAAA,SAAAg6B,EAAAlhC,GAAAsJ,OAAA,GACA,SAIA,UAKA7J,EAAAD,QAAA4nE,gCCnzBer4C,EAAA,GAQXmgD,wBARW,SAQaC,GACpB,IAAMC,EAAcD,GACbA,EAAS7sD,qBAAqB,0BAA0B,GAE/D,GAAK8sD,EAIL,MAAO,CACH94D,MAAO84D,EAAYl7D,aAAa,kBAChCm7D,UAAWD,EAAYl7D,aAAa,aACpCo7D,cAAeF,EAAYl7D,aAAa,kBACxCq7D,UAAWH,EAAYl7D,aAAa,cACpCqN,OAAQ6tD,EAAYl7D,aAAa,YAWzCs7D,sBAhCW,SAgCWL,GAClB,IAAMM,EACAN,EAAS7sD,qBAAqB,wBAAwB,GACtDotD,EAAoBD,GACnBA,EAA2B7mD,YAC5B+mD,EACAR,EAAS7sD,qBAAqB,QAAQ,GACtCnhB,EAAOwuE,GACNA,EAAc/mD,aACd+mD,EAAc/mD,YAAY3U,cAC3B27D,EACAT,EAAS7sD,qBAAqB,cAAc,GAIlD,MAAO,CACHotD,oBACAvuE,OACAouE,UALEK,GAAsBA,EAAmBhnD,cAenDinD,mBA5DW,SA4DQ1rD,GACf,IAAM2rD,EAAQ3rD,GAAYA,EAAS7B,qBAAqB,SAAS,GAEjE,OAAOwtD,GAASA,EAAM57D,aAAa,eASvC67D,aAxEW,SAwEEZ,GACT,IAAMa,EACAb,EAAS7sD,qBAAqB,cAAc,GAGlD,OAFkB0tD,GAAsBA,EAAmBpnD,aAW/DqnD,YAtFW,SAsFCd,GACR,OAAOA,EAASj7D,aAAa,QAAQmhC,SAAS,qhCClEtD,IAAMljB,EAASF,oBAAUQ,GA2CJy9C,cAgDjB,SAAAA,EACQryD,EACAsyD,EACAC,EACApqD,EACAqqD,EACA/yB,EACAzB,EACAy0B,GAAa,IAAAr3D,MAAA,mGAAA83B,CAAAz/B,KAAA4+D,KACjB5+D,MAAA2H,MAAAg4B,EAAAi/B,GAAA/vE,KAAAmR,KACIuM,EACAsyD,EACAC,EAAWpqD,EAAYqqD,EAAkB/yB,EAAWgzB,mDAWnDC,iBAAmB,KAQxBt3D,EAAKu3D,wBAAqB3+D,EAQ1BoH,EAAKw3D,wBAAqB5+D,EAQ1BoH,EAAKy3D,6BAA+B,KAYpCz3D,EAAK03D,2BAA6B,KAgBlC13D,EAAK23D,mBAAoB,EAYzB33D,EAAK43D,oBAAqB,EAS1B53D,EAAK63D,oBAAqB,EAE1B73D,EAAK83D,kBAAmB,EACxB93D,EAAK+3D,QAAS,EAQd/3D,EAAK4iC,MAAQA,EAMb5iC,EAAKg4D,eAAiB,IAAIC,IAO1Bj4D,EAAKk4D,kBAAoB,IAAIC,IAO7Bn4D,EAAKo4D,cAAe,EAQpBp4D,EAAKq4D,2BAAwBz/D,EAE7BoH,EAAKs4D,eAAiB,GACtBt4D,EAAKs4D,eAAe/8D,KAChBwR,EAAW6tB,iBACP6hB,IAAeuH,OAAOZ,oBACtBpjD,EAAKu4D,oBAAoBhwE,KAAzB85C,IAAAriC,OArISA,8OAxDoBw4D,0DAShBC,GACrB,IAAMC,EAAgBD,EAAe7uC,KAAK,0BAE1C,GAAI8uC,EAAczqE,OAAQ,CACtB,IAAM08C,EAAU+tB,EAAc,GAAGz9D,aAAa,WAE9C,GAAgB,SAAZ0vC,GACe,cAAZA,GACY,cAAZA,GACY,SAAZA,EACH,OAAOA,EAIf,OAAO,sDAkLP,OAAOtyC,KAAKsgE,QAAUC,yCAObp5D,GAAS,IAAAqB,EAAAxI,KAClBA,KAAK6vC,QAAU9R,QAAQ52B,EAAQ0oC,SAC/B7vC,KAAKy/D,kBAAmB,EACxBz/D,KAAKmH,QAAUA,EAMfnH,KAAKwgE,aAAc,EAMnBxgE,KAAKygE,WAAY,EACjBzgE,KAAK0gE,oBAAsB3iC,QAAQ52B,EAAQu5D,qBAC3C1gE,KAAK2gE,oBAAsB5iC,QAAQ52B,EAAQw5D,qBAE3C,IAAMC,EAAY,CAAE9b,WAAY39C,EAAQ29C,YAMxC,GAJI39C,EAAQ05D,cACRD,EAAUE,SApQI,KAsQlBF,EAAUG,uBAAwB,EAC9B/gE,KAAKuqC,MAAO,CAEZq2B,EAAUI,kBAAmB,EAC7BJ,EAAUK,YAAc95D,EAAQs+C,KAAOt+C,EAAQs+C,IAAIwb,YACnDL,EAAUM,WAAa/5D,EAAQs+C,KAAOt+C,EAAQs+C,IAAIyb,WAElD,IAAMh1B,EAAqBlsC,KAAKmhE,2BAA2Bh6D,QAEzB,IAAvB+kC,IACP00B,EAAU10B,mBAAqBA,QAInC00B,EAAUI,iBACJ75D,EAAQ65D,kBACF75D,EAAQ+5D,aAAe/5D,EAAQ85D,YAC3CL,EAAUM,WAAa/5D,EAAQ+5D,WAC/BN,EAAUQ,uBACJj6D,EAAQk6D,SAAWl6D,EAAQk6D,QAAQD,uBACzCR,EAAUU,sBAAwBn6D,EAAQm6D,sBAItCn6D,EAAQk6D,SACLl6D,EAAQk6D,QAAQN,uBACiC,iBAA1C55D,EAAQk6D,QAAQN,wBAC1BH,EAAUG,sBACJz1D,KAAKC,SACLpE,EAAQk6D,QAAQN,sBAKtB/+C,IAAWuB,UAAU6oB,uBAAuB,CAAE20B,sBAAuBH,EAAUG,yBAInF55D,EAAQo6D,cACRX,EAAUW,aAAc,GAG5BvhE,KAAK0jB,eACC1jB,KAAKkxD,IAAIsQ,qBACHxhE,KAAK2/D,eACL3/D,KAAKgsC,UACLhsC,KAAKuqC,MACLq2B,GAEZ5gE,KAAK0jB,eAAe+9C,eAAiB,SAAA7c,GACjC,GAAKA,EAAL,CAUA,IAAM71B,EAAY61B,EAAG71B,UACfza,EAAMhmB,OAAO82D,YAAY9wC,MAE/B,GAAIya,EAAW,CAC6B,OAApCvmB,EAAK62D,6BACL72D,EAAK62D,2BAA6B/qD,GAItC,IAAI5L,EAAWqmB,EAAUrmB,SAEzB,GAAwB,iBAAbA,EAEP,GAAiB,SADjBA,EAAWA,EAAS/F,gBACmB,WAAb+F,GACtB,GAAIF,EAAKm4D,oBACL,YAED,GAAiB,QAAbj4D,GACHF,EAAKk4D,oBACL,YAIJl4D,EAAKg3D,qBAEbx9C,IAAW6K,cACPkI,IACA,CACI2sC,MAAO,YACP/xE,MAAO2kB,EAAM9L,EAAK62D,2BAClB5Z,IAAKj9C,EAAK+hC,MACVwzB,UAAWv1D,EAAKw2D,cAExBx2D,EAAKg3D,oBAAqB,GAE9Bh3D,EAAKm5D,iBAAiB5yC,KAU1B/uB,KAAK0jB,eAAek+C,uBAAyB,WACE,WAAvCp5D,EAAKkb,eAAem+C,eACpBr5D,EAAKi4D,WAAY,EAC6B,WAAvCj4D,EAAKkb,eAAem+C,gBACgB,WAAxCr5D,EAAKkb,eAAeo+C,iBACvBt5D,EAAKmhD,KAAKvnC,aAAa6C,KAAKsgC,IAAW9wD,iBAAkB+T,IAUjExI,KAAK0jB,eAAeq+C,2BAA6B,WAC7C,IAAMztD,EAAMhmB,OAAO82D,YAAY9wC,MA0B/B,OAxBK9L,EAAK+hC,QACN/hC,EAAKmhD,KAAK/F,gBAAV,aAAAvqD,OACiBmP,EAAKkb,eAAes+C,qBAC/B1tD,GAEVuM,EAAOjc,IACH,cAAAvL,OAAcmP,EAAKkb,eAAes+C,oBAAlC,SAAA3oE,OACemP,EAAK+hC,MADpB,OAEAj2B,GAEJ0N,IAAW6K,cACPoI,IACA,CACIwwB,IAAKj9C,EAAK+hC,MACV+1B,MAAO93D,EAAKkb,eAAes+C,mBAC3BC,gBAAmBz5D,EAAKkb,eAAem+C,eACvCK,UAAW15D,EAAKg4D,YAChB7wE,MAAO2kB,IAGf9L,EAAKmhD,KAAKvnC,aAAa6C,KACnBsgC,IAAWzwD,6BACX0T,EACAA,EAAKkb,eAAes+C,oBAChBx5D,EAAKkb,eAAes+C,oBAC5B,IAAK,WACDx5D,EAAK42D,6BAA+B9qD,EACpC,MACJ,IAAK,YAUD,GAP2C,WAAvC9L,EAAKkb,eAAem+C,gBAChBr5D,EAAKg4D,aACLh4D,EAAKmhD,KAAKvnC,aAAa6C,KACnBsgC,IAAWj0D,oBAAqBkX,IAIvCA,EAAKu3D,cAAgBv3D,EAAKi4D,UAAW,CAEtCz+C,IAAW6K,cACPkI,IACA,CACI2sC,MAAO,WACP/xE,MAAO2kB,EAAM9L,EAAK42D,6BAClB3Z,IAAKj9C,EAAK+hC,MACVwzB,UAAWv1D,EAAKw2D,cAMxB,IAAMmD,EACA72D,KAAK2P,IACHzS,EAAK42D,6BACL52D,EAAK62D,4BAEb72D,EAAKw3D,sBAAwB1rD,EAAM6tD,EAEnCngD,IAAW6K,cACPkI,IACA,CACI2sC,MAAO,gBACP/xE,MAAO6Y,EAAKw3D,sBACZva,IAAKj9C,EAAK+hC,MACVwzB,UAAWv1D,EAAKw2D,cAGxBx2D,EAAKu3D,cAAe,EACpBv3D,EAAKmhD,KAAKvnC,aAAa6C,KACnBsgC,IAAWp0D,uBAAwBqX,GAE3CA,EAAKg4D,aAAc,EACnB,MACJ,IAAK,eACDh4D,EAAKg4D,aAAc,EAIfh4D,EAAKi4D,WACLj4D,EAAKmhD,KAAKvnC,aAAa6C,KACnBsgC,IAAWl0D,uBAAwBmX,GAE3C,MACJ,IAAK,SACDA,EAAKmhD,KAAKvnC,aAAa6C,KACnBsgC,IAAWh0D,sBAAuBiX,KAS9CxI,KAAK0jB,eAAe0+C,oBAAsB,WACtC,IAAM9B,EAAQ93D,EAAKkb,eAAem+C,eAC5BQ,EAAoB75D,EAAKkb,eAAe2+C,kBAG9C,GADA75D,EAAKmhD,KAAKvnC,aAAa6C,KAAKsgC,IAAWnyD,qBAAsBoV,GACzDia,IAAQ6/C,mBAA+B,WAAVhC,GAC1B+B,GAAsD,iBAA1BA,EAAkB/vC,IAAkB,CACnEzR,EAAO5b,MAAP,gCAAA5L,OAA6CmP,EAAKkb,eAAlD,eAAArqB,OAA8EinE,IAc9E93D,EAAKq3D,kBAAkB38D,KAbF,SAAAq/D,GACjB,IAAMC,EAAS,IAAI7yB,IAAInnC,EAAKkb,eAAe++C,iBAAiBnwC,KAE5D9pB,EAAKk6D,eACAziC,KAAK,WACF,IAAM0iC,EAAS,IAAIhzB,IAAInnC,EAAKkb,eAAe++C,iBAAiBnwC,KAE5D9pB,EAAKo6D,mBAAmBJ,EAAQG,GAChCJ,KAEJA,IAKJ,SAAAv9D,GACQA,EACA6b,EAAO7b,MAAM,4BAA6BA,GAE1C6b,EAAO5b,MAAM,yCAOjCjF,KAAK2/D,eAAekD,YAAY7iE,KAAK2pD,OAEhC3pD,KAAKuqC,OAASpjC,EAAQm6D,uBAGvBthE,KAAKkxD,IAAI/mB,YAAY/L,IAAUrG,oBAC3B,SAAA+qC,GACIt6D,EAAKkb,eAAeq/C,cAAcD,GAClCjiD,EAAO3b,KAAK,oDAEZsD,EAAKq3D,kBAAkB38D,KAAK,SAAAq/D,GACxB/5D,EAAKk6D,eACAziC,KAAKsiC,GACL/+B,MAAM++B,gDAYdxzC,GAAW,IAAAhhB,EAAA/N,KAClBgjE,EAAW,IAAIrzB,IAAI3vC,KAAK0jB,eAAe++C,iBAAiBnwC,KAE9D,GAAIvD,GAAaA,EAAUA,UAAUn5B,SAAWoK,KAAKy/D,iBAAkB,CACnE,IAAMwD,EACAl2C,IAAQE,UACN+1C,EAASj1C,MAAMgB,EAAUm0C,eAAgBF,EAASvqD,SACpD0qD,EAAQp2C,IAAQyD,kBAAkBzB,EAAUA,WAElD,IAAMk0C,IAAOE,EAAQ,CAMjB,OAHApmC,IAAqBC,iBAAiB,IAAItmC,MAFpB,oCAGtBmqB,EAAO7b,MAHe,8BAO1Bi+D,EAAIh9D,MAAQ,uCAERjG,KAAKojE,SAC6B,IAA9BpjE,KAAKqjE,cAAcztE,QAEnB6U,WAAW,WAC2B,IAA9BsD,EAAKs1D,cAAcztE,SAGvBmY,EAAKu1D,kBAAkBv1D,EAAKs1D,eAC5Bt1D,EAAKs1D,cAAgB,KACtB,IAEPrjE,KAAKqjE,cAAcngE,KAAK6rB,IAExB/uB,KAAKsjE,kBAAkB,CAAEv0C,SAG7BlO,EAAOjc,IAAI,qCAGX5E,KAAKy/D,kBAAmB,4CAUd8D,GAAY,IAAAh1D,EAAAvO,KAC1B,GAAKA,KAAKwjE,gBAAgB,qBAA1B,CAKA3iD,EAAOjc,IAAI,oBAAqB2+D,GAUhC,IATA,IAAM/zC,EAAOx0B,cAAI,CAAEmY,GAAInT,KAAK8+D,UACxB73D,KAAM,QACLlY,EAAE,SAAU,CAAEkX,MAAO,oBAClBovB,OAAQ,iBACR0oC,UAAW/9D,KAAKyjE,aAChBl3D,IAAKvM,KAAKuM,MAEZy2D,EAAW,IAAIrzB,IAAI3vC,KAAK0jB,eAAe++C,iBAAiBnwC,KAdpC6d,EAAA,SAgBjBE,GACL,IAAMqzB,EAAQH,EAAWvyC,OAAO,SAAA9wB,GAAE,OAAIA,EAAGgjE,gBAAkB7yB,IACrDjiB,EACArB,IAAQe,WAAWk1C,EAASj1C,MAAMsiB,GAAKttC,MAAM,QAAQ,IAE3D,GAAI2gE,EAAM9tE,OAAS,EAAG,CAClB,IAAMqtE,EACAl2C,IAAQE,UAAU+1C,EAASj1C,MAAMsiB,GAAM2yB,EAASvqD,SAEtDwqD,EAAIh9D,MAAQ,uCACZupB,EAAKzgC,EAAE,UAAW,CACdoiD,QAAS5iC,EAAKk1D,eAAiBl1D,EAAKswD,SAC9B,YAAc,YACpB5vE,KAAMy0E,EAAM,GAAGC,OAASD,EAAM,GAAGC,OAASv1C,EAAML,QACjDh/B,EAAE,YAAak0E,GAClB,IAAK,IAAIv0E,EAAI,EAAGA,EAAIg1E,EAAM9tE,OAAQlH,IAAK,CACnC,IAAMqgC,EACAhC,IAAQyD,kBAAkBkzC,EAAMh1E,GAAGqgC,WAIrCxgB,EAAKshC,UACL9gB,EAAUI,GAAK,WAEnBK,EAAKzgC,EAAE,YAAaggC,GAAW5oB,KAInC,IAAMy9D,EACA72C,IAAQO,SACN01C,EAASj1C,MAAMsiB,GACf,iBAAkB2yB,EAASvqD,SAEnC,GAAImrD,EAAiB,CACjB,IAAM3zB,EAAMljB,IAAQ4B,iBAAiBi1C,GAErC3zB,EAAIuB,UAAW,EACfhiB,EAAKzgC,EACD,cACA,CAAEkX,MAAO,gCACRrW,EAAEqgD,EAAIrhB,oBACJqhB,EAAIrhB,YACXY,EAAK30B,MAAMo1C,GACXzgB,EAAKrpB,KAETqpB,EAAKrpB,KACLqpB,EAAKrpB,OA9CJkqC,EAAM,EAAGA,EAAM2yB,EAASj1C,MAAMn4B,OAAQy6C,IAAOF,EAA7CE,GAqDTrwC,KAAK0U,WAAWpG,OACZkhB,EAAM,KAAMxvB,KAAK6jE,sBAAsBr0C,GAvpBhC,0DAkqBX,IAAMs0C,EACA9oE,cAAI,CACFmY,GAAInT,KAAK8+D,UACT73D,KAAM,QACTlY,EAAE,SAAU,CAAEkX,MAAO,oBAClBovB,OAAQ,eACR0oC,UAAW/9D,KAAKyjE,aAChBl3D,IAAKvM,KAAKuM,MACbxd,EAAE,YAAa,CAAEkX,MAAO,oCACxBrW,EAAE,UACFuW,KAELnG,KAAKi/D,kBACE6E,EAAY/0E,EACX,iBAAkB,CACdkX,MAAO,kCACPiB,GAAIlH,KAAKi/D,mBAGrBj/D,KAAK0U,WAAWpG,OACZw1D,EACA,KACA9jE,KAAK6jE,sBAAsBC,GAKvB,6CAMKpkE,GAAM,IAAAiP,EAAA3O,KACnB,GAA2C,WAAvCA,KAAK0jB,eAAem+C,eAAxB,CAMA,IAAMkC,EAAgB,GAyBtB,GAvBArkE,EAAK6xB,KAAK,gCACLwhB,KAAK,SAACxC,EAAKxhB,GACR,IAAIvqB,EAAOuoB,IAAQ0D,oBAAoB1B,GAEvCvqB,EAAOA,EAAK5C,QAAQ,OAAQ,IAAIA,QAAQ,KAAM,IAI9C,IAAMoiE,EAAe,IAAIC,gBAAgB,CACrCf,cAAe,EAOfS,OAAQ,GACR50C,UAAWvqB,IAGfu/D,EAAc7gE,KAAK8gE,KAGtBD,EAAcnuE,OAAnB,CAsBAirB,EAAO5b,MAAP,eAAA5L,OACmB0qE,EAAcnuE,OADjC,6BAEAoK,KAAK6/D,kBAAkB38D,KAbF,SAAAq/D,GACjB,QAAA9/D,EAAA,EAAAA,EAA2BshE,EAA3BnuE,OAAA6M,IAA0C,CAArC,IAAMyhE,EAAgBH,EAAJthE,GACnBkM,EAAK+U,eAAeygD,gBAAgBD,GAC/BjkC,KACG,kBAAMpf,EAAO5b,MAAM,wBACnB,SAAAoL,GAAG,OAAIwQ,EAAO7b,MAAM,0BAA2BqL,KAG3DkyD,WAlBA1hD,EAAO7b,MACH,6BAA8BtF,EAAK,IAAMA,EAAK,GAAG0kE,gBAhCrDvjD,EAAO1b,KAAK,uFA6DPkuC,GAAU,IAAA5iC,EAAAzQ,KAEbgzC,EAAEK,GAAU9hB,KACV,gEAGFwhB,KAAK,SAACrkD,EAAG21E,GACX,IAAM77C,EAAOzO,OAAOsqD,EAAYzhE,aAAa,SAEzC6N,EAAK85B,MAEL95B,EAAKkvD,eAAe2E,aAChB97C,EAAM1tB,UAAQoJ,mBAAmBuM,EAAKquD,YAE1C9rB,EAAEqxB,GACG9yC,KAAK,gDACLwhB,KAAK,SAACwxB,EAAIC,GACP,IAAM/2B,EAAQ+2B,EAAgB5hE,aAAa,SAEvC6qC,GAASA,EAAM73C,SACXskB,MAAMsO,IAASA,EAAO,EACtB3H,EAAO1b,KACH,gBAAA9L,OAAgBmvB,EAAhB,2BAAAnvB,OACco0C,IAElBh9B,EAAKkvD,eAAe2E,aAChB97C,EACA1tB,UAAQoJ,mBAAmBupC,wDAcnDztC,KAAK0jB,eACL1jB,KAAK0jB,eAAe+gD,uBAEpB5jD,EAAO7b,MACH,4FAwBA0/D,EAAanjB,EAASojB,EAASr7B,GAAa,IAAAh2B,EAAAtT,KACpDA,KAAK4kE,oBACDF,EACA,WAIIpxD,EAAKuxD,kBAAkBtjB,EAASojB,IAEpCA,EACAr7B,kCAWDA,GAAa,IAAAj1B,EAAArU,KAChB,IAAKA,KAAKg/D,YACN,MAAM,IAAItoE,MAAM,+CA8BpBsJ,KAAK6/D,kBAAkB38D,KA5BF,SAAAq/D,GAAoB,IAAAr9C,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IACrC,QAAA8kB,EAAAC,EAAyBgkB,EAAzB75C,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAsC,KAA3B0jB,EAA2BvjB,EAAA11B,MAClC0kB,EAAKqP,eAAe4gB,SAASsE,GAAY,IAFR,MAAAv4B,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAIrC/Q,EAAKqP,eAAeohD,YAAYzwD,EAAK0qD,kBAChC9+B,KAAK,SAAA8kC,GACF1wD,EAAKqP,eAAeshD,oBAAoBD,GACnC9kC,KAAK,WAIF5rB,EAAK4wD,oBACD5wD,EAAKqP,eAAe++C,iBAAiBnwC,KACzCiwC,KACD,SAAAv9D,GACC6b,EAAO7b,MACH,0BAA2BA,EAAO+/D,GACtCxC,EAAiBv9D,MAE1B,SAAAA,GACC6b,EAAO7b,MACH,4BACAA,EACAqP,EAAK0qD,kBACTwD,EAAiBv9D,MAMzB,SAAAA,GACQA,EACA6b,EAAO7b,MAAM,eAAgBA,GAE7B6b,EAAO5b,MAAM,sEAeT8/D,GAChB,IAAIj6D,EAAO9P,cAAI,CACXmY,GAAInT,KAAK8+D,UACT73D,KAAM,QACPlY,EAAE,SAAU,CACXkX,MAAO,oBACPovB,OAAQ,mBACR0oC,UAAW/9D,KAAKyjE,aAChBl3D,IAAKvM,KAAKuM,MAGd,IAAIojC,IAAIo1B,GAAU/zB,SACdlmC,EACA9K,KAAKg/D,YAAc,YAAc,aACrCl0D,EAAOA,EAAKzF,OACZwb,EAAO3b,KAAK,qBAAsB4F,GAClC9K,KAAK0U,WAAWpG,OAAOxD,EACnB,WACI+V,EAAO3b,KAAK,sCAEhB,SAAAF,GACI6b,EAAO7b,MAAM,2BAA4BA,IAt6BtC,uCA+6BLkgE,GACN,IAAKllE,KAAKg/D,YACN,MAAM,IAAItoE,MAAM,oDAEpBsJ,KAAK4kE,oBACDM,EACA,WACIrkD,EAAO3b,KAAK,0BAEhB,SAAAF,GACI6b,EAAO7b,MAAM,qBAAsBA,iDAmB3BmgE,EAAqB5jB,EAASojB,EAASr7B,GAAa,IAAA87B,EAAAplE,KAoEpEA,KAAK6/D,kBAAkB38D,KAnEF,SAAAq/D,GAEjB,GAAIj5B,EAAa,KAAAxjB,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IACb,QAAA0lB,EAAAC,EAAoBojB,EAApB75C,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAiC,KAAtB4e,EAAsBze,EAAAt2B,MAC7By1E,EAAK1hD,eAAe4gB,SAASI,IAFpB,MAAAr0B,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,IAMjB,IAAMq/C,EACAD,EAAKE,yBAAyBH,GAC9BI,EACAH,EAAK1hD,eAAe++C,iBAAiBnwC,IAMrCkzC,EAHAxyB,EAAEmyB,GACC5zC,KAAK,4DAEwBhwB,KAAK,MAEvCikE,IAAoBJ,EAAKnG,mBACzBmG,EAAKnG,iBAAmBuG,GAG5BJ,EAAK1C,aAAa2C,EAAa70D,KAC1ByvB,KAAK,WAwBF,GAvBImlC,EAAK9E,QAAUC,MACf6E,EAAK9E,MAAQC,IAaT6E,EAAK76B,QAAU66B,EAAK9F,mBACpB8F,EAAKK,kBAAkBL,EAAK9F,oBAQhCiG,EAAa,CACb,IAAMG,EACA,IAAI/1B,IAAIy1B,EAAK1hD,eAAe++C,iBAAiBnwC,KAEnD8yC,EAAKxC,mBACD,IAAIjzB,IAAI41B,GAAcG,GAG9BnD,KACD,SAAAv9D,GACC6b,EAAO7b,MAAP,gDAAA3L,OAEQ+rE,EAAKpG,YAAc,WAAa,WAFxC3lE,OAEoD2L,GAChDqgE,GAEJ9C,EAAiBv9D,MAMzB,SAAAA,GACIA,EAAQ2/D,EAAQ3/D,GAASu8C,+CAcpBokB,EAAiBpkB,EAASojB,GAAS,IAAAiB,EAAA5lE,KAChDA,KAAK2pD,KAAKvnC,aAAa6C,KAAKsgC,IAAWvzD,eAAgBgO,MAMvD,IAAM6lE,EAAgBF,EAAgBG,QAEtCH,EACKp0C,KAAK,yBACLhwB,KAAK,UAAW,YAQrBokE,EACKp0C,KAAK,+BACLw0C,SACLJ,EACKp0C,KAAK,mCACLw0C,SAML,IAAMC,EAAiBL,EAAgBp0C,KAAK,kCAE5Cy0C,EAAezkE,KAAK,OAAQ,SAC5BykE,EAAerkE,KAAK,+DAGpB3B,KAAK4kE,oBACDe,EACA,WAEIC,EAAKhB,oBACDiB,EACA,WACI,IAAM7C,EACA,IAAIrzB,IAAIi2B,EAAKliD,eAAe++C,iBAAiBnwC,KAEnDszC,EAAKK,oBAAoBjD,EAAUzhB,EAASojB,GAE5CiB,EAAKjc,KAAKvnC,aAAa6C,KACnBsgC,IAAWtzD,oBACX2zE,EACAC,IAERlB,IAERA,6CAYUpjB,EAASojB,GAAS,IAAAuB,EAAAlmE,KAG1BgjE,EAAW,IAAIrzB,IAAI3vC,KAAK0jB,eAAe++C,iBAAiBnwC,KAC1D6zC,EAASnrE,cAAI,CAAEmY,GAAInT,KAAK8+D,UACxB73D,KAAM,QACLlY,EAAE,SAAU,CAAEkX,MAAO,oBAClBovB,OAAQ,iBACR0oC,UAAW/9D,KAAKyjE,aAChB2C,UAAWpmE,KAAKqmE,aAChB95D,IAAKvM,KAAKuM,MAEdvM,KAAK2gE,sBACLqC,EAASlzB,qBAAsB,GAE/B9vC,KAAK0gE,sBACLsC,EAASjzB,qBAAsB,GAE/B/vC,KAAK6vC,UACLmzB,EAASnzB,SAAU,GAEvBmzB,EAAShyB,SACLm1B,EACAnmE,KAAKyjE,eAAiBzjE,KAAK6+D,SAAW,YAAc,YACpD,MAGJsH,EAASA,EAAO9gE,OAChBwb,EAAO3b,KAAK,yBAA0BihE,GACtCnmE,KAAK0U,WAAWpG,OAAO63D,EACnB5kB,EACAvhD,KAAK6jE,sBAAsBsC,EAAQ,SAAAnhE,GAC/B2/D,EAAQ3/D,GAIRkhE,EAAKvc,KAAKvnC,aAAa6C,KACnBsgC,IAAWnxD,uBAAwB8xE,KAzoCpC,+CA2qCGI,GACd,IAAMC,EAAkBD,EAAsB,OAAS,OAEjDE,EACAxrE,cAAI,CACFmY,GAAInT,KAAK8+D,UACT73D,KAAM,QAELlY,EAAE,SAAU,CACTkX,MAAO,oBACPovB,OAAQ,iBACR0oC,UAAW/9D,KAAKyjE,aAChBl3D,IAAKvM,KAAKuM,MAEbxd,EAAE,UAAW,CACVE,KAAM,QACNqjD,QAASi0B,IAGrB1lD,EAAO3b,KAAP,0CAAA7L,OAC8CktE,IAE9CvmE,KAAK0U,WAAWpG,OACZk4D,EACA,KACAxmE,KAAK6jE,sBAAsB2C,GApsCpB,iDAktCKxD,EAAUzhB,EAASojB,GAAS,IAAA8B,EAAAzmE,KACxC0mE,EAAkB1rE,cAAI,CAAEmY,GAAInT,KAAK8+D,UACjC73D,KAAM,QACLlY,EAAE,SAAU,CACTkX,MAAO,oBACPovB,OAAQ,mBACR0oC,UAAW/9D,KAAKyjE,aAChBl3D,IAAKvM,KAAKuM,MAGlBy2D,EAASj1C,MAAMze,QAAQ,SAACq3D,EAAYp2B,GAChC,IAAMniB,EAAQrB,IAAQe,WAAW64C,EAAW5jE,MAAM,QAAQ,IAE1D2jE,EAAgB33E,EAAE,UACd,CACIoiD,QACIs1B,EAAKhD,eAAiBgD,EAAK5H,SACrB,YACA,YACV5vE,KAAMm/B,EAAML,QAGpBi1C,EAASzwB,kBAAkBhC,EAAKm2B,GAChCA,EAAgBvgE,OAIpBugE,EAAkBA,EAAgBrhE,OAClCwb,EAAO3b,KAAK,6BAA8BwhE,GAE1C1mE,KAAK0U,WAAWpG,OAAOo4D,EACnBnlB,EACAvhD,KAAK6jE,sBAAsB6C,EAAiB/B,GAlvCrC,iDAiwCKpjB,EAASojB,GAGzB,IAAIiC,EAAkB5rE,cAAI,CAAEmY,GAAInT,KAAK8+D,UACjC73D,KAAM,QACLlY,EAAE,SAAU,CACTkX,MAAO,oBACPovB,OAAQ,mBACR0oC,UAAW/9D,KAAKyjE,aAChBl3D,IAAKvM,KAAKuM,MAGlBq6D,EAAkBA,EAAgBvhE,OAClCwb,EAAO3b,KAAK,4BAA8B0hE,GAE1C5mE,KAAK0U,WAAWpG,OAAOs4D,EACnBrlB,EACAvhD,KAAK6jE,sBAAsB+C,EAAiBjC,GAlxCrC,uCAyxCLpjB,EAASojB,EAASx9D,GACxB,GAAInH,KAAKsgE,QAAUC,IAAnB,CAIA,IAAKp5D,GAAW42B,QAAQ52B,EAAQ0/D,sBAAuB,CACnD,IAAIC,EACE9rE,cAAI,CACFmY,GAAInT,KAAK8+D,UACT73D,KAAM,QAELlY,EAAE,SAAU,CACTkX,MAAO,oBACPovB,OAAQ,oBACR0oC,UAAW/9D,KAAKyjE,aAChBl3D,IAAKvM,KAAKuM,MAEbxd,EAAE,UACFA,EAAGoY,GAAWA,EAAQuI,QAAW,WAEtCvI,GAAWA,EAAQ4/D,mBACnBD,EAAiB3gE,KACZpX,EAAE,QACFa,EAAEuX,EAAQ4/D,mBAInBD,EAAmBA,EAAiBzhE,OACpCwb,EAAO3b,KAAK,4BAA6B4hE,GACzC9mE,KAAK0U,WAAWpG,OACZw4D,EACAvlB,EACAvhD,KAAK6jE,sBAAsBiD,EAAkBnC,GAzzC1C,UA4zCP9jD,EAAO3b,KAAP,yCAAA7L,OAAqD2G,OAIzDA,KAAK0U,WAAWw+B,OAAO8zB,UAAUhnE,KAAKuM,2CAQ7B06D,EAAiBC,GAI1BrmD,EAAO3b,KAAP,sBAAA7L,OAAkC2G,MAAQinE,EAAiBC,GAE3DlnE,KAAKigE,eAAe3wD,QAAQ,SAAAkV,GAAc,OAAIA,MAC9CxkB,KAAKigE,eAAiB,GAEtBjgE,KAAKid,oDAQWhN,GACZA,IAAWm0C,IAAe3mD,OAAOM,WAAaiC,KAAKk/D,qBACnDr+C,EAAO3b,KAAK,oCACZlF,KAAK4iE,mBACD5iE,KAAKk/D,mBACLl/D,KAAKm/D,yEAcWgI,EAAeC,GACvC,IAAMC,EAAc,GAiEpB,OA/DAr0B,EAAEm0B,GAAep0B,KAAK,SAACu0B,EAAInvD,GACvB,IAAMlpB,EAAO+jD,EAAE76B,GAAS5W,KAAK,QACzBquB,EAAQ,GAEZojB,EAAE76B,GACGoZ,KAAK,uDACLwhB,KAAK,WAEF,IAAMthB,EAAYzxB,KAAK4C,aAAa,aAC9BkuB,EACAkiB,EAAEhzC,MACCuxB,KAAK,WACL/rB,IAAI,WAED,OAAOxF,KAAK4C,aAAa,UAE5BrT,MAELuhC,EAAMl7B,SACNg6B,GAAK,gBAAAv2B,OACkBo4B,EADlB,KAAAp4B,OAEGy3B,EAAM3tB,KAAK,KAFd,WAQX6vC,EAAE76B,GAASoZ,KACT,mDAGJwhB,KAAK,WACL,IAAMvqB,EAAOwqB,EAAEhzC,MAAMuB,KAAK,QAEtB6lE,EAAiB52B,aAAahoB,GAC9B3H,EAAO1b,KAAP,yCAAA9L,OAC6CmvB,IAMjDwqB,EAAEhzC,MAAMuxB,KAAK,cAAcwhB,KAAK,WAC5BnjB,GAAK,UAAAv2B,OAAcmvB,EAAd,KAAAnvB,OAAsB25C,EAAEhzC,MAAMuB,KAAK,SACpCyxC,EAAEhzC,MAAMuB,KAAK,UAAYyxC,EAAEhzC,MAAMuB,KAAK,SAAS3L,SAC/Cg6B,GAAK,IAAAv2B,OAAQ25C,EAAEhzC,MAAMuB,KAAK,WAE9BquB,GAAS,WAKjBw3C,EAAiBr5C,MAAMze,QAAQ,SAACye,EAAOw5C,GAC9Bx6C,IAAQO,SAASS,EAAjB,SAAA10B,OAAiCpK,MAGjCo4E,EAAYE,KACbF,EAAYE,GAAM,IAEtBF,EAAYE,IAAO33C,OAIpBy3C,0CAOK3nE,GACZM,KAAKwnE,0BAAyB,EAAgB9nE,8CAO/BA,GACfM,KAAKwnE,0BAAyB,EAAoB9nE,oDAW7B+nE,EAAO/nE,GAAM,IAAAgoE,EAAA1nE,KAC5B2nE,EAAYF,EAAQ,kBAAoB,qBAE1CA,GACAznE,KAAK4nE,aAAaloE,GA+CtBM,KAAK6/D,kBAAkB38D,KA5CF,SAAAq/D,GACjB,IAAKmF,EAAKhkD,eAAe++C,mBACjBiF,EAAKhkD,eAAe++C,iBAAiBnwC,IAAK,CAC9C,IAAMu0B,EAAM,GAAAxtD,OAAMsuE,EAAN,qCAKZ,OAHA9mD,EAAO7b,MAAM6hD,QACb0b,EAAiB1b,GAKrBhmC,EAAOjc,IAAP,cAAAvL,OAAyBsuE,IACzB9mD,EAAOjc,IACH,yBACA8iE,EAAKhkD,eAAes+C,oBAExB,IAAMuD,EACA,IAAI51B,IAAI+3B,EAAKhkD,eAAe++C,iBAAiBnwC,KAC7CA,EAAM,IAAIqd,IAAI+3B,EAAKhkD,eAAe2+C,kBAAkB/vC,KACpDu1C,EACAJ,EACIC,EAAKI,4BAA4BpoE,EAAM4yB,GACvCo1C,EAAKK,+BAA+BroE,EAAM4yB,GAC9C+yC,EACAoC,EACIC,EAAKM,wBAAwBH,GAC7BH,EAAKO,2BAA2BJ,GAE1CH,EAAKhF,aAAa2C,EAAa70D,KAC1ByvB,KAAK,WACF,IAAMylC,EACA,IAAI/1B,IAAI+3B,EAAKhkD,eAAe++C,iBAAiBnwC,KAEnDzR,EAAOjc,IAAP,GAAAvL,OACOsuE,EADP,iBACiCpC,EAAaG,GAC9CgC,EAAK9E,mBAAmB2C,EAAaG,GACrCnD,KACD,SAAAv9D,GACC6b,EAAO7b,MAAP,GAAA3L,OAAgBsuE,EAAhB,YAAqC3iE,GACrCu9D,EAAiBv9D,wDAaRkjE,GACrB,IAAMC,EAAY,IAAIx4B,IAAI,IAe1B,OAbI3vC,KAAK2gE,sBACLwH,EAAUr4B,qBAAsB,GAEhC9vC,KAAK0gE,sBACLyH,EAAUp4B,qBAAsB,GAEhC/vC,KAAK6vC,UACLs4B,EAAUt4B,SAAU,GAGxBs4B,EAAUl1B,WAAWi1B,GACrBloE,KAAK4nE,aAAa50B,EAAEk1B,GAAS32C,KAAK,aAE3B42C,qDAUgBC,GACvB,IAAMD,EAAY1lD,IAAQ4lD,YACpB,IAAI14B,IAAI3vC,KAAK0jB,eAAe2+C,kBAAkB/vC,KAC9C,IAAIqd,IAAI3vC,KAAK0jB,eAAeA,eAAe2+C,kBAAkB/vC,KA0BnE,OAxBA81C,EAAe94D,QAAQ,SAACsgB,EAAO2gB,IAE3B3gB,EAAQA,EAAM7sB,MAAM,SACd6N,MACF6R,IAAQ4lD,YACRz4C,EAAMtgB,QAAQ,SAAA9K,GACV2jE,EAAUp6C,MAAMwiB,GACV43B,EAAUp6C,MAAMwiB,GAAK3uC,QAArB,GAAAvI,OAAgCmL,EAAhC,QAA4C,MAGtDorB,EAAMtgB,QAAQ,SAAA9K,GACV,IAAM6rC,EAAM83B,EAAUp6C,MAAMu6C,UAAU,SAAAv2C,GAAK,OAAIA,EAAMgS,SAASv/B,KAE1D6rC,GAAO,IACP83B,EAAUp6C,MAAMsiB,GAAO83B,EAAUp6C,MAAMsiB,GAAKzuC,QAArB,GAAAvI,OAAgCmL,EAAhC,QAA4C,IAGnE2jE,EAAUp6C,MAAMsiB,GAAO83B,EAAUp6C,MAAMsiB,GAAKzuC,QAAQ,aAAc,mBAKlFumE,EAAU33D,IAAM23D,EAAU1vD,QAAU0vD,EAAUp6C,MAAM5qB,KAAK,IAElDglE,kDAUad,GACpB,IAAMc,EAAY,IAAIx4B,IAAI3vC,KAAK0jB,eAAe2+C,kBAAkB/vC,KAOhE,OALA+0C,EAAY/3D,QAAQ,SAACsgB,EAAO2gB,GACxB43B,EAAUp6C,MAAMwiB,IAAQ3gB,IAE5Bu4C,EAAU33D,IAAM23D,EAAU1vD,QAAU0vD,EAAUp6C,MAAM5qB,KAAK,IAElDglE,uCAYEI,GACT,GAA2C,WAAvCvoE,KAAK0jB,eAAem+C,eAA6B,CACjD,IAAM78D,EAAQ,IAAItO,MAAM,4CAIxB,OAFAsJ,KAAK2pD,KAAKvnC,aAAa6C,KAAKsgC,IAAW3xD,qBAAsBoR,EAAOhF,MAE7DojC,QAAQE,OAAOt+B,GAG1B,IAAMmjE,EACAI,GAAqBvoE,KAAK0jB,eAAe2+C,kBAAkB/vC,IAEjE,IAAK61C,EAAW,CACZ,IAAMnjE,EAAQ,IAAItO,MAAJ,kEAAA2C,OAA4E2G,KAAKsgE,QAI/F,OAFAtgE,KAAK2pD,KAAKvnC,aAAa6C,KAAKsgC,IAAW3xD,qBAAsBoR,EAAOhF,MAE7DojC,QAAQE,OAAOt+B,GAG1B,IAAMq9D,EAAoB,IAAImG,sBAAsB,CAChDvhE,KAAMjH,KAAKg/D,YAAc,SAAW,QACpC1sC,IAAK61C,IAGT,OAAInoE,KAAKg/D,YACEh/D,KAAKyoE,sBAAsBpG,GAG/BriE,KAAK0oE,sBAAsBrG,iDAShBA,GAAmB,IAAAsG,EAAA3oE,KAGrC,OAFA6gB,EAAO5b,MAAM,2CAENjF,KAAK0jB,eAAeklD,qBAAqBvG,GAC3CpiC,KAAK,WAGF,OAFApf,EAAO5b,MAAM,gCAEN0jE,EAAKjlD,eAAemlD,aAAaF,EAAK5J,kBACxC9+B,KAAK,SAAA6oC,GAGF,OAFAjoD,EAAO5b,MAAM,0CAEN0jE,EAAKjlD,eAAeshD,oBAAoB8D,qDAW7CzG,GAAmB,IAAA0G,EAAA/oE,KAGrC,OAFA6gB,EAAO5b,MAAM,+BAENjF,KAAK0jB,eAAeohD,YAAY9kE,KAAK++D,kBACvC9+B,KAAK,SAAA+oC,GAGF,OAFAnoD,EAAO5b,MAAM,0CAEN8jE,EAAKrlD,eAAeshD,oBAAoBgE,GAC1C/oC,KAAK,WAKF,OAJApf,EAAO5b,MACH,2CAGG8jE,EAAKrlD,eAAeklD,qBAAqBvG,4CAiBvD4G,EAAUC,GAAU,IAAAC,EAAAnpE,KACvBopE,EAAe,SAAA7G,GACjB,IAAMgD,EAAc4D,EAAKzlD,eAAe++C,iBAAiBnwC,IAErD7P,IAAQ4lD,cAKJc,EAAKzlD,eAAevc,QAAQ45D,uBACzBkI,GAAYC,GAAYA,EAASG,gBAMpCF,EAAKzlD,eAAe4lD,qBAInBL,GAAYC,GAAYA,EAASG,eAMlCF,EAAKzlD,eAAe4lD,oBAGbL,GAAYA,EAASI,iBAAmBH,IAK/CC,EAAKzlD,eAAe4lD,oBACpBH,EAAKzlD,eAAe+gD,yBAI5B0E,EAAKzlD,eAAe6lD,aAAaN,EAAUC,GACtCjpC,KAAK,SAAAupC,GACF,IAAI3hC,EAAUzE,QAAQC,UAElBmmC,IACIP,GAAYC,IACbC,EAAK7I,QAAUC,MAClB14B,EAAUshC,EAAKzG,eAAeziC,KAAK,WAC/B,IAAMwpC,EAAc,IAAI95B,IAAIw5B,EAAKzlD,eAAe++C,iBAAiBnwC,KAEjE62C,EAAKvG,mBAAmB,IAAIjzB,IAAI41B,GAAckE,IAElDlH,IAKJ16B,EAAQ5H,KAAK,WAKLipC,IAAaC,EAAK5+B,OAClB4+B,EAAKzlD,eAAegmD,cAAcR,GAEtC3G,KACDA,KAEN/+B,MAAM,SAAAnzB,GACHkyD,EAAiBlyD,MAI7B,OAAO,IAAI+yB,QAAQ,SAACC,EAASC,GACzB6lC,EAAKtJ,kBAAkB38D,KACnBkmE,EACA,SAAApkE,GACQA,GACA6b,EAAO7b,MAAM,uBAAwBA,GACrCs+B,EAAOt+B,KAEP6b,EAAO3b,KAAK,uBACZm+B,gEAgBWsmC,EAAkBvC,GAC7C,IAAMgB,EAAiB,GA2DvB,OAzDAp1B,EAAE22B,GAAkB52B,KAAK,SAACu0B,EAAInvD,GAC1B,IAAMlpB,EAAO+jD,EAAE76B,GAAS5W,KAAK,QACzBquB,EAAQ,GAEZojB,EAAE76B,GACGoZ,KAAK,uDACLwhB,KAAK,WAEF,IAAMthB,EAAYzxB,KAAK4C,aAAa,aAC9BkuB,EACAkiB,EAAEhzC,MACCuxB,KAAK,WACL/rB,IAAI,WACD,OAAOxF,KAAK4C,aAAa,UAE5BrT,MAELuhC,EAAMl7B,SACNg6B,GAAK,gBAAAv2B,OACkBo4B,EADlB,KAAAp4B,OAEGy3B,EAAM3tB,KAAK,KAFd,WAOjB,IAAM2tB,EAAQ,GAIRkiB,EAAE76B,GAASoZ,KACT,mDAEJwhB,KAAK,WAEL,IAAMvqB,EAAOwqB,EAAEhzC,MAAMuB,KAAK,QAE1BuvB,EAAM5tB,KAAKslB,KAEf4+C,EAAiBr5C,MAAMze,QAAQ,SAACye,EAAOw5C,GAC9Bx6C,IAAQO,SAASS,EAAjB,SAAA10B,OAAiCpK,MAGjCm5E,EAAeb,KAChBa,EAAeb,GAAM,IAEzBz2C,EAAMxhB,QAAQ,SAAAkZ,GACV,IAAMohD,EACA78C,IAAQuD,UAAUvC,EAAlB,UAAA10B,OAAmCmvB,IAErCohD,EAAUh0E,SACVwyE,EAAeb,IAAf,GAAAluE,OAAyBuwE,EAAUzmE,KAAK,QAAxC,WAGRilE,EAAeb,IAAO33C,OAIvBw4C,+CAeUyB,EAAeC,GAChC,IAAMC,EACA,IAAIp6B,IAAI3vC,KAAK0jB,eAAe++C,iBAAiBnwC,KAC/C03C,EAAU,IAAIC,IAAUH,EAAQC,GAC9BG,EAAaF,EAAQG,cAE3B,GAAI/6E,OAAOmW,KAAK2kE,GAAYt0E,OAKxB,OAJAirB,EAAO7b,MAAP,GAAA3L,OACO2G,KADP,+BAAA3G,OACyCwwE,GACrCK,IAEG,EAIX,IAAME,GADNJ,EAAU,IAAIC,IAAUF,EAAiBD,IACZK,cAE7B,OAAI/6E,OAAOmW,KAAK6kE,GAAcx0E,SAC1BirB,EAAO7b,MAAP,GAAA3L,OACO2G,KADP,kCAAA3G,OAC4CwwE,GACxCO,IAEG,4CAcE1lC,GACb,OAAO1kC,KAAKqqE,6BACR,EAA2B3lC,6CAWjBA,GACd,OAAO1kC,KAAKqqE,6BACR,EAA2B3lC,uDAUP4lC,EAAQ5lC,GAAO,IAAA6lC,EAAAvqE,KACvC,IAAK0kC,EACD,OAAOtB,QAAQE,OAAO,kCAE1B,IAAMumC,EAAgBS,EAAS,kBAAoB,iBAC7ClB,EAAe,SAAA7G,GACjB,IAAM38C,EAAM2kD,EAAK7mD,eAEjB,GAAKkC,EAAL,CAOA,IAAM4kD,EAAc5kD,EAAI68C,iBAAiBnwC,KAEnCg4C,EACI1kD,EAAI6kD,gBAAgBv6E,KAAK01B,EAAK8e,GAC9B9e,EAAI8kD,eAAex6E,KAAK01B,EAAK8e,MAM3B8lC,GAAgB5kD,EAAIy8C,kBAAkB/vC,MAAO7P,IAAQ6/C,kBAG7DiI,EAAK7H,eACAziC,KAAK,WAIFsqC,EAAKI,qBACDd,EAAe,IAAIl6B,IAAI66B,IAC3BjI,KAEJA,GAXJA,IAJAA,EAAgB,GAAAlpE,OAAIwwE,EAAJ,kBAbhBtH,EACI,iBAAAlpE,OAAiBwwE,EAAjB,8BACM,eA8BlB,OAAO,IAAIzmC,QAAQ,SAACC,EAASC,GACzBinC,EAAK1K,kBAAkB38D,KACnBkmE,EACA,SAAApkE,GACQA,EACAs+B,EAAOt+B,GAEPq+B,uDAgBGunC,EAAaC,GAAa,IAAAC,EAAA9qE,KAC7C,IAAKA,KAAK0jB,eACN,OAAO0f,QAAQE,OACX,uEAIR,IAAMynC,EAAcH,EAAc,eAAiB,iBAC7CI,EAAcH,EAAc,eAAiB,iBAEnDhqD,EAAO3b,KAAP,eAAA7L,OAA2B2xE,EAA3B,MAAA3xE,OAA2C0xE,EAA3C,aAEA,IAAM3B,EAAe,SAAA7G,GACjB,IAAM0I,EAAkBH,EAAKxK,QAAUC,IAMjC2K,EACAJ,EAAKpnD,eAAeynD,uBAAuBP,GAE7CE,EAAKxL,oBAAsBuL,IAC3BC,EAAKxL,kBAAoBuL,EAUrBC,EAAKvgC,OAAS0gC,GACdH,EAAKrF,kBAAkBoF,IAI/B,IAAMO,EACAN,EAAKpnD,eAAe2nD,uBAClBP,EAAKxL,mBAAqBwL,EAAKvL,oBAInC0L,IACQC,GAAsBE,GAC9BN,EAAKpI,eACAziC,KACGsiC,EACAA,GAERA,KAIR,OAAO,IAAIn/B,QAAQ,SAACC,EAASC,GACzBwnC,EAAKjL,kBAAkB38D,KACnBkmE,EACA,SAAApkE,GACQA,EACAs+B,EAAOt+B,GAEPq+B,+CAgBL+8B,GAAgB,IAAAkL,EAAAtrE,KACrBurE,EACA3M,EAAgB4M,kBAAkBpL,GAExC,GAAwB,OAApBmL,EAAJ,CAoBA1qD,EAAO5b,MACH,GAAA5L,OAAG2G,KAAH,oDAAA3G,OACyBkyE,EADzB,OAGJvrE,KAAK6/D,kBAAkB38D,KAhBF,SAAAq/D,GACb+I,EAAK9H,gBAAgB,mBACd8H,EAAKG,yBAAyBF,GAGrCD,EAAK5I,eACAziC,KAAKsiC,EAAkBA,GAE5BA,KAUJ,SAAAv9D,GACQA,GACA6b,EAAO7b,MAAM,0BAA2BA,UA3BhD6b,EAAO7b,MACH,GAAA3L,OAAG2G,KAAH,mDACM,4EAwCO0rE,GACrB,IAAMC,EACuB,SAAvBD,GAC6B,cAAvBA,GAAsC1rE,KAAKg/D,aACpB,cAAvB0M,IAAuC1rE,KAAKg/D,YAQxD,OANI2M,IAAwB3rE,KAAKu/D,qBAC7B1+C,EAAO5b,MAAP,GAAA5L,OACO2G,KADP,8BAAA3G,OACwCsyE,IACxC3rE,KAAKu/D,mBAAqBoM,GAGvB3rE,KAAK0jB,eAAe2nD,uBACvBrrE,KAAKs/D,mBAAqBt/D,KAAKu/D,+DAQpBuK,EAAQ8B,GAEvB,GAAI5rE,KAAKsgE,QAAUC,IAAnB,CAMA,IAAKvgE,KAAK0U,WAAW5K,UAQjB,OANK9J,KAAKk/D,qBACNl/D,KAAKk/D,mBAAqB4K,GAE9B9pE,KAAKm/D,mBAAqByM,OAC1B/qD,EAAO1b,KAAK,+DAKhBnF,KAAKk/D,wBAAqB3+D,EAC1BP,KAAKm/D,wBAAqB5+D,EAG1B,IAAIsrE,EAAY,IAAI5B,IAAU2B,EAAQ9B,GAChC/D,EAAS/qE,cAAI,CAAEmY,GAAInT,KAAK8+D,UAC1B73D,KAAM,QACLlY,EAAE,SAAU,CACTkX,MAAO,oBACPovB,OAAQ,gBACR0oC,UAAW/9D,KAAKyjE,aAChBl3D,IAAKvM,KAAKuM,MAGMs/D,EAAU76B,SAAS+0B,IAGvCllD,EAAO3b,KAAK,wBAAyB6gE,EAAO1gE,QAC5CrF,KAAK0U,WAAWpG,OACZy3D,EAAQ,KACR/lE,KAAK6jE,sBAAsBkC,GArpExB,MAupEPllD,EAAOjc,IAAI,yBAIfinE,EAAY,IAAI5B,IAAUH,EAAQ8B,GAClC,IAAM1oD,EAAMloB,cAAI,CAAEmY,GAAInT,KAAK8+D,UACvB73D,KAAM,QACLlY,EAAE,SAAU,CACTkX,MAAO,oBACPovB,OAAQ,aACR0oC,UAAW/9D,KAAKyjE,aAChBl3D,IAAKvM,KAAKuM,MAIOs/D,EAAU76B,SAAS9tB,IAGxCrC,EAAO3b,KAAK,qBAAsBge,EAAI7d,QACtCrF,KAAK0U,WAAWpG,OACZ4U,EAAK,KAAMljB,KAAK6jE,sBAAsB3gD,GA3qEnC,MA6qEPrC,EAAOjc,IAAI,+BA5DXic,EAAO1b,KAAP,4BAAA9L,OAAwC2G,KAAKsgE,MAA7C,4DAkFcwL,EAASC,GAAW,IAAAC,EAAAhsE,KACtC,OAAO,SAAAisE,GAEH,IAAMjnE,EAAQ,GAGRknE,EAAal5B,EAAEi5B,GAAa16C,KAAK,SAEvC,GAAI26C,EAAWt2E,OAAQ,CACnBoP,EAAMmY,KAAO+uD,EAAW3qE,KAAK,QAC7B,IAAM4qE,EAAiBn5B,EAAEi5B,GAAa16C,KAAK,gBAEvC46C,EAAev2E,SACfoP,EAAM0K,OAASy8D,EAAe,GAAGhsE,SAGrC,IAAMisE,EAAcF,EAAW36C,KAAK,SAEhC66C,EAAYx2E,SACZoP,EAAMF,IAAMsnE,EAAYzqE,QAI3BsqE,IACDjnE,EAAM0K,OAAS,WAGnB1K,EAAMyT,QAAUuzD,EAAKj2E,WAEjBg2E,EACAA,EAAU/mE,GACHgnE,EAAK1L,QAAUC,KACM,mBAAjBv7D,EAAM0K,OAMjBmR,EAAO5b,MAAP,iBAAA5L,OAA8ByT,KAAK8L,UAAU5T,KAE7C+3B,IAAqBC,iBACjB,IAAItmC,MAAJ,iBAAA2C,OACqByT,KAAK8L,UAAU5T,uDAUhD,OAAOhF,KAAK0jB,eAAes+C,mDAMvB,IAAAqK,EAAArsE,KACJA,KAAKsgE,MAAQC,IACbvgE,KAAKggE,2BAAwBz/D,EAEzBP,KAAK0jB,iBACL1jB,KAAK0jB,eAAe+9C,eAAiB,KACrCzhE,KAAK0jB,eAAeq+C,2BAA6B,KACjD/hE,KAAK0jB,eAAe0+C,oBAAsB,KAC1CpiE,KAAK0jB,eAAek+C,uBAAyB,MAIjD5hE,KAAK6/D,kBAAkByM,QAEvBtsE,KAAK6/D,kBAAkB38D,KAAK,SAAAqpE,GAExBF,EAAK1M,eAAekD,YAAY,MAGhCwJ,EAAK3oD,gBAAkB2oD,EAAK3oD,eAAezG,QAC3CsvD,MAIJvsE,KAAK6/D,kBAAkB2M,8CAQvB,MAAO,uBAAAnzE,OAAuB2G,KAAKuqC,MAA5B,kBAAAlxC,OACoB2G,KAAKg/D,YADzB,SAAA3lE,OAC4C2G,KAAKuM,IADjD,2DAU+B,IAAbkgE,EAAa/rC,EAAb+rC,UACzB,GAAKA,GAAcA,EAAUC,uBAA7B,CAOA,IAAM/oE,EAAM3D,KAAK2sE,mBAEjB,OAAOC,sBAAYjpE,GAAO,GAAM,yFCj1ExCnV,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,wCAAAib,IAAAlqC,EAAAQ,EAAAyuB,EAAA,+CAAAovD,IAYO,IAAMn0C,EAAsB,4BAWtBm0C,EACP,yDCxBN,SAAA73E,EAAA7G,GAUA,IAAA2+E,EAAA,IAGAC,EAAA,4BAGAjxB,EAAA,iBAGAkxB,EAAA,qBAEAC,EAAA,mBACAC,EAAA,gBAEAC,EAAA,oBACAC,EAAA,6BACAC,EAAA,eACAC,EAAA,kBACAC,EAAA,kBAEAC,EAAA,kBACAC,EAAA,eACAC,EAAA,kBACAC,EAAA,kBAGAC,EAAA,uBACAC,EAAA,oBACAC,EAAA,wBACAC,EAAA,wBACAC,EAAA,qBACAC,EAAA,sBACAC,EAAA,sBACAC,EAAA,sBACAC,EAAA,6BACAC,EAAA,uBACAC,EAAA,uBASAC,EAAA,OAGAC,EAAA,8BAGAC,EAAA,mBAGAC,EAAA,GACAA,EAAA1B,GAAA0B,EA7CA,kBA8CAA,EAAAd,GAAAc,EAAAb,GACAa,EAAAzB,GAAAyB,EAAAxB,GACAwB,EAAAZ,GAAAY,EAAAX,GACAW,EAAAV,GAAAU,EAAAT,GACAS,EAAAR,GAAAQ,EAAArB,GACAqB,EAAApB,GAAAoB,EAAAnB,GACAmB,EAAAlB,GAAAkB,EAAAjB,GACAiB,EAAAhB,GAAAgB,EAAAf,GACAe,EAAAP,GAAAO,EAAAN,GACAM,EAAAL,GAAAK,EAAAJ,IAAA,EACAI,EArDA,kBAqDAA,EAAAvB,GACAuB,EA3CA,qBA2CA,EAGA,IAAAC,EAAA,iBAAA35E,QAAA5F,iBAAA4F,EAGA45E,EAAA,iBAAA15E,iBAAA9F,iBAAA8F,KAGAlH,EAAA2gF,GAAAC,GAAAle,SAAA,cAAAA,GAGAme,EAA4C3gF,MAAA6R,UAAA7R,EAG5C4gF,EAAAD,GAAA,iBAAA1gF,SAAA4R,UAAA5R,EAGA4gF,EAAAD,KAAA5gF,UAAA2gF,EAUA,SAAAG,EAAAxpE,EAAAypE,GAGA,OADAzpE,EAAAse,IAAAmrD,EAAA,GAAAA,EAAA,IACAzpE,EAWA,SAAA0pE,EAAAprD,EAAAn0B,GAGA,OADAm0B,EAAAZ,IAAAvzB,GACAm0B,EAuDA,SAAAqrD,EAAAj+C,EAAAk+C,EAAAC,EAAAC,GACA,IAAAr+C,GAAA,EACAr7B,EAAAs7B,IAAAt7B,OAAA,EAKA,IAHA05E,GAAA15E,IACAy5E,EAAAn+C,IAAAD,MAEAA,EAAAr7B,GACAy5E,EAAAD,EAAAC,EAAAn+C,EAAAD,KAAAC,GAEA,OAAAm+C,EAyCA,SAAAE,EAAA5/E,GAGA,IAAA8V,GAAA,EACA,SAAA9V,GAAA,mBAAAA,EAAAoG,SACA,IACA0P,KAAA9V,EAAA,IACK,MAAA+I,IAEL,OAAA+M,EAUA,SAAA+pE,EAAAhqE,GACA,IAAAyrB,GAAA,EACAxrB,EAAAhQ,MAAA+P,EAAAwf,MAKA,OAHAxf,EAAA8J,QAAA,SAAA3f,EAAAM,GACAwV,IAAAwrB,GAAA,CAAAhhC,EAAAN,KAEA8V,EAWA,SAAAgqE,EAAA7vE,EAAA47C,GACA,gBAAAp6C,GACA,OAAAxB,EAAA47C,EAAAp6C,KAWA,SAAAsuE,EAAA5rD,GACA,IAAAmN,GAAA,EACAxrB,EAAAhQ,MAAAquB,EAAAkB,MAKA,OAHAlB,EAAAxU,QAAA,SAAA3f,GACA8V,IAAAwrB,GAAAthC,IAEA8V,EAIA,IASAkqE,EATAC,EAAAn6E,MAAAnF,UACAu/E,EAAAnf,SAAApgE,UACAw/E,EAAA1gF,OAAAkB,UAGAy/E,EAAA/hF,EAAA,sBAGAgiF,GACAL,EAAA,SAAAM,KAAAF,KAAAxqE,MAAAwqE,EAAAxqE,KAAA2qE,UAAA,KACA,iBAAAP,EAAA,GAIAQ,EAAAN,EAAA95E,SAGAxF,EAAAu/E,EAAAv/E,eAOA6/E,GAAAN,EAAA/5E,SAGAs6E,GAAAC,OAAA,IACAH,EAAAthF,KAAA0B,GAAAqR,QAzQA,sBAyQA,QACAA,QAAA,uEAIA2uE,GAAAxB,EAAA/gF,EAAAuiF,YAAAhwE,EACA9Q,GAAAzB,EAAAyB,OACA+gF,GAAAxiF,EAAAwiF,WACAC,GAAAhB,EAAArgF,OAAAshF,eAAAthF,QACAuhF,GAAAvhF,OAAAY,OACA4gF,GAAAd,EAAAc,qBACA3sE,GAAA2rE,EAAA3rE,OAGA4sE,GAAAzhF,OAAA0hF,sBACAC,GAAAR,MAAAS,cAAAzwE,EACA0wE,GAAAxB,EAAArgF,OAAAmW,KAAAnW,QAGA8hF,GAAAC,GAAAnjF,EAAA,YACAm0B,GAAAgvD,GAAAnjF,EAAA,OACAo1C,GAAA+tC,GAAAnjF,EAAA,WACAw1B,GAAA2tD,GAAAnjF,EAAA,OACAojF,GAAAD,GAAAnjF,EAAA,WACAqjF,GAAAF,GAAA/hF,OAAA,UAGAkiF,GAAAC,GAAAL,IACAM,GAAAD,GAAApvD,IACAsvD,GAAAF,GAAAnuC,IACAsuC,GAAAH,GAAA/tD,IACAmuD,GAAAJ,GAAAH,IAGAQ,GAAAniF,MAAAa,eAAAiQ,EACAsxE,GAAAD,MAAAE,aAAAvxE,EASA,SAAAwxE,GAAAC,GACA,IAAA/gD,GAAA,EACAr7B,EAAAo8E,IAAAp8E,OAAA,EAGA,IADAoK,KAAAssE,UACAr7C,EAAAr7B,GAAA,CACA,IAAAq8E,EAAAD,EAAA/gD,GACAjxB,KAAA8jB,IAAAmuD,EAAA,GAAAA,EAAA,KA2FA,SAAAC,GAAAF,GACA,IAAA/gD,GAAA,EACAr7B,EAAAo8E,IAAAp8E,OAAA,EAGA,IADAoK,KAAAssE,UACAr7C,EAAAr7B,GAAA,CACA,IAAAq8E,EAAAD,EAAA/gD,GACAjxB,KAAA8jB,IAAAmuD,EAAA,GAAAA,EAAA,KAyGA,SAAAE,GAAAH,GACA,IAAA/gD,GAAA,EACAr7B,EAAAo8E,IAAAp8E,OAAA,EAGA,IADAoK,KAAAssE,UACAr7C,EAAAr7B,GAAA,CACA,IAAAq8E,EAAAD,EAAA/gD,GACAjxB,KAAA8jB,IAAAmuD,EAAA,GAAAA,EAAA,KAuFA,SAAAG,GAAAJ,GACAhyE,KAAAqyE,SAAA,IAAAH,GAAAF,GA4FA,SAAAM,GAAA3iF,EAAA4iF,GAGA,IAAA9sE,EAAA/P,GAAA/F,IAsrBA,SAAAA,GAEA,OAmFA,SAAAA,GACA,OAmIA,SAAAA,GACA,QAAAA,GAAA,iBAAAA,EApIA6iF,CAAA7iF,IAAA8iF,GAAA9iF,GApFA+iF,CAAA/iF,IAAAY,EAAA1B,KAAAc,EAAA,aACAihF,GAAA/hF,KAAAc,EAAA,WAAAygF,GAAAvhF,KAAAc,IAAAq9E,GAzrBA2F,CAAAhjF,GAljBA,SAAAQ,EAAAi/E,GAIA,IAHA,IAAAn+C,GAAA,EACAxrB,EAAAhQ,MAAAtF,KAEA8gC,EAAA9gC,GACAsV,EAAAwrB,GAAAm+C,EAAAn+C,GAEA,OAAAxrB,EA4iBAmtE,CAAAjjF,EAAAiG,OAAAuC,QACA,GAEAvC,EAAA6P,EAAA7P,OACAi9E,IAAAj9E,EAEA,QAAA3F,KAAAN,GACA4iF,IAAAhiF,EAAA1B,KAAAc,EAAAM,IACA4iF,IAAA,UAAA5iF,GAAA6iF,GAAA7iF,EAAA2F,KACA6P,EAAAvC,KAAAjT,GAGA,OAAAwV,EAaA,SAAAstE,GAAA3iF,EAAAH,EAAAN,GACA,IAAAqjF,EAAA5iF,EAAAH,GACAM,EAAA1B,KAAAuB,EAAAH,IAAAgjF,GAAAD,EAAArjF,UACA4Q,IAAA5Q,GAAAM,KAAAG,KACAA,EAAAH,GAAAN,GAYA,SAAAujF,GAAAhiD,EAAAjhC,GAEA,IADA,IAAA2F,EAAAs7B,EAAAt7B,OACAA,KACA,GAAAq9E,GAAA/hD,EAAAt7B,GAAA,GAAA3F,GACA,OAAA2F,EAGA,SA8BA,SAAAu9E,GAAAxjF,EAAAyjF,EAAAC,EAAAC,EAAArjF,EAAAG,EAAAgU,GACA,IAAAqB,EAIA,GAHA6tE,IACA7tE,EAAArV,EAAAkjF,EAAA3jF,EAAAM,EAAAG,EAAAgU,GAAAkvE,EAAA3jF,SAEA4Q,IAAAkF,EACA,OAAAA,EAEA,IAAA8uC,GAAA5kD,GACA,OAAAA,EAEA,IAAA4jF,EAAA79E,GAAA/F,GACA,GAAA4jF,GAEA,GADA9tE,EA2XA,SAAAyrB,GACA,IAAAt7B,EAAAs7B,EAAAt7B,OACA6P,EAAAyrB,EAAA57B,YAAAM,GAGAA,GAAA,iBAAAs7B,EAAA,IAAA3gC,EAAA1B,KAAAqiC,EAAA,WACAzrB,EAAAwrB,MAAAC,EAAAD,MACAxrB,EAAA+tE,MAAAtiD,EAAAsiD,OAEA,OAAA/tE,EApYAguE,CAAA9jF,IACAyjF,EACA,OA6OA,SAAAr9C,EAAA7E,GACA,IAAAD,GAAA,EACAr7B,EAAAmgC,EAAAngC,OAEAs7B,MAAAz7B,MAAAG,IACA,OAAAq7B,EAAAr7B,GACAs7B,EAAAD,GAAA8E,EAAA9E,GAEA,OAAAC,EArPAwiD,CAAA/jF,EAAA8V,OAEG,CACH,IAAArI,EAAAu2E,GAAAhkF,GACAikF,EAAAx2E,GAAA+vE,GAAA/vE,GAAAgwE,EAEA,GAAA4D,GAAArhF,GACA,OA0HA,SAAAkkF,EAAAT,GACA,GAAAA,EACA,OAAAS,EAAAxxC,QAEA,IAAA58B,EAAA,IAAAouE,EAAAv+E,YAAAu+E,EAAAj+E,QAEA,OADAi+E,EAAAC,KAAAruE,GACAA,EAhIAsuE,CAAApkF,EAAAyjF,GAEA,GAAAh2E,GAAAmwE,GAAAnwE,GAAA4vE,GAAA4G,IAAAxjF,EAAA,CACA,GAAAm/E,EAAA5/E,GACA,OAAAS,EAAAT,EAAA,GAGA,GADA8V,EA+XA,SAAArV,GACA,yBAAAA,EAAAkF,aAAA0+E,GAAA5jF,GAEA,IAzVAqY,EAwVAgoE,GAAArgF,GAvVAmkD,GAAA9rC,GAAAkoE,GAAAloE,GAAA,IADA,IAAAA,EAzCAwrE,CAAAL,EAAA,GAA0CjkF,IAC1CyjF,EACA,OA6QA,SAAAr9C,EAAA3lC,GACA,OAAA8jF,GAAAn+C,EAAAo+C,GAAAp+C,GAAA3lC,GA9QAgkF,CAAAzkF,EAhDA,SAAAS,EAAA2lC,GACA,OAAA3lC,GAAA8jF,GAAAn+C,EAAAxwB,GAAAwwB,GAAA3lC,GA+CAikF,CAAA5uE,EAAA9V,QAEK,CACL,IAAA++E,EAAAtxE,GACA,OAAAhN,EAAAT,EAAA,GAEA8V,EA0YA,SAAArV,EAAAgN,EAAAk3E,EAAAlB,GACA,IAAAmB,EAAAnkF,EAAAkF,YACA,OAAA8H,GACA,KAAAwwE,EACA,OAAA4G,GAAApkF,GAEA,KAAA68E,EACA,KAAAC,EACA,WAAAqH,GAAAnkF,GAEA,KAAAy9E,EACA,OA3QA,SAAA4G,EAAArB,GACA,IAAAS,EAAAT,EAAAoB,GAAAC,EAAAZ,QAAAY,EAAAZ,OACA,WAAAY,EAAAn/E,YAAAu+E,EAAAY,EAAAC,WAAAD,EAAAE,YAyQAC,CAAAxkF,EAAAgjF,GAEA,KAAAtF,EAAA,KAAAC,EACA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EACA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EACA,OA/MA,SAAAuG,EAAAzB,GACA,IAAAS,EAAAT,EAAAoB,GAAAK,EAAAhB,QAAAgB,EAAAhB,OACA,WAAAgB,EAAAv/E,YAAAu+E,EAAAgB,EAAAH,WAAAG,EAAAj/E,QA6MAk/E,CAAA1kF,EAAAgjF,GAEA,KAAA/F,EACA,OArQA,SAAA7nE,EAAA4tE,EAAAkB,GAEA,OAAAnF,EADAiE,EAAAkB,EAAA9E,EAAAhqE,IAAA,GAAAgqE,EAAAhqE,GACAwpE,EAAA,IAAAxpE,EAAAlQ,aAmQAy/E,CAAA3kF,EAAAgjF,EAAAkB,GAEA,KAAAhH,EACA,KAAAI,EACA,WAAA6G,EAAAnkF,GAEA,KAAAo9E,EACA,OA/PA/nE,EAAA,IADAuvE,EAgQA5kF,GA/PAkF,YAAA0/E,EAAAj/C,OAAAw4C,EAAA0B,KAAA+E,KACAC,UAAAD,EAAAC,UACAxvE,EA+PA,KAAAgoE,EACA,OApPA,SAAA3pD,EAAAsvD,EAAAkB,GAEA,OAAAnF,EADAiE,EAAAkB,EAAA5E,EAAA5rD,IAAA,GAAA4rD,EAAA5rD,GACAorD,EAAA,IAAAprD,EAAAxuB,aAkPA4/E,CAAA9kF,EAAAgjF,EAAAkB,GAEA,KAAA3G,EACA,OA3OAwH,EA2OA/kF,EA1OAyhF,GAAAziF,OAAAyiF,GAAAhjF,KAAAsmF,IAAA,GADA,IAAAA,EA3BA,IAAAH,EACAvvE,EArKA2vE,CAAAzlF,EAAAyN,EAAA+1E,GAAAC,IAIAhvE,MAAA,IAAAguE,IACA,IAAAiD,EAAAjxE,EAAA7U,IAAAI,GACA,GAAA0lF,EACA,OAAAA,EAIA,GAFAjxE,EAAA0f,IAAAn0B,EAAA8V,IAEA8tE,EACA,IAAA+B,EAAAjC,EAsQA,SAAAjjF,GACA,OAnOA,SAAAA,EAAAmlF,EAAAC,GACA,IAAA/vE,EAAA8vE,EAAAnlF,GACA,OAAAsF,GAAAtF,GAAAqV,EApwBA,SAAAyrB,EAAA3L,GAKA,IAJA,IAAA0L,GAAA,EACAr7B,EAAA2vB,EAAA3vB,OACA6/E,EAAAvkD,EAAAt7B,SAEAq7B,EAAAr7B,GACAs7B,EAAAukD,EAAAxkD,GAAA1L,EAAA0L,GAEA,OAAAC,EA4vBAwkD,CAAAjwE,EAAA+vE,EAAAplF,IAiOAulF,CAAAvlF,EAAAmV,GAAA4uE,IAvQAyB,CAAAjmF,GAAA4V,GAAA5V,GAUA,OA5vBA,SAAAuhC,EAAAk+C,GAIA,IAHA,IAAAn+C,GAAA,EACAr7B,EAAAs7B,IAAAt7B,OAAA,IAEAq7B,EAAAr7B,IACA,IAAAw5E,EAAAl+C,EAAAD,KAAAC,MA+uBA2kD,CAAAP,GAAA3lF,EAAA,SAAAmmF,EAAA7lF,GACAqlF,IAEAQ,EAAAnmF,EADAM,EAAA6lF,IAIA/C,GAAAttE,EAAAxV,EAAAkjF,GAAA2C,EAAA1C,EAAAC,EAAAC,EAAArjF,EAAAN,EAAAyU,MAEAqB,EAkDA,SAAAswE,GAAApmF,GACA,SAAA4kD,GAAA5kD,KAyYAiQ,EAzYAjQ,EA0YAqgF,QAAApwE,MAvYA00C,GAAA3kD,IAAA4/E,EAAA5/E,GAAA0gF,GAAA7B,GACAp8D,KAAAm/D,GAAA5hF,IAqYA,IAAAiQ,EAtVA,SAAA40E,GAAAwB,GACA,IAAAvwE,EAAA,IAAAuwE,EAAA1gF,YAAA0gF,EAAArB,YAEA,OADA,IAAAnE,GAAA/qE,GAAAqe,IAAA,IAAA0sD,GAAAwF,IACAvwE,EA8GA,SAAAyuE,GAAAn+C,EAAAu/C,EAAAllF,EAAAkjF,GACAljF,MAAA,IAKA,IAHA,IAAA6gC,GAAA,EACAr7B,EAAA0/E,EAAA1/E,SAEAq7B,EAAAr7B,GAAA,CACA,IAAA3F,EAAAqlF,EAAArkD,GAEAglD,EAAA3C,EACAA,EAAAljF,EAAAH,GAAA8lC,EAAA9lC,KAAAG,EAAA2lC,QACAx1B,EAEAwyE,GAAA3iF,EAAAH,OAAAsQ,IAAA01E,EAAAlgD,EAAA9lC,GAAAgmF,GAEA,OAAA7lF,EAkCA,SAAA8lF,GAAA1wE,EAAAvV,GACA,IAqKAN,EACAsX,EAtKAjO,EAAAwM,EAAA6sE,SACA,OAsKA,WADAprE,SADAtX,EApKAM,KAsKA,UAAAgX,GAAA,UAAAA,GAAA,WAAAA,EACA,cAAAtX,EACA,OAAAA,GAvKAqJ,EAAA,iBAAA/I,EAAA,iBACA+I,EAAAwM,IAWA,SAAA2rE,GAAA/gF,EAAAH,GACA,IAAAN,EAj8BA,SAAAS,EAAAH,GACA,aAAAG,OAAAmQ,EAAAnQ,EAAAH,GAg8BAkmF,CAAA/lF,EAAAH,GACA,OAAA8lF,GAAApmF,UAAA4Q,EA7tBAwxE,GAAAzhF,UAAAg8E,MAnEA,WACAtsE,KAAAqyE,SAAAhB,MAAA,UAmEAU,GAAAzhF,UAAA,OAtDA,SAAAL,GACA,OAAA+P,KAAA2mB,IAAA12B,WAAA+P,KAAAqyE,SAAApiF,IAsDA8hF,GAAAzhF,UAAAf,IA1CA,SAAAU,GACA,IAAA+I,EAAAgH,KAAAqyE,SACA,GAAAhB,GAAA,CACA,IAAA5rE,EAAAzM,EAAA/I,GACA,OAAAwV,IAAAsnE,OAAAxsE,EAAAkF,EAEA,OAAAlV,EAAA1B,KAAAmK,EAAA/I,GAAA+I,EAAA/I,QAAAsQ,GAqCAwxE,GAAAzhF,UAAAq2B,IAzBA,SAAA12B,GACA,IAAA+I,EAAAgH,KAAAqyE,SACA,OAAAhB,QAAA9wE,IAAAvH,EAAA/I,GAAAM,EAAA1B,KAAAmK,EAAA/I,IAwBA8hF,GAAAzhF,UAAAwzB,IAXA,SAAA7zB,EAAAN,GAGA,OAFAqQ,KAAAqyE,SACApiF,GAAAohF,SAAA9wE,IAAA5Q,EAAAo9E,EAAAp9E,EACAqQ,MAoHAkyE,GAAA5hF,UAAAg8E,MAjFA,WACAtsE,KAAAqyE,SAAA,IAiFAH,GAAA5hF,UAAA,OArEA,SAAAL,GACA,IAAA+I,EAAAgH,KAAAqyE,SACAphD,EAAAiiD,GAAAl6E,EAAA/I,GAEA,QAAAghC,EAAA,IAIAA,GADAj4B,EAAApD,OAAA,EAEAoD,EAAA4X,MAEA3M,GAAApV,KAAAmK,EAAAi4B,EAAA,GAEA,KAyDAihD,GAAA5hF,UAAAf,IA7CA,SAAAU,GACA,IAAA+I,EAAAgH,KAAAqyE,SACAphD,EAAAiiD,GAAAl6E,EAAA/I,GAEA,OAAAghC,EAAA,OAAA1wB,EAAAvH,EAAAi4B,GAAA,IA0CAihD,GAAA5hF,UAAAq2B,IA9BA,SAAA12B,GACA,OAAAijF,GAAAlzE,KAAAqyE,SAAApiF,IAAA,GA8BAiiF,GAAA5hF,UAAAwzB,IAjBA,SAAA7zB,EAAAN,GACA,IAAAqJ,EAAAgH,KAAAqyE,SACAphD,EAAAiiD,GAAAl6E,EAAA/I,GAOA,OALAghC,EAAA,EACAj4B,EAAAkK,KAAA,CAAAjT,EAAAN,IAEAqJ,EAAAi4B,GAAA,GAAAthC,EAEAqQ,MAkGAmyE,GAAA7hF,UAAAg8E,MA/DA,WACAtsE,KAAAqyE,SAAA,CACAn6E,KAAA,IAAA65E,GACAvsE,IAAA,IAAA2c,IAAA+vD,IACAr1D,OAAA,IAAAk1D,KA4DAI,GAAA7hF,UAAA,OA/CA,SAAAL,GACA,OAAAimF,GAAAl2E,KAAA/P,GAAA,OAAAA,IA+CAkiF,GAAA7hF,UAAAf,IAnCA,SAAAU,GACA,OAAAimF,GAAAl2E,KAAA/P,GAAAV,IAAAU,IAmCAkiF,GAAA7hF,UAAAq2B,IAvBA,SAAA12B,GACA,OAAAimF,GAAAl2E,KAAA/P,GAAA02B,IAAA12B,IAuBAkiF,GAAA7hF,UAAAwzB,IAVA,SAAA7zB,EAAAN,GAEA,OADAumF,GAAAl2E,KAAA/P,GAAA6zB,IAAA7zB,EAAAN,GACAqQ,MAgGAoyE,GAAA9hF,UAAAg8E,MApEA,WACAtsE,KAAAqyE,SAAA,IAAAH,IAoEAE,GAAA9hF,UAAA,OAxDA,SAAAL,GACA,OAAA+P,KAAAqyE,SAAA,OAAApiF,IAwDAmiF,GAAA9hF,UAAAf,IA5CA,SAAAU,GACA,OAAA+P,KAAAqyE,SAAA9iF,IAAAU,IA4CAmiF,GAAA9hF,UAAAq2B,IAhCA,SAAA12B,GACA,OAAA+P,KAAAqyE,SAAA1rD,IAAA12B,IAgCAmiF,GAAA9hF,UAAAwzB,IAnBA,SAAA7zB,EAAAN,GACA,IAAAymF,EAAAp2E,KAAAqyE,SACA,GAAA+D,aAAAlE,GAAA,CACA,IAAAmE,EAAAD,EAAA/D,SACA,IAAAlwD,IAAAk0D,EAAAzgF,OAAAk3E,EAAA,EAEA,OADAuJ,EAAAnzE,KAAA,CAAAjT,EAAAN,IACAqQ,KAEAo2E,EAAAp2E,KAAAqyE,SAAA,IAAAF,GAAAkE,GAGA,OADAD,EAAAtyD,IAAA7zB,EAAAN,GACAqQ,MAicA,IAAAm0E,GAAAtD,GAAApB,EAAAoB,GAAAzhF,QAyhBA,WACA,UAjhBAukF,GAtQA,SAAAhkF,GACA,OAAAygF,GAAAvhF,KAAAc,IAyXA,SAAAmjF,GAAAnjF,EAAAiG,GAEA,SADAA,EAAA,MAAAA,EAAAkmD,EAAAlmD,KAEA,iBAAAjG,GAAA8+E,EAAAr8D,KAAAziB,KACAA,GAAA,GAAAA,EAAA,MAAAA,EAAAiG,EAmCA,SAAAo+E,GAAArkF,GACA,IAAA4kF,EAAA5kF,KAAA2F,YAGA,OAAA3F,KAFA,mBAAA4kF,KAAAjkF,WAAAw/E,GAYA,SAAAyB,GAAA3xE,GACA,SAAAA,EAAA,CACA,IACA,OAAAuwE,EAAAthF,KAAA+Q,GACK,MAAAlH,IACL,IACA,OAAAkH,EAAA,GACK,MAAAlH,KAEL,SAyDA,SAAAu6E,GAAAtjF,EAAA2mF,GACA,OAAA3mF,IAAA2mF,GAAA3mF,MAAA2mF,MAxOApF,IAAAyC,GAAA,IAAAzC,GAAA,IAAAqF,YAAA,MAAA1I,GACA1rD,IAAAwxD,GAAA,IAAAxxD,KAAAkrD,GACAjqC,IAvpCA,oBAupCAuwC,GAAAvwC,GAAAC,YACA7f,IAAAmwD,GAAA,IAAAnwD,KAAAiqD,GACA2D,IAppCA,oBAopCAuC,GAAA,IAAAvC,OACAuC,GAAA,SAAAhkF,GACA,IAAA8V,EAAA2qE,GAAAvhF,KAAAc,GACA4kF,EAAA9uE,GAAA8nE,EAAA59E,EAAA2F,iBAAAiL,EACAi2E,EAAAjC,EAAAhD,GAAAgD,QAAAh0E,EAEA,GAAAi2E,EACA,OAAAA,GACA,KAAAlF,GAAA,OAAAzD,EACA,KAAA2D,GAAA,OAAAnE,EACA,KAAAoE,GAAA,MAnqCA,mBAoqCA,KAAAC,GAAA,OAAAjE,EACA,KAAAkE,GAAA,MAhqCA,mBAmqCA,OAAAlsE,IAuQA,IAAA/P,GAAAD,MAAAC,QA2BA,SAAA+8E,GAAA9iF,GACA,aAAAA,GAqGA,SAAAA,GACA,uBAAAA,GACAA,GAAA,GAAAA,EAAA,MAAAA,GAAAmsD,EAvGA26B,CAAA9mF,EAAAiG,UAAA0+C,GAAA3kD,GAiDA,IAAAqhF,GAAAD,IAsLA,WACA,UApKA,SAAAz8B,GAAA3kD,GAGA,IAAAyN,EAAAm3C,GAAA5kD,GAAAygF,GAAAvhF,KAAAc,GAAA,GACA,OAAAyN,GAAA+vE,GAAA/vE,GAAAgwE,EA2DA,SAAA74B,GAAA5kD,GACA,IAAAsX,SAAAtX,EACA,QAAAA,IAAA,UAAAsX,GAAA,YAAAA,GA2DA,SAAA1B,GAAAnV,GACA,OAAAqiF,GAAAriF,GAAAkiF,GAAAliF,GAtuBA,SAAAA,GACA,IAAA4jF,GAAA5jF,GACA,OAAA6gF,GAAA7gF,GAEA,IAAAqV,EAAA,GACA,QAAAxV,KAAAb,OAAAgB,GACAG,EAAA1B,KAAAuB,EAAAH,IAAA,eAAAA,GACAwV,EAAAvC,KAAAjT,GAGA,OAAAwV,EA4tBAixE,CAAAtmF,GA0CAjC,EAAAD,QA9VA,SAAAyB,GACA,OAAAwjF,GAAAxjF,GAAA,iECt3CAnB,EAAAQ,EAAAyuB,EAAA,sBAAAwsD,IAAA,IAAA0M,EAAAnoF,EAAA,GAQA,SAASooF,EAAYC,EAAQC,GAEzB,IAAKA,EACD,OAAO,EAIX,GAAID,EAAOjhF,SAAWkhF,EAAOlhF,OACzB,OAAO,EAGX,IAAK,IAAIlH,EAAI,EAAGC,EAAIkoF,EAAOjhF,OAAQlH,EAAIC,EAAGD,IAEtC,GAAImoF,EAAOnoF,aAAc+G,OAASqhF,EAAOpoF,aAAc+G,OAEnD,IAAKohF,EAAOnoF,GAAGqoF,OAAOD,EAAOpoF,IACzB,OAAO,OAER,GAAImoF,EAAOnoF,KAAOooF,EAAOpoF,GAG5B,OAAO,EAIf,OAAO,EAQI,SAASu7E,EAAU+M,EAAOC,GAGrC,GAFAj3E,KAAKg3E,MAAQA,EACbh3E,KAAKi3E,SAAWA,GACXD,EACD,MAAM,IAAItgF,MAAM,yBACb,IAAKugF,EACR,MAAM,IAAIvgF,MAAM,4BAQxBuzE,EAAU35E,UAAU65E,YAAc,WAE9B,IAAM+M,EAAWl3E,KAAKg3E,MAAMhnC,kBACtBmnC,EAAen3E,KAAKi3E,SAASjnC,kBAC7BonC,EAAW,GAoFjB,OAlFAhoF,OAAOmW,KAAK4xE,GAAc7nE,QAAQ,SAAA+nE,GAC9B,IAAMC,EAAUJ,EAASG,GACnBE,EAAcJ,EAAaE,GAE5BC,IAAWC,GAQhBnoF,OAAOmW,KAAKgyE,EAAYzmD,OAAOxhB,QAAQ,SAAAkZ,GACnC,IAAkD,IAA9Cp5B,OAAOmW,KAAK+xE,EAAQxmD,OAAOltB,QAAQ4kB,GAG9B4uD,EAASC,KACVD,EAASC,GAAkB,CACvBjnC,WAAYmnC,EAAYnnC,WACxBC,IAAKknC,EAAYlnC,IACjBvf,MAAO,GACPM,WAAY,KAGpBgmD,EAASC,GAAgBvmD,MAAMtI,GAAQ+uD,EAAYzmD,MAAMtI,QACtD,GAAI+uD,EAAYzmD,MAAMtI,GAAMoH,OACpB0nD,EAAQxmD,MAAMtI,GAAMoH,MAAO,MAGOrvB,IADvB+2E,EAAQxmD,MAAMtI,GAAMoH,MAAM2B,KAC5C,SAAA/sB,GAAI,OAA8B,IAA1BA,EAAKZ,QAAQ,kBAEoBrD,IADtBg3E,EAAYzmD,MAAMtI,GAAMoH,MAAM2B,KACjD,SAAA/sB,GAAI,OAA8B,IAA1BA,EAAKZ,QAAQ,aAGhBwzE,EAASC,KACVD,EAASC,GAAkB,CACvBjnC,WAAYmnC,EAAYnnC,WACxBC,IAAKknC,EAAYlnC,IACjBvf,MAAO,GACPM,WAAY,KAGpBgmD,EAASC,GAAgBvmD,MAAMtI,GACzB+uD,EAAYzmD,MAAMtI,OAMpC+uD,EAAYnmD,WAAW9hB,QAAQ,SAAAkoE,GAK3B,IAFA,IAAI/lE,GAAU,EAEL/iB,EAAI,EAAGA,EAAI4oF,EAAQlmD,WAAWx7B,OAAQlH,IAAK,CAChD,IAAM+oF,EAAcH,EAAQlmD,WAAW1iC,GAEvC,GAAI8oF,EAAe/lD,YAAcgmD,EAAYhmD,WACtCmlD,EAAYY,EAAe1mD,MAAO2mD,EAAY3mD,OAAQ,CAEzDrf,GAAU,EACV,OAIHA,IAII2lE,EAASC,KACVD,EAASC,GAAkB,CACvBjnC,WAAYmnC,EAAYnnC,WACxBC,IAAKknC,EAAYlnC,IACjBvf,MAAO,GACPM,WAAY,KAGpBgmD,EAASC,GAAgBjmD,WAAWluB,KAAKs0E,OAvE7CJ,EAASC,GAAkBE,IA4E5BH,GAMXnN,EAAU35E,UAAU0gD,SAAW,SAAS0mC,GACpC,IAAMC,EAAgB33E,KAAKmqE,cAEvByN,GAAW,EA+Df,OA7DAxoF,OAAOmW,KAAKoyE,GAAeroE,QAAQ,SAAA8gC,GAC/BwnC,GAAW,EACX,IAAM7pD,EAAQ4pD,EAAcvnC,GAE5BsnC,EAAO3oF,EAAE,UAAW,CAAEE,KAAM8+B,EAAMsiB,MAElCqnC,EAAO3oF,EAAE,cACL,CAAEkX,MAAO,6BACL8nB,MAAOA,EAAMsiB,MAKrBjhD,OAAOmW,KAAKwoB,EAAM+C,OAAOxhB,QAAQ,SAAAkrC,GAC7B,IAAMq9B,EAAY9pD,EAAM+C,MAAM0pB,GAE9Bk9B,EAAO3oF,EAAE,SAAU,CAAEkX,MAAO,oCAC5ByxE,EAAO78E,MAAM,CAAE2tB,KAAMqvD,EAAUrvD,OAG/BqvD,EAAUjoD,MAAMtgB,QAAQ,SAAA9K,GACpB,IAAM+rC,EAAM/rC,EAAKZ,QAAQ,KACnBmuC,EAAKvtC,EAAK+Q,OAAOg7B,EAAM,GAG7B,GADAmnC,EAAO3oF,EAAE,cACgB,IAArBgjD,EAAGnuC,QAAQ,KACX8zE,EAAO78E,MAAM,CAAE5L,KAAM8iD,QAClB,CACH,IAAM+lC,EAAK/lC,EAAGhvC,MAAM,IAAK,GACnB9T,EAAO6oF,EAAG,GACVnoF,EAAQo9B,IAAQC,mBAAmB8qD,EAAG,IAE5CJ,EAAO78E,MAAM,CAAE5L,SACfyoF,EAAO78E,MAAM,CAAElL,UAEnB+nF,EAAOvxE,OAEXuxE,EAAOvxE,OAIX4nB,EAAMqD,WAAW9hB,QAAQ,SAAA6iB,GACjBA,EAAUrB,MAAMl7B,SAEhB8hF,EAAO3oF,EAAE,aAAc,CACnB0iC,UAAWU,EAAUV,UACrBxrB,MAAO,oCAGXksB,EAAUrB,MAAMxhB,QAAQ,SAAAkZ,GACpBkvD,EAAO3oF,EAAE,SAAU,CAAEy5B,SAChBriB,OAETuxE,EAAOvxE,QAIfuxE,EAAOvxE,KACPuxE,EAAOvxE,OAGJyxE,kBCtNX,IAOAG,EACAC,EARAC,EAAA9pF,EAAAD,QAAA,GAUA,SAAAgqF,IACA,UAAAxhF,MAAA,mCAEA,SAAAyhF,IACA,UAAAzhF,MAAA,qCAsBA,SAAA0hF,EAAAC,GACA,GAAAN,IAAAttE,WAEA,OAAAA,WAAA4tE,EAAA,GAGA,IAAAN,IAAAG,IAAAH,IAAAttE,WAEA,OADAstE,EAAAttE,WACAA,WAAA4tE,EAAA,GAEA,IAEA,OAAAN,EAAAM,EAAA,GACK,MAAA3/E,GACL,IAEA,OAAAq/E,EAAAlpF,KAAA,KAAAwpF,EAAA,GACS,MAAA3/E,GAET,OAAAq/E,EAAAlpF,KAAAmR,KAAAq4E,EAAA,MAvCA,WACA,IAEAN,EADA,mBAAAttE,WACAA,WAEAytE,EAEK,MAAAx/E,GACLq/E,EAAAG,EAEA,IAEAF,EADA,mBAAArqE,aACAA,aAEAwqE,EAEK,MAAAz/E,GACLs/E,EAAAG,GAjBA,GAwEA,IAEAG,EAFAC,EAAA,GACAC,GAAA,EAEAC,GAAA,EAEA,SAAAC,IACAF,GAAAF,IAGAE,GAAA,EACAF,EAAA1iF,OACA2iF,EAAAD,EAAAj/E,OAAAk/E,GAEAE,GAAA,EAEAF,EAAA3iF,QACA+iF,KAIA,SAAAA,IACA,IAAAH,EAAA,CAGA,IAAA1qE,EAAAsqE,EAAAM,GACAF,GAAA,EAGA,IADA,IAAAhhF,EAAA+gF,EAAA3iF,OACA4B,GAAA,CAGA,IAFA8gF,EAAAC,EACAA,EAAA,KACAE,EAAAjhF,GACA8gF,GACAA,EAAAG,GAAA1wE,MAGA0wE,GAAA,EACAjhF,EAAA+gF,EAAA3iF,OAEA0iF,EAAA,KACAE,GAAA,EAnEA,SAAAI,GACA,GAAAZ,IAAArqE,aAEA,OAAAA,aAAAirE,GAGA,IAAAZ,IAAAG,IAAAH,IAAArqE,aAEA,OADAqqE,EAAArqE,aACAA,aAAAirE,GAEA,IAEAZ,EAAAY,GACK,MAAAlgF,GACL,IAEA,OAAAs/E,EAAAnpF,KAAA,KAAA+pF,GACS,MAAAlgF,GAGT,OAAAs/E,EAAAnpF,KAAAmR,KAAA44E,KAgDAC,CAAA/qE,IAiBA,SAAAgrE,EAAAT,EAAAnnD,GACAlxB,KAAAq4E,MACAr4E,KAAAkxB,QAYA,SAAA6nD,KA5BAd,EAAAe,SAAA,SAAAX,GACA,IAAAnwC,EAAA,IAAAzyC,MAAA0L,UAAAvL,OAAA,GACA,GAAAuL,UAAAvL,OAAA,EACA,QAAAlH,EAAA,EAAuBA,EAAAyS,UAAAvL,OAAsBlH,IAC7Cw5C,EAAAx5C,EAAA,GAAAyS,UAAAzS,GAGA6pF,EAAAr1E,KAAA,IAAA41E,EAAAT,EAAAnwC,IACA,IAAAqwC,EAAA3iF,QAAA4iF,GACAJ,EAAAO,IASAG,EAAAxoF,UAAAyX,IAAA,WACA/H,KAAAq4E,IAAA1kD,MAAA,KAAA3zB,KAAAkxB,QAEA+mD,EAAAgB,MAAA,UACAhB,EAAAx1D,SAAA,EACAw1D,EAAAiB,IAAA,GACAjB,EAAAkB,KAAA,GACAlB,EAAAv8D,QAAA,GACAu8D,EAAAmB,SAAA,GAIAnB,EAAA5zD,GAAA00D,EACAd,EAAA9tC,YAAA4uC,EACAd,EAAAhjC,KAAA8jC,EACAd,EAAAt+B,IAAAo/B,EACAd,EAAAzzD,eAAAu0D,EACAd,EAAA5xD,mBAAA0yD,EACAd,EAAAhzD,KAAA8zD,EACAd,EAAAoB,gBAAAN,EACAd,EAAAqB,oBAAAP,EAEAd,EAAArjC,UAAA,SAAA3lD,GAAqC,UAErCgpF,EAAAsB,QAAA,SAAAtqF,GACA,UAAAyH,MAAA,qCAGAuhF,EAAAuB,IAAA,WAA2B,WAC3BvB,EAAAwB,MAAA,SAAAC,GACA,UAAAhjF,MAAA,mCAEAuhF,EAAA0B,MAAA,WAA4B,wCCvL5BnrF,EAAAQ,EAAAyuB,EAAA,sBAAAm8D,IAgBAtrF,OAAOurF,aAAevrF,OAAOurF,cAAgBvrF,OAAOwrF,mBAEpD,IAAIjlC,EAAU,KAkEC,SAAS+kC,EAAoB31D,EAAQ2rC,EAAUlkD,GAC1D1L,KAAKikB,OAASA,EACdjkB,KAAK+5E,WAAa,KAClB/5E,KAAKg6E,cAAgBpqB,EACrB5vD,KAAK6tC,WAAa,EAClB7tC,KAAK0L,SAAWA,EArEhBpd,OAAOurF,eACPhlC,EAAU,IAAIglC,cAUNI,SAAWplC,EAAQolC,UAgE/BL,EAAoBtpF,UAAUitB,MAAQ,WAClC,GAAKq8D,EAAoBM,wBAAzB,CAGArlC,EAAQ3pC,SACR,IAAMivE,EAAWtlC,EAAQulC,iBAEzBD,EAASE,sBAxF2B,GAyFpCF,EAASG,QA/FsB,KAiGhBzlC,EAAQ0lC,wBAAwBv6E,KAAKikB,QAE7CtY,QAAQwuE,GAGf,IAAMjlF,EAAO8K,KAEbA,KAAK+5E,WAAav3C,YACd,WACI,IAAMtR,EAAQ,IAAIs/C,WAAW2J,EAASK,mBAEtCL,EAASM,sBAAsBvpD,GAC/B,IAzDUwpD,EAAUC,EACxBhrF,EACEirF,EAuDQ/sC,EA9ElB,SAAoCgtC,GAMhC,IAJA,IAAIC,EAAY,EAEVllF,EAASilF,EAAQjlF,OAEdlH,EAAI,EAAGA,EAAIkH,EAAQlH,IACpBosF,EAAYD,EAAQnsF,KACpBosF,EAAYD,EAAQnsF,IAI5B,OAAOqsF,aAAaD,EAAY,KAAO,KAAKE,QAAQ,IAkEzBC,CAA2B/pD,GAE1C2c,IAAe34C,EAAK24C,aACpB34C,EAAK24C,YA5DC6sC,EA4DyB7sC,EA5Df8sC,EA4D2BzlF,EAAK24C,WA3DxDl+C,EAAQ,EAIRA,GAHEirF,EAAOD,EAAYD,GAEd,GACCC,EAAY,GACbC,GAAQ,GACPD,EAAY,GAEZD,EAGLK,WAAWprF,EAAMqrF,QAAQ,KAiDpB9lF,EAAKwW,SAASxW,EAAK24C,cAG3B7tC,KAAKg6E,iBAObJ,EAAoBtpF,UAAUk2B,KAAO,WAC7BxmB,KAAK+5E,aACLl6C,cAAc7/B,KAAK+5E,YACnB/5E,KAAK+5E,WAAa,OAU1BH,EAAoBM,sBAAwB,WACxC,OAAOn8C,QAAQ8W,qBCjJnB,IAAMqmC,EAAyBh6D,EAAQ,KAQjCyB,EAAa,CAgBfC,WAhBe,SAiBPke,EACA3+B,EACAg5E,EACAC,EACAC,EACAltB,GACJ,IAAMn/D,EAAI0L,SAEJ4gF,EAAStsF,EAAE6R,cADD,UAEV06E,EAAgBvsF,EAAEgiB,qBAFR,UAEsC,GAItD,GAFAsqE,EAAOn5E,MAAQA,EAEXi5E,EAAa,CAGb,IAAMI,EAAWN,IAEjB,GAAIM,EAAU,CACV,IAAMC,EAAYD,EAAS16C,IACrB46C,EACAD,EAAUhuD,UAAU,EAAGguD,EAAUE,YAAY,KAAO,GAEtDF,GAAaC,IAEb56C,EAAM46C,EAAgB56C,IAK9Bu6C,IACAC,EAAOM,OAASP,GAEhBltB,IACAmtB,EAAOn/D,QAAUgyC,GAGrBmtB,EAAOx6C,IAAMA,EACTq6C,EACAI,EAAcn1E,WAAWy1E,aAAaP,EAAQC,GAE9CA,EAAcn1E,WAAWxF,YAAY06E,KAOjDntF,EAAOD,QAAUy0B,u6BClEjB,IAAM9B,EAASF,oBAAUQ,GAKnB26D,EAAoB,CACtBC,WAAc,SACdC,aAAgB,WAChBC,YAAe,WAQnB,SAASC,EAA8Bj1C,EAAa1iC,GAChD0iC,EAAYk1C,WAAa53E,MAMR63E,cAcjB,SAAAA,EACQhzC,EACAnlB,EACAygB,EACA23C,EACAC,EACA13C,GAAW,IAAAj9B,EAAA,mGAAA83B,CAAAz/B,KAAAo8E,IACfz0E,EAAA+3B,EAAA1/B,KAAA2/B,EAAAy8C,GAAAvtF,KAAAmR,QAGKuiC,iBAAmB56B,EAAKwiC,YAC7BxiC,EAAK+xC,oBAAsB/xC,EAAKgyC,IAAMhyC,EAAK6c,eAM3C7c,EAAK40E,WAAa,GAClB50E,EAAKyhC,WAAaA,EAClBzhC,EAAKkmC,YAAc,EACnBlmC,EAAKV,KAAOq1E,EACZ30E,EAAK+8B,MAAQA,EACb/8B,EAAKi9B,UAAYA,EACjBj9B,EAAKwB,SAAW,IAAIgZ,IASpBxa,EAAK60E,UAAW,EAShB70E,EAAK80E,uBAAyBJ,EAE9B10E,EAAK+0E,WAAWz4D,GArCDtc,wPApBiB0a,+CAoExBpb,EAAM1C,GACd,GAAKu3E,EAAkBvrF,eAAe0W,IAWtC,GANI1C,EACAvE,KAAKmJ,SAAS2a,IAAI7c,EAAM1C,GAExBvE,KAAKmJ,SAASmd,OAAOrf,GAGrBjH,KAAKikB,OAAQ,KAAAiB,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IACb,QAAA8kB,EAAAC,EAAoBtlB,KAAKikB,OAAOmiB,YAAhC32C,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA6C,CAAAG,EAAA11B,MACnCmsF,EAAkB70E,IAAS1C,GAFxB,MAAA8L,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,UAVbvE,EAAO7b,MAAP,wBAAA3L,OAAqC4N,kDAsBzC,GAAKjH,KAAKikB,OAAV,CADkB,IAAA6B,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAQlB,QAAA0lB,EAAAC,EAAmBlmB,KAAKmJ,SAAS5D,OAAjC9V,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAyC,KAA9B7e,EAA8Bgf,EAAAt2B,MAAAq3B,GAAA,EAAAC,GAAA,EAAAC,OAAA3mB,EAAA,IAErC,QAAA4mB,EAAAC,EAAyBpnB,KAAKikB,OAAOia,iBAArCzuC,OAAA4F,cAAA2xB,GAAAG,EAAAC,EAAA5B,QAAAC,MAAAuB,GAAA,EAAuD,CAAAG,EAAAx3B,MACxCmsF,EAAkB70E,SAAS1G,GAHL,MAAA8P,GAAA4W,GAAA,EAAAC,EAAA7W,EAAA,YAAA2W,GAAA,MAAAI,EAAAvB,QAAAuB,EAAAvB,SAAA,WAAAoB,EAAA,MAAAC,KARvB,MAAA7W,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAcdhmB,KAAKy8E,wBACLP,EAA8Bl8E,KAAKikB,YAAQ1jB,QAb3CsgB,EAAO1b,KAAP,GAAA9L,OACO2G,KADP,0FAwBGikB,GACP,GAAIjkB,KAAKikB,SAAWA,IAIpBjkB,KAAKikB,OAASA,EAMVjkB,KAAKikB,QAAQ,KAAAqD,GAAA,EAAAC,GAAA,EAAAC,OAAAjnB,EAAA,IACb,QAAAknB,EAAAC,EAAmB1nB,KAAKmJ,SAAS5D,OAAjC9V,OAAA4F,cAAAiyB,GAAAG,EAAAC,EAAAlC,QAAAC,MAAA6B,GAAA,EAAyC,KAA9BrgB,EAA8BwgB,EAAA93B,MACrCqQ,KAAK28E,YAAY11E,EAAMjH,KAAKmJ,SAAS5Z,IAAI0X,KAFhC,MAAAoJ,GAAAkX,GAAA,EAAAC,EAAAnX,EAAA,YAAAiX,GAAA,MAAAI,EAAA7B,QAAA6B,EAAA7B,SAAA,WAAA0B,EAAA,MAAAC,GAITxnB,KAAKy8E,wBACLP,EACIl8E,KAAKikB,OAAQjkB,KAAKy8E,2DAS9B,OAAOz8E,KAAKiH,4CAOZ,OAAOjH,KAAK+sC,YAAcpI,iDAU1B,OAAO3kC,KAAK0kC,OAAS1kC,KAAK0kC,MAAMpc,6CAOhC,OAAOtoB,KAAK+sC,YAAcpI,sCAS1B,MAAM,IAAIjuC,MAAM,2EAShB,OAAOsJ,KAAK+tC,gBAAkB/tC,KAAK8pB,sDAOnC,OAAO9pB,KAAKikB,6CAQZ,OAAOjkB,KAAKikB,OAASjkB,KAAKikB,OAAO/c,GAAK,wCAQtC,OAAOlH,KAAK0kC,8CAQZ,OAAO1kC,KAAK0kC,MAAMpF,2CAQlB,OAAOt/B,KAAK0kC,MAAQ1kC,KAAK0kC,MAAMx9B,GAAK,6CASpC,OAAIlH,KAAK+tC,eACE,MAGJ/tC,KAAK4kC,UAAY5kC,KAAK4kC,UAAY,0DASrBg4C,GAChB58E,KAAKopC,YAAcwzC,GACnB58E,KAAKopC,WAAWyzC,eAAe78E,KAAM48E,kCActCA,GACC58E,KAAKikB,SACLjkB,KAAK68E,eAAeD,GACpBp9C,IAASc,kBAAkBs8C,EAAW58E,KAAKikB,SAE/CjkB,KAAKu8E,WAAWr5E,KAAK05E,GACrB58E,KAAK88E,wBAAwBF,GAC7B58E,KAAK+8E,mBAAmBH,kCAWrBA,GACH,IAAK,IAAIj1D,EAAK3nB,KAAKu8E,WAAY7tF,EAAIi5B,EAAG/xB,OAAS,EAAGlH,GAAK,IAAKA,EAAG,CAC3D,IAAMK,EAAI44B,EAAGj5B,GAERkuF,IACD58E,KAAKg9E,eAAejuF,GACpBywC,IAASc,kBAAkBvxC,EAAG,OAE7B6tF,GAAa7tF,IAAM6tF,GACpBj1D,EAAG1jB,OAAOvV,EAAG,GAIjBkuF,IACA58E,KAAKg9E,eAAeJ,GACpBp9C,IAASc,kBAAkBs8C,EAAW,8CAW/BA,2CAWAA,+CAYIA,sCAcf,OAJA58E,KAAKqmB,qBAELrmB,KAAKw8E,UAAW,EAETp5C,QAAQC,qFAgBf,OAAIrjC,KAAKikB,OACEub,IAASiB,YAAYzgC,KAAKikB,QAG9B,wCAUP,YAAkC,IAAvBjkB,KAAKikB,OAAOg5D,QACZj9E,KAAKikB,OAAOg5D,6CAcbpvC,EAAYjoB,GAClB5lB,KAAK6tC,aAAeA,IACpB7tC,KAAK6tC,WAAaA,EAClB7tC,KAAKilB,KACD+uC,4BACAnmB,EACAjoB,sCASR,IAAMilB,EAAW7qC,KAAKk9E,cAChBC,EAAUn9E,KAAKo9E,aAErB,OAAOvyC,GAAYsyC,EAAZ,GAAA9jF,OAAyBwxC,EAAzB,KAAAxxC,OAAqC8jF,GAAY,4CAW7CvjD,GAAqB,IAAApxB,EAAAxI,KAChC,OAAKw/B,IAAS6H,wBAAwB,UAOlCrnC,KAAKqpE,eACEjmC,QAAQC,UAIfD,QAAQmK,IACJvtC,KAAKu8E,WAAW/2E,IACZ,SAAAiJ,GAAO,OACHA,EAAQ4rB,UAAUT,GACb4J,MAAM,SAAAx+B,GAOH,MANA6b,EAAO1b,KACH,+GAGAsJ,EACAzJ,GACEA,OAGrBi7B,KAAK,WACFz3B,EAAKyc,KACD+uC,6BACAp6B,KA5BLwJ,QAAQE,OACX,IAAI5sC,MAAM,4JC7bnB,SAAS2mF,EAAmBl2E,GAC/B,IAAMm2E,EAAmBhvF,OAAOurF,cAAgBvrF,OAAOwrF,mBAEvD,GAAKwD,EAIL,OAAO,IAAIA,EAAiBn2E,GAZhC3Y,EAAAQ,EAAAyuB,EAAA,sBAAA4/D,2qCCgBqBE,cASjB,SAAAA,EAAYC,EAAoBC,EAAcC,GAAiB,IAAA/1E,MAAA,mGAAA83B,CAAAz/B,KAAAu9E,KAC3Dv9E,MAAA2H,MAAAg4B,EAAA49C,GAAA1uF,KAAAmR,sDAKK29E,oBAAsBH,EAK3B71E,EAAKi2E,cAAgBH,EAKrB91E,EAAKk2E,YAAcH,EAKnB/1E,EAAKm2E,eAAiB,IAAIC,aAAa,IAKvCp2E,EAAKq2E,cAAgBX,YAAmB,CAAEY,WAAYR,EAAaS,4BAMnEv2E,EAAKw2E,eAAiBV,EAAaW,kBAMnCz2E,EAAK02E,gBAAkB12E,EAAK02E,gBAAgBnuF,KAArB85C,IAAAriC,KAEvBA,EAAK22E,0BAxCsD32E,wPATtB0a,yCAgE3B2Z,EAAawhD,EAAoBC,GAC3C,OAAOt0C,IAAIkB,+BAA+B,CACtCvG,QAAS,CAAE,SACX9H,gBACDiE,KAAK,SAAA2I,GAEJ,IAAKA,EAAW,GACZ,MAAM,IAAIlyC,MAAJ,qDAAA2C,OAA+D2iC,IAGzE,OAAO,IAAIuhD,EAAgBC,EAAoBC,EAAc70C,EAAW,6DAa5E5oC,KAAKu+E,aAAev+E,KAAKg+E,cAAczD,wBAAwBv6E,KAAK69E,YAAY55D,QAQhFjkB,KAAKw+E,qBAAuBx+E,KAAKg+E,cAAcS,sBAAsBz+E,KAAK29E,oBAAqB,EAAG,2CActFe,GAQZ,IANA,IAAMC,EAASD,EAAWE,YAAYC,eAAe,GAC/CC,EAAcvpF,EAAQyK,KAAK89E,gBAAbzkF,OAAA9D,EAAgCopF,IAC9CI,EAAkB52E,KAAKmM,MAEzB5lB,EAAI,EAEDA,EAAIsR,KAAKm+E,eAAiBW,EAAelpF,OAAQlH,GAAKsR,KAAKm+E,eAAgB,CAC9E,IAAMa,EAAYF,EAAez8C,MAAM3zC,EAAGA,EAAIsR,KAAKm+E,gBAG7Cc,EAAWj/E,KAAK49E,cAAcsB,uBAAuBF,EAAU38C,SAErEriC,KAAKilB,KAAK2wB,sBAAqB,CAC3BupC,UAAWJ,EACXK,MAAOH,EACPI,QAASL,EACTlkD,SAAU96B,KAAK69E,YAAYyB,gBAInCt/E,KAAK89E,eAAiBgB,EAAez8C,MAAM3zC,EAAGowF,EAAelpF,qDAS7DoK,KAAKw+E,qBAAqBe,eAAiBv/E,KAAKq+E,gBAChDr+E,KAAKu+E,aAAa5yE,QAAQ3L,KAAKw+E,sBAC/Bx+E,KAAKw+E,qBAAqB7yE,QAAQ3L,KAAKg+E,cAAcwB,6DAYrDx/E,KAAKw+E,qBAAqBe,eAAiB,aAC3Cv/E,KAAKw+E,qBAAqB/uE,aAC1BzP,KAAKu+E,aAAa9uE,yDASlBzP,KAAKy/E,wBACLz/E,KAAK69E,YAAY6B,mDASjB,OAAO1/E,KAAK69E,YAAYyB,sDAUxB,OAAOt/E,KAAK69E,YAAY8B,iDASxB3/E,KAAK4/E,oDASL5/E,KAAKy/E,wBACLz/E,KAAK89E,eAAiB,qCASlB99E,KAAK6/E,aAIT7/E,KAAK8/E,oBACL9/E,KAAK6/E,YAAa,sEC1O1BrxF,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,oCAAAsiE,IAGO,IAAMA,EAAkB,4CCH/B,SAAA/qF,EAAA7G,GAUA,IAAA2+E,EAAA,IAGAC,EAAA,4BAGAiT,EAAA,EACAC,EAAA,EAGAnkC,EAAA,iBAGAkxB,EAAA,qBACAkT,EAAA,iBACAC,EAAA,yBACAlT,EAAA,mBACAC,EAAA,gBACAkT,EAAA,iBACAjT,EAAA,oBACAC,EAAA,6BACAC,EAAA,eACAC,EAAA,kBACA+S,EAAA,gBACA9S,EAAA,kBAEA+S,EAAA,iBACA9S,EAAA,kBACAC,EAAA,eACAC,EAAA,kBACAC,EAAA,kBACA4S,EAAA,qBAGA3S,EAAA,uBACAC,EAAA,oBAkBAW,EAAA,8BAGAC,EAAA,mBAGA+R,EAAA,GACAA,EAxBA,yBAwBAA,EAvBA,yBAwBAA,EAvBA,sBAuBAA,EAtBA,uBAuBAA,EAtBA,uBAsBAA,EArBA,uBAsBAA,EArBA,8BAqBAA,EApBA,wBAqBAA,EApBA,yBAoBA,EACAA,EAAAxT,GAAAwT,EAAAN,GACAM,EAAA5S,GAAA4S,EAAAvT,GACAuT,EAAA3S,GAAA2S,EAAAtT,GACAsT,EAAAJ,GAAAI,EAAArT,GACAqT,EAAAnT,GAAAmT,EAAAlT,GACAkT,EAAAjT,GAAAiT,EAAAhT,GACAgT,EAAA/S,GAAA+S,EAAA9S,GACA8S,EAxCA,qBAwCA,EAGA,IAAA7R,EAAA,iBAAA35E,QAAA5F,iBAAA4F,EAGA45E,EAAA,iBAAA15E,iBAAA9F,iBAAA8F,KAGAlH,EAAA2gF,GAAAC,GAAAle,SAAA,cAAAA,GAGAme,EAA4C3gF,MAAA6R,UAAA7R,EAG5C4gF,EAAAD,GAAA,iBAAA1gF,SAAA4R,UAAA5R,EAGA4gF,EAAAD,KAAA5gF,UAAA2gF,EAGA4R,EAAA1R,GAAAJ,EAAAsJ,QAGAyI,EAAA,WACA,IACA,OAAAD,KAAAlH,SAAAkH,EAAAlH,QAAA,QACG,MAAA7gF,KAHH,GAOAioF,EAAAD,KAAAE,aAuDA,SAAAC,EAAA3vD,EAAA4vD,GAIA,IAHA,IAAA7vD,GAAA,EACAr7B,EAAA,MAAAs7B,EAAA,EAAAA,EAAAt7B,SAEAq7B,EAAAr7B,GACA,GAAAkrF,EAAA5vD,EAAAD,KAAAC,GACA,SAGA,SAkEA,SAAAs+C,EAAAhqE,GACA,IAAAyrB,GAAA,EACAxrB,EAAAhQ,MAAA+P,EAAAwf,MAKA,OAHAxf,EAAA8J,QAAA,SAAA3f,EAAAM,GACAwV,IAAAwrB,GAAA,CAAAhhC,EAAAN,KAEA8V,EAwBA,SAAAiqE,EAAA5rD,GACA,IAAAmN,GAAA,EACAxrB,EAAAhQ,MAAAquB,EAAAkB,MAKA,OAHAlB,EAAAxU,QAAA,SAAA3f,GACA8V,IAAAwrB,GAAAthC,IAEA8V,EAIA,IAeAkqE,EAvCA/vE,EAAA47C,EAwBAo0B,EAAAn6E,MAAAnF,UACAu/E,EAAAnf,SAAApgE,UACAw/E,EAAA1gF,OAAAkB,UAGAy/E,EAAA/hF,EAAA,sBAGAmiF,EAAAN,EAAA95E,SAGAxF,EAAAu/E,EAAAv/E,eAGAy/E,GACAL,EAAA,SAAAM,KAAAF,KAAAxqE,MAAAwqE,EAAAxqE,KAAA2qE,UAAA,KACA,iBAAAP,EAAA,GAQAoR,EAAAjR,EAAA/5E,SAGAs6E,GAAAC,OAAA,IACAH,EAAAthF,KAAA0B,GAAAqR,QA7PA,sBA6PA,QACAA,QAAA,uEAIA2uE,GAAAxB,EAAA/gF,EAAAuiF,YAAAhwE,EACA9Q,GAAAzB,EAAAyB,OACA+gF,GAAAxiF,EAAAwiF,WACAI,GAAAd,EAAAc,qBACA3sE,GAAA2rE,EAAA3rE,OACA+8E,GAAAvxF,MAAAC,iBAAA6Q,EAGAswE,GAAAzhF,OAAA0hF,sBACAC,GAAAR,MAAAS,cAAAzwE,EACA0wE,IAnEArxE,EAmEAxQ,OAAAmW,KAnEAi2C,EAmEApsD,OAlEA,SAAAgS,GACA,OAAAxB,EAAA47C,EAAAp6C,MAoEA8vE,GAAAC,GAAAnjF,EAAA,YACAm0B,GAAAgvD,GAAAnjF,EAAA,OACAo1C,GAAA+tC,GAAAnjF,EAAA,WACAw1B,GAAA2tD,GAAAnjF,EAAA,OACAojF,GAAAD,GAAAnjF,EAAA,WACAqjF,GAAAF,GAAA/hF,OAAA,UAGAkiF,GAAAC,GAAAL,IACAM,GAAAD,GAAApvD,IACAsvD,GAAAF,GAAAnuC,IACAsuC,GAAAH,GAAA/tD,IACAmuD,GAAAJ,GAAAH,IAGAQ,GAAAniF,MAAAa,eAAAiQ,EACAsxE,GAAAD,MAAAE,aAAAvxE,EASA,SAAAwxE,GAAAC,GACA,IAAA/gD,GAAA,EACAr7B,EAAA,MAAAo8E,EAAA,EAAAA,EAAAp8E,OAGA,IADAoK,KAAAssE,UACAr7C,EAAAr7B,GAAA,CACA,IAAAq8E,EAAAD,EAAA/gD,GACAjxB,KAAA8jB,IAAAmuD,EAAA,GAAAA,EAAA,KA+FA,SAAAC,GAAAF,GACA,IAAA/gD,GAAA,EACAr7B,EAAA,MAAAo8E,EAAA,EAAAA,EAAAp8E,OAGA,IADAoK,KAAAssE,UACAr7C,EAAAr7B,GAAA,CACA,IAAAq8E,EAAAD,EAAA/gD,GACAjxB,KAAA8jB,IAAAmuD,EAAA,GAAAA,EAAA,KA4GA,SAAAE,GAAAH,GACA,IAAA/gD,GAAA,EACAr7B,EAAA,MAAAo8E,EAAA,EAAAA,EAAAp8E,OAGA,IADAoK,KAAAssE,UACAr7C,EAAAr7B,GAAA,CACA,IAAAq8E,EAAAD,EAAA/gD,GACAjxB,KAAA8jB,IAAAmuD,EAAA,GAAAA,EAAA,KA+FA,SAAAgP,GAAA17D,GACA,IAAA0L,GAAA,EACAr7B,EAAA,MAAA2vB,EAAA,EAAAA,EAAA3vB,OAGA,IADAoK,KAAAqyE,SAAA,IAAAF,KACAlhD,EAAAr7B,GACAoK,KAAAkjB,IAAAqC,EAAA0L,IA2CA,SAAAmhD,GAAAJ,GACA,IAAAh5E,EAAAgH,KAAAqyE,SAAA,IAAAH,GAAAF,GACAhyE,KAAAglB,KAAAhsB,EAAAgsB,KAmGA,SAAAstD,GAAA3iF,EAAA4iF,GACA,IAAAgB,EAAA79E,GAAA/F,GACAuxF,GAAA3N,GAAAZ,GAAAhjF,GACAwxF,GAAA5N,IAAA2N,GAAAlQ,GAAArhF,GACAyxF,GAAA7N,IAAA2N,IAAAC,GAAAP,GAAAjxF,GACAkjF,EAAAU,GAAA2N,GAAAC,GAAAC,EACA37E,EAAAotE,EAloBA,SAAA1iF,EAAAi/E,GAIA,IAHA,IAAAn+C,GAAA,EACAxrB,EAAAhQ,MAAAtF,KAEA8gC,EAAA9gC,GACAsV,EAAAwrB,GAAAm+C,EAAAn+C,GAEA,OAAAxrB,EA2nBAmtE,CAAAjjF,EAAAiG,OAAAuC,QAAA,GACAvC,EAAA6P,EAAA7P,OAEA,QAAA3F,KAAAN,GACA4iF,IAAAhiF,EAAA1B,KAAAc,EAAAM,IACA4iF,IAEA,UAAA5iF,GAEAkxF,IAAA,UAAAlxF,GAAA,UAAAA,IAEAmxF,IAAA,UAAAnxF,GAAA,cAAAA,GAAA,cAAAA,IAEA6iF,GAAA7iF,EAAA2F,KAEA6P,EAAAvC,KAAAjT,GAGA,OAAAwV,EAWA,SAAAytE,GAAAhiD,EAAAjhC,GAEA,IADA,IAAA2F,EAAAs7B,EAAAt7B,OACAA,KACA,GAAAq9E,GAAA/hD,EAAAt7B,GAAA,GAAA3F,GACA,OAAA2F,EAGA,SA0BA,SAAAyrF,GAAA1xF,GACA,aAAAA,OACA4Q,IAAA5Q,EAAA4wF,EAAAF,EAEAW,UAAA5xF,OAAAO,GA0aA,SAAAA,GACA,IAAA2xF,EAAA/wF,EAAA1B,KAAAc,EAAAqxF,IACA5jF,EAAAzN,EAAAqxF,IAEA,IACArxF,EAAAqxF,SAAAzgF,EACA,IAAAghF,GAAA,EACG,MAAA7oF,IAEH,IAAA+M,EAAAs7E,EAAAlyF,KAAAc,GACA4xF,IACAD,EACA3xF,EAAAqxF,IAAA5jF,SAEAzN,EAAAqxF,KAGA,OAAAv7E,EA1bA+7E,CAAA7xF,GA4iBA,SAAAA,GACA,OAAAoxF,EAAAlyF,KAAAc,GA5iBAygF,CAAAzgF,GAUA,SAAA8xF,GAAA9xF,GACA,OAAA6iF,GAAA7iF,IAAA0xF,GAAA1xF,IAAAq9E,EAiBA,SAAA0U,GAAA/xF,EAAA2mF,EAAAqL,EAAArO,EAAAlvE,GACA,OAAAzU,IAAA2mF,IAGA,MAAA3mF,GAAA,MAAA2mF,IAAA9D,GAAA7iF,KAAA6iF,GAAA8D,GACA3mF,MAAA2mF,KAmBA,SAAAlmF,EAAAkmF,EAAAqL,EAAArO,EAAAsO,EAAAx9E,GACA,IAAAy9E,EAAAnsF,GAAAtF,GACA0xF,EAAApsF,GAAA4gF,GACAyL,EAAAF,EAAA3B,EAAAvM,GAAAvjF,GACA4xF,EAAAF,EAAA5B,EAAAvM,GAAA2C,GAKA2L,GAHAF,KAAA/U,EAAAO,EAAAwU,IAGAxU,EACA2U,GAHAF,KAAAhV,EAAAO,EAAAyU,IAGAzU,EACA4U,EAAAJ,GAAAC,EAEA,GAAAG,GAAAnR,GAAA5gF,GAAA,CACA,IAAA4gF,GAAAsF,GACA,SAEAuL,GAAA,EACAI,GAAA,EAEA,GAAAE,IAAAF,EAEA,OADA79E,MAAA,IAAAguE,IACAyP,GAAAjB,GAAAxwF,GACAgyF,GAAAhyF,EAAAkmF,EAAAqL,EAAArO,EAAAsO,EAAAx9E,GAiKA,SAAAhU,EAAAkmF,EAAAl5E,EAAAukF,EAAArO,EAAAsO,EAAAx9E,GACA,OAAAhH,GACA,KAAAywE,EACA,GAAAz9E,EAAAukF,YAAA2B,EAAA3B,YACAvkF,EAAAskF,YAAA4B,EAAA5B,WACA,SAEAtkF,IAAAyjF,OACAyC,IAAAzC,OAEA,KAAAjG,EACA,QAAAx9E,EAAAukF,YAAA2B,EAAA3B,aACAiN,EAAA,IAAApR,GAAApgF,GAAA,IAAAogF,GAAA8F,KAKA,KAAArJ,EACA,KAAAC,EACA,KAAAI,EAGA,OAAA2F,IAAA7iF,GAAAkmF,GAEA,KAAA8J,EACA,OAAAhwF,EAAAnB,MAAAqnF,EAAArnF,MAAAmB,EAAAqU,SAAA6xE,EAAA7xE,QAEA,KAAA+oE,EACA,KAAAE,EAIA,OAAAt9E,GAAAkmF,EAAA,GAEA,KAAAjJ,EACA,IAAAgV,EAAA7S,EAEA,KAAA/B,EACA,IAAA6U,EAAAX,EAAA3B,EAGA,GAFAqC,MAAA3S,GAEAt/E,EAAA40B,MAAAsxD,EAAAtxD,OAAAs9D,EACA,SAGA,IAAAjN,EAAAjxE,EAAA7U,IAAAa,GACA,GAAAilF,EACA,OAAAA,GAAAiB,EAEAqL,GAAA1B,EAGA77E,EAAA0f,IAAA1zB,EAAAkmF,GACA,IAAA7wE,EAAA28E,GAAAC,EAAAjyF,GAAAiyF,EAAA/L,GAAAqL,EAAArO,EAAAsO,EAAAx9E,GAEA,OADAA,EAAA,OAAAhU,GACAqV,EAEA,KAAAkoE,EACA,GAAAkE,GACA,OAAAA,GAAAhjF,KAAAuB,IAAAyhF,GAAAhjF,KAAAynF,GAGA,SA9NAiM,CAAAnyF,EAAAkmF,EAAAyL,EAAAJ,EAAArO,EAAAsO,EAAAx9E,GAEA,KAAAu9E,EAAA3B,GAAA,CACA,IAAAwC,EAAAP,GAAA1xF,EAAA1B,KAAAuB,EAAA,eACAqyF,EAAAP,GAAA3xF,EAAA1B,KAAAynF,EAAA,eAEA,GAAAkM,GAAAC,EAAA,CACA,IAAAC,EAAAF,EAAApyF,EAAAT,QAAAS,EACAuyF,EAAAF,EAAAnM,EAAA3mF,QAAA2mF,EAGA,OADAlyE,MAAA,IAAAguE,IACAwP,EAAAc,EAAAC,EAAAhB,EAAArO,EAAAlvE,IAGA,IAAA+9E,EACA,SAGA,OADA/9E,MAAA,IAAAguE,IA6NA,SAAAhiF,EAAAkmF,EAAAqL,EAAArO,EAAAsO,EAAAx9E,GACA,IAAAk+E,EAAAX,EAAA3B,EACA4C,EAAAhN,GAAAxlF,GACAyyF,EAAAD,EAAAhtF,OAEAktF,EADAlN,GAAAU,GACA1gF,OAEA,GAAAitF,GAAAC,IAAAR,EACA,SAGA,IADA,IAAArxD,EAAA4xD,EACA5xD,KAAA,CACA,IAAAhhC,EAAA2yF,EAAA3xD,GACA,KAAAqxD,EAAAryF,KAAAqmF,EAAA/lF,EAAA1B,KAAAynF,EAAArmF,IACA,SAIA,IAAAolF,EAAAjxE,EAAA7U,IAAAa,GACA,GAAAilF,GAAAjxE,EAAA7U,IAAA+mF,GACA,OAAAjB,GAAAiB,EAEA,IAAA7wE,GAAA,EACArB,EAAA0f,IAAA1zB,EAAAkmF,GACAlyE,EAAA0f,IAAAwyD,EAAAlmF,GAGA,IADA,IAAA2yF,EAAAT,IACArxD,EAAA4xD,GAAA,CACA5yF,EAAA2yF,EAAA3xD,GACA,IAAA+hD,EAAA5iF,EAAAH,GACA+yF,EAAA1M,EAAArmF,GAEA,GAAAqjF,EACA,IAAA2P,EAAAX,EACAhP,EAAA0P,EAAAhQ,EAAA/iF,EAAAqmF,EAAAlmF,EAAAgU,GACAkvE,EAAAN,EAAAgQ,EAAA/yF,EAAAG,EAAAkmF,EAAAlyE,GAGA,UAAA7D,IAAA0iF,EACAjQ,IAAAgQ,GAAApB,EAAA5O,EAAAgQ,EAAArB,EAAArO,EAAAlvE,GACA6+E,GACA,CACAx9E,GAAA,EACA,MAEAs9E,MAAA,eAAA9yF,GAEA,GAAAwV,IAAAs9E,EAAA,CACA,IAAAG,EAAA9yF,EAAAkF,YACA6tF,EAAA7M,EAAAhhF,YAGA4tF,GAAAC,GACA,gBAAA/yF,GAAA,gBAAAkmF,KACA,mBAAA4M,mBACA,mBAAAC,qBACA19E,GAAA,GAKA,OAFArB,EAAA,OAAAhU,GACAgU,EAAA,OAAAkyE,GACA7wE,EAzRA29E,CAAAhzF,EAAAkmF,EAAAqL,EAAArO,EAAAsO,EAAAx9E,GA3DAi/E,CAAA1zF,EAAA2mF,EAAAqL,EAAArO,EAAAoO,GAAAt9E,IAsEA,SAAA2xE,GAAApmF,GACA,SAAA4kD,GAAA5kD,KAwaAiQ,EAxaAjQ,EAyaAqgF,QAAApwE,MAtaA00C,GAAA3kD,GAAA0gF,GAAA7B,GACAp8D,KAAAm/D,GAAA5hF,IAoaA,IAAAiQ,EA9YA,SAAA82E,GAAAtmF,GACA,GAyZAmkF,GADA5kF,EAxZAS,IAyZAT,EAAA2F,YACAmT,EAAA,mBAAA8rE,KAAAjkF,WAAAw/E,EAEAngF,IAAA8Y,EA3ZA,OAAAwoE,GAAA7gF,GAuZA,IAAAT,EACA4kF,EACA9rE,EAvZAhD,EAAA,GACA,QAAAxV,KAAAb,OAAAgB,GACAG,EAAA1B,KAAAuB,EAAAH,IAAA,eAAAA,GACAwV,EAAAvC,KAAAjT,GAGA,OAAAwV,EAgBA,SAAA28E,GAAAlxD,EAAAolD,EAAAqL,EAAArO,EAAAsO,EAAAx9E,GACA,IAAAk+E,EAAAX,EAAA3B,EACAsD,EAAApyD,EAAAt7B,OACAktF,EAAAxM,EAAA1gF,OAEA,GAAA0tF,GAAAR,KAAAR,GAAAQ,EAAAQ,GACA,SAGA,IAAAjO,EAAAjxE,EAAA7U,IAAA2hC,GACA,GAAAmkD,GAAAjxE,EAAA7U,IAAA+mF,GACA,OAAAjB,GAAAiB,EAEA,IAAArlD,GAAA,EACAxrB,GAAA,EACA89E,EAAA5B,EAAA1B,EAAA,IAAAgB,QAAA1gF,EAMA,IAJA6D,EAAA0f,IAAAoN,EAAAolD,GACAlyE,EAAA0f,IAAAwyD,EAAAplD,KAGAD,EAAAqyD,GAAA,CACA,IAAAE,EAAAtyD,EAAAD,GACA+xD,EAAA1M,EAAArlD,GAEA,GAAAqiD,EACA,IAAA2P,EAAAX,EACAhP,EAAA0P,EAAAQ,EAAAvyD,EAAAqlD,EAAAplD,EAAA9sB,GACAkvE,EAAAkQ,EAAAR,EAAA/xD,EAAAC,EAAAolD,EAAAlyE,GAEA,QAAA7D,IAAA0iF,EAAA,CACA,GAAAA,EACA,SAEAx9E,GAAA,EACA,MAGA,GAAA89E,GACA,IAAA1C,EAAAvK,EAAA,SAAA0M,EAAAS,GACA,GA72BAxzF,EA62BAwzF,GAAAF,EA52BA58D,IAAA12B,KA62BAuzF,IAAAR,GAAApB,EAAA4B,EAAAR,EAAArB,EAAArO,EAAAlvE,IACA,OAAAm/E,EAAArgF,KAAAugF,GA/2BA,IAAAxzF,IAi3BW,CACXwV,GAAA,EACA,YAEK,GACL+9E,IAAAR,IACApB,EAAA4B,EAAAR,EAAArB,EAAArO,EAAAlvE,GACA,CACAqB,GAAA,EACA,OAKA,OAFArB,EAAA,OAAA8sB,GACA9sB,EAAA,OAAAkyE,GACA7wE,EAyKA,SAAAmwE,GAAAxlF,GACA,OApZA,SAAAA,EAAAmlF,EAAAC,GACA,IAAA/vE,EAAA8vE,EAAAnlF,GACA,OAAAsF,GAAAtF,GAAAqV,EAhuBA,SAAAyrB,EAAA3L,GAKA,IAJA,IAAA0L,GAAA,EACAr7B,EAAA2vB,EAAA3vB,OACA6/E,EAAAvkD,EAAAt7B,SAEAq7B,EAAAr7B,GACAs7B,EAAAukD,EAAAxkD,GAAA1L,EAAA0L,GAEA,OAAAC,EAwtBAwkD,CAAAjwE,EAAA+vE,EAAAplF,IAkZAulF,CAAAvlF,EAAAmV,GAAA4uE,IAWA,SAAA+B,GAAA1wE,EAAAvV,GACA,IAsHAN,EACAsX,EAvHAjO,EAAAwM,EAAA6sE,SACA,OAuHA,WADAprE,SADAtX,EArHAM,KAuHA,UAAAgX,GAAA,UAAAA,GAAA,WAAAA,EACA,cAAAtX,EACA,OAAAA,GAxHAqJ,EAAA,iBAAA/I,EAAA,iBACA+I,EAAAwM,IAWA,SAAA2rE,GAAA/gF,EAAAH,GACA,IAAAN,EAxjCA,SAAAS,EAAAH,GACA,aAAAG,OAAAmQ,EAAAnQ,EAAAH,GAujCAkmF,CAAA/lF,EAAAH,GACA,OAAA8lF,GAAApmF,UAAA4Q,EAp2BAwxE,GAAAzhF,UAAAg8E,MAvEA,WACAtsE,KAAAqyE,SAAAhB,MAAA,SACArxE,KAAAglB,KAAA,GAsEA+sD,GAAAzhF,UAAA,OAzDA,SAAAL,GACA,IAAAwV,EAAAzF,KAAA2mB,IAAA12B,WAAA+P,KAAAqyE,SAAApiF,GAEA,OADA+P,KAAAglB,MAAAvf,EAAA,IACAA,GAuDAssE,GAAAzhF,UAAAf,IA3CA,SAAAU,GACA,IAAA+I,EAAAgH,KAAAqyE,SACA,GAAAhB,GAAA,CACA,IAAA5rE,EAAAzM,EAAA/I,GACA,OAAAwV,IAAAsnE,OAAAxsE,EAAAkF,EAEA,OAAAlV,EAAA1B,KAAAmK,EAAA/I,GAAA+I,EAAA/I,QAAAsQ,GAsCAwxE,GAAAzhF,UAAAq2B,IA1BA,SAAA12B,GACA,IAAA+I,EAAAgH,KAAAqyE,SACA,OAAAhB,QAAA9wE,IAAAvH,EAAA/I,GAAAM,EAAA1B,KAAAmK,EAAA/I,IAyBA8hF,GAAAzhF,UAAAwzB,IAZA,SAAA7zB,EAAAN,GACA,IAAAqJ,EAAAgH,KAAAqyE,SAGA,OAFAryE,KAAAglB,MAAAhlB,KAAA2mB,IAAA12B,GAAA,IACA+I,EAAA/I,GAAAohF,SAAA9wE,IAAA5Q,EAAAo9E,EAAAp9E,EACAqQ,MAuHAkyE,GAAA5hF,UAAAg8E,MApFA,WACAtsE,KAAAqyE,SAAA,GACAryE,KAAAglB,KAAA,GAmFAktD,GAAA5hF,UAAA,OAvEA,SAAAL,GACA,IAAA+I,EAAAgH,KAAAqyE,SACAphD,EAAAiiD,GAAAl6E,EAAA/I,GAEA,QAAAghC,EAAA,IAIAA,GADAj4B,EAAApD,OAAA,EAEAoD,EAAA4X,MAEA3M,GAAApV,KAAAmK,EAAAi4B,EAAA,KAEAjxB,KAAAglB,KACA,KA0DAktD,GAAA5hF,UAAAf,IA9CA,SAAAU,GACA,IAAA+I,EAAAgH,KAAAqyE,SACAphD,EAAAiiD,GAAAl6E,EAAA/I,GAEA,OAAAghC,EAAA,OAAA1wB,EAAAvH,EAAAi4B,GAAA,IA2CAihD,GAAA5hF,UAAAq2B,IA/BA,SAAA12B,GACA,OAAAijF,GAAAlzE,KAAAqyE,SAAApiF,IAAA,GA+BAiiF,GAAA5hF,UAAAwzB,IAlBA,SAAA7zB,EAAAN,GACA,IAAAqJ,EAAAgH,KAAAqyE,SACAphD,EAAAiiD,GAAAl6E,EAAA/I,GAQA,OANAghC,EAAA,KACAjxB,KAAAglB,KACAhsB,EAAAkK,KAAA,CAAAjT,EAAAN,KAEAqJ,EAAAi4B,GAAA,GAAAthC,EAEAqQ,MAyGAmyE,GAAA7hF,UAAAg8E,MAtEA,WACAtsE,KAAAglB,KAAA,EACAhlB,KAAAqyE,SAAA,CACAn6E,KAAA,IAAA65E,GACAvsE,IAAA,IAAA2c,IAAA+vD,IACAr1D,OAAA,IAAAk1D,KAkEAI,GAAA7hF,UAAA,OArDA,SAAAL,GACA,IAAAwV,EAAAywE,GAAAl2E,KAAA/P,GAAA,OAAAA,GAEA,OADA+P,KAAAglB,MAAAvf,EAAA,IACAA,GAmDA0sE,GAAA7hF,UAAAf,IAvCA,SAAAU,GACA,OAAAimF,GAAAl2E,KAAA/P,GAAAV,IAAAU,IAuCAkiF,GAAA7hF,UAAAq2B,IA3BA,SAAA12B,GACA,OAAAimF,GAAAl2E,KAAA/P,GAAA02B,IAAA12B,IA2BAkiF,GAAA7hF,UAAAwzB,IAdA,SAAA7zB,EAAAN,GACA,IAAAqJ,EAAAk9E,GAAAl2E,KAAA/P,GACA+0B,EAAAhsB,EAAAgsB,KAIA,OAFAhsB,EAAA8qB,IAAA7zB,EAAAN,GACAqQ,KAAAglB,MAAAhsB,EAAAgsB,QAAA,IACAhlB,MAyDAihF,GAAA3wF,UAAA4yB,IAAA+9D,GAAA3wF,UAAA4S,KAnBA,SAAAvT,GAEA,OADAqQ,KAAAqyE,SAAAvuD,IAAAn0B,EAAAo9E,GACA/sE,MAkBAihF,GAAA3wF,UAAAq2B,IANA,SAAAh3B,GACA,OAAAqQ,KAAAqyE,SAAA1rD,IAAAh3B,IAqGAyiF,GAAA9hF,UAAAg8E,MA3EA,WACAtsE,KAAAqyE,SAAA,IAAAH,GACAlyE,KAAAglB,KAAA,GA0EAotD,GAAA9hF,UAAA,OA9DA,SAAAL,GACA,IAAA+I,EAAAgH,KAAAqyE,SACA5sE,EAAAzM,EAAA,OAAA/I,GAGA,OADA+P,KAAAglB,KAAAhsB,EAAAgsB,KACAvf,GA0DA2sE,GAAA9hF,UAAAf,IA9CA,SAAAU,GACA,OAAA+P,KAAAqyE,SAAA9iF,IAAAU,IA8CAmiF,GAAA9hF,UAAAq2B,IAlCA,SAAA12B,GACA,OAAA+P,KAAAqyE,SAAA1rD,IAAA12B,IAkCAmiF,GAAA9hF,UAAAwzB,IArBA,SAAA7zB,EAAAN,GACA,IAAAqJ,EAAAgH,KAAAqyE,SACA,GAAAr5E,aAAAk5E,GAAA,CACA,IAAAmE,EAAAr9E,EAAAq5E,SACA,IAAAlwD,IAAAk0D,EAAAzgF,OAAAk3E,EAAA,EAGA,OAFAuJ,EAAAnzE,KAAA,CAAAjT,EAAAN,IACAqQ,KAAAglB,OAAAhsB,EAAAgsB,KACAhlB,KAEAhH,EAAAgH,KAAAqyE,SAAA,IAAAF,GAAAkE,GAIA,OAFAr9E,EAAA8qB,IAAA7zB,EAAAN,GACAqQ,KAAAglB,KAAAhsB,EAAAgsB,KACAhlB,MA+hBA,IAAAm0E,GAAAtD,GAAA,SAAAzgF,GACA,aAAAA,EACA,IAEAA,EAAAhB,OAAAgB,GA9sCA,SAAA8gC,EAAA4vD,GAMA,IALA,IAAA7vD,GAAA,EACAr7B,EAAA,MAAAs7B,EAAA,EAAAA,EAAAt7B,OACA8tF,EAAA,EACAj+E,EAAA,KAEAwrB,EAAAr7B,GAAA,CACA,IAAAjG,EAAAuhC,EAAAD,GACA6vD,EAAAnxF,EAAAshC,EAAAC,KACAzrB,EAAAi+E,KAAA/zF,GAGA,OAAA8V,EAmsCAk+E,CAAA9S,GAAAzgF,GAAA,SAAA+kF,GACA,OAAAvE,GAAA/hF,KAAAuB,EAAA+kF,OAsdA,WACA,UA5cAxB,GAAA0N,GAkCA,SAAAvO,GAAAnjF,EAAAiG,GAEA,SADAA,EAAA,MAAAA,EAAAkmD,EAAAlmD,KAEA,iBAAAjG,GAAA8+E,EAAAr8D,KAAAziB,KACAA,GAAA,GAAAA,EAAA,MAAAA,EAAAiG,EA4DA,SAAA27E,GAAA3xE,GACA,SAAAA,EAAA,CACA,IACA,OAAAuwE,EAAAthF,KAAA+Q,GACK,MAAAlH,IACL,IACA,OAAAkH,EAAA,GACK,MAAAlH,KAEL,SAmCA,SAAAu6E,GAAAtjF,EAAA2mF,GACA,OAAA3mF,IAAA2mF,GAAA3mF,MAAA2mF,MA5IApF,IAAAyC,GAAA,IAAAzC,GAAA,IAAAqF,YAAA,MAAA1I,GACA1rD,IAAAwxD,GAAA,IAAAxxD,KAAAkrD,GACAjqC,IAzzCA,oBAyzCAuwC,GAAAvwC,GAAAC,YACA7f,IAAAmwD,GAAA,IAAAnwD,KAAAiqD,GACA2D,IApzCA,oBAozCAuC,GAAA,IAAAvC,OACAuC,GAAA,SAAAhkF,GACA,IAAA8V,EAAA47E,GAAA1xF,GACA4kF,EAAA9uE,GAAA8nE,EAAA59E,EAAA2F,iBAAAiL,EACAi2E,EAAAjC,EAAAhD,GAAAgD,GAAA,GAEA,GAAAiC,EACA,OAAAA,GACA,KAAAlF,GAAA,OAAAzD,EACA,KAAA2D,GAAA,OAAAnE,EACA,KAAAoE,GAAA,MAr0CA,mBAs0CA,KAAAC,GAAA,OAAAjE,EACA,KAAAkE,GAAA,MAh0CA,mBAm0CA,OAAAlsE,IA8IA,IAAAktE,GAAA8O,GAAA,WAA8C,OAAAtgF,UAA9C,IAAkEsgF,GAAA,SAAA9xF,GAClE,OAAA6iF,GAAA7iF,IAAAY,EAAA1B,KAAAc,EAAA,YACAihF,GAAA/hF,KAAAc,EAAA,WA0BA+F,GAAAD,MAAAC,QAgDA,IAAAs7E,GAAAD,IA4OA,WACA,UA1LA,SAAAz8B,GAAA3kD,GACA,IAAA4kD,GAAA5kD,GACA,SAIA,IAAAyN,EAAAikF,GAAA1xF,GACA,OAAAyN,GAAA+vE,GAAA/vE,GAAAgwE,GAAAhwE,GAAA+iF,GAAA/iF,GAAAkjF,EA6BA,SAAA7J,GAAA9mF,GACA,uBAAAA,GACAA,GAAA,GAAAA,EAAA,MAAAA,GAAAmsD,EA4BA,SAAAvH,GAAA5kD,GACA,IAAAsX,SAAAtX,EACA,aAAAA,IAAA,UAAAsX,GAAA,YAAAA,GA2BA,SAAAurE,GAAA7iF,GACA,aAAAA,GAAA,iBAAAA,EAoBA,IAAAixF,GAAAD,EAhiDA,SAAA/gF,GACA,gBAAAjQ,GACA,OAAAiQ,EAAAjQ,IA8hDAi0F,CAAAjD,GAnvBA,SAAAhxF,GACA,OAAA6iF,GAAA7iF,IACA8mF,GAAA9mF,EAAAiG,WAAA4qF,EAAAa,GAAA1xF,KA+wBA,SAAA4V,GAAAnV,GACA,OA1NA,OADAT,EA2NAS,IA1NAqmF,GAAA9mF,EAAAiG,UAAA0+C,GAAA3kD,GA0NA2iF,GAAAliF,GAAAsmF,GAAAtmF,GA3NA,IAAAT,EAqQAxB,EAAAD,QAlNA,SAAAyB,EAAA2mF,GACA,OAAAoL,GAAA/xF,EAAA2mF,i5BC/lDA,IAAMz1D,EAASK,EAAQ,GAAqBP,UAAUQ,GAKhD0iE,EAAsB,CAAE,WAAY,OAAQ,OAAQ,QACpDC,EAAkC,CAAE,WAAY,OAAQ,QAGjDC,EAAiC,2BAO9C,SAASC,EAAkBjtF,EAAGC,GAC1B,IAAIotC,EAAM,EAMV,OAJA0/C,EAAgCG,KAAK,SAAAh0F,GAAG,OAC8B,KAAjEm0C,EAAQrtC,EAAE9G,GAAO+G,EAAE/G,GAAS,EAAQ8G,EAAE9G,GAAO+G,EAAE/G,KAAU,KAGvDm0C,EAUX,SAAS8/C,EAAYp+B,EAAYh9C,GAC7B,IAAMq7E,EAAmBr+B,EAAWxkD,KAAK0iF,GAAmBt+E,OACxD,SAAC0+E,EAAkBl+B,GAAnB,SAAA7sD,OACIwqF,EAAoBn+E,OAChB,SAACuqC,EAAKhgD,EAAKsgD,GAAX,OACIN,GACe,IAARM,EAAY,GAAK,MACjB2V,EAASj2D,GAAOi2D,EAASj2D,GAAO,KAC3C,IANR,MAOK,IACHo0F,EAAiBv7E,EAASxH,OAAOoE,OACnC,SAACuqC,EAAKq0C,GAAN,SAAAjrF,OAAqB42C,EAAMq0C,EAA3B,MAAuC,IAE3C,OAAO3qF,mBAASwqF,EAAmBE,OAMlB5/B,cAOjB,SAAAA,IAAkE,IAAA98C,MAAtD+M,EAAsDvT,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAzC,GAAID,EAAqCC,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAA9B,6BAIhC,+FAJ8Ds+B,CAAAz/B,KAAAykD,KAC9DzkD,OAAA2/B,EAAA8kB,GAAA51D,KAAAmR,OAAA2H,oDACKzG,KAAOA,EACZyG,EAAK4kD,MAAQ73C,EAAW63C,OACnB5kD,EAAK4kD,MACN,MAAM,IAAI71D,MACN,uDAIRiR,EAAK48E,sBAAwBn1F,OAAOY,OAAO,MAC3C2X,EAAK68E,aAAep1F,OAAOY,OAAO,MAClC2X,EAAK+T,QAAU,GACf/T,EAAK88E,MAAQ,IAAIjhE,IAEjB,IAAMqkC,EAAOnzC,EAAWmzC,KAfsC,OAiB9DA,EAAK1d,YAAYob,IAAW7zD,gBACxB,SAAAi4D,GAAI,OAAIhiD,EAAK+8E,aAAa/6B,KAC9B9B,EAAK1d,YAAYob,IAAW5zD,kBACxB,SAAAg4D,GAAI,OAAIhiD,EAAKg9E,gBAAgBh7B,KACjCv6D,OAAOmW,KAAKsiD,EAAK48B,OAAOn1E,QAAQ,SAAA3L,GAC5BgE,EAAK+8E,aAAa78B,EAAK48B,MAAM9gF,MAGjC7I,UAAQ0E,aAAa,OAAQ,mCAC7BmI,EAAK4kD,MAAM1H,WAAW/pD,UAAQK,GAAGypF,MACjClwE,EAAWzG,WAAWtG,EAAKk9E,YAAY30F,KAAjB85C,IAAAriC,KAA6B7M,UAAQK,GAAGypF,MAE9Dj9E,EAAKm9E,iBAAmBn9E,EAAKo9E,yBAAyB70F,KAA9B85C,IAAAriC,KA7BsCA,wPAPpCi4B,iDA8CnB0kD,GAAyB,IAAhBU,EAAgB7jF,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,IAAAA,UAAA,GAChCnB,KAAKusD,MAAM1H,WAAWy/B,GACtBtkF,KAAKilF,mBACDD,GACAhlF,KAAKglF,+CAWCV,GAAyB,IAAhBU,EAAgB7jF,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,IAAAA,UAAA,GACnCnB,KAAKusD,MAAM24B,cAAcZ,GACzBtkF,KAAKilF,mBACDD,GACAhlF,KAAKglF,0CAQThlF,KAAKykF,MAAMn1E,QAAQ,SAAAq6C,GAAI,OAAIA,EAAK/7C,qDASxBjK,GAAqB,IAAA6E,EAAAxI,KAAhB8N,EAAgB3M,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAN,IACjBoG,EACA5D,KAAO3D,KAAKwkF,aAAexkF,KAAKwkF,aAAa7gF,GAAO,KAE1D,KAAK4D,GAAUA,EAAKmU,WAAW1b,KAAKukF,uBAAwB,CACxD,IAAMrjF,EAAOqG,EAAI,GAAAlO,OAAMkO,EAAKrG,KAAX,KAAA7H,OAAmBkO,EAAKmU,SAAY,KAErD,OAAO1b,KAAKmlF,cAAcxhF,EAAKzC,EAAM4M,GAChCmyB,KAAK,SAAAS,GAA8B,IAA3B53B,EAA2B43B,EAA3B53B,SAAUg9C,EAAiBplB,EAAjBolB,WACf,GAAIv+C,EAAM,CACN,IAAM69E,EAAMlB,EACRzuF,MAAMO,KAAK8vD,GACXrwD,MAAMO,KAAK8S,IAETu8E,EAAY,GAAAhsF,OAAMkO,EAAKrG,KAAX,KAAA7H,OAAmB+rF,GAErC,OAAIC,IAAiBnkF,GACjBsH,EAAK+7E,sBAAsBc,GAAgBv8E,EAEpCA,GAIPN,EAAK+7E,sBAAsBc,GACpB78E,EAAK+7E,sBAAsBc,IAGtCxkE,EAAO7b,MAAP,iBAAA3L,OAA8B6H,EAA9B,kBAAA7H,OACIgsF,IAEGjiD,QAAQE,OAAOygD,OAKtC,OAAO3gD,QAAQC,QAAQrjC,KAAKukF,sBAAsBh9E,EAAKmU,2DASlC/X,GAAqB,IAAhBmK,EAAgB3M,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAN,IACpC,OAAOnB,KAAKmlF,cAAcxhF,EAAK,KAAMmK,yCAW3BnK,EAAKzC,EAAM4M,GAAS,IAAAC,EAAA/N,KAC9B,OAAO,IAAIojC,QAAQ,SAACC,EAASC,GAAV,OACfv1B,EAAKw+C,MAAMrnD,KAAKvB,EAAKzC,EAAM,SAAA2R,GACvB,IAAM/J,EAAW,IAAI0a,IACfsiC,EAAa,IAAItiC,IAEvBwvB,EAAEngC,GACG0e,KAAK,kBACLwhB,KACG,SAACO,EAAGpzC,GAAJ,OAAW4I,EAASoa,IAAIhjB,EAAG0C,aAAa,UAChDowC,EAAEngC,GACG0e,KAAK,mBACLwhB,KACG,SAACO,EAAGpzC,GAAJ,OAAW4lD,EAAW5iC,IAAI,CACtBjc,KAAM/G,EAAG0C,aAAa,QACtB3T,KAAMiR,EAAG0C,aAAa,QACtB0iF,SAAUplF,EAAG0C,aAAa,gBAEtCygC,EAAQ,CACJv6B,WACAg9C,gBACLxiB,EAAQx1B,0CASN67C,GACT3pD,KAAKykF,MAAMvhE,IAAIymC,GACfA,EAAKxf,YAAYob,IAAW5yD,gBAAiBqN,KAAK8kF,kBAClD9kF,KAAKulF,wBAAwB57B,2CAQjBA,GACZ3pD,KAAKykF,MAAMn+D,OAAOqjC,GAClBA,EAAKnlC,eAAe+gC,IAAW5yD,gBAAiBqN,KAAK8kF,kEAOjCn7B,GACpBA,EAAK67B,cAAc,IAAK,CACpBlpF,WAAY,CACR2J,MAAOnL,UAAQK,GAAGypF,KAClB1sF,KA7OH,QA8OGgJ,KAAMlB,KAAKkB,KACXkX,IAAKpY,KAAK0b,2DAQE,IAAAnN,EAAAvO,KAEpBA,KAAKykF,MAAMn1E,QAAQ,SAAAq6C,GAAI,OAAIp7C,EAAKg3E,wBAAwB57B,gDAOxD3pD,KAAK0b,QACCwoE,EAAYlkF,KAAKusD,MAAMk5B,YAAazlF,KAAKusD,MAAMm5B,WAErD1lF,KAAK2lF,4DAOGz3E,GACR,IAAMlY,EAAOkY,EAAOtL,aAAa,QAC3B4hD,EAAOt2C,EAAOmJ,cAAc,KAC5BqE,EAAU8oC,EAAK5hD,aAAa,OAC5B1B,EAAOsjD,EAAK5hD,aAAa,QACzBgjF,EAAa5lF,KAAKwkF,aAAaxuF,GAUrC,OARAgK,KAAKwkF,aAAaxuF,GAAQ,CAAE0lB,UACxBxa,QACA0kF,GAAcA,EAAWlqE,UAAYA,GACrC1b,KAAKoiB,aAAa6C,KAAKsgC,IAAWryD,4BAC9B8C,IAID,mDAOc2N,GACjBA,KAAO3D,KAAKwkF,qBACLxkF,KAAKwkF,aAAa7gF,0GChTrCnV,EAAAgB,EAAAiuB,GAAAjvB,EAAAQ,EAAAyuB,EAAA,uBAAAooE,IAAAr3F,EAAAQ,EAAAyuB,EAAA,wBAAAqoE,IAKO,IAAMD,EAAK,KAOLC,EAAM,kVCLnB,IAAMjlE,EAASF,oBAAUQ,GACnB4kE,EAAkB,IAClBC,EAAkB,IAClBC,EAAkB,IAEXC,EAAiB,CAAEH,EAAiBC,EAAiBC,GAMrDE,EAAb,WAII,SAAAA,EAAYziE,gGAAgB+b,CAAAz/B,KAAAmmF,GACxBnmF,KAAK2+C,GAAKj7B,EAMV1jB,KAAKomF,mBAAqB,CACtB,CACInJ,QAAQ,EACR7hB,WAAY34C,IAAQiO,YAAc,KAAU,IAC5ClkB,IAAKu5E,EACLM,sBAAuB5jE,IAAQiO,YAAc,EAAM,GAEvD,CACIusD,QAAQ,EACR7hB,WAAY,IACZ5uD,IAAKw5E,EACLK,sBAAuB,GAE3B,CACIpJ,QAAQ,EACR7hB,WAAY34C,IAAQiO,YAAc,IAAS,KAC3ClkB,IAAKy5E,EACLI,sBAAuB5jE,IAAQiO,YAAc,EAAM,cA5BnE,SAAAy1D,KAAA,EAAAl2F,IAAA,6BAAAN,MAAA,SAyC+BqqE,GACvB,IAAMssB,EAAY9qC,IAAU9iC,MAAMshD,EAAY1nC,KAmB9C,OAjBAg0D,EAAUv4D,MAAMze,QAAQ,SAAAyiB,GACpB,GAAmB,UAAfA,EAAM9qB,MAGL8qB,EAAMX,YAAeW,EAAMX,WAAWx7B,OAA3C,CAGA,IAAI2wF,EAAiB,GAErBx0D,EAAMX,WAAW,GAAGN,MAAM/tB,MAAM,KAAKuM,QAAQ,SAAAkZ,GACzC,IAAMymC,EAAUl9B,EAAMjB,MAAME,OAAO,SAAA+E,GAAM,OAAIA,EAAO7uB,GAAGnR,aAAeyyB,IAEtE+9D,EAAiBA,EAAeltF,OAAO41D,KAE3Cl9B,EAAMjB,MAAQy1D,KAGX,IAAI/d,sBAAsB,CAC7BvhE,KAAM+yD,EAAY/yD,KAClBqrB,IAAKkpB,IAAUxF,MAAMswC,OA/DjC,CAAAr2F,IAAA,sBAAAN,MAAA,SAuEwBi5C,GAChB,OAAI5oC,KAAK2+C,GAAG6nC,iBAAmB59C,EAAWygC,eAC/BrpE,KAAKomF,mBAGT,CAAE,CAAEnJ,QAAQ,MA5E3B,CAAAhtF,IAAA,qCAAAN,MAAA,SAyFuCggC,GAI/B,GAAIlN,IAAQgkE,6BACR,OAAO92D,EAEX,IAAM2C,EAAMkpB,IAAU9iC,MAAMiX,EAAK2C,KAC3Bie,EAAMje,EAAIvE,MAAMu6C,UAAU,SAAAl6C,GAAK,MAAmB,UAAfA,EAAMnnB,OAE3CqrB,EAAIvE,MAAMwiB,GAAK4B,OAAS7f,EAAIvE,MAAMwiB,GAAKm2C,cAAgBp0D,EAAIvE,MAAMwiB,GAAKo2C,YAGtEr0D,EAAIvE,MAAMze,QAAQ,SAAC8e,EAAO1/B,GACH,UAAf0/B,EAAMnnB,MAAoBvY,IAAM6hD,IAChCje,EAAIvE,MAAMr/B,GAAGyjD,UAAO5xC,EACpB+xB,EAAIvE,MAAMr/B,GAAGi4F,eAAYpmF,KAMrC+xB,EAAIvE,MAAMwiB,GAAK4B,KAAO,CAClB,CACIjrC,GAAI6+E,EACJ91D,UAAW,QAEf,CACI/oB,GAAI8+E,EACJ/1D,UAAW,QAEf,CACI/oB,GAAI++E,EACJh2D,UAAW,SAOnB,IAAM22D,EAAgBnkE,IAAQiO,aAAejO,IAAQokE,qBAAqB,IAApD,QAAAxtF,OACR6sF,EAAe/iF,KAAK,MADZ,YAAA9J,OAEJ6sF,EAAe/iF,KAAK,MAOtC,OAJAmvB,EAAIvE,MAAMwiB,GAAKm2C,aAAe,CAC1B/2F,MAAOi3F,GAGJ,IAAIpe,sBAAsB,CAC7BvhE,KAAM0oB,EAAK1oB,KACXqrB,IAAKkpB,IAAUxF,MAAM1jB,OA5IjC,CAAAriC,IAAA,WAAAN,MAAA,SAsJai5C,GAAgC,IAApBo2B,IAAoB79D,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,KAAAA,UAAA,GAC/BujC,EAAQkE,EAAWk+C,WAEzB,GAAI9nB,EAAa,CAGb,IAAM+nB,EAAkB,CACpB92D,UAAW,WACXgU,QAAS,CAAE2E,EAAWo+C,qBACtBC,cAAe,IAGdxkE,IAAQiO,cACTq2D,EAAgBE,cAAgBjnF,KAAKknF,oBAAoBt+C,IAE7D5oC,KAAK2+C,GAAGj7B,eAAeyjE,eAAeziD,EAAOqiD,QAK7C/mF,KAAK2+C,GAAGj7B,eAAe4gB,SAASI,KA1K5C,CAAAz0C,IAAA,iBAAAN,MAAA,SAoLmBi5C,GAAY,IAAAjhC,EAAA3H,KACjB42B,EAAYgS,EAAWmE,UACvBrI,EAAQkE,EAAWk+C,WAInBjqB,EAAc78D,KAAK2+C,GAAGj7B,eAAe0jE,kBACtC71D,KAAK,SAAA3hC,GAAC,OAAIA,EAAEy3F,UAAYz3F,EAAEy3F,SAAS3iD,OAAS90C,EAAEy3F,SAAS3iD,MAAMlG,OAAS5H,IAE3E,OAAKimC,GAKLh8C,EAAO5b,MAAP,UAAA5L,OAAuBuvC,EAAvB,QAAAvvC,OAAwC2G,KAAK2+C,KAIf,aAA1Bke,EAAY5sC,WACZjwB,KAAK2+C,GAAGj7B,eAAe4jE,UAAU1+C,EAAWo+C,qBAC5ChnF,KAAKunF,aAAa3+C,GAClB5oC,KAAK2+C,GAAGrV,YAAYxlB,IAAI8kB,EAAWE,MAAOF,GAC1Ci0B,EAAY5sC,UAAY,YAEjB,QAEX4sC,EAAY2qB,OAAOje,aAAa7kC,GAC3BzE,KAAK,WAGF,OAFAt4B,EAAKg3C,GAAGrV,YAAYxlB,IAAI8kB,EAAWE,MAAOF,IAEnC,IAEVpF,MAAM,SAAAnzB,GAGH,OAFAwQ,EAAO7b,MAAP,2BAAA3L,OAAwCu9B,EAAxC,cAAAv9B,OAA8DsO,EAAKg3C,GAAnE,MAAAtlD,OAA0EgX,KAEnE,MAzBXwQ,EAAO7b,MAAP,yBAAA3L,OAAsCu9B,EAAtC,QAAAv9B,OAAsD2G,KAAK2+C,GAA3D,gBAEO,KAhMnB,CAAA1uD,IAAA,kBAAAN,MAAA,SAiOoBi5C,GAAY,IAAApgC,EAAAxI,KAClB42B,EAAYgS,EAAWmE,UACvB8vB,EAAc78D,KAAK2+C,GAAGj7B,eAAe0jE,kBACtC71D,KAAK,SAAA3hC,GAAC,OAAIA,EAAE43F,QAAU53F,EAAE43F,OAAO9iD,OAAS90C,EAAE43F,OAAO9iD,MAAMx9B,KAAO0hC,EAAWw0C,eAE9E,IAAKvgB,EAGD,OAFAh8C,EAAO7b,MAAP,yBAAA3L,OAAsCu9B,EAAtC,QAAAv9B,OAAsD2G,KAAK2+C,GAA3D,gBAEO,EAGX99B,EAAO5b,MAAP,YAAA5L,OAAyBuvC,EAAzB,QAAAvvC,OAA0C2G,KAAK2+C,KAC/Cke,EAAY2qB,OAAOje,aAAa,MAC3BtpC,KAAK,WAIF,OAHAz3B,EAAKm2C,GAAGrV,YAAYhjB,OAAOsiB,EAAWE,OACtCtgC,EAAKm2C,GAAG8oC,WAAWnhE,OAAOsiB,EAAWE,QAE9B,IAEVtF,MAAM,SAAAnzB,GAGH,OAFAwQ,EAAO7b,MAAP,yBAAA3L,OAAsCu9B,EAAtC,cAAAv9B,OAA4DmP,EAAKm2C,GAAjE,MAAAtlD,OAAwEgX,KAEjE,MAvPvB,CAAApgB,IAAA,eAAAN,MAAA,SAmQiBs5E,EAAUC,GAAU,IAAAn7D,EAAA/N,KAC7B,GAAIipE,GAAYC,EAAU,CACtB,IAAMtyC,EAAYsyC,EAASn8B,UACrB9oB,EAASilD,EAAS8d,oBAClBtiD,EAAQzgB,EAAOia,iBAAiB,GAChC2+B,EAAc78D,KAAK2+C,GAAGj7B,eAAe0jE,kBACtC71D,KAAK,SAAA3hC,GAAC,OAAIA,EAAEy3F,SAAS3iD,MAAMlG,OAAS5H,IAAchnC,EAAE83F,UAEzD,OAAK7qB,GAGLh8C,EAAO5b,MAAP,aAAA5L,OAA0B4vE,EAA1B,UAAA5vE,OAA2C6vE,EAA3C,QAAA7vE,OAA0D2G,KAAK2+C,KAExDke,EAAY2qB,OAAOje,aAAa7kC,GAClCzE,KAAK,WACF,IAAMzX,EAAOza,EAAK4wC,GAAG8oC,WAAWl4F,IAAI05E,EAASngC,OAE7C/6B,EAAK4wC,GAAGrV,YAAYhjB,OAAO2iD,EAASngC,OACpC/6B,EAAK4wC,GAAG8oC,WAAWnhE,OAAO2iD,EAASngC,OACnC/6B,EAAK4wC,GAAGgpC,cAAgB55E,EAAK4wC,GAAGgpC,cAAc32D,OAAO,SAAAvgC,GAAC,OAAIA,IAAMwzB,IAChElW,EAAK4wC,GAAGrV,YAAYxlB,IAAIolD,EAASpgC,MAAOogC,GAExCn7D,EAAK4wC,GAAGgpC,cAAczkF,KAAK+gB,GAC3BlW,EAAK4wC,GAAG8oC,WAAW3jE,IAAIolD,EAASpgC,MAAOtgB,GACvCza,EAAK4wC,GAAGv8B,aAAa6C,KAAKmZ,IAAUnG,yBAChCixC,EACAn7D,EAAK4wC,GAAGipC,oBAAoBp/D,OAjB7B4a,QAAQE,OAAO,IAAI5sC,MAAM,yBAmBjC,GAAIuyE,IAAaC,EAAU,CAC9B,IAAKlpE,KAAKyqE,gBAAgBxB,GACtB,OAAO7lC,QAAQE,OAAO,IAAI5sC,MAAM,yBAEpCsJ,KAAK2+C,GAAGrV,YAAYhjB,OAAO2iD,EAASngC,OACpC9oC,KAAK2+C,GAAG8oC,WAAWnhE,OAAO2iD,EAASngC,YAChC,GAAIogC,IAAaD,EAAU,CAC9B,IAAMzgD,EAAOxoB,KAAK2+C,GAAG8oC,WAAWl4F,IAAI25E,EAASpgC,OAE7C,IAAK9oC,KAAK0qE,eAAexB,GACrB,OAAO9lC,QAAQE,OAAO,IAAI5sC,MAAM,yBAEpCwyE,EAASjkD,KAAK+uC,qBAAqCkV,GACnDlpE,KAAK2+C,GAAGrV,YAAYxlB,IAAIolD,EAASpgC,MAAOogC,GACxClpE,KAAK2+C,GAAG8oC,WAAW3jE,IAAIolD,EAASpgC,MAAOtgB,GAG3C,OAAO4a,QAAQC,SAAQ,KAhT/B,CAAApzC,IAAA,yBAAAN,MAAA,SA6T2BstF,GACnB,OAAOj9E,KAAK6nF,uBAAuB,QAAS5K,KA9TpD,CAAAhtF,IAAA,eAAAN,MAAA,SAsUiB+0C,GACT,IAAMm4B,EAAc78D,KAAK2+C,GAAGj7B,eAAe0jE,kBACtC71D,KAAK,SAAA3hC,GAAC,OAAIA,EAAE43F,QAAU53F,EAAE43F,OAAO9iD,OAAS90C,EAAE43F,OAAO9iD,MAAMlG,OAASkG,EAAMqI,YACrE6qB,EAAaiF,EAAY2qB,OAAOM,gBAEtClwB,EAAWmwB,UAAY/nF,KAAKknF,oBAAoBxiD,GAChDm4B,EAAY2qB,OAAOQ,cAAcpwB,KA5UzC,CAAA3nE,IAAA,yBAAAN,MAAA,SAwV2BinC,EAAWqmD,GAC9B,IAAMgL,EAAejoF,KAAK2+C,GAAGj7B,eAAe0jE,kBACvCp2D,OAAO,SAAAphC,GAAC,OAAIA,EAAEy3F,UAAYz3F,EAAEy3F,SAAS3iD,OAAS90C,EAAEy3F,SAAS3iD,MAAMlG,OAAS5H,IACvE0S,EAAc7zC,MAAMO,KAAKgK,KAAK2+C,GAAGrV,YAAY/jB,UAC9CyL,OAAO,SAAA0T,GAAK,OAAIA,EAAMqI,YAAcnW,IAwBzC,OAtBIqmD,EACAgL,EAAa34E,QAAQ,SAAAutD,GACjB,GAAIvzB,EAAY1zC,OAAQ,CACpBinE,EAAY5sC,UAAY,WACxB,IAAM2nC,EAAaiF,EAAY2qB,OAAOM,gBAElClwB,GAAcA,EAAWmwB,WAAanwB,EAAWmwB,UAAUnyF,SAC3DgiE,EAAWmwB,UAAUz4E,QAAQ,SAAA44E,GACzBA,EAASjL,QAAS,IAEtBpgB,EAAY2qB,OAAOQ,cAAcpwB,SAGrCiF,EAAY5sC,UAAY,aAIhCg4D,EAAa34E,QAAQ,SAAAutD,GACjBA,EAAY5sC,UAAY,cAIzB,IApXf,CAAAhgC,IAAA,yBAAAN,MAAA,SAiY2BstF,GACnB,OAAOj9E,KAAK6nF,uBAAuB,QAAS5K,mCAlYpDkJ,EAAA,mOCXMgC,aAWF,SAAAA,EAAYp+D,EAAQq+D,EAAaC,gGAAc5oD,CAAAz/B,KAAAmoF,GAC3CnoF,KAAKsoF,QAAUv+D,EACf/pB,KAAKuoF,eAAeH,GACpBpoF,KAAKwoF,cAAgBH,IAAgB,EACrCroF,KAAKyoF,oBAAmB,GACxBzoF,KAAK0oF,yBAA2B,EAChC1oF,KAAK2oF,sBAAwB,EAC7B3oF,KAAK4oF,UAAW,6DAShB,OAAO5oF,KAAKsoF,iDASZ,OAAOtoF,KAAKooF,mDASDS,GACX7oF,KAAKooF,YAAcS,yCASnB,OAAO7oF,KAAKwoF,0DASZ,OAAOxoF,KAAK2oF,sBAAwB,6CAWrBG,GACf,IAAK9oF,KAAK+oF,qBAAuBD,EAC7B9oF,KAAK2oF,sBAAwBxgF,KAAKmM,WAC/B,GAAItU,KAAK+oF,sBAAwBD,EAAsB,CAC1D,IACME,EADM7gF,KAAKmM,MACStU,KAAK2oF,sBAE/B3oF,KAAK0oF,0BAA4BM,EACjChpF,KAAK2oF,sBAAwB,yDAUjC,IAAIM,EAAQjpF,KAAK0oF,yBAMjB,OAJI1oF,KAAK+oF,sBACLE,GAAS9gF,KAAKmM,MAAQtU,KAAK2oF,uBAGxBM,oCASP,OAAOjpF,KAAK4oF,iDASZ5oF,KAAK4oF,UAAW,EAChB5oF,KAAKyoF,oBAAmB,wCAIhCt6F,EAAOD,QAAUi6F,iBCrHjBh6F,EAAOD,QAZsB,CASzBg7F,iBAAkB,kFCTtB,SAAAjR,QAAAjjF,QAAA,IAAAm0F;;;;;;;;;;;;;;;;;;;CASA,WACA,aAEA,IAAAzrF,MAAA,wBACA0rF,OAAA,iBAAA96F,OACAN,KAAAo7F,OAAA96F,OAAA,GACAN,KAAAq7F,mBACAD,QAAA,GAEA,IAAAE,YAAAF,QAAA,iBAAAl0F,KACAq0F,SAAAv7F,KAAAw7F,mBAAA,iBAAAvR,iBAAAmB,UAAAnB,QAAAmB,SAAAl4E,KACAqoF,QACAv7F,KAAAgH,OACGs0F,aACHt7F,KAAAkH,MAEA,IAAAu0F,WAAAz7F,KAAA07F,qBAAA,iBAAAv7F,eAAAD,QACAy7F,IAA4Cn7F,oBAAA,KAC5Co7F,cAAA57F,KAAA67F,wBAAA,oBAAAtT,YACAuT,UAAA,mBAAA/mF,MAAA,IACAgnF,MAAA,gCACAC,MAAA,YACAC,aAAA,yDACAC,mBAAA,mEAAAnnF,MAAA,IAEAonF,OAAA,GAAAC,QACA,GAAAR,aAAA,CACA,IAAA/V,OAAA,IAAA0C,YAAA,IACA6T,QAAA,IAAA5Z,WAAAqD,QACAsW,OAAA,IAAAE,YAAAxW,SAGA7lF,KAAAw7F,mBAAA/zF,MAAAC,UACAD,MAAAC,QAAA,SAAAN,GACA,yBAAAhG,OAAAkB,UAAAyF,SAAAlH,KAAAuG,MAIAw0F,eAAA57F,KAAAs8F,gCAAA/T,YAAAgU,SACAhU,YAAAgU,OAAA,SAAAn1F,GACA,uBAAAA,KAAAy+E,QAAAz+E,EAAAy+E,OAAAv+E,cAAAihF,cA6DA,IAAAiU,mBAAA,SAAAC,GACA,gBAAAhmF,GACA,WAAAimF,KAAA,GAAAC,OAAAlmF,GAAAgmF,OAwBAG,aAAA,WACA,IAAAC,EAAAL,mBAAA,OACAjB,UACAsB,EAAAC,SAAAD,IAEAA,EAAA76F,OAAA,WACA,WAAA06F,KAEAG,EAAAF,OAAA,SAAAlmF,GACA,OAAAomF,EAAA76F,SAAA26F,OAAAlmF,IAEA,QAAA/V,EAAA,EAAmBA,EAAAu7F,aAAAr0F,SAAyBlH,EAAA,CAC5C,IAAAuY,EAAAgjF,aAAAv7F,GACAm8F,EAAA5jF,GAAAujF,mBAAAvjF,GAEA,OAAA4jF,GAGAC,SAAA,SAAAD,QACA,IAAAt5C,OAAAw5C,KAAA,qBACAxa,OAAAwa,KAAA,4BACAC,WAAA,SAAAvmF,GACA,oBAAAA,EACA,OAAA8sC,OAAA05C,WAAA,OAAAN,OAAAlmF,EAAA,QAAAymF,OAAA,OAEA,GAAAzmF,QACA,MAAA/G,MAKA,OAJS+G,EAAAnP,cAAAihF,cACT9xE,EAAA,IAAA+rE,WAAA/rE,IAGAhP,MAAAC,QAAA+O,IAAA8xE,YAAAgU,OAAA9lF,IACAA,EAAAnP,cAAAi7E,OACAh/B,OAAA05C,WAAA,OAAAN,OAAA,IAAApa,OAAA9rE,IAAAymF,OAAA,OAEAL,OAAApmF,IAGA,OAAAumF,YASA,SAAAN,IAAAS,GACA,GAAAA,EACAhB,OAAA,GAAAA,OAAA,IAAAA,OAAA,GAAAA,OAAA,GAAAA,OAAA,GACAA,OAAA,GAAAA,OAAA,GAAAA,OAAA,GAAAA,OAAA,GACAA,OAAA,GAAAA,OAAA,GAAAA,OAAA,IAAAA,OAAA,IACAA,OAAA,IAAAA,OAAA,IAAAA,OAAA,IAAAA,OAAA,MACAnqF,KAAAmqF,cACAnqF,KAAAoqF,qBAEA,GAAAR,aAAA,CACA,IAAA/V,EAAA,IAAA0C,YAAA,IACAv2E,KAAAoqF,QAAA,IAAA5Z,WAAAqD,GACA7zE,KAAAmqF,OAAA,IAAAE,YAAAxW,QAEA7zE,KAAAmqF,OAAA,oCAGAnqF,KAAAorF,GAAAprF,KAAAqrF,GAAArrF,KAAAsrF,GAAAtrF,KAAAurF,GAAAvrF,KAAAud,MAAAvd,KAAAwrF,MAAAxrF,KAAAyrF,OAAA,EACAzrF,KAAA0rF,UAAA1rF,KAAA2rF,QAAA,EACA3rF,KAAA4rF,OAAA,EAYAlB,IAAAp6F,UAAAq6F,OAAA,SAAAlmF,GACA,IAAAzE,KAAA0rF,UAAA,CAIA,IAAAG,EAAA5kF,SAAAxC,EACA,cAAAwC,EAAA,CACA,cAAAA,EAWA,MAAAvJ,MAVA,UAAA+G,EACA,MAAA/G,MACS,GAAAksF,cAAAnlF,EAAAnP,cAAAihF,YACT9xE,EAAA,IAAA+rE,WAAA/rE,QACS,KAAAhP,MAAAC,QAAA+O,IACTmlF,cAAArT,YAAAgU,OAAA9lF,IACA,MAAA/G,MAMAmuF,GAAA,EAKA,IAHA,IAAA1uE,EAAAzuB,EAAAuiC,EAAA,EAAAr7B,EAAA6O,EAAA7O,OAAAu0F,EAAAnqF,KAAAmqF,OACAC,EAAApqF,KAAAoqF,QAEAn5D,EAAAr7B,GAAA,CAUA,GATAoK,KAAA2rF,SACA3rF,KAAA2rF,QAAA,EACAxB,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,OAGA0B,EACA,GAAAjC,aACA,IAAAl7F,EAAAsR,KAAAud,MAA8B0T,EAAAr7B,GAAAlH,EAAA,KAA0BuiC,EACxDm5D,EAAA17F,KAAA+V,EAAAwsB,QAGA,IAAAviC,EAAAsR,KAAAud,MAA8B0T,EAAAr7B,GAAAlH,EAAA,KAA0BuiC,EACxDk5D,EAAAz7F,GAAA,IAAA+V,EAAAwsB,IAAA+4D,MAAA,EAAAt7F,UAIA,GAAAk7F,aACA,IAAAl7F,EAAAsR,KAAAud,MAA8B0T,EAAAr7B,GAAAlH,EAAA,KAA0BuiC,GACxD9T,EAAA1Y,EAAA7N,WAAAq6B,IACA,IACAm5D,EAAA17F,KAAAyuB,EACaA,EAAA,MACbitE,EAAA17F,KAAA,IAAAyuB,GAAA,EACAitE,EAAA17F,KAAA,OAAAyuB,GACaA,EAAA,OAAAA,GAAA,OACbitE,EAAA17F,KAAA,IAAAyuB,GAAA,GACAitE,EAAA17F,KAAA,IAAAyuB,GAAA,KACAitE,EAAA17F,KAAA,OAAAyuB,IAEAA,EAAA,aAAAA,IAAA,QAAA1Y,EAAA7N,aAAAq6B,IACAm5D,EAAA17F,KAAA,IAAAyuB,GAAA,GACAitE,EAAA17F,KAAA,IAAAyuB,GAAA,MACAitE,EAAA17F,KAAA,IAAAyuB,GAAA,KACAitE,EAAA17F,KAAA,OAAAyuB,QAIA,IAAAzuB,EAAAsR,KAAAud,MAA8B0T,EAAAr7B,GAAAlH,EAAA,KAA0BuiC,GACxD9T,EAAA1Y,EAAA7N,WAAAq6B,IACA,IACAk5D,EAAAz7F,GAAA,IAAAyuB,GAAA6sE,MAAA,EAAAt7F,KACayuB,EAAA,MACbgtE,EAAAz7F,GAAA,SAAAyuB,GAAA,IAAA6sE,MAAA,EAAAt7F,KACAy7F,EAAAz7F,GAAA,YAAAyuB,IAAA6sE,MAAA,EAAAt7F,MACayuB,EAAA,OAAAA,GAAA,OACbgtE,EAAAz7F,GAAA,SAAAyuB,GAAA,KAAA6sE,MAAA,EAAAt7F,KACAy7F,EAAAz7F,GAAA,SAAAyuB,GAAA,OAAA6sE,MAAA,EAAAt7F,KACAy7F,EAAAz7F,GAAA,YAAAyuB,IAAA6sE,MAAA,EAAAt7F,OAEAyuB,EAAA,aAAAA,IAAA,QAAA1Y,EAAA7N,aAAAq6B,IACAk5D,EAAAz7F,GAAA,SAAAyuB,GAAA,KAAA6sE,MAAA,EAAAt7F,KACAy7F,EAAAz7F,GAAA,SAAAyuB,GAAA,QAAA6sE,MAAA,EAAAt7F,KACAy7F,EAAAz7F,GAAA,SAAAyuB,GAAA,OAAA6sE,MAAA,EAAAt7F,KACAy7F,EAAAz7F,GAAA,YAAAyuB,IAAA6sE,MAAA,EAAAt7F,MAKAsR,KAAA8rF,cAAAp9F,EACAsR,KAAAwrF,OAAA98F,EAAAsR,KAAAud,MACA7uB,GAAA,IACAsR,KAAAud,MAAA7uB,EAAA,GACAsR,KAAA9H,OACA8H,KAAA2rF,QAAA,GAEA3rF,KAAAud,MAAA7uB,EAOA,OAJAsR,KAAAwrF,MAAA,aACAxrF,KAAAyrF,QAAAzrF,KAAAwrF,MAAA,cACAxrF,KAAAwrF,MAAAxrF,KAAAwrF,MAAA,YAEAxrF,OAGA0qF,IAAAp6F,UAAAy7F,SAAA,WACA,IAAA/rF,KAAA0rF,UAAA,CAGA1rF,KAAA0rF,WAAA,EACA,IAAAvB,EAAAnqF,KAAAmqF,OAAAz7F,EAAAsR,KAAA8rF,cACA3B,EAAAz7F,GAAA,IAAAq7F,MAAA,EAAAr7F,GACAA,GAAA,KACAsR,KAAA2rF,QACA3rF,KAAA9H,OAEAiyF,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,OAEAA,EAAA,IAAAnqF,KAAAwrF,OAAA,EACArB,EAAA,IAAAnqF,KAAAyrF,QAAA,EAAAzrF,KAAAwrF,QAAA,GACAxrF,KAAA9H,SAGAwyF,IAAAp6F,UAAA4H,KAAA,WACA,IAAAnB,EAAAC,EAAAjI,EAAAC,EAAAg9F,EAAAC,EAAA9B,EAAAnqF,KAAAmqF,OAEAnqF,KAAA4rF,MAQA50F,IADAA,IALAD,IADAA,EAAAozF,EAAA,eACA,EAAApzF,IAAA,mBAIAhI,IADAA,IAAA,WADAC,IADAA,IAAA,sBAAA+H,GAAAozF,EAAA,eACA,GAAAn7F,IAAA,IAAA+H,GAAA,KACA,UAAAA,IAAAozF,EAAA,gBACA,GAAAp7F,IAAA,IAAAC,GAAA,IACAA,EAAA+H,IAAAozF,EAAA,gBACA,GAAAnzF,IAAA,IAAAjI,GAAA,GAEAgI,EAAAiJ,KAAAorF,GACAp0F,EAAAgJ,KAAAqrF,GACAt8F,EAAAiR,KAAAsrF,GASAt0F,IADAA,KALAD,IADAA,KADA/H,EAAAgR,KAAAurF,IACAv0F,GAAAjI,EAAAC,IAAAm7F,EAAA,eACA,EAAApzF,IAAA,IAAAC,GAAA,IAIAjI,IADAA,IAAAiI,GADAhI,IADAA,IAAAD,EAAAgI,GAAAC,EAAAjI,IAAAo7F,EAAA,eACA,GAAAn7F,IAAA,IAAA+H,GAAA,IACAA,EAAAC,IAAAmzF,EAAA,eACA,GAAAp7F,IAAA,IAAAC,GAAA,IACAA,EAAA+H,IAAAozF,EAAA,gBACA,GAAAnzF,IAAA,IAAAjI,GAAA,GAUAiI,IADAA,KALAD,IADAA,IAAA/H,EAAAgI,GAAAjI,EAAAC,IAAAm7F,EAAA,eACA,EAAApzF,IAAA,IAAAC,GAAA,IAIAjI,IADAA,IAAAiI,GADAhI,IADAA,IAAAD,EAAAgI,GAAAC,EAAAjI,IAAAo7F,EAAA,gBACA,GAAAn7F,IAAA,IAAA+H,GAAA,IACAA,EAAAC,IAAAmzF,EAAA,gBACA,GAAAp7F,IAAA,IAAAC,GAAA,IACAA,EAAA+H,IAAAozF,EAAA,cACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAQAiI,IADAA,KALAD,IADAA,IAAA/H,EAAAgI,GAAAjI,EAAAC,IAAAm7F,EAAA,gBACA,EAAApzF,IAAA,IAAAC,GAAA,IAIAjI,IADAA,IAAAiI,GADAhI,IADAA,IAAAD,EAAAgI,GAAAC,EAAAjI,IAAAo7F,EAAA,gBACA,GAAAn7F,IAAA,IAAA+H,GAAA,IACAA,EAAAC,IAAAmzF,EAAA,YACA,GAAAp7F,IAAA,IAAAC,GAAA,IACAA,EAAA+H,IAAAozF,EAAA,iBACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAQAiI,IADAA,KALAD,IADAA,IAAA/H,EAAAgI,GAAAjI,EAAAC,IAAAm7F,EAAA,iBACA,EAAApzF,IAAA,IAAAC,GAAA,IAIAjI,IADAA,IAAAiI,GADAhI,IADAA,IAAAD,EAAAgI,GAAAC,EAAAjI,IAAAo7F,EAAA,eACA,GAAAn7F,IAAA,IAAA+H,GAAA,IACAA,EAAAC,IAAAmzF,EAAA,iBACA,GAAAp7F,IAAA,IAAAC,GAAA,IACAA,EAAA+H,IAAAozF,EAAA,iBACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAQAiI,IADAA,KAHAhI,IADAA,IAAAgI,EAAAjI,IADAgI,IADAA,IAAAhI,EAAAC,GAAAgI,EAAAjI,IAAAo7F,EAAA,eACA,EAAApzF,IAAA,IAAAC,GAAA,GACAA,IAAAmzF,EAAA,gBACA,EAAAn7F,IAAA,IAAA+H,GAAA,GAGAA,IADAhI,IADAA,IAAAgI,EAAAC,GAAAhI,EAAA+H,IAAAozF,EAAA,gBACA,GAAAp7F,IAAA,IAAAC,GAAA,GACAA,IAAAm7F,EAAA,eACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAQAiI,IADAA,KAHAhI,IADAA,IAAAgI,EAAAjI,IADAgI,IADAA,IAAAhI,EAAAC,GAAAgI,EAAAjI,IAAAo7F,EAAA,eACA,EAAApzF,IAAA,IAAAC,GAAA,GACAA,IAAAmzF,EAAA,eACA,EAAAn7F,IAAA,IAAA+H,GAAA,GAGAA,IADAhI,IADAA,IAAAgI,EAAAC,GAAAhI,EAAA+H,IAAAozF,EAAA,gBACA,GAAAp7F,IAAA,IAAAC,GAAA,GACAA,IAAAm7F,EAAA,eACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAQAiI,IADAA,KAHAhI,IADAA,IAAAgI,EAAAjI,IADAgI,IADAA,IAAAhI,EAAAC,GAAAgI,EAAAjI,IAAAo7F,EAAA,eACA,EAAApzF,IAAA,IAAAC,GAAA,GACAA,IAAAmzF,EAAA,iBACA,EAAAn7F,IAAA,IAAA+H,GAAA,GAGAA,IADAhI,IADAA,IAAAgI,EAAAC,GAAAhI,EAAA+H,IAAAozF,EAAA,eACA,GAAAp7F,IAAA,IAAAC,GAAA,GACAA,IAAAm7F,EAAA,gBACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAQAiI,IADAA,KAHAhI,IADAA,IAAAgI,EAAAjI,IADAgI,IADAA,IAAAhI,EAAAC,GAAAgI,EAAAjI,IAAAo7F,EAAA,iBACA,EAAApzF,IAAA,IAAAC,GAAA,GACAA,IAAAmzF,EAAA,cACA,EAAAn7F,IAAA,IAAA+H,GAAA,GAGAA,IADAhI,IADAA,IAAAgI,EAAAC,GAAAhI,EAAA+H,IAAAozF,EAAA,gBACA,GAAAp7F,IAAA,IAAAC,GAAA,GACAA,IAAAm7F,EAAA,iBACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAUAiI,IADAA,KAHAi1F,GADAj9F,IADAA,KAHAg9F,EAAAh1F,EAAAjI,IAEAgI,IADAA,IAAAi1F,EAAAh9F,GAAAm7F,EAAA,YACA,EAAApzF,IAAA,IAAAC,GAAA,IACAmzF,EAAA,gBACA,GAAAn7F,IAAA,IAAA+H,GAAA,GACAA,IAEAhI,IADAA,IAAAk9F,EAAAj1F,GAAAmzF,EAAA,iBACA,GAAAp7F,IAAA,IAAAC,GAAA,IACAm7F,EAAA,eACA,GAAAnzF,IAAA,GAAAjI,GAAA,EAUAiI,IADAA,KAHAi1F,GADAj9F,IADAA,KAHAg9F,EAAAh1F,EAAAjI,IAEAgI,IADAA,IAAAi1F,EAAAh9F,GAAAm7F,EAAA,gBACA,EAAApzF,IAAA,IAAAC,GAAA,IACAmzF,EAAA,gBACA,GAAAn7F,IAAA,IAAA+H,GAAA,GACAA,IAEAhI,IADAA,IAAAk9F,EAAAj1F,GAAAmzF,EAAA,eACA,GAAAp7F,IAAA,IAAAC,GAAA,IACAm7F,EAAA,iBACA,GAAAnzF,IAAA,GAAAjI,GAAA,EAUAiI,IADAA,KAHAi1F,GADAj9F,IADAA,KAHAg9F,EAAAh1F,EAAAjI,IAEAgI,IADAA,IAAAi1F,EAAAh9F,GAAAm7F,EAAA,gBACA,EAAApzF,IAAA,IAAAC,GAAA,IACAmzF,EAAA,eACA,GAAAn7F,IAAA,IAAA+H,GAAA,GACAA,IAEAhI,IADAA,IAAAk9F,EAAAj1F,GAAAmzF,EAAA,eACA,GAAAp7F,IAAA,IAAAC,GAAA,IACAm7F,EAAA,cACA,GAAAnzF,IAAA,GAAAjI,GAAA,EAUAiI,IADAA,KAHAi1F,GADAj9F,IADAA,KAHAg9F,EAAAh1F,EAAAjI,IAEAgI,IADAA,IAAAi1F,EAAAh9F,GAAAm7F,EAAA,eACA,EAAApzF,IAAA,IAAAC,GAAA,IACAmzF,EAAA,gBACA,GAAAn7F,IAAA,IAAA+H,GAAA,GACAA,IAEAhI,IADAA,IAAAk9F,EAAAj1F,GAAAmzF,EAAA,gBACA,GAAAp7F,IAAA,IAAAC,GAAA,IACAm7F,EAAA,eACA,GAAAnzF,IAAA,GAAAjI,GAAA,EAQAiI,IADAA,KAHAhI,IADAA,IAAAgI,IADAD,IADAA,IAAAhI,GAAAiI,GAAAhI,IAAAm7F,EAAA,eACA,EAAApzF,IAAA,IAAAC,GAAA,IACAjI,IAAAo7F,EAAA,gBACA,GAAAn7F,IAAA,IAAA+H,GAAA,KAEAhI,IADAA,IAAAgI,GAAA/H,GAAAgI,IAAAmzF,EAAA,iBACA,GAAAp7F,IAAA,IAAAC,GAAA,IACA+H,IAAAozF,EAAA,cACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAQAiI,IADAA,KAHAhI,IADAA,IAAAgI,IADAD,IADAA,IAAAhI,GAAAiI,GAAAhI,IAAAm7F,EAAA,iBACA,EAAApzF,IAAA,IAAAC,GAAA,IACAjI,IAAAo7F,EAAA,gBACA,GAAAn7F,IAAA,IAAA+H,GAAA,KAEAhI,IADAA,IAAAgI,GAAA/H,GAAAgI,IAAAmzF,EAAA,cACA,GAAAp7F,IAAA,IAAAC,GAAA,IACA+H,IAAAozF,EAAA,gBACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAQAiI,IADAA,KAHAhI,IADAA,IAAAgI,IADAD,IADAA,IAAAhI,GAAAiI,GAAAhI,IAAAm7F,EAAA,gBACA,EAAApzF,IAAA,IAAAC,GAAA,IACAjI,IAAAo7F,EAAA,eACA,GAAAn7F,IAAA,IAAA+H,GAAA,KAEAhI,IADAA,IAAAgI,GAAA/H,GAAAgI,IAAAmzF,EAAA,gBACA,GAAAp7F,IAAA,IAAAC,GAAA,IACA+H,IAAAozF,EAAA,iBACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAQAiI,IADAA,KAHAhI,IADAA,IAAAgI,IADAD,IADAA,IAAAhI,GAAAiI,GAAAhI,IAAAm7F,EAAA,eACA,EAAApzF,IAAA,IAAAC,GAAA,IACAjI,IAAAo7F,EAAA,iBACA,GAAAn7F,IAAA,IAAA+H,GAAA,KAEAhI,IADAA,IAAAgI,GAAA/H,GAAAgI,IAAAmzF,EAAA,eACA,GAAAp7F,IAAA,IAAAC,GAAA,IACA+H,IAAAozF,EAAA,eACA,GAAAnzF,IAAA,IAAAjI,GAAA,EAEAiR,KAAA4rF,OACA5rF,KAAAorF,GAAAr0F,EAAA,cACAiJ,KAAAqrF,GAAAr0F,EAAA,aACAgJ,KAAAsrF,GAAAv8F,EAAA,cACAiR,KAAAurF,GAAAv8F,EAAA,aACAgR,KAAA4rF,OAAA,IAEA5rF,KAAAorF,GAAAprF,KAAAorF,GAAAr0F,GAAA,EACAiJ,KAAAqrF,GAAArrF,KAAAqrF,GAAAr0F,GAAA,EACAgJ,KAAAsrF,GAAAtrF,KAAAsrF,GAAAv8F,GAAA,EACAiR,KAAAurF,GAAAvrF,KAAAurF,GAAAv8F,GAAA,IAcA07F,IAAAp6F,UAAA47F,IAAA,WACAlsF,KAAA+rF,WAEA,IAAAX,EAAAprF,KAAAorF,GAAAC,EAAArrF,KAAAqrF,GAAAC,EAAAtrF,KAAAsrF,GAAAC,EAAAvrF,KAAAurF,GAEA,OAAAzB,UAAAsB,GAAA,MAAAtB,UAAA,GAAAsB,GACAtB,UAAAsB,GAAA,OAAAtB,UAAAsB,GAAA,MACAtB,UAAAsB,GAAA,OAAAtB,UAAAsB,GAAA,OACAtB,UAAAsB,GAAA,OAAAtB,UAAAsB,GAAA,OACAtB,UAAAuB,GAAA,MAAAvB,UAAA,GAAAuB,GACAvB,UAAAuB,GAAA,OAAAvB,UAAAuB,GAAA,MACAvB,UAAAuB,GAAA,OAAAvB,UAAAuB,GAAA,OACAvB,UAAAuB,GAAA,OAAAvB,UAAAuB,GAAA,OACAvB,UAAAwB,GAAA,MAAAxB,UAAA,GAAAwB,GACAxB,UAAAwB,GAAA,OAAAxB,UAAAwB,GAAA,MACAxB,UAAAwB,GAAA,OAAAxB,UAAAwB,GAAA,OACAxB,UAAAwB,GAAA,OAAAxB,UAAAwB,GAAA,OACAxB,UAAAyB,GAAA,MAAAzB,UAAA,GAAAyB,GACAzB,UAAAyB,GAAA,OAAAzB,UAAAyB,GAAA,MACAzB,UAAAyB,GAAA,OAAAzB,UAAAyB,GAAA,OACAzB,UAAAyB,GAAA,OAAAzB,UAAAyB,GAAA,QAaAb,IAAAp6F,UAAAyF,SAAA20F,IAAAp6F,UAAA47F,IAYAxB,IAAAp6F,UAAA46F,OAAA,WACAlrF,KAAA+rF,WAEA,IAAAX,EAAAprF,KAAAorF,GAAAC,EAAArrF,KAAAqrF,GAAAC,EAAAtrF,KAAAsrF,GAAAC,EAAAvrF,KAAAurF,GACA,OACA,IAAAH,KAAA,MAAAA,GAAA,OAAAA,GAAA,OACA,IAAAC,KAAA,MAAAA,GAAA,OAAAA,GAAA,OACA,IAAAC,KAAA,MAAAA,GAAA,OAAAA,GAAA,OACA,IAAAC,KAAA,MAAAA,GAAA,OAAAA,GAAA,SAcAb,IAAAp6F,UAAA4gC,MAAAw5D,IAAAp6F,UAAA46F,OAYAR,IAAAp6F,UAAA0lF,YAAA,WACAh2E,KAAA+rF,WAEA,IAAAlY,EAAA,IAAA0C,YAAA,IACA4T,EAAA,IAAAE,YAAAxW,GAKA,OAJAsW,EAAA,GAAAnqF,KAAAorF,GACAjB,EAAA,GAAAnqF,KAAAqrF,GACAlB,EAAA,GAAAnqF,KAAAsrF,GACAnB,EAAA,GAAAnqF,KAAAurF,GACA1X,GAcA6W,IAAAp6F,UAAAujF,OAAA6W,IAAAp6F,UAAA0lF,YAYA0U,IAAAp6F,UAAA67F,OAAA,WAEA,IADA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,GAAAf,EAAAxrF,KAAAkxB,QACAxiC,EAAA,EAAmBA,EAAA,IACnB09F,EAAAZ,EAAA98F,KACA29F,EAAAb,EAAA98F,KACA49F,EAAAd,EAAA98F,KACA69F,GAAArC,mBAAAkC,IAAA,GACAlC,mBAAA,IAAAkC,GAAA,EAAAC,IAAA,IACAnC,mBAAA,IAAAmC,GAAA,EAAAC,IAAA,IACApC,mBAAA,GAAAoC,GAMA,OAJAF,EAAAZ,EAAA98F,GACA69F,GAAArC,mBAAAkC,IAAA,GACAlC,mBAAAkC,GAAA,MACA,MAIA,IAAAl+F,QAAA08F,eAEAnB,UACAt7F,OAAAD,iBAmBAF,KAAAw+F,IAAAt+F,QACAy7F,MACMR,8BAAA,WACN,OAAAj7F,SACOW,KAAAX,QAAAM,oBAAAN,QAAAC,aAAAoS,IAAA4oF,gCAAAh7F,OAAAD,QAAAi7F,iCA9pBP,sxCCkBA,IAAMtoE,EAASF,oBAAUQ,GAMJ0nB,cAoBjB,SAAAA,EAAAnI,GAYG,IAAA/4B,MAXCmzB,EAWD4F,EAXC5F,SACAE,EAUD0F,EAVC1F,WACApE,EASD8J,EATC9J,UACA4E,EAQDkF,EARClF,WACAsN,EAODpI,EAPCoI,MACA/N,EAMD2F,EANC3F,SACA0J,EAKD/D,EALC+D,WACAxgB,EAIDyc,EAJCzc,OACAygB,EAGDhE,EAHCgE,MACAE,EAEDlE,EAFCkE,UAED6nD,EAAA/rD,EADCoG,eACD,IAAA2lD,EADW,GACXA,+FAAAhtD,CAAAz/B,KAAA6oC,KACC7oC,OAAA2/B,EAAAkJ,GAAAh6C,KAAAmR,KACqB,KACjBikB,EACAygB,EAC4B,kBAAM/8B,EAAKsd,KAAKiqB,wBAC5CtY,EACAgO,IANJj9B,oDAQK+kF,sBAAuB,EAC5B,IAAMC,EAAS7lD,EAAQvV,KAAK,SAAA74B,GAAC,OAAIA,EAAEk0F,UAAF5iD,IAAAriC,OAVlC,OAYKglF,GACAhlF,EAAKklF,mBAAmBF,GAQ5BhlF,EAAKmhC,MAAQA,EACbnhC,EAAKozB,SAAWA,EAChBpzB,EAAK88B,WAAaA,EAEdhiB,IAAQ0d,kBAGRx4B,EAAK6zB,WAAakJ,EAAMwE,cAAc1P,OAItC7xB,EAAKmlF,aAAepoD,EAAMpK,kBAK1B3yB,EAAK6zB,WAAa/Y,IAAQiO,YAAc,KAAO8K,EAGnD7zB,EAAKmzB,SAAWA,EAUhBnzB,EAAKolF,cAAgB3pD,QAAQC,UAS7B17B,EAAKqlF,YAAchyD,EAMnBrzB,EAAKslF,aAAc,EAKnBtlF,EAAKulF,cAAe,EAOpBvlF,EAAKwlF,eAAgB,EAQrBxlF,EAAKylF,cAAkC,KAAlBzlF,EAAKmzB,cAAkBv6B,EAAYoH,EAAKmzB,SAE7DnzB,EAAK0lF,cAAgB,EAErB1lF,EAAK2lF,wBAA0B,SAAAxpD,GAC3B,IAAMypD,EAAkB5lF,EAAKylF,cAE7BzlF,EAAK6lF,+BAA+B1pD,SAMO,IAA/Bn8B,EAAKm/E,WAAWttE,iBACa,IAAvB7R,EAAKylF,gBACXtpD,EAAQvS,KAAK,SAAAviC,GAAC,OAAIA,EAAE8rC,WAAanzB,EAAKylF,sBAOf,IAApBG,QAAiE,IAAvB5lF,EAAKylF,iBAE1DzlF,EAAKslF,aAAc,IAQvBtlF,EAAKomC,gBAAkBvO,IAAS6H,wBAAwB,YACxD1/B,EAAK8lF,4BAA8B9lF,EAAKwmC,eAAej+C,KAApB85C,IAAAriC,KACnC63B,IAAS2K,YACL/L,IAAU3F,4BACV9wB,EAAK8lF,8BAGbjuD,IAAS2K,YAAY/L,IAAUzF,wBAAyBhxB,EAAK2lF,yBAE7D3lF,EAAK+lF,gCA9HN/lF,wPAhCsCy0E,gDAuKrC,OAAIp8E,KAAKqpE,gBAAkBrpE,KAAK61D,UAGrB71D,KAAKitF,YAGsB,UAA/BjtF,KAAK8mF,WAAWttE,YAA0BxZ,KAAKitF,oEAO1B,IAAAzkF,EAAAxI,KACvBA,KAAK2tF,qCAIV3tF,KAAK28E,YAAY,aAAc,WAC3Bn0E,EAAK6kF,cAAgB/+F,OAAO82D,YAAY9wC,MACxC9L,EAAKolF,+BAGT5tF,KAAK28E,YAAY,eAAgB,WAC7Bn0E,EAAKolF,6BACL5rE,IAAWyK,oBACP0I,IACA,CACI0B,WAAcruB,EAAKukC,UACnB8gD,WAAc,QACdl+F,MAAOrB,OAAO82D,YAAY9wC,MAAQ9L,EAAK6kF,kBAI/CrtF,KAAKqpE,gBAAkBrpE,KAAK4kC,YAAcC,IAAUE,QACpD/kC,KAAK28E,YAAY,cAAe,WACvBn0E,EAAKslF,mBACNtlF,EAAKolF,2FAajB,OAAQ5tF,KAAKqpE,gBAAkBrpE,KAAK4kC,YAAcC,IAAUC,6DAO5D,IAAMn1C,GAASqQ,KAAK8tF,kBAEpB9tF,KAAKilB,KAAKoqB,sBAAqB1/C,GAG/BqyB,IAAW6K,cAAc8J,YAA4B32B,KAAK+sC,UAAWp9C,IACrEqyB,IAAWkJ,QAAQpe,KAAK8L,UAAU,CAC9B3pB,KAAMogD,sBACNzqC,IAAKjV,4DAYkBm0C,GAC3B,IAAMY,EAAQ1kC,KAAK8mF,WACbtoD,EAAI,GAAAnlC,OAAMqrC,EAAMlG,KAAZ,SACNI,EAASkF,EAAQvS,KAAK,SAAAviC,GAAC,OAAIA,EAAEwvC,OAASA,GAAQxvC,EAAEswC,QAAUoF,EAAMpF,QAEpE,IAAKV,GAAiC,YAAvB5+B,KAAKotF,cAA6B,CAI7C,IAAM9tD,GAASoF,EAAMpF,OAAS,IAAI19B,QAAQ,aAAc,IAExDg9B,EAASkF,EAAQvS,KAAK,SAAAviC,GAAC,OAAIA,EAAEwvC,OAASA,GAAQxvC,EAAEswC,QAAUA,IAI1Dt/B,KAAKotF,cADLxuD,EACqBA,EAAO9D,cAEPv6B,qCAWlB0jB,GACP8pE,EAAApuD,EAAAkJ,EAAAv4C,WAAA,aAAA0P,MAAAnR,KAAAmR,KAAiBikB,GAEbA,GAEAjkB,KAAKguF,WAAahuF,KAAKiuF,UACvBptE,EAAO5b,MAAP,qBAAA5L,OAAkC2G,KAAKguF,WAAvC,QAAA30F,OAAwD2G,QAExD6gB,EAAO5b,MAAP,4BAAA5L,OAAyC2G,kDAW9B2sF,GACf3sF,KAAKkuF,cAAgBvB,EACrB3sF,KAAKmuF,gBAAkBnuF,KAAKikB,OAC5BjkB,KAAK08E,WAAW18E,KAAKkuF,cAAcE,YAAYpuF,KAAKmuF,8DAUhDnuF,KAAKkuF,gBACLluF,KAAKkuF,cAAcG,aACnBruF,KAAK08E,WAAW18E,KAAKmuF,8DASTxB,GACZ3sF,KAAKkuF,gBACLluF,KAAKsuF,oBACLtuF,KAAKkuF,mBAAgB3tF,GAErBosF,GACA3sF,KAAK6sF,mBAAmBF,qCAUtBA,GAAQ,IAAA5+E,EAAA/N,KACd,QAAkC,IAAvBA,KAAKkuF,oBAAmD,IAAXvB,EACpD,OAAOvpD,QAAQC,UAGnB,QAAsB,IAAXspD,IAA2BA,EAAOC,UAAU5sF,MACnD,OAAOojC,QAAQE,OAAO,IAAI5sC,MAAM,kCAGpC,IAAkC,IAA9BsJ,KAAK0sF,qBACL,OAAOtpD,QAAQE,OAAO,IAAI5sC,MAAM,mCAKpC,GAAIsJ,KAAK61D,YAAc71D,KAAK+tC,eAGxB,OAFA/tC,KAAKkuF,cAAgBvB,EAEdvpD,QAAQC,UAGnB,IAAM+F,EAAappC,KAAKopC,WAExB,OAAKA,GAMLppC,KAAK0sF,sBAAuB,EAExBjqE,IAAQ6/C,mBACRtiE,KAAKuuF,oBAAoB5B,GACrB3sF,KAAKqpE,gBACLrpE,KAAKu8E,WAAWjtE,QAAQ,SAAAk/E,GAAI,OAAIhvD,IAASc,kBAAkBkuD,EAAMzgF,EAAKkW,UAGnEmlB,EAAWmgC,aAAavpE,KAAMA,MAChCigC,KAAK,WACFlyB,EAAK2+E,sBAAuB,IAE/BlpD,MAAM,SAAAx+B,GAIH,MAHA+I,EAAK2+E,sBAAuB,EAC5B3+E,EAAKwgF,sBACL1tE,EAAO7b,MAAM,sCAAuCA,GAC9CA,KAKXokC,EAAWqlD,YAAYzuF,MACzBigC,KAAK,WAMF,OALAlyB,EAAKwgF,oBAAoB5B,GACrB5+E,EAAKs7D,gBACLt7D,EAAKwuE,WAAWjtE,QAAQ,SAAAk/E,GAAI,OAAIhvD,IAASc,kBAAkBkuD,EAAMzgF,EAAKkW,UAGnEmlB,EAAW9E,SAASv2B,KAE9BkyB,KAAK,WACFlyB,EAAK2+E,sBAAuB,IAE/BlpD,MAAM,SAAAx+B,GAMH,MAHA+I,EAAK2+E,sBAAuB,EAC5B3+E,EAAKwgF,sBACL1tE,EAAO7b,MAAM,sCAAuCA,GAC9CA,MA5CVhF,KAAKuuF,oBAAoB5B,GAElBvpD,QAAQC,0CAoDnB,OAAOrjC,KAAK0uF,gBAAe,oCAS3B,OAAO1uF,KAAK0uF,gBAAe,0CAYhBpmE,GACX,IAAMqmE,EAAW3uF,KAAK4uF,UAAU1+F,KAAK8P,KAAMsoB,GAI3C,OAFAtoB,KAAK+sF,cAAgB/sF,KAAK+sF,cAAc9sD,KAAK0uD,EAAUA,GAEhD3uF,KAAK+sF,gDAWNzkE,GAAO,IAAA/Z,EAAAvO,KACb,GAAIA,KAAK61D,YAAcvtC,EACnB,OAAO8a,QAAQC,UAGnB,GAAIrjC,KAAKw8E,SACL,OAAOp5C,QAAQE,OAAO,IAAInZ,IAAgB4kB,sBAG9C,IAAIlH,EAAUzE,QAAQC,UAGhBwrD,EAAc,kBAAMhuE,EAAO3b,KAAP,QAAA7L,OAAoBkV,EAApB,MAAAlV,OAA6BivB,KAEvD,GAAItoB,KAAK+tC,gBACE/tC,KAAK4kC,YAAcC,IAAUC,UAC5BriB,IAAQqsE,8BAChBD,IACI7uF,KAAK0kC,QACL1kC,KAAK0kC,MAAMqqD,SAAWzmE,QAEvB,GAAIA,EACPuf,EAAU,IAAIzE,QAAQ,SAACC,EAASC,GAC5BurD,IACAtgF,EAAKygF,kCACD,WACQzgF,EAAK2/E,eACL3/E,EAAK+/E,oBAMT//E,EAAK0gF,sBACL1gF,EAAKmxE,aACLnxE,EAAKmuE,WAAW,MAChBr5C,KAEJC,SAEL,CACHurD,IAGA,IAAMK,EAAgB,CAClBr0D,eAAgB76B,KAAKs/E,cACrBx7C,QAAS,CAAEa,KACXmC,QAAS9mC,KAAKkuF,cAAgB,CAAEluF,KAAKkuF,eAAkB,GACvDlzD,WAAYh7B,KAAKmvF,uBAGjB1sE,IAAQ0d,iBACR0H,EACMrI,IAAS4K,kCAAkCh7C,OAAOggG,OAChD,GACAF,EACA,CAAE5kE,YAAa,CAAEiP,MAAOv5B,KAAK8sF,kBAEjC9sF,KAAKw7B,aACL0zD,EAAc1zD,WAAax7B,KAAKw7B,YAGpCqM,EACMrI,IAAS6K,+BAA+B6kD,IAGlDrnD,EAAQ5H,KAAK,SAAAovD,GAET,IAAMz4D,EAAYroB,EAAKw+B,YAAcpI,IAAsBA,IAAkBp2B,EAAKw+B,UAC5EuiD,EACA7sE,IAAQ0d,iBACJkvD,EAAY99D,KACV,SAAArsB,GAAI,OAAIA,EAAKw/B,MAAMlG,OAAS5H,IAC9By4D,EAAY99D,KACV,SAAArsB,GAAI,OAAIA,EAAK0xB,YAAcA,IAEvC,IAAI04D,EAaA,MAAM,IAAInlE,IAAgB6kB,yBAU9B,OAtBIzgC,EAAKmuE,WAAW4S,EAAWrrE,QAC3B1V,EAAKm2B,MAAQ4qD,EAAW5qD,MAIpBn2B,EAAKq2B,YAAc0qD,EAAW1qD,YAC9B/jB,EAAO1b,KAAP,GAAA9L,OACOkV,EADP,0CAEIA,EAAKq2B,UAAW0qD,EAAW1qD,WAC/Br2B,EAAKq2B,UAAY0qD,EAAW1qD,WAMhCr2B,EAAK2/E,eACL3/E,EAAKs+E,mBAAmBt+E,EAAK2/E,eAGjC3/E,EAAKguE,WAAW/2E,IACZ,SAAAgpF,GAAI,OAAIhvD,IAASc,kBAAkBkuD,EAAMjgF,EAAK0V,UAE3C1V,EAAKghF,mCAIpB,OAAO1nD,EACF5H,KAAK,kBAAM1xB,EAAKihF,gBAAgBlnE,KAChC2X,KAAK,kBAAM1xB,EAAK0W,KAAK1F,qBAAoBhR,8DASjB,IAAAI,EAAA3O,KAC7B,OAAKA,KAAKopC,WAcH,IAAIhG,QAAQ,SAACC,EAASC,GACzB30B,EAAKy6B,WAAWqmD,uBAAuB9gF,GAClCsxB,KAAKoD,EAAS,SAAAr+B,GAAK,OAAIs+B,EAAO,IAAI5sC,MAAMsO,QAftCo+B,QAAQC,oEA0BWqsD,EAAiBvhC,GAC1CnuD,KAAKopC,WAKVppC,KAAKopC,WAAWumD,wBAAwB3vF,MAAMigC,KAC1CyvD,EACA,SAAA1qF,GAAK,OAAImpD,EAAc,IAAIz3D,MAAMsO,MANjC0qF,4CAgBQriD,GAAM,IAAA58B,EAAAzQ,KAClB,OAAKA,KAAKopC,YAAeppC,KAAKopC,WAAWugB,KAIlC,IAAIvmB,QAAQ,SAAAC,GACf5yB,EAAK24B,WAAWugB,KACZl5C,EAAKs9B,eACC,eACA,gBAAgBV,EAAMhK,KAPzBD,QAAQC,4CAoBb,IAAA/vB,EAAAtT,KACNA,KAAKuuF,sBAEL,IAAI1mD,EAAUzE,QAAQC,UAkBtB,OAhBIrjC,KAAKopC,aACLvB,EAAU7nC,KAAKopC,WAAWqlD,YAAYzuF,OAGtCA,KAAKikB,SACLjkB,KAAK0/E,aACL1/E,KAAK4vF,UAGTpwD,IAAShb,eAAe4Z,IAAUzF,wBAAyB34B,KAAKstF,yBAE5DttF,KAAKytF,6BACLjuD,IAAShb,eAAe4Z,IAAU3F,4BAC9Bz4B,KAAKytF,6BAGN5lD,EAAQ5H,KAAK,kBAAA8tD,EAAApuD,EAAAkJ,EAAAv4C,WAAA,UAAAgjB,GAAAzkB,KAAAykB,uCAYpB,OAAKtT,KAAKikB,YAGNjkB,KAAKqpE,gBAAmBrpE,KAAKszD,eAIzBtzD,KAAK0kC,QAAU1kC,KAAK0kC,MAAMqqD,iDASvB3lD,GACXppC,KAAKopC,WAAaA,EAMlB,IAAK,IAAI16C,EAAI,EAAGA,EAAIsR,KAAKu8E,WAAW3mF,OAAQlH,IACxCsR,KAAK88E,wBAAwB98E,KAAKu8E,WAAW7tF,sCAUjD,OAAO,wCASP,OAAOsR,KAAKotF,eAAiBptF,KAAK86B,oDAUlC,OAAO96B,KAAKopC,YAAcppC,KAAKopC,WAAWmqB,4DAUrB3tC,EAAKiqE,GAAW,IAAAx7E,EAAArU,KACjC6vF,EAAY,IACZ7vF,KAAKktF,cAAe,GAExB,IAAMlrB,EAAqBp8C,EAAIkqE,qBAE3B9vF,KAAKmtF,eAAwC,cAAvBnrB,IACtBv3D,WAAW,WACF4J,EAAK64E,eACNrsE,EAAO1b,KAAP,GAAA9L,OAAegb,EAAf,gDAAAhb,OACMw2F,IAEN7tE,IAAWuB,UAAU6I,UAAU8I,IAAe,CAAE2B,WAAcxiB,EAAK04B,cAExE,KACH/sC,KAAKmtF,eAAgB,iDAWzB,GAAIntF,KAAKqpE,gBAAkBrpE,KAAK4kC,YAAcC,IAAUE,OAAQ,CAQ5D,IAAIgrD,EAEJ,IACIA,EAAgB/vF,KAAK0kC,MAAMwE,cAC7B,MAAOxwC,IAKT,OAAIq3F,GAAiB,eAAgBA,EAC1BA,EAAc/0D,gBAGO,IAArBh7B,KAAKgtF,YACLhtF,KAAKgtF,YAMT/xD,IAAiBC,2CAkB5Bl7B,KAAKgwF,uBAAwB,EAE7B,IACIxwD,IAAS6F,gBAAgBrlC,KAAKikB,QADlC,QAGIjkB,KAAKgwF,uBAAwB,2CAkB7BhwF,KAAKqpE,gBACErpE,KAAK4kC,YAAcC,IAAUE,QACO,mBAA7B/kC,KAAK0kC,MAAMurD,gBACzBjwF,KAAK0kC,MAAMurD,gBAEXjwF,KAAKgtF,YACChtF,KAAKgtF,cAAgB/xD,IAAiBuxB,YAClCvxB,IAAiBC,KACjBD,IAAiBuxB,uDAgB/B,SAAIxsD,KAAKqpE,iBACDrpE,KAAK61D,YAAa71D,KAAKgwF,uBAAyBhwF,KAAK4kC,YAAcC,IAAUC,YAIhF9kC,KAAKikB,SAaKjkB,KAAKkwF,eAAiBlwF,KAAKmuF,gBAAkBnuF,KAAKikB,QAEnDmiB,YAAY69C,KAAK,SAAAv/C,GAAK,QAC7B,eAAgBA,GAA+B,SAArBA,EAAMlrB,YACzB,UAAWkrB,IAA0B,IAAhBA,EAAMpc,4CASzC,oBAAAjvB,OAAqB2G,KAAK8oC,MAA1B,KAAAzvC,OAAmC2G,KAAK+sC,UAAxC,g7BCn4BR,IAAMlsB,EAASF,oBAAUQ,GAYJgvE,cAWjB,SAAAA,EAAY/mD,EAAYgnD,GAAoB,IAAAzoF,MAAA,mGAAA83B,CAAAz/B,KAAAmwF,KACxCnwF,MAAA2H,MAAAg4B,EAAAwwD,GAAAthG,KAAAmR,sDAKKqwF,oBAAsBD,EAM3BzoF,EAAK2oF,YAAc,KAKnB3oF,EAAK4oF,sBAAuB,EAK5B5oF,EAAK6oF,mBAAqB,GAS1B7oF,EAAK8oF,gBAAkBrtD,QAAQC,UAK/B17B,EAAK+oF,iBAAmB/oF,EAAK+oF,iBAAiBxgG,KAAtB85C,IAAAriC,KAExByhC,EAAW/kB,GAAGunB,cAAmCjkC,EAAKgpF,YAAYzgG,KAAjB85C,IAAAriC,MACjDyhC,EAAW/kB,GAAGunB,gBAAqCjkC,EAAKipF,cAAc1gG,KAAnB85C,IAAAriC,MACnDyhC,EAAW/kB,GAAGunB,qBAA0CjkC,EAAKkpF,kBAAkB3gG,KAAvB85C,IAAAriC,MAxChBA,wPAXF0a,wEA2DnByuE,GAAY,IAAAtoF,EAAAxI,KAC/BA,KAAKwwF,mBAAmBttF,KAAK4tF,GAC7BA,EAAWzsE,GAAGoxB,wBAAuB,YAGVjtC,EAAKgoF,mBAAmBx/D,OAAO,SAAA+/D,GAAQ,OAA4B,IAAxBA,EAASz9B,aAKvD19D,QAAU4S,EAAK+nF,qBAC/B/nF,EAAKwoF,kBACGxoF,EAAK+nF,sBACb/nF,EAAKyoF,gEAUbjxF,KAAKswF,YAAYjsE,GAAGuxB,sBAAqB51C,KAAK0wF,kBAC9C1wF,KAAKswF,YAAY/yE,QACjBvd,KAAKuwF,sBAAuB,4CAQ5BvwF,KAAKswF,YAAY9rE,eAAeoxB,sBAAqB51C,KAAK0wF,kBAC1D1wF,KAAKswF,YAAY9pE,OACjBxmB,KAAKuwF,sBAAuB,2CAaftR,GAAU,IAAA/5D,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IACvB,QAAA8kB,EAAAC,EAAuBtlB,KAAKwwF,mBAA5B/gG,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAgD,CAAAG,EAAA11B,MACnCuhG,gBAAgBjS,IAFN,MAAA5uE,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,sDAWDywC,GAAS,IAAA/vC,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAC/B,QAAA0lB,EAAAC,EAAuBlmB,KAAKwwF,mBAA5B/gG,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAgD,CAAAG,EAAAt2B,MACnCwhG,gBAAgBt7B,IAFE,MAAAxlD,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,wCAavB0e,GAAO,IAAA32B,EAAA/N,KACX0kC,EAAM0sD,sBAGNpxF,KAAKywF,gBAAkBzwF,KAAKywF,gBAAgBxwD,KAAK,kBAAMlyB,EAAKsiF,wBACvDpwD,KAAK,SAAAw9C,GAAY,OACdF,IAAgBvtF,OAAO00C,EAAM46C,cA/IjB,KA+IyD7B,KAExEx9C,KAAK,SAAAoxD,GACFxwE,EAAO5b,MAAM,kCAAmCy/B,EAAM4sD,iBAEtDvjF,EAAKuiF,YAAce,EAInBtjF,EAAKwjF,0BAA0B7sD,EAAMmxB,wDAYnCnxB,GAAO,IAAAn2B,EAAAvO,KACjB0kC,EAAM0sD,sBAENpxF,KAAKywF,gBAAkBzwF,KAAKywF,gBAAgBxwD,KAAK,WAE7C1xB,EAAKgjF,0BAA0B7sD,EAAMmxB,oDAanCnxB,GAAO,IAAA/1B,EAAA3O,KACb0kC,EAAM0sD,sBAENpxF,KAAKywF,gBAAkBzwF,KAAKywF,gBAAgBxwD,KAAK,WAC7Cpf,EAAO5b,MAAM,uCAAwCy/B,EAAM4sD,iBAGvD3iF,EAAK2hF,cACL3hF,EAAKqiF,kBACLriF,EAAK2hF,YAAYkB,UACjB7iF,EAAK2hF,YAAc,MAP4B,IAAAtpE,GAAA,EAAAC,GAAA,EAAAC,OAAA3mB,EAAA,IAWnD,QAAA4mB,EAAAC,EAAuBzY,EAAK6hF,mBAA5B/gG,OAAA4F,cAAA2xB,GAAAG,EAAAC,EAAA5B,QAAAC,MAAAuB,GAAA,EAAgD,CAAAG,EAAAx3B,MACnC0Y,SAZsC,MAAAgI,GAAA4W,GAAA,EAAAC,EAAA7W,EAAA,YAAA2W,GAAA,MAAAI,EAAAvB,QAAAuB,EAAAvB,SAAA,WAAAoB,EAAA,MAAAC,4VChM9CuqE,aAMjB,SAAAA,IAA0B,IAAdtqF,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,gGAAIs+B,CAAAz/B,KAAAyxF,GACtBzxF,KAAK2U,YAAcxN,EAAQuN,WAC3B1U,KAAK0xF,MAAQvqF,EAAQtX,KAErBmQ,KAAK2xF,cAAcxqF,EAAQ82D,WAC3Bj+D,KAAK4xF,UAAUzqF,EAAQ8I,kEASvB,OAAOjQ,KAAKg/C,uCASZ,OAAOh/C,KAAK6xF,kDASZ,OAAO7xF,KAAK8xF,0DASZ,OAAO9xF,KAAK+xF,uDASZ,OAAO/xF,KAAKqrD,gDASZ,OAAOrrD,KAAKgyF,8CASZ,OAAOhyF,KAAK0xF,uCAUP1sF,GACLhF,KAAKg/C,OAASh6C,+CAUGmiC,GACjBnnC,KAAK+xF,mBAAqB5qD,oCASpBl3B,GACNjQ,KAAKqrD,QAAUp7C,uCAONwjD,GACTzzD,KAAK8xF,WAAar+B,wCAQRA,GACVzzD,KAAKgyF,YAAcv+B,mCAoBgC,IAAA9rD,EAAA3H,KAA/CiyF,EAA+CvxD,EAA/CuxD,QAASC,EAAsCxxD,EAAtCwxD,YAAaC,EAAyBzxD,EAAzByxD,YAAatnD,EAAYnK,EAAZmK,SACvC,OAAO,IAAIzH,QAAQ,SAACC,EAASC,GACzB37B,EAAKgN,YAAYrG,OACb3G,EAAKyqF,UAAU,CACX/8D,OAAQ,QACR48D,UACAE,cACAD,cACArnD,aAEJ,SAAAplC,GAKIkC,EAAKiqF,UAAU,WACfjqF,EAAKgqF,cACDU,IAAkB9zB,mBAAmB94D,IAEzC49B,KAEJ,SAAAr+B,GACI2C,EAAK2qF,gBAAgBttF,GAErBs+B,EAAOt+B,uCAcD,IAAAwD,EAAAxI,KAAfmyF,EAAevxD,EAAfuxD,YACH,OAAO,IAAI/uD,QAAQ,SAACC,EAASC,GACzB96B,EAAKmM,YAAYrG,OACb9F,EAAK4pF,UAAU,CACX/8D,OAAQ,OACR88D,gBAEJ9uD,EACAC,0CAqBuD,IAAvDjO,EAAuD+L,EAAvD/L,OAAQ48D,EAA+C7wD,EAA/C6wD,QAASC,EAAsC9wD,EAAtC8wD,YAAaC,EAAyB/wD,EAAzB+wD,YAAatnD,EAAYzJ,EAAZyJ,SACnD,OAAO7vC,cAAI,CACPmY,GAAIg/E,EACJlrF,KAAM,QAETlY,EAAE,QAAS,CACRkX,MAAS,kCACTovB,OAAUA,EACVk9D,SAAYN,EACZO,eAAkBxyF,KAAK0xF,MACvBe,SAAY5nD,EACZ6nD,sBAAyBR,IAE5B/rF,6CAUWwsF,GACZ,IAAM3tF,EAAQ2tF,EAAQ3hF,qBAAqB,SAAS,GAEpDhR,KAAK4yF,SAAS5tF,EAAM6tF,SAAS,GAAG1yF,+CAUtB89D,GACVj+D,KAAK6xF,WAAa5zB,6aCpP1B,IAEM60B,EAAwB,SAKxBC,aAKF,SAAAA,IAAc,IAAAprF,EAAA3H,kGAAAy/B,CAAAz/B,KAAA+yF,GACV/yF,KAAKgzF,cAAgB,IAAI3wE,IACzBriB,KAAKizF,oBAAsB,GAE3B9pD,IAAIgB,YACA/L,IAAU1F,oBACV,SAAAoL,GAAO,OACHn8B,EAAKqrF,cAAc/tE,KACfiuE,sBACApvD,KACZqF,IAAIgB,YACA/L,IAAUxF,sBACV,SAAAkL,GAAO,OACHn8B,EAAKwrF,iBACDxrF,EAAK+/B,uBACL5D,KACZqF,IAAIgB,YACA/L,IAAUtG,oBACV,SAAAqG,GAAkB,OACdx2B,EAAKyrF,0BAA0Bj1D,KAKvCn+B,KAAKqzF,yBAA2B,IAAIjwD,QAAQ,SAAAC,GACnCtD,UAAUuzD,YAMfvzD,UAAUuzD,YAAYC,MAAM,CAAEtkG,KAAM6jG,IAC/B7yD,KAAK,kBAAMoD,GAAQ,IAAO,kBAAMA,GAAQ,KANzCA,GAAQ,8EAkBMlF,GACtBn+B,KAAKizF,sVAALt9D,CAAA,GACO31B,KAAKizF,oBACL90D,4CASMq1D,EAAU1vD,GACvB,IAAMlF,EACAkF,EAAQvS,KACN,SAAAviC,GAAC,MAAe,gBAAXA,EAAEwvC,MAA0BxvC,EAAE8rC,WAAa04D,IAEpD50D,GACA5c,IAAWqH,0BACP8f,IAAIuB,4BAA4B9L,6CAQ3BlzB,GACby9B,IAAIrJ,iBAAiBp0B,mDAUrB,OAAOy9B,IAAIvH,wEAUSoF,GACpB,OAAOmC,IAAI9B,wBAAwBL,qDAUb//B,GAAM,IAAAuB,EAAAxI,KAC5B,OAAO,IAAIojC,QAAQ,SAAAC,GAGXp8B,KAAQuB,EAAKyqF,oBACb5vD,EAAQ76B,EAAKyqF,oBAAoBhsF,IAMrCuB,EAAK6qF,yBAAyBpzD,KAAK,SAAAwzD,GAC/B,GAAKA,EAAL,CAMA,IAAMC,EAAW,GAEjB,OAAQzsF,GACR,KAAK09B,IACD+uD,EAASxwF,KACL68B,UAAUuzD,YAAYC,MAAM,CACxBtkG,KAAM6jG,KAEd,MACJ,KAAKnuD,IACD+uD,EAASxwF,KACL68B,UAAUuzD,YAAYC,MAAM,CACxBtkG,KAjJE,gBAmJV,MACJ,QACIykG,EAASxwF,KACL68B,UAAUuzD,YAAYC,MAAM,CACxBtkG,KAAM6jG,KAEdY,EAASxwF,KACL68B,UAAUuzD,YAAYC,MAAM,CACxBtkG,KA3JE,gBA+Jdm0C,QAAQmK,IAAImmD,GAAUzzD,KAClB,SAAA0zD,GAAO,OAAItwD,EAAQswD,EAAQC,MAAM,SAAAC,GAO7B,MAtKU,aAmKUA,EAAiBvzB,OAC9BuzB,EAAiB5jF,YAI5B,kBAAMozB,GAAQ,UAzCdA,GAAQ,+DAsDpB,OAAQ5gB,IAAQiO,2DAShB,OAAOyY,IAAIzB,oEAWM5M,GACjB,IAAM3B,EAAmBgQ,IAAIsB,oCAU7B,OARItR,GAAoBA,EAAiBvjC,OAAS,GAI9CoK,KAAKmzF,iBACDr4D,EAAUqO,IAAIsB,qCAGftB,IAAIwB,qBAAqB7P,4CAQnBpO,EAAOnoB,GACpBvE,KAAKgzF,cAAc7oD,YAAYzd,EAAOnoB,+CAQtBmoB,EAAOnoB,GACvBvE,KAAKgzF,cAAcxuE,eAAekI,EAAOnoB,qCAOnCmoB,GAAgB,QAAAonE,EAAA7rD,EAAA9mC,UAAAvL,OAANsyC,EAAM,IAAAzyC,MAAAwyC,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,EAAA,GAAAhnC,UAAAgnC,IACtB2rD,EAAA9zF,KAAKgzF,eAAc/tE,KAAnB0O,MAAAmgE,EAAA,CAAwBpnE,GAAxBrzB,OAAkC6uC,4CAalC,OAAOzlB,IAAQkhB,qDAIRlmB,EAAA,MAAIs1E,iBCvPnB,IAAA1yE,EAAA,CACA20B,MAAA,EACA/vC,MAAA,EACAC,KAAA,EACAN,IAAA,EACAO,KAAA,EACAH,MAAA,GAOAgb,EAAA+zE,iBAAAhvF,QAMA,IAAAivF,EAAA,CAAAh0E,EAAA+zE,kBAOA/zE,EAAAO,mBAAA,SAAAC,IACA,IAAAwzE,EAAApwF,QAAA4c,IACAwzE,EAAA9wF,KAAAsd,IASAR,EAAAS,sBAAA,SAAAD,GACA,IAAAyzE,EAAAD,EAAApwF,QAAA4c,IACA,IAAAyzE,GACAD,EAAA/vF,OAAAgwF,EAAA,IAOA,IAAAC,EAAA,GA0DA,SAAAtvF,IACA,IAAAic,EAAA1f,UAAA,GAAA0D,EAAA1D,UAAA,GACA+mC,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACA,KAAAkf,EAAAxb,GAAAgc,EAAAhc,OAQA,IAJA,IAAAsvF,IACAtzE,EAAA1Z,QAAAitF,mBAAAF,EAAAE,oBAlDA,WACA,IAAAD,EAAA,CACA/0C,WAAA,GACAi1C,aAAA,GACA7vF,KAAA,KACA8vF,OAAA,MAGAtvF,EAAA,IAAAtO,MACA0N,EAAAY,EAAAZ,MAAAY,EAAAZ,MAAArB,MAAA,SACA,IAAAqB,KAAAxO,OAAA,EACA,OAAAu+F,EAEA,IAAArlG,EAAA,KAIA,OAHAsV,EAAA,KACAtV,EAAAsV,EAAA,GAAAqP,MAAA,iDAEA3kB,KAAA8G,QAAA,GAEA,IAAAwO,EAAA,GAAAR,QAAA,QAEAuwF,EAAA/0C,WAAAh7C,EAAA,GAAAmR,OAAA,EAAAnR,EAAA,GAAAR,QAAA,MAGAuwF,EAAA/0C,WAAAh7C,EAAA,GAAAmR,OAAA,EAAAnR,EAAA,GAAAR,QAAA,MAEAuwF,IAGAA,EAAA/0C,WAAAtwD,EAAA,GACAqlG,EAAAE,aAAAvlG,EAAA,GACAqlG,EAAA3vF,KAAA1V,EAAA,GACAqlG,EAAAG,OAAAxlG,EAAA,GACAqlG,GAkBAI,GACA3zE,EAAAozE,EAAA36F,OAAAwnB,EAAAD,YACAlyB,EAAA,EAAkBA,EAAAkyB,EAAAhrB,OAAuBlH,IAAA,CACzC,IAAAkB,EAAAgxB,EAAAlyB,GACAC,EAAAiB,EAAAiV,GACA,GAAAlW,GAAA,sBACA,IAAA6lG,EAAA,GAEAA,EAAAtxF,MAAA,IAAAiF,MAAAssF,eAEA5zE,EAAA3Z,IACAstF,EAAAtxF,KAAA,IAAA2d,EAAA3Z,GAAA,KAGAitF,KAAA/0C,WAAAxpD,OAAA,GACA4+F,EAAAtxF,KAAA,IAAAixF,EAAA/0C,WAAA,OAGA,IAAAs1C,EAAAF,EAAAn7F,OAAA6uC,GAEAv5C,EAAAuB,KAAAN,GAAA+jC,MAAA/jC,EAAA8kG,KAiBA,SAAA10E,EAAAnb,EAAAqC,EAAA0Z,EAAAzZ,GACAnH,KAAAkH,KACAlH,KAAAmH,WAAA,GACAnH,KAAA4gB,aACA5gB,KAAA4gB,aACA5gB,KAAA4gB,WAAA,IAEA5gB,KAAA6E,MAAAwb,EAAAxb,GAEA,IADA,IAAA8vF,EAAAvlG,OAAAmW,KAAA8a,GACA3xB,EAAA,EAAkBA,EAAAimG,EAAA/+F,OAAoBlH,IACtCsR,KAAA20F,EAAAjmG,IACAkW,EAAA1U,KAAA,KAAA8P,KAAA20F,EAAAjmG,IA7GAsxB,EAAAU,iBAAA,SAAAvZ,GACA+sF,EAAA/sF,GAAA,IAoHA6Y,EAAA1vB,UAAAywB,SAAA,SAAAlc,GACA7E,KAAA6E,MAAAwb,EAAAxb,IAEA1W,EAAAD,QAAA8xB,EAKAA,EAAAK,OAAA,CACAC,MAAA,QACAzhB,MAAA,QACAC,KAAA,OACA81F,IAAA,MACA71F,KAAA,OACArB,MAAA,wBC3MAvP,EAAAD,QAAA,SAAAC,GAoBA,OAnBAA,EAAA0mG,kBACA1mG,EAAA2mG,UAAA,aACA3mG,EAAA4mG,MAAA,GAEA5mG,EAAA0kG,WAAA1kG,EAAA0kG,SAAA,IACAzjG,OAAAC,eAAAlB,EAAA,UACAmB,YAAA,EACAC,IAAA,WACA,OAAApB,EAAAQ,KAGAS,OAAAC,eAAAlB,EAAA,MACAmB,YAAA,EACAC,IAAA,WACA,OAAApB,EAAAO,KAGAP,EAAA0mG,gBAAA,GAEA1mG,kBCpBA,IAAA6mG,EAAA7mG,EAAAD,QAAA,CACA8jD,EAAA,EACA/iD,KAAA,UACAgmG,IAAA,YAEA9lG,EAAA,EAEAF,KAAA,SACAgmG,IAAA,wCACA3vF,MAAA,sEACA4vF,OAAA,wBAGAzkG,EAAA,EAAOxB,KAAA,SACPP,EAAA,EAAOO,KAAA,gBACPkmG,EAAA,EAAOlmG,KAAA,QACPyJ,EAAA,EAAOzJ,KAAA,UACPuB,EAAA,EAAOvB,KAAA,UACPmmG,EAAA,EAAOnmG,KAAA,cACPO,EAAA,EAAOP,KAAA,YAEPW,EAAA,EACAX,KAAA,SACAgmG,IAAA,eACA3vF,MAAA,iBACA4vF,OAAA,UAEAnmG,EAAA,EACAE,KAAA,aACAgmG,IAAA,mBACA3vF,MAAA,iBACA4vF,OAAA,eAEAl+F,EAAA,EACAkM,KAAA,YACA+xF,IAAA,4BACA3vF,MAAA,iBACA4vF,OAAA,UAEApmG,EAAA,EAGAmmG,IAAA,mCACA3vF,MAAA,sCACA4vF,OAAA,gBAEAn+F,EAAA,CACA,CACAmM,KAAA,MACA+xF,IAAA,0DACA3vF,MAAA,sCACA4vF,OAAA,SAAA/lG,GACA,OAAAA,EAAA,SACA,qBACAA,EAAAkmG,KACA,kBACA,iBAGA,CAEAnyF,KAAA,OACA+xF,IAAA,wBACA3vF,MAAA,qBACA4vF,OAAA,cAEA,CACAjmG,KAAA,UACAgmG,IAAA,gBACAC,OAAA,cAEA,CACAjmG,KAAA,OACAgmG,IAAA,sCACA3vF,MAAA,qCACA4vF,OAAA,SAAA/lG,GACA,aAAAA,EAAAunE,QACA,qBACA,YAGA,CACAxzD,KAAA,eACA+xF,IAAA,kCACA3vF,MAAA,oBACA4vF,OAAA,yBAEA,CACAhyF,KAAA,SACA+xF,IAAA,6CACA3vF,MAAA,6BACA4vF,OAAA,SAAA/lG,GACA,aAAAA,EAAA0jD,QACA,mBACA,kBAGA,CAEA3vC,KAAA,MACA+xF,IAAA,6CACA3vF,MAAA,qCACA4vF,OAAA,SAAA/lG,GACA,mBAAAA,EAAA8gC,UAAA,mBAAA9gC,EAAAukC,OAAA,YAGA,CACAxwB,KAAA,SACA+xF,IAAA,0CACA3vF,MAAA,wCACA4vF,OAAA,SAAA/lG,GACA,aAAAA,EAAAmmG,cACA,qBACA,oBAGA,CACArmG,KAAA,QACAgmG,IAAA,eACAC,OAAA,YAEA,CACAjmG,KAAA,MACAgmG,IAAA,gBACAC,OAAA,UAEA,CACAjmG,KAAA,OACAgmG,IAAA,aACAC,OAAA,WAEA,CACAjmG,KAAA,QACAgmG,IAAA,eACAC,OAAA,YAEA,CACAjmG,KAAA,WACAgmG,IAAA,kBACAC,OAAA,eAEA,CACAjmG,KAAA,YACAgmG,IAAA,0CAEA,CACAhmG,KAAA,UACAgmG,IAAA,eAEA,CACAhmG,KAAA,WACAgmG,IAAA,mBACAC,OAAA,gBAEA,CACAjmG,KAAA,SACAgmG,IAAA,iBACAC,OAAA,cAEA,CACAjmG,KAAA,cACAgmG,IAAA,2BACA3vF,MAAA,gBACA4vF,OAAA,qBAEA,CAKAhyF,KAAA,aACA+xF,IAAA,+KACA3vF,MAAA,wIACA4vF,OAAA,SAAA/lG,GACA,IAAAsH,EAAA,qCAaA,OAXAA,GAAA,MAAAtH,EAAAomG,MAAA,4BAGA9+F,GAAA,MAAAtH,EAAAkgC,QAAA,mBAEA,MAAAlgC,EAAAigC,aACA34B,GAAA,kBAGAA,GAAA,MAAAtH,EAAA,oCACAsH,GAAA,MAAAtH,EAAA,0CAIA,CACAF,KAAA,kBACAgmG,IAAA,wBAEA,CACAhmG,KAAA,mBACAgmG,IAAA,0BACAC,OAAA,wBAEA,CACAjmG,KAAA,aACAgmG,IAAA,qBACAC,OAAA,kBAEA,CACAhyF,KAAA,QACA+xF,IAAA,iCACA3vF,MAAA,2BACA4vF,OAAA,SAAA/lG,GACA,IAAAsH,EAAA,UAOA,OANA,MAAAtH,EAAAmO,YACA7G,GAAA,MACA,MAAAtH,EAAAQ,QACA8G,GAAA,QAGAA,IAGA,CAEAyM,KAAA,aAEA+xF,IAAA,mEACA3vF,MAAA,sBACA4vF,OAAA,oBAEA,CACAjmG,KAAA,eACAgmG,IAAA,gCACA3vF,MAAA,qBACA4vF,OAAA,wBAEA,CACAhyF,KAAA,SACA+xF,IAAA,oBACA3vF,MAAA,gBACA4vF,OAAA,eAEA,CACAjmG,KAAA,UACAgmG,IAAA,eAEA,CACAhmG,KAAA,YACAgmG,IAAA,iBAEA,CACAhmG,KAAA,UACAgmG,IAAA,uCACA3vF,MAAA,yCACA4vF,OAAA,SAAA/lG,GACA,aAAAA,EAAA+sE,eACA,mBACA,kBAGA,CACAjtE,KAAA,cACAgmG,IAAA,0BACAC,OAAA,oBAEA,CACAhyF,KAAA,OACA+xF,IAAA,sCACA3vF,MAAA,4BACA4vF,OAAA,SAAA/lG,GACA,OAAAA,EAAA,oCAGA,CAGA+T,KAAA,aACA+xF,IAAA,IAAA3kB,OAEA,wKAMAhrE,MAAA,uCACA4vF,OAAA,SAAA/lG,GACA,4BAAAA,EAAAqmG,KAAA,eAGA,CAEAvmG,KAAA,YACAgmG,IAAA,IAAA3kB,OAEA,2FAQAhrE,MAAA,gCACA4vF,OAAA,SAAA/lG,GACA,yBAAAA,EAAAqmG,KAAA,eAGA,CAIAvmG,KAAA,eACAgmG,IAAA,kCACA3vF,MAAA,UACA4vF,OAAA,iBAEA,CAGAjmG,KAAA,YACAgmG,IAAA,8BACAC,OAAA,gBAEA,CACAhyF,KAAA,UACAoC,MAAA,aAMAlW,OAAAmW,KAAAyvF,GAAA1lF,QAAA,SAAArf,GACA+kG,EAAA/kG,GACAqf,QAAA,SAAAla,GACAA,EAAA6/F,MACA7/F,EAAA6/F,IAAA,QAEA7/F,EAAA8/F,SACA9/F,EAAA8/F,OAAA,2BC9UA,IAAMO,EAAkBv0E,EAAQ,KAK1Bw0E,EAAa,aACbC,EAAY,YAOZC,EAAgB,SAASlxD,GAE3B1kC,KAAK0kC,MAAQA,EAGb1kC,KAAK61F,SAAW,KAIhB71F,KAAKhH,KAAO,KAIZgH,KAAK/Q,KAAO,KAGZ+Q,KAAK81F,UAAY,MAQrB,SAASC,EAAcC,GACnB,QAA+Bz1F,IAA3By1F,EAAcH,SACd,MAAM,IAAIn/F,MAAM,yEAGpBs/F,EAAcH,SAASt4E,QACvBy4E,EAAcF,UAAY,IAAI3tF,KAQlC,SAAS8tF,EAAaD,GAClB,QAA+Bz1F,IAA3By1F,EAAcH,SACd,MAAM,IAAIn/F,MAAM,wEAGpBs/F,EAAcH,SAASrvE,OAO3B,SAAS0vE,IACL,GAAIC,cAAcC,gBAAgBV,GAC9B,OAAOA,EACJ,GAAIS,cAAcC,gBAAgBT,GACrC,OAAOA,EAEX,MAAM,IAAIj/F,MACN,6DASR,SAAS2/F,EAAcC,GAGnBt2F,KAAKu2F,UAAY,GAGjBv2F,KAAKw2F,SAAWN,IAGhBl2F,KAAKy2F,aAAc,EAGnBz2F,KAAKs2F,gBAAkBA,EAM3BD,EAAcH,yBAA2BA,EAOzCG,EAAc/lG,UAAUg0C,SAAW,SAASI,GACxC,GAAIA,EAAMqJ,eAAgB,CAEtB,IAAMioD,EAAgBh2F,KAAK02F,yBAAyBhyD,GAIpD1kC,KAAKu2F,UAAUrzF,KAAK8yF,GAGpBh2F,KAAK22F,cAID32F,KAAKy2F,aACLV,EAAcC,KAU1BK,EAAc/lG,UAAUomG,yBAA2B,SAAShyD,GACxD,IAAMsxD,EAAgB,IAAIJ,EAAclxD,GAGlCkyD,EAAiBZ,EAActxD,MAAMsiD,oBACrC/iE,EA2KV,WACI,GAA2B,oBAAhBqd,YACP,OAAO,IAAIA,YAEf,MAAM,IAAI5qC,MAAM,qCA/KDmgG,GAmBf,OAjBAD,EAAe54D,iBAAiB1uB,QAAQ,SAAA1f,GAAC,OAAIq0B,EAAOqgB,SAAS10C,KAG7DomG,EAAcH,SAAW,IAAIM,cAAclyE,EACvC,CAAE6yE,SAAU92F,KAAKw2F,WAIrBR,EAAch9F,KAAO,GAGrBg9F,EAAcH,SAASkB,gBAAkB,SAASC,GAC1CA,EAAUh+F,KAAKgsB,KAAO,GACtBgxE,EAAch9F,KAAKkK,KAAK8zF,EAAUh+F,OAInCg9F,GAaXK,EAAc/lG,UAAUm+F,YAAc,SAAS/pD,GAC3C,IAAIA,EAAM2kC,eAAV,CAIA,IACI36E,EADEwiC,EAAQlxB,KAAKu2F,UAGnB,IAAK7nG,EAAI,EAAGA,EAAIwiC,EAAMt7B,OAAQlH,IAC1B,GAAIwiC,EAAMxiC,GAAGg2C,MAAMqvB,qBAAuBrvB,EAAMqvB,mBAAoB,CAChE,IAAMkjC,EAAmB/lE,EAAMxiC,GAE3BsR,KAAKy2F,YACLR,EAAagB,GAGb/lE,EAAMjtB,OAAOvV,EAAG,GAM5BsR,KAAK22F,gBAQTN,EAAc/lG,UAAUqmG,YAAc,WAClC,IAAMvtD,EAAappC,KAAKs2F,gBAExBt2F,KAAKu2F,UAAUjnF,QAAQ,SAAA0mF,GACnB,GAAIA,EAActxD,MAAM5a,UACpBksE,EAAc/mG,KAAO,sBAClB,CACH,IAAMiY,EAAK8uF,EAActxD,MAAMqvB,mBAEzB80B,EADcz/C,EAAWkrB,mBAAmBptD,GACtBgwF,iBAEZ,cAAZrO,IACAmN,EAAc/mG,KAAO45F,OASrCwN,EAAc/lG,UAAUitB,MAAQ,WAC5B,GAAIvd,KAAKy2F,YACL,MAAM,IAAI//F,MAAM,sCAKpBsJ,KAAKy2F,aAAc,EAGnBz2F,KAAKu2F,UAAUjnF,QAAQ,SAAA0mF,GAAa,OAAID,EAAcC,KAGtDjxF,QAAQH,IAAR,2DAAAvL,OAEQ2G,KAAKu2F,UAAU3gG,OAFvB,wBAQJygG,EAAc/lG,UAAUk2B,KAAO,WAE3BxmB,KAAKy2F,aAAc,EAGnBz2F,KAAKu2F,UAAUjnF,QAAQ,SAAA0mF,GAAa,OAAIC,EAAaD,KACrDjxF,QAAQH,IAAI,sBAMhByxF,EAAc/lG,UAAU6mG,SAAW,WAAW,IAAAxvF,EAAA3H,KAC1CA,KAAKu2F,UAAUjnF,QAAQ,SAAA0mF,GACnB,IAAM9/B,EAAO,IAAIkhC,KAAKpB,EAAch9F,KAAM,CAAEiO,KAAMU,EAAK6uF,WACjDrvD,EAAMlG,IAAIC,gBAAgBg1B,GAC1Bn/D,EAAI2D,SAASmG,cAAc,KAEjCnG,SAASuC,KAAK2D,YAAY7J,GAC1BA,EAAEyG,MAAQ,gBACVzG,EAAEsgG,KAAOlwD,EACTpwC,EAAEogG,SAAF,QAAA99F,OAAqBsO,EAAK6uF,SAASzzF,MAAM,KAAK,IAC9ChM,EAAEugG,QACFhpG,OAAO2yC,IAAImG,gBAAgBD,MASnCkvD,EAAc/lG,UAAUinG,oBAAsB,WAAW,IAAA/uF,EAAAxI,KACrD,GAAIA,KAAKy2F,YACL,MAAM,IAAI//F,MACN,kEAIRsJ,KAAK22F,cAEL,IAAMzlE,EAAQ,GAUd,OARAlxB,KAAKu2F,UAAUjnF,QACX,SAAAumF,GAAQ,OACJ3kE,EAAMhuB,KACF,IAAIuyF,EACA,IAAI2B,KAAKvB,EAAS78F,KAAM,CAAEiO,KAAMuB,EAAKguF,WACrCX,EAAS5mG,KACT4mG,EAASC,cAElB5kE,GAOXmlE,EAAc/lG,UAAUknG,YAAc,WAClC,OAAOx3F,KAAKw2F,UAkBhBroG,EAAOD,QAAUmoG,iCC7TjB,SAAAl1E,GAAA3yB,EAAAQ,EAAAyuB,EAAA,sBAAAg6E,IAAA,IAAA71C,EAAApzD,EAAA,GAAAkpG,EAAAlpG,EAAA,IAAAmpG,EAAAnpG,EAAA,IAAAopG,EAAAppG,EAAA,GAOMqyB,EAASF,oBAAUQ,GAInB02E,EAAoB,IAQX,SAASJ,IAEpB,OAAO,IAAIr0D,QAAQ,SAAAC,GACf8F,IAAIrJ,iBAAiB,SAAAgE,GACjB,IAAMg0D,EAAeh0D,EAAQ9S,OAAO,SAAA4N,GAAM,MAAoB,eAAhBA,EAAOJ,OAC/Cu5D,EAAqB,GAFC7yE,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAK5B,QAAA8kB,EAAAC,EAAwBwyE,EAAxBroG,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAsC,KAA3B8yE,EAA2B3yE,EAAA11B,MAC5BsoG,EAAgB9uD,IAAIkB,+BAA+B,CAAEvG,QAAS,CAAE,SAClE9H,YAAag8D,EAAUl9D,WAAYmF,KAAK,SAAA6M,GAIxC,IAAMpI,EAAQoI,EAAO,GACf8pD,EAAiBlyD,EAAMsiD,oBAO7B,OALAhlE,IAAWgC,gBAAgB4yE,EAAgBlyD,EAAMsJ,cAAc99C,KAAKw0C,IACpEA,EAAMnC,iBAAiByxB,sBAAsC,WACzDhyC,IAAWuE,eAAeqwE,KAGvBlyD,IAGXqzD,EAAmB70F,KAAK+0F,IAtBA,MAAA5nF,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAyB5Bge,QAAQ80D,WAAWH,GAAoB93D,KAAK,SAAAk4D,GACxC,IAAMC,EAAqBD,EAAannE,OAAO,SAAAxgC,GAAC,MAAiB,cAAbA,EAAEyf,SAChDooF,EAAmBF,EAAannE,OAAO,SAAAxgC,GAAC,MAAiB,aAAbA,EAAEyf,SAG9CkpB,EAAmBi/D,EAAmB5yF,IAAI,SAAAhV,GAAC,OAAIA,EAAEb,QACjD2oG,EAAgBD,EAAiB7yF,IAAI,SAAAhV,GAAC,OAAIA,EAAEb,QANMm2B,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAQxD,QAAA0lB,EAAAC,EAAqBoyE,EAArB7oG,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAoC,KAAzBpW,EAAyBuW,EAAAt2B,MAChCkxB,EAAO7b,MAAM,8CAA+C0K,IATR,MAAAW,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAAA,IAAAgB,GAAA,EAAAC,GAAA,EAAAC,OAAA3mB,EAAA,IAaxD,IAbwD,IAaxD4mB,EAbwDgpB,EAAA,eAa7CvR,EAb6CzX,EAAAx3B,MAcpDivC,EAAOva,GAAG2vC,4BAA4C,SAAAnmB,GAK9CA,EAAa,OACb0qD,EAAkBp/D,GAClBkK,EAAQ,CAAEvI,SAAU8D,EAAO9D,SACvB09D,YAAa55D,EAAO8F,MAAMpF,YAT1ClY,EAAqB+R,EAArB1pC,OAAA4F,cAAA2xB,GAAAG,EAAAC,EAAA5B,QAAAC,MAAAuB,GAAA,EAAuCmpB,IAbiB,MAAA9/B,GAAA4W,GAAA,EAAAC,EAAA7W,EAAA,YAAA2W,GAAA,MAAAI,EAAAvB,QAAAuB,EAAAvB,SAAA,WAAAoB,EAAA,MAAAC,GA4BxDzc,WAAW,WACP8tF,EAAkBp/D,GAClBkK,EAAQ,CACJvI,SAAU,GACV09D,YAAa,MAElBX,SAcnB,SAASU,EAAkBj6D,GAAY,IAAAhX,GAAA,EAAAC,GAAA,EAAAC,OAAAjnB,EAAA,IACnC,QAAAknB,EAAAC,EAAqB4W,EAArB7uC,OAAA4F,cAAAiyB,GAAAG,EAAAC,EAAAlC,QAAAC,MAAA6B,GAAA,EAAiC,CAAAG,EAAA93B,MACtB+vF,cAFwB,MAAArvE,GAAAkX,GAAA,EAAAC,EAAAnX,EAAA,YAAAiX,GAAA,MAAAI,EAAA7B,QAAA6B,EAAA7B,SAAA,WAAA0B,EAAA,MAAAC,yWCxFvC,IAAM3G,EAASF,oBAAUQ,GAMJ8pB,aAWjB,SAAAA,EAAYvnB,EAAgBsnB,EAAOwK,GAC/B,+FADwC/V,CAAAz/B,KAAAirC,IACnCvnB,IAAmBsnB,EACpB,MAAM,IAAI90C,UACN,kDACD,GAAIwtB,GAAkBsnB,EACzB,MAAM,IAAI90C,UACN,qDA4BR,GAzBIwtB,EACA7C,EAAO5b,MAAM,qCAEb4b,EAAO5b,MAAP,6BAAA5L,OAA0C2xC,EAA1C,MAKJhrC,KAAKupC,SAAW,KAGhBvpC,KAAKgzF,cAAgBx9C,EAIrBx1C,KAAK0xF,MAAQ,KAGb1xF,KAAKy4F,oBAAqB,EAG1Bz4F,KAAK04F,mBAAoB,EAIrBh1E,EAAgB,CAChB,IAAMi1E,EACAj1E,EAAek1E,kBACb,mBAAoB,CAChBlwF,SAAU,uCAItB1I,KAAK64F,eAAeF,GACpB34F,KAAK0xF,MAAQ,mBAGN1mD,IACPhrC,KAAKy4F,oBAAqB,EAC1Bz4F,KAAK84F,OAAS9tD,EACdhrC,KAAK+4F,kFAWT,IAAMC,EAAK,IAAIh9E,UAAUhc,KAAK84F,QAG9B94F,KAAK64F,eAAeG,GACpBh5F,KAAK0xF,MAAQ,8DAQS,IAAA/pF,EAAA3H,KAClBi5F,EAAW,EAWfj5F,KAAKk5F,cAAgBzuF,WATN,SAAT0uF,IACExxF,EAAKyxF,WAGTzxF,EAAKoxF,eAAepxF,EAAKmxF,QACzBG,EAAW3tF,KAAK2P,IAAe,EAAXg+E,EAAc,IAClCtxF,EAAKuxF,cAAgBzuF,WAAW0uF,EAAmB,IAAXF,KAGO,IAAXA,oDASpCj5F,KAAKk5F,gBACLvrF,aAAa3N,KAAKk5F,eAClBl5F,KAAKk5F,mBAAgB34F,qDAUH84F,GAAY,IAAA7wF,EAAAxI,KAClC,GAAKA,KAAKy4F,mBAAV,CADkC,IAI1Bt7E,EAAiBk8E,EAAjBl8E,KAAMzN,EAAW2pF,EAAX3pF,OAEdsS,IAAW6K,cAAc0K,YAA+Bpa,EAAMzN,IAC9D1P,KAAKy4F,oBAAqB,EAC1Bz4F,KAAKgzF,cAAc/9C,KAAK7W,IAAUzG,kBAAmB,WACjDnvB,EAAK8wF,yBACL9wF,EAAKiwF,oBAAqB,IAE9Bz4F,KAAKu5F,2DAkBL,GAHAv5F,KAAK04F,mBAAoB,EACzB14F,KAAKs5F,yBACLt5F,KAAKy4F,oBAAqB,EACtBz4F,KAAKupC,SAAU,CACf,IACIvpC,KAAKupC,SAAStsB,QAChB,MAAOjY,IAEThF,KAAKupC,SAAW,uCAUpB,OAAOvpC,KAAKupC,WAA0C,SAA7BvpC,KAAKupC,SAAS/vB,YAChCxZ,KAAKupC,SAAS/vB,aAAewC,UAAUw9E,0CAYtCrmF,EAAI4f,GACZ/yB,KAAKyN,MAAM,CACPgsF,aAAc,kBACdC,WAAY3mE,EACZ5f,mDAQYxjB,GAChB,IAAMgqG,EAAa,CACfF,aAAc,oBACdG,MAAOjqG,GAGXqQ,KAAKyN,MAAMksF,GACX94E,EAAOjc,IAAP,yBAAAvL,OAAoC1J,sDAUd0jE,GACtBxyC,EAAOjc,IACH,kEACAyuD,GAEJrzD,KAAKyN,MAAM,CACPgsF,aAAc,6BACdI,eAAgBxmC,GAAc,4DAYTymC,GACzBj5E,EAAOjc,IACH,oEACAk1F,GAEJ95F,KAAKyN,MAAM,CACPgsF,aAAc,gCACdM,kBAAmBD,+DASQE,GAC/Bn5E,EAAOjc,IAAI,yEAAAvL,OACkB2gG,EADlB,YAEXh6F,KAAKyN,MAAM,CACPgsF,aAAc,0BACd5tD,eAAgBmuD,2CAOTC,GAAS,IAAAlsF,EAAA/N,KACdw1C,EAAUx1C,KAAKgzF,cAErBiH,EAAQh+E,OAAS,WACb4E,EAAO3b,KAAP,GAAA7L,OAAe0U,EAAK2jF,MAApB,oBAQAl8C,EAAQvwB,KAAKmZ,IAAUzG,oBAG3BsiE,EAAQ99E,QAAU,SAAAuQ,GAGK,cAAf3e,EAAK2jF,OACL7wE,EAAO7b,MAAP,kBAAA3L,OAA+BqzB,EAAMjoB,WAI7Cw1F,EAAQ19E,UAAY,SAAAmkB,GAAc,IAE1BtrC,EAFe4D,EAAW0nC,EAAX1nC,KAInB,IACI5D,EAAM0X,KAAK4L,MAAM1f,GACnB,MAAOgM,GAML,OALA+3B,IAAqBC,iBAAiBh4B,QACtC6b,EAAO7b,MACH,4CACAhM,EAAMgM,GAKd,IAAMy0F,EAAerkG,EAAIqkG,aAEzB,OAAQA,GACR,IAAK,qCAED,IAAMS,EAA0B9kG,EAAI8kG,wBAEpCr5E,EAAO3b,KACH,uCACAg1F,GACJ1kD,EAAQvwB,KACJmZ,IAAUjgB,yBACV+7E,GACJ,MAEJ,IAAK,wCACD,IAAMC,EAAW/kG,EAAI+kG,SACf7mC,EAA0B,SAAfl+D,EAAI6nF,OAErBp8D,EAAO3b,KAAP,uCAAA7L,OAC2C8gG,EAD3C,cAAA9gG,OAEQi6D,IACR9d,EAAQvwB,KAAKmZ,IAAUxG,6BACnBuiE,EAAU7mC,GAEd,MAEJ,IAAK,kBACD9d,EAAQvwB,KACJmZ,IAAU9f,0BAA2BlpB,EAAIY,KACzCZ,EAAIskG,YAER,MAEJ,IAAK,4BAED,IAAMjuD,EAAiBr2C,EAAIq2C,eAE3B5qB,EAAO3b,KAAK,6BACRumC,EAAgBr2C,GACpBogD,EAAQvwB,KAAKmZ,IAAUvG,uBACnB4T,EAAgBr2C,GAEpB,MAEJ,IAAK,sBACD,IAAM0tE,EAAa1tE,EAAI0tE,WAEvBjiD,EAAO3b,KAAP,mCAAA7L,OAA+CypE,IAC/CttB,EAAQvwB,KAAKmZ,IAAUrG,oBAAqB+qC,GAC5C,MAEJ,QACIjiD,EAAO5b,MAAM,mCAAoC7P,GAMjDogD,EAAQvwB,KAAR,mBAAA5rB,OAAgCogG,GAAgBrkG,KAKxD6kG,EAAQ59E,QAAU,SAAAqQ,GACd7L,EAAO3b,KAAP,qBAAA7L,OAAiC0U,EAAK2qF,kBAAoB,SAAW,WAElD,cAAf3qF,EAAK2jF,QACA3jF,EAAK2qF,oBACN73E,EAAO7b,MAAP,mBAAA3L,OAAgCqzB,EAAMvP,KAAtC,KAAA9jB,OAA8CqzB,EAAMhd,SACpD3B,EAAKqsF,0BAA0B1tE,KAKvC3e,EAAKw7B,SAAW,MAIpBvpC,KAAKupC,SAAW0wD,gCAUdN,GACF,IAAMM,EAAUj6F,KAAKupC,SAErB,IAAKvpC,KAAKo5F,SAEN,MADAv4E,EAAO7b,MAAM,2CACP,IAAItO,MAAM,qBAGpBujG,EAAQ1sF,KAAKT,KAAK8L,UAAU+gF,iCAzP5B,OAAO35F,KAAK0xF,8pBC5IpB,IAGM7wE,EAASF,oBAAUQ,GA4CnBk5E,aAIF,SAAAA,iGAAc56D,CAAAz/B,KAAAq6F,GACVr6F,KAAKqI,+DAeLrI,KAAKw8E,UAAW,EAMhBx8E,KAAKs6F,kBAAoB,IAAI92E,IAO7BxjB,KAAKo2E,MAAQ,GAMbp2E,KAAKu6F,oBAAsB,GAO3Bv6F,KAAKw6F,eAAiB,GAEtBx6F,KAAKosC,uBAAuB,CACxBquD,WAAc16D,UAAUmY,UACxBwiD,aAAgBj4E,IAAQ29B,8CAQ5Bv/B,EAAO1b,KAAK,mCAERnF,KAAKs6F,mBAAqBt6F,KAAKs6F,kBAAkBt1E,KAAO,GACxDhlB,KAAKs6F,kBAAkBhrF,QAAQ,SAAA/K,GACI,mBAApBA,EAAQwgB,SACfxgB,EAAQwgB,YAKpB/kB,KAAK26F,qBAAqB,IAC1B36F,KAAKw8E,UAAW,+CAQCrzE,GAAU,IAAAxB,EAAA3H,KAC3B,IAAIA,KAAKw8E,SAAT,CAIAx8E,KAAKs6F,kBAAoB,IAAI92E,IAAIra,GAEjCnJ,KAAK46F,qBAGL,IAAMxkB,EAAQp2E,KAAKo2E,MAEnBp2E,KAAKo2E,MAAQ,KACTA,GACAA,EAAM9mE,QAAQ,SAAAod,GAAK,OAAI/kB,EAAKkzF,WAAWnuE,mDAS1B,IAAAlkB,EAAAxI,KACjBA,KAAKs6F,kBAAkBhrF,QAAQ,SAAA/K,GAC3B,IACIA,EAAQu2F,kBAAkBtyF,EAAK+xF,qBACjC,MAAOv1F,GACL6b,EAAO1b,KAAK,0EAAA9L,OACiB2L,sDAelB4nB,GACnB5sB,KAAKu6F,sVAAL5kE,CAAA,GACO31B,KAAKu6F,oBACL3tE,GAGP5sB,KAAK46F,+DAQS3rG,GACd+Q,KAAKw6F,eAAiBvrG,EACtB+Q,KAAKosC,uBAAuB,CAAE2uD,gBAAmB9rG,sCAgB3C69B,GAA4B,IAAjBF,EAAiBzrB,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAC9B,IAAInB,KAAKw8E,SAAT,CAIA,IAAI9vD,EAAQ,KAEa,iBAAdI,EACPJ,EAAQ,CACJzlB,KAAM6sB,IACNuB,OAAQvI,EACRwI,cAAexI,EACfiJ,OAAQjJ,EACRxwB,WAAYswB,GAEY,WAArBz3B,EAAO23B,KACdJ,EAAQI,GAGP9sB,KAAKg7F,sBAAsBtuE,GAOhC1sB,KAAK66F,WAAWnuE,GANZ7L,EAAO7b,MAAP,mCAAA3L,OACuCyT,KAAK8L,UAAU8T,oDAoBxCA,GAClB,IAAKA,EACD,OAAO,EAGNA,EAAMzlB,OACPylB,EAAMzlB,KAAO6sB,KAGjB,IAAM7sB,EAAOylB,EAAMzlB,KAEnB,OAAIA,IAAS6sB,KAAoB7sB,IAAS8sB,KACnC9sB,IAASgtB,KAAWhtB,IAAS+sB,KAChCnT,EAAO7b,MAAP,uBAAA3L,OAAoC4N,KAE7B,GAGPA,IAAS8sB,IACFgK,QAAQrR,EAAMz9B,OAKzBy9B,EAAM2I,OAAS3I,EAAM2I,QAAU3I,EAAMz9B,MAAQy9B,EAAM4I,cACnD5I,EAAM4I,cAAgB5I,EAAM4I,eAAiB5I,EAAMz9B,MAAQy9B,EAAM2I,OACjE3I,EAAMqJ,OAASrJ,EAAMqJ,QAAUrJ,EAAMz9B,MAAQy9B,EAAM2I,QAC5C3I,EAAM4I,cAER5I,EAAM2I,QAAW3I,EAAM4I,eAAkB5I,EAAMqJ,UAQhD9uB,IAAS+sB,MACTtH,EAAMuuE,WAAavuE,EAAMuuE,YAAc,sBACvCvuE,EAAMwuE,cAAgBxuE,EAAMwuE,eAAiB,aACjB,eAAxBxuE,EAAMwuE,eAAmCxuE,EAAMzC,cAC/CyC,EAAMzC,YAAcjqB,KAAKw6F,gBAIxB9tE,EAAMuuE,YAAevuE,EAAMyuE,UACxBzuE,EAAMwuE,eAAkBxuE,EAAMzC,gBAClCpJ,EAAO7b,MACH,gFAGG,IArBX6b,EAAO7b,MACH,6DAEG,6CAgCE0nB,GACb,QAAI1sB,KAAKo2E,QACLp2E,KAAKo2E,MAAMlzE,KAAKwpB,GAIZ1sB,KAAKo2E,MAAMxgF,OAxTJ,KAyTPoK,KAAKo2E,MAAMnyE,OAAO,EAAG,IAGlB,sCAYJyoB,GACH1sB,KAAKo7F,iBAAiB1uE,IAGtB1sB,KAAKs6F,kBAAkBhrF,QAAQ,SAAA/K,GAC3B,IACIA,EAAQ6nB,UAAUM,GACpB,MAAOh0B,GACLmoB,EAAO1b,KAAP,kCAAA9L,OAA8CX,4CAOnD+kB,EAAA,MAAI48E,+7BC7VnB,IAAMx5E,EAASF,oBAAUQ,GAWJpB,cAIjB,SAAAA,IAAc,IAAApY,EAAA,mGAAA83B,CAAAz/B,KAAA+f,GACVpY,EAAA+3B,EAAA1/B,KAAA2/B,EAAA5f,GAAAlxB,KAAAmR,OACA6gB,EAAO3b,KAAP,sBAAA7L,OAC0BsO,EAAKy4C,UAD/B,WAAA/mD,OACkDsO,EAAKsoD,eAH7CtoD,wPAJ+BkxC,oEAkBzC,OAAO74C,KAAK6gC,wDASZ,OAAQ7gC,KAAKsiE,4DAgBb,OAAOtiE,KAAKy8B,YACLz8B,KAAKi9B,cACLj9B,KAAKktD,UACLltD,KAAKutD,uDAUZ,OAAOvtD,KAAKq7F,aACJr7F,KAAKs7F,kBAAkB,gDAU/B,OAAOt7F,KAAKq7F,aACJr7F,KAAKs7F,kBAAkB,8CAS/B,OAAOt7F,KAAK6gC,mBACL7gC,KAAK0wB,aACL1wB,KAAK0iB,iBACL1iB,KAAKu7F,kFAUZ,OAAQv7F,KAAK0wB,aAAe1wB,KAAKs7F,kBAAkB,OAAUt7F,KAAKq7F,wEAUlE,OAAOr7F,KAAK6gC,mBAAqB7gC,KAAK0iB,iBAC/B1iB,KAAK06B,wEAWZ,OAAQ16B,KAAK0wB,cAAgB1wB,KAAKu7F,yEAQlC,OAAOx7D,UAAUC,mBACuC,IAA1CD,UAAUC,aAAaw7D,qBACqB,IAA5Cz7D,UAAUC,aAAauC,+EAQrC,OAAOviC,KAAK6gC,mBAAqB7gC,KAAK0iB,iBAC/B1iB,KAAK06B,kEAiBZ,OAAQ16B,KAAK0wB,wDASb,OAAO1wB,KAAK0wB,aAAe1wB,KAAK06B,wDAShC,OAAQ16B,KAAK0wB,cAAgB1wB,KAAKsiE,0DAgBlC,OAAQtiE,KAAKu7F,sBACLv7F,KAAK06B,mBAAqB16B,KAAKqoE,gDASvC,OAAQroE,KAAKsiE,uEASb,OAAOtiE,KAAK6gC,mBAAqB7gC,KAAK06B,4DAStC,QAAI16B,KAAK0wB,gBAIL1wB,KAAK06B,wBAAyD,IAA7BpsC,OAAOmtG,oBAIjCrsG,OAAOmW,KAAKk2F,kBAAkBnrG,WAC7BsT,QAAQ,qBAAuB,2CAiB3C,OAAI5D,KAAKy8B,YACGz8B,KAAKs7F,kBAHe,OAM5Bt7F,KAAK0wB,cAAe1wB,KAAKu7F,yBAIzBv7F,KAAK6gC,mBACE7gC,KAAK07F,4BAXgB,yCAwBhC,OAAO17F,KAAKmgC,gEAQZ,OAAO,oDAQP,YAA4C,IAA9BJ,UAAU+vB,sBACkB,IAA3B/vB,UAAUC,mBAET,IADED,UAAUC,aAAa8vB,+DAWzC,OAAO9vD,KAAK6gC,mBAAqB7gC,KAAK07F,4BAA8B,sDASpE,GAAI17F,KAAK6gC,kBAAmB,CAExB,GAAI7gC,KAAKktD,SAEL,OAAOnzC,OAAOjB,SAASm/D,EAAQmB,SAASuiB,SAAU,IAQtD,IAAMC,EAAK77D,UAAUmY,UAErB,GAAI0jD,EAAGnoF,MAAM,UAIT,OAFMsG,OAAOjB,SAAS8iF,EAAGnoF,MAAM,oBAAoB,GAAI,IAM/D,OAAQ,oHC5UgDtlB,EAAAD,QAAkJ,SAAAwK,GAAmB,IAAA9I,EAAA,GAAS,SAAAJ,EAAAd,GAAc,GAAAkB,EAAAlB,GAAA,OAAAkB,EAAAlB,GAAAR,QAA4B,IAAAiC,EAAAP,EAAAlB,GAAA,CAAYA,IAAAC,GAAA,EAAAT,QAAA,IAAqB,OAAAwK,EAAAhK,GAAAG,KAAAsB,EAAAjC,QAAAiC,IAAAjC,QAAAsB,GAAAW,EAAAxB,GAAA,EAAAwB,EAAAjC,QAA2D,OAAAsB,EAAAV,EAAA4J,EAAAlJ,EAAAT,EAAAa,EAAAJ,EAAAR,EAAA,SAAA0J,EAAA9I,EAAAlB,GAAuCc,EAAAL,EAAAuJ,EAAA9I,IAAAR,OAAAC,eAAAqJ,EAAA9I,EAAA,CAAqCN,YAAA,EAAAC,IAAAb,KAAsBc,IAAA,SAAAkJ,GAAiB,oBAAAjJ,eAAAC,aAAAN,OAAAC,eAAAqJ,EAAAjJ,OAAAC,YAAA,CAA4FC,MAAA,WAAeP,OAAAC,eAAAqJ,EAAA,cAAwC/I,OAAA,KAAWH,EAAAI,EAAA,SAAA8I,EAAA9I,GAAmB,KAAAA,IAAA8I,EAAAlJ,EAAAkJ,IAAA,EAAA9I,EAAA,OAAA8I,EAA8B,KAAA9I,GAAA,iBAAA8I,QAAA5I,WAAA,OAAA4I,EAAqD,IAAAhK,EAAAU,OAAAY,OAAA,MAA0B,GAAAR,IAAAd,GAAAU,OAAAC,eAAAX,EAAA,WAA6CY,YAAA,EAAAK,MAAA+I,IAAsB,EAAA9I,GAAA,iBAAA8I,EAAA,QAAAvI,KAAAuI,EAAAlJ,EAAAR,EAAAN,EAAAyB,EAAA,SAAAP,GAA6D,OAAA8I,EAAA9I,IAAYM,KAAA,KAAAC,IAAe,OAAAzB,GAASc,EAAAW,EAAA,SAAAuI,GAAiB,IAAA9I,EAAA8I,KAAA5I,WAAA,WAAiC,OAAA4I,EAAAmjG,SAAiB,WAAY,OAAAnjG,GAAU,OAAAlJ,EAAAR,EAAAY,EAAA,IAAAA,MAAsBJ,EAAAL,EAAA,SAAAuJ,EAAA9I,GAAmB,OAAAR,OAAAkB,UAAAC,eAAA1B,KAAA6J,EAAA9I,IAAiDJ,EAAAgB,EAAA,GAAAhB,IAAAiB,EAAA,IAA14B,CAA45B,CAAEqrG,GAAA,SAAApjG,EAAA9I,EAAAJ,GAAmB,aAAaI,EAAAE,YAAA,EAAAF,EAAAisG,aAAA,EAAiC,IAAAntG,EAAAc,EAAA,IAAAW,EAAA,WAAyB,SAAAuI,KAAc,OAAAA,EAAAqjG,cAAA,SAAArjG,EAAA9I,GAAqC,IAAAJ,EAAAI,EAAA6jB,MAAA/a,GAAiB,OAAAlJ,KAAAoG,OAAA,GAAApG,EAAA,QAA+BkJ,EAAAsjG,eAAA,SAAAtjG,EAAA9I,GAAgC,IAAAJ,EAAAI,EAAA6jB,MAAA/a,GAAiB,OAAAlJ,KAAAoG,OAAA,GAAApG,EAAA,QAA+BkJ,EAAAujG,oBAAA,SAAAvjG,EAAA9I,EAAAJ,GAAuC,GAAAkJ,EAAA0Z,KAAAxiB,GAAA,OAAAJ,GAAsBkJ,EAAAwjG,sBAAA,SAAAxjG,GAAqC,OAAAA,GAAU,oBAAoB,oBAAoB,0BAA0B,wBAAwB,0BAA0B,2BAA2B,uBAAuB,uBAAuB,yBAAyB,yBAAyB,iBAAgBA,EAAAyjG,oBAAA,SAAAzjG,GAAmC,IAAA9I,EAAA8I,EAAAqK,MAAA,KAAAkB,OAAA,KAAAuB,IAAA,SAAA9M,GAAgD,OAAAogB,SAAApgB,EAAA,SAA4B,GAAA9I,EAAAsT,KAAA,QAAAtT,EAAA,UAAAA,EAAA,IAAoC,uBAAuB,4BAA4B,oBAAoB,6BAA6B,yBAAyB,yBAAyB,2BAA2B,uBAAuB,4BAA4B,uBAAuB,yBAAyB,iBAAgB8I,EAAA0jG,sBAAA,SAAA1jG,GAAqC,IAAA9I,EAAA8I,EAAAqK,MAAA,KAAAkB,OAAA,KAAAuB,IAAA,SAAA9M,GAAgD,OAAAogB,SAAApgB,EAAA,SAA4B,GAAA9I,EAAAsT,KAAA,SAAAtT,EAAA,IAAAA,EAAA,iBAAAA,EAAA,IAAAA,EAAA,mBAAAA,EAAA,IAAAA,EAAA,kBAAAA,EAAA,IAAAA,EAAA,kBAAAA,EAAA,QAAAA,EAAA,eAAAA,EAAA,IAAAA,EAAA,uBAAAA,EAAA,mBAAAA,EAAA,IAAAA,EAAA,8BAAAA,EAAA,IAAAA,EAAA,sBAAAA,EAAA,IAAAA,EAAA,mBAAAA,EAAA,kBAAAA,EAAA,qBAAAA,EAAA,gBAAAA,EAAA,cAAAA,EAAA,iBAAwY8I,EAAA2jG,oBAAA,SAAA3jG,GAAmC,OAAAA,EAAAqK,MAAA,KAAAnN,QAA2B8C,EAAA4jG,gBAAA,SAAA1sG,EAAAJ,EAAAd,QAAmC,IAAAA,OAAA,GAAmB,IAAAyB,EAAAuI,EAAA2jG,oBAAAzsG,GAAAa,EAAAiI,EAAA2jG,oBAAA7sG,GAAAL,EAAAmc,KAAAouB,IAAAvpC,EAAAM,GAAAsG,EAAA,EAAAo+F,EAAAz8F,EAAA8M,IAAA,CAAA5V,EAAAJ,GAAA,SAAAI,GAAyG,IAAAJ,EAAAL,EAAAuJ,EAAA2jG,oBAAAzsG,GAAAlB,EAAAkB,EAAA,IAAA6F,MAAAjG,EAAA,GAAA2T,KAAA,MAA+D,OAAAzK,EAAA8M,IAAA9W,EAAAqU,MAAA,cAAArK,GAAuC,WAAAjD,MAAA,GAAAiD,EAAA9C,QAAAuN,KAAA,KAAAzK,IAA0C6jG,YAAgB,IAAA7tG,IAAAqI,EAAA5H,EAAAmc,KAAA2P,IAAA9qB,EAAAM,IAAAtB,GAAA,EAAgCA,GAAA4H,GAAK,CAAE,GAAAo+F,EAAA,GAAAhmG,GAAAgmG,EAAA,GAAAhmG,GAAA,SAA4B,GAAAgmG,EAAA,GAAAhmG,KAAAgmG,EAAA,GAAAhmG,GAAA,CAAsB,GAAAA,IAAA4H,EAAA,SAAkB5H,GAAA,OAAK,GAAAgmG,EAAA,GAAAhmG,GAAAgmG,EAAA,GAAAhmG,GAAA,WAAkCuJ,EAAA8M,IAAA,SAAA9M,EAAA9I,GAAqB,IAAAJ,EAAAd,EAAA,GAAW,GAAA+G,MAAAnF,UAAAkV,IAAA,OAAA/P,MAAAnF,UAAAkV,IAAA3W,KAAA6J,EAAA9I,GAA4D,IAAAJ,EAAA,EAAQA,EAAAkJ,EAAA9C,OAAWpG,GAAA,EAAAd,EAAAwU,KAAAtT,EAAA8I,EAAAlJ,KAAqB,OAAAd,GAASgK,EAAA8jG,gBAAA,SAAA9jG,GAA+B,OAAAhK,EAAA+tG,oBAAA/jG,IAAgCA,EAAAgkG,sBAAA,SAAAhkG,GAAqC,OAAAhK,EAAAiuG,YAAAjkG,IAAA,IAA4BA,EAAnwE,GAAywE9I,EAAAisG,QAAA1rG,EAAAuI,EAAAxK,QAAA0B,EAAAisG,SAAgCe,GAAA,SAAAlkG,EAAA9I,EAAAJ,GAAoB,aAAaI,EAAAE,YAAA,EAAAF,EAAAitG,WAAAjtG,EAAAktG,OAAAltG,EAAAmtG,cAAAntG,EAAA+sG,YAAA/sG,EAAA6sG,yBAAA,EAAiG7sG,EAAA6sG,oBAAA,CAAuBO,cAAA,cAAAC,kBAAA,UAAAC,KAAA,OAAAC,WAAA,aAAAxlD,OAAA,SAAAC,SAAA,WAAAwlD,SAAA,WAAAtlD,QAAA,UAAAulD,MAAA,QAAAC,QAAA,UAAAC,gBAAA,gBAAAC,UAAA,YAAAzlD,oBAAA,KAAA0lD,WAAA,WAAAC,QAAA,UAAAC,iBAAA,OAAAC,aAAA,KAAAC,sBAAA,QAAAhmD,MAAA,QAAAimD,cAAA,cAAAC,UAAA,YAAAC,OAAA,SAAAC,SAAA,WAAAC,GAAA,KAAAC,OAAA,SAAAnmD,OAAA,SAAAomD,SAAA,WAAAC,+BAAA,mBAAAC,UAAA,YAAAC,SAAA,WAAAC,MAAA,QAAAC,MAAA,QAAAC,aAAA,KAAAC,QAAA,UAAAC,gBAAA,QAAAC,OAAA,SAAAC,iBAAA,SAAAC,KAAA,QAAgxBnvG,EAAA+sG,YAAA,CAAeqC,YAAA,cAAAC,QAAA,kBAAAC,KAAA,OAAAC,WAAA,aAAArwC,OAAA,SAAA6sC,SAAA,WAAAyD,SAAA,WAAAC,QAAA,UAAAC,MAAA,QAAAC,QAAA,UAAAC,UAAA,YAAAC,cAAA,gBAAAC,GAAA,oBAAAC,SAAA,WAAAC,QAAA,UAAAC,KAAA,iBAAAC,GAAA,aAAAC,MAAA,sBAAAC,MAAA,QAAAC,YAAA,cAAAC,UAAA,YAAAC,OAAA,SAAAC,SAAA,WAAAC,GAAA,aAAAC,OAAA,kBAAAC,OAAA,SAAAC,SAAA,WAAAC,iBAAA,+BAAAC,UAAA,YAAAC,SAAA,WAAAC,MAAA,QAAAC,MAAA,QAAAC,GAAA,aAAAC,QAAA,UAAAC,MAAA,gBAAAC,OAAA,SAAAC,OAAA,kBAA2vBtxG,EAAAmtG,cAAA,CAAiBoE,OAAA,SAAAC,OAAA,SAAA78D,QAAA,UAAA88D,GAAA,MAA2DzxG,EAAAktG,OAAA,CAAUwE,aAAA,gBAAAC,QAAA,UAAAC,MAAA,QAAAC,IAAA,MAAAC,QAAA,UAAAC,MAAA,QAAAxE,WAAA,aAAAD,KAAA,OAAAuB,MAAA,QAAAmD,MAAA,QAAAC,SAAA,YAAAC,aAAA,gBAAA/C,KAAA,QAAsOnvG,EAAAitG,WAAA,CAAckF,SAAA,WAAAC,MAAA,QAAAC,QAAA,UAAAC,OAAA,SAAAC,MAAA,QAAAC,OAAA,WAAmGC,GAAA,SAAA3pG,EAAA9I,EAAAJ,GAAoB,aAAaI,EAAAE,YAAA,EAAAF,EAAAisG,aAAA,EAAiC,IAAAntG,EAAAyB,GAAAzB,EAAAc,EAAA,MAAAd,EAAAoB,WAAApB,EAAA,CAAmCmtG,QAAAntG,GAAU+B,EAAAjB,EAAA,IAAS,SAAAL,EAAAuJ,EAAA9I,GAAgB,QAAAJ,EAAA,EAAYA,EAAAI,EAAAgG,OAAWpG,IAAA,CAAK,IAAAd,EAAAkB,EAAAJ,GAAWd,EAAAY,WAAAZ,EAAAY,aAAA,EAAAZ,EAAA4zG,cAAA,YAAA5zG,MAAA6zG,UAAA,GAAAnzG,OAAAC,eAAAqJ,EAAAhK,EAAAuB,IAAAvB,IAA+G,IAAAqI,EAAA,WAAiB,SAAA2B,KAAc,IAAA9I,EAAAlB,EAAU,OAAAgK,EAAAsgD,UAAA,SAAAtgD,EAAA9I,GAAiC,YAAAA,OAAA,oBAAA8I,EAAA,UAAAhC,MAAA,gCAAyF,WAAAvG,EAAA0rG,QAAAnjG,EAAA9I,IAA0B8I,EAAAggB,MAAA,SAAAhgB,GAAqB,WAAAvI,EAAA0rG,QAAAnjG,GAAA8pG,aAAoC5yG,EAAA8I,GAAAhK,EAAA,EAASuB,IAAA,cAAAV,IAAA,WAAiC,OAAAkB,EAAAksG,cAAsB,CAAE1sG,IAAA,aAAAV,IAAA,WAAgC,OAAAkB,EAAAosG,aAAqB,CAAE5sG,IAAA,SAAAV,IAAA,WAA4B,OAAAkB,EAAAqsG,SAAiB,CAAE7sG,IAAA,gBAAAV,IAAA,WAAmC,OAAAkB,EAAAssG,mBAAwB5tG,EAAAS,EAAAlB,GAAAgK,EAAzd,GAAqgB9I,EAAAisG,QAAA9kG,EAAA2B,EAAAxK,QAAA0B,EAAAisG,SAAgC4G,GAAA,SAAA/pG,EAAA9I,EAAAJ,GAAoB,aAAaI,EAAAE,YAAA,EAAAF,EAAAisG,aAAA,EAAiC,IAAAntG,EAAAymG,EAAA3lG,EAAA,KAAAW,EAAAglG,EAAA3lG,EAAA,KAAAiB,EAAA0kG,EAAA3lG,EAAA,KAAAL,EAAAgmG,EAAA3lG,EAAA,KAAAuH,EAAAo+F,EAAA3lG,EAAA,KAA2D,SAAA2lG,EAAAz8F,GAAc,OAAAA,KAAA5I,WAAA4I,EAAA,CAA0BmjG,QAAAnjG,GAAW,IAAA1J,EAAA,WAAiB,SAAA0J,IAAA9I,GAAgB,YAAAA,OAAA,SAAA8I,GAAA,KAAAA,EAAA,UAAAhC,MAAA,sCAA4FsJ,KAAA0iG,IAAAhqG,EAAAsH,KAAA2iG,aAAA,IAA+B,IAAA/yG,GAAAoQ,KAAA0Y,QAAsB,IAAA9oB,EAAA8I,EAAApI,UAAkB,OAAAV,EAAAgzG,MAAA,WAA0B,OAAA5iG,KAAA0iG,KAAgB9yG,EAAAwiB,KAAA,SAAA1Z,GAAoB,OAAAA,EAAA0Z,KAAApS,KAAA0iG,MAAwB9yG,EAAAizG,aAAA,WAA2B,IAAAnqG,EAAAsH,KAAWA,KAAA2iG,aAAAlgF,QAAA,GAA6B,IAAA7yB,EAAAlB,EAAAmtG,QAAAtqE,KAAA,SAAA3hC,GAAkC,sBAAAA,EAAAwiB,KAAA,OAAAxiB,EAAAwiB,KAAA1Z,GAA8C,GAAA9I,EAAAwiB,gBAAA3c,MAAA,OAAA7F,EAAAwiB,KAAA6xE,KAAA,SAAAr0F,GAA2D,OAAA8I,EAAA0Z,KAAAxiB,KAAoB,UAAA8G,MAAA,0CAA2D,OAAA9G,IAAAoQ,KAAA2iG,aAAAlgF,QAAA7yB,EAAAkzG,SAAA9iG,KAAA4iG,UAAA5iG,KAAA2iG,aAAAlgF,SAAyF7yB,EAAAmzG,WAAA,WAAyB,OAAA/iG,KAAA2iG,aAAAlgF,QAAAziB,KAAA2iG,aAAAlgF,QAAAziB,KAAA6iG,gBAA+EjzG,EAAA8oD,eAAA,SAAAhgD,GAA8B,OAAAA,EAAAP,OAAA6H,KAAA+iG,aAAA9zG,MAAA0T,eAAA,GAAA3C,KAAA+iG,aAAA9zG,MAAA,IAAqFW,EAAA+oD,kBAAA,WAAgC,OAAA34C,KAAA+iG,aAAArnF,SAAiC9rB,EAAAozG,MAAA,WAAoB,OAAAhjG,KAAA2iG,aAAAM,GAAAjjG,KAAA2iG,aAAAM,GAAAjjG,KAAAkjG,WAAgEtzG,EAAAszG,QAAA,WAAsB,IAAAxqG,EAAAsH,KAAWA,KAAA2iG,aAAAM,GAAA,GAAwB,IAAArzG,EAAAO,EAAA0rG,QAAAtqE,KAAA,SAAA3hC,GAAkC,sBAAAA,EAAAwiB,KAAA,OAAAxiB,EAAAwiB,KAAA1Z,GAA8C,GAAA9I,EAAAwiB,gBAAA3c,MAAA,OAAA7F,EAAAwiB,KAAA6xE,KAAA,SAAAr0F,GAA2D,OAAA8I,EAAA0Z,KAAAxiB,KAAoB,UAAA8G,MAAA,0CAA2D,OAAA9G,IAAAoQ,KAAA2iG,aAAAM,GAAArzG,EAAAkzG,SAAA9iG,KAAA4iG,UAAA5iG,KAAA2iG,aAAAM,IAA+ErzG,EAAAuzG,UAAA,SAAAzqG,GAAyB,IAAA9I,EAAAoQ,KAAAgjG,QAAA/zG,KAAwB,OAAAyJ,EAAAP,OAAAvI,GAAA+S,eAAA,GAAA/S,GAAA,IAA2CA,EAAAwzG,aAAA,WAA2B,OAAApjG,KAAAgjG,QAAAtnF,SAA4B9rB,EAAAyzG,YAAA,WAA0B,OAAArjG,KAAA2iG,aAAAW,SAAAtjG,KAAA2iG,aAAAW,SAAAtjG,KAAAujG,iBAAkF3zG,EAAA4zG,gBAAA,SAAA9qG,QAA+B,IAAAA,OAAA,GAAmB,IAAA9I,EAAAoQ,KAAAqjG,cAAAp8F,KAA8B,OAAAvO,EAAAP,OAAAvI,GAAA+S,eAAA,GAAA/S,GAAA,IAA2CA,EAAA2zG,cAAA,WAA4B,IAAA7qG,EAAAsH,KAAWA,KAAA2iG,aAAAW,SAAA,GAA8B,IAAA1zG,EAAAa,EAAAorG,QAAAtqE,KAAA,SAAA3hC,GAAkC,sBAAAA,EAAAwiB,KAAA,OAAAxiB,EAAAwiB,KAAA1Z,GAA8C,GAAA9I,EAAAwiB,gBAAA3c,MAAA,OAAA7F,EAAAwiB,KAAA6xE,KAAA,SAAAr0F,GAA2D,OAAA8I,EAAA0Z,KAAAxiB,KAAoB,UAAA8G,MAAA,0CAA2D,OAAA9G,IAAAoQ,KAAA2iG,aAAAW,SAAA1zG,EAAAkzG,SAAA9iG,KAAA4iG,UAAA5iG,KAAA2iG,aAAAW,UAA2F1zG,EAAA6zG,UAAA,WAAwB,OAAAzjG,KAAA2iG,aAAAe,OAAA1jG,KAAA2iG,aAAAe,OAAA1jG,KAAA2jG,eAA4E/zG,EAAAg0G,cAAA,SAAAlrG,GAA6B,OAAAA,EAAAP,OAAA6H,KAAAyjG,YAAAx0G,MAAA0T,eAAA,GAAA3C,KAAAyjG,YAAAx0G,MAAA,IAAmFW,EAAA+zG,YAAA,WAA0B,IAAAjrG,EAAAsH,KAAWA,KAAA2iG,aAAAe,OAAA,GAA4B,IAAA9zG,EAAAT,EAAA0sG,QAAAtqE,KAAA,SAAA3hC,GAAkC,sBAAAA,EAAAwiB,KAAA,OAAAxiB,EAAAwiB,KAAA1Z,GAA8C,GAAA9I,EAAAwiB,gBAAA3c,MAAA,OAAA7F,EAAAwiB,KAAA6xE,KAAA,SAAAr0F,GAA2D,OAAA8I,EAAA0Z,KAAAxiB,KAAoB,UAAA8G,MAAA,0CAA2D,OAAA9G,IAAAoQ,KAAA2iG,aAAAe,OAAA9zG,EAAAkzG,SAAA9iG,KAAA4iG,UAAA5iG,KAAA2iG,aAAAe,QAAuF9zG,EAAA8oB,MAAA,WAAoB,OAAA1Y,KAAA6iG,eAAA7iG,KAAAkjG,UAAAljG,KAAAujG,gBAAAvjG,KAAA2jG,cAAA3jG,MAAuFpQ,EAAA4yG,UAAA,WAAwB,OAAApzG,OAAAggG,OAAA,GAAuBpvF,KAAA2iG,eAAoB/yG,EAAAypD,UAAA,SAAA3gD,GAAyB,IAAA9I,EAAAoQ,KAAAxQ,EAAA,GAAed,EAAA,EAAAyB,EAAA,GAASM,EAAA,EAAK,GAAArB,OAAAmW,KAAA7M,GAAA4W,QAAA,SAAA1f,GAAuC,IAAAT,EAAAuJ,EAAA9I,GAAW,iBAAAT,GAAAgB,EAAAP,GAAAT,EAAAsB,GAAA,oBAAAtB,IAAAK,EAAAI,GAAAT,EAAAT,GAAA,KAAmEA,EAAA,GAAQ,IAAAS,EAAAC,OAAAmW,KAAA/V,GAAAuH,EAAA5H,EAAAoiC,KAAA,SAAA74B,GAA2C,OAAA9I,EAAAi0G,KAAAnrG,KAAoB,GAAA3B,EAAA,CAAM,IAAAo+F,EAAAn1F,KAAAq5C,UAAA7pD,EAAAuH,IAA2B,YAAAo+F,EAAA,OAAAA,EAAuB,IAAAnmG,EAAAG,EAAAoiC,KAAA,SAAA74B,GAA0B,OAAA9I,EAAAk0G,WAAAprG,KAA0B,GAAA1J,EAAA,CAAM,IAAAD,EAAAiR,KAAAq5C,UAAA7pD,EAAAR,IAA2B,YAAAD,EAAA,OAAAA,GAAwB,GAAA0B,EAAA,GAAQ,IAAAszG,EAAA30G,OAAAmW,KAAApV,GAAAohC,KAAA,SAAA74B,GAAuC,OAAA9I,EAAAo0G,UAAAtrG,GAAA,KAA4B,YAAAqrG,EAAA,OAAA/jG,KAAAikG,eAAA9zG,EAAA4zG,MAAgDn0G,EAAAo0G,UAAA,SAAAtrG,EAAA9I,QAA2B,IAAAA,OAAA,GAAmB,IAAAJ,EAAAwQ,KAAA04C,iBAAA/1C,cAAAjU,EAAAgK,EAAAiK,cAAAxS,EAAA4G,EAAA8kG,QAAAa,sBAAAhuG,GAAiG,OAAAkB,GAAAO,IAAAzB,EAAAyB,EAAAwS,eAAAjU,IAAAc,GAAuCI,EAAAq0G,eAAA,SAAAvrG,GAA8B,IAAA9I,EAAA,IAAAJ,EAAAkJ,EAAAhK,GAAA,EAAAyB,EAAA6P,KAAA24C,oBAA8C,oBAAAxoD,EAAA,YAAAuI,EAAA,UAAAA,EAAA,IAAAlJ,EAAAkJ,EAAA6c,OAAA,SAAA7c,EAAA,IAAAhK,GAAA,EAAAc,EAAAkJ,EAAA6c,OAAA,IAAA3lB,EAAA,SAAA8I,EAAA,GAAA9I,EAAAsT,KAAA,GAAAtT,EAAAsT,MAAA,UAAAxK,EAAA,GAAAlJ,EAAAkJ,EAAA6c,OAAA,SAAA7c,EAAA,KAAAhK,GAAA,EAAAc,EAAAkJ,EAAA6c,OAAA,IAAA3lB,EAAAgU,QAAA7M,EAAA8kG,QAAAS,gBAAAnsG,EAAAX,EAAAd,KAAA,GAAiPkB,EAAAi0G,KAAA,SAAAnrG,GAAoB,OAAAsH,KAAAmjG,WAAA,KAAAhrG,OAAAO,GAAAiK,eAAoD/S,EAAAk0G,WAAA,SAAAprG,GAA0B,OAAAsH,KAAAwjG,iBAAA,KAAArrG,OAAAO,GAAAiK,eAA0D/S,EAAAs0G,SAAA,SAAAxrG,GAAwB,OAAAsH,KAAA4jG,eAAA,KAAAzrG,OAAAO,GAAAiK,eAAwD/S,EAAAu0G,GAAA,SAAAzrG,GAAkB,OAAAsH,KAAAgkG,UAAAtrG,IAAAsH,KAAA6jG,KAAAnrG,IAAAsH,KAAA8jG,WAAAprG,IAA2D9I,EAAAq0F,KAAA,SAAAvrF,GAAoB,IAAA9I,EAAAoQ,KAAW,gBAAAtH,MAAA,IAAAA,EAAAurF,KAAA,SAAAvrF,GAA8C,OAAA9I,EAAAu0G,GAAAzrG,MAAkBA,EAAvuI,GAA6uI9I,EAAAisG,QAAA7sG,EAAA0J,EAAAxK,QAAA0B,EAAAisG,SAAgCuI,GAAA,SAAA1rG,EAAA9I,EAAAJ,GAAoB,aAAaI,EAAAE,YAAA,EAAAF,EAAAisG,aAAA,EAAiC,IAAAntG,EAAAyB,GAAAzB,EAAAc,EAAA,MAAAd,EAAAoB,WAAApB,EAAA,CAAmCmtG,QAAAntG,GAAW+B,EAAA,6BAAAtB,EAAA,EAAuCijB,KAAA,eAAA0wF,SAAA,SAAApqG,GAAyC,IAAA9I,EAAA,CAAOX,KAAA,aAAiBO,EAAAW,EAAA0rG,QAAAE,cAAA,2BAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAuF,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,WAAA0wF,SAAA,SAAApqG,GAAqC,IAAA9I,EAAA,CAAOX,KAAA,SAAaO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,kCAAArjG,GAA8F,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,iBAAA0wF,SAAA,SAAApqG,GAA2C,IAAA9I,EAAA,CAAOX,KAAA,SAAaO,EAAAW,EAAA0rG,QAAAE,cAAA,2BAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAuF,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,oBAAA0wF,SAAA,SAAApqG,GAA8C,IAAA9I,EAAA,CAAOX,KAAA,gCAAoCO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,2CAAArjG,GAAuG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,WAAA0wF,SAAA,SAAApqG,GAAqC,IAAA9I,EAAA,CAAOX,KAAA,uBAA2BO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,iCAAArjG,GAA6F,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,eAAA0wF,SAAA,SAAApqG,GAAyC,IAAA9I,EAAA,CAAOX,KAAA,cAAkBO,EAAAW,EAAA0rG,QAAAE,cAAA,qCAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAiG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,WAAA0wF,SAAA,SAAApqG,GAAqC,IAAA9I,EAAA,CAAOX,KAAA,SAAaO,EAAAW,EAAA0rG,QAAAE,cAAA,iCAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAA6F,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,WAAA0wF,SAAA,SAAApqG,GAAqC,IAAA9I,EAAA,CAAOX,KAAA,SAAaO,EAAAW,EAAA0rG,QAAAE,cAAA,iCAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAA6F,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,WAAA0wF,SAAA,SAAApqG,GAAqC,IAAA9I,EAAA,CAAOX,KAAA,eAAmBO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,kCAAArjG,GAA8F,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,eAAA0wF,SAAA,SAAApqG,GAAyC,IAAA9I,EAAA,CAAOX,KAAA,kBAAsBO,EAAAW,EAAA0rG,QAAAE,cAAA,sCAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAkG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,eAAA0wF,SAAA,SAAApqG,GAAyC,IAAA9I,EAAA,CAAOX,KAAA,cAAkBO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,sCAAArjG,GAAkG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,mBAAA0wF,SAAA,SAAApqG,GAA6C,IAAA9I,EAAA,CAAOX,KAAA,WAAeO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,0CAAArjG,GAAsG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,cAAA0wF,SAAA,SAAApqG,GAAwC,IAAA9I,EAAA,CAAOX,KAAA,YAAgBO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,qCAAArjG,GAAiG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,YAAA0wF,SAAA,SAAApqG,GAAsC,IAAA9I,EAAA,CAAOX,KAAA,UAAcO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,mCAAArjG,GAA+F,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,cAAA0wF,SAAA,SAAApqG,GAAwC,IAAA9I,EAAA,CAAOX,KAAA,YAAgBO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,qCAAArjG,GAAiG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,cAAA0wF,SAAA,SAAApqG,GAAwC,IAAA9I,EAAA,CAAOX,KAAA,YAAgBO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,qCAAArjG,GAAiG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,oBAAA0wF,SAAA,SAAApqG,GAA8C,IAAA9I,EAAA,CAAOX,KAAA,UAAcO,EAAAW,EAAA0rG,QAAAE,cAAA,2CAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAuG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,eAAA0wF,SAAA,SAAApqG,GAAyC,IAAA9I,EAAA,CAAOX,KAAA,iBAAAmjB,KAAA1Z,GAAA,gCAA6DlJ,EAAAW,EAAA0rG,QAAAE,cAAA,kDAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAA8G,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,kBAAA0wF,SAAA,SAAApqG,GAA4C,IAAA9I,EAAA,CAAOX,KAAA,qBAAyBO,EAAAW,EAAA0rG,QAAAE,cAAA,iCAAArjG,GAA+D,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,aAAA0wF,SAAA,SAAApqG,GAAuC,IAAA9I,EAAA,CAAOX,KAAA,kBAAsBO,EAAAW,EAAA0rG,QAAAE,cAAA,2BAAArjG,GAAyD,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,mBAAA0wF,SAAA,SAAApqG,GAA6C,IAAA9I,EAAA,CAAOX,KAAA,kBAAsBO,EAAAW,EAAA0rG,QAAAG,eAAA,mCAAAtjG,GAAkE,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,aAAA0wF,SAAA,SAAApqG,GAAuC,IAAA9I,EAAA,CAAOX,KAAA,WAAeO,EAAAW,EAAA0rG,QAAAE,cAAA,6BAAArjG,GAA2D,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,eAAA0wF,SAAA,SAAApqG,GAAyC,IAAA9I,EAAA,CAAOX,KAAA,aAAiBO,EAAAW,EAAA0rG,QAAAE,cAAA,+BAAArjG,GAA6D,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,cAAA0wF,SAAA,SAAApqG,GAAwC,IAAA9I,EAAA,CAAOX,KAAA,YAAgBO,EAAAW,EAAA0rG,QAAAE,cAAA,qCAAArjG,GAAmE,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,UAAA0wF,SAAA,SAAApqG,GAAoC,IAAA9I,EAAA,CAAOX,KAAA,eAAmBO,EAAAW,EAAA0rG,QAAAE,cAAA,0BAAArjG,GAAwD,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,aAAA0wF,SAAA,SAAApqG,GAAuC,IAAA9I,EAAA,CAAOX,KAAA,aAAiBO,EAAAW,EAAA0rG,QAAAE,cAAA,+BAAArjG,GAA6D,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,cAAA0wF,SAAA,SAAApqG,GAAwC,IAAA9I,EAAA,CAAOX,KAAA,YAAgBO,EAAAW,EAAA0rG,QAAAE,cAAA,8BAAArjG,GAA4D,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,uCAAA0wF,SAAA,SAAApqG,GAAiE,IAAA9I,EAAA,CAAOX,KAAA,cAAkBO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,qCAAArjG,GAAiG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,oBAAA0wF,SAAA,SAAApqG,GAA8C,IAAA9I,EAAA,CAAOX,KAAA,iBAAqBO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,IAAAvI,EAAA0rG,QAAAE,cAAA,0CAAArjG,GAAsG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,UAAA0wF,SAAA,SAAApqG,GAAoC,IAAA9I,EAAA,CAAOX,KAAA,QAAYO,EAAAW,EAAA0rG,QAAAE,cAAA,4BAAArjG,GAA0D,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,WAAA0wF,SAAA,SAAApqG,GAAqC,IAAA9I,EAAA,CAAOX,KAAA,SAAaO,EAAAW,EAAA0rG,QAAAE,cAAA,0CAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAsG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,cAAA0wF,SAAA,SAAApqG,GAAwC,IAAA9I,EAAA,CAAOX,KAAA,YAAgBO,EAAAW,EAAA0rG,QAAAE,cAAA,qCAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAiG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,6BAAA0wF,SAAA,SAAApqG,GAAuD,IAAA9I,EAAA,CAAOX,KAAA,WAAeO,EAAAW,EAAA0rG,QAAAE,cAAA,oDAAArjG,GAAkF,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,cAAA0wF,SAAA,SAAApqG,GAAwC,IAAA9I,EAAA,CAAOX,KAAA,YAAgBO,EAAAW,EAAA0rG,QAAAE,cAAA,qCAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAiG,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,uBAAA0wF,SAAA,SAAApqG,GAAiD,IAAA9I,EAAA,CAAOX,KAAA,UAAcO,EAAAW,EAAA0rG,QAAAE,cAAA,2CAAArjG,GAAyE,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,SAAA0wF,SAAA,SAAApqG,GAAmC,IAAA9I,EAAA,CAAOX,KAAA,iBAAqBO,EAAAW,EAAA0rG,QAAAE,cAAA,6BAAArjG,GAA2D,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,SAAA1Z,GAAiB,IAAA9I,GAAA8I,EAAA0Z,KAAA,iBAAA5iB,EAAAkJ,EAAA0Z,KAAA,YAAoD,OAAAxiB,GAAAJ,GAAYszG,SAAA,SAAApqG,GAAsB,IAAA9I,EAAA,CAAOX,KAAA,mBAAuBO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAgC,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,mBAAA0wF,SAAA,SAAApqG,GAA6C,IAAA9I,EAAA,CAAOX,KAAA,iBAAqBO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAgC,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,wBAAA0wF,SAAA,SAAApqG,GAAkD,IAAA9I,EAAA,CAAOX,KAAA,UAAcO,EAAAW,EAAA0rG,QAAAE,cAAAtrG,EAAAiI,GAAgC,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,QAAA0wF,SAAA,SAAApqG,GAAkC,IAAA9I,GAAA,IAAA8I,EAAA2kB,OAAA,+CAAmE,OAAOpuB,KAAAkB,EAAA0rG,QAAAE,cAAAnsG,EAAA8I,GAAAgjB,QAAAvrB,EAAA0rG,QAAAG,eAAApsG,EAAA8I,OAA4E9I,EAAAisG,QAAA1sG,EAAAuJ,EAAAxK,QAAA0B,EAAAisG,SAAgCwI,GAAA,SAAA3rG,EAAA9I,EAAAJ,GAAoB,aAAaI,EAAAE,YAAA,EAAAF,EAAAisG,aAAA,EAAiC,IAAAntG,EAAAyB,GAAAzB,EAAAc,EAAA,MAAAd,EAAAoB,WAAApB,EAAA,CAAmCmtG,QAAAntG,GAAU+B,EAAAjB,EAAA,IAASL,EAAA,EAAQijB,KAAA,cAAA0wF,SAAA,SAAApqG,GAAwC,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,wBAAArjG,GAAyD,OAAOzJ,KAAAwB,EAAAqsG,OAAAiC,KAAArjF,QAAA9rB,KAA+B,CAAEwiB,KAAA,mBAAA0wF,SAAA,SAAApqG,GAA6C,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,yCAAArjG,GAA0E,OAAOzJ,KAAAwB,EAAAqsG,OAAAwE,aAAA5lF,QAAA9rB,KAAuC,CAAEwiB,KAAA,aAAA0wF,SAAA,SAAApqG,GAAuC,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,iCAAArjG,GAAAlJ,EAAAW,EAAA0rG,QAAAK,sBAAAtsG,GAAuG,OAAOX,KAAAwB,EAAAqsG,OAAAyE,QAAA7lF,QAAA9rB,EAAA00G,YAAA90G,KAAgD,CAAE4iB,KAAA,eAAA0wF,SAAA,SAAApqG,GAAyC,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,6BAAArjG,GAAAkJ,QAAA,cAAApS,EAAAW,EAAA0rG,QAAAM,oBAAAvsG,GAAAlB,EAAA,CAA0HO,KAAAwB,EAAAqsG,OAAA0E,MAAA9lF,QAAA9rB,GAA+B,OAAAJ,IAAAd,EAAA41G,YAAA90G,GAAAd,IAA+B,CAAE0jB,KAAA,wBAAA0wF,SAAA,SAAApqG,GAAkD,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,qCAAArjG,GAAAkJ,QAAA,cAA4F,OAAO3S,KAAAwB,EAAAqsG,OAAA2E,IAAA/lF,QAAA9rB,KAA8B,CAAEwiB,KAAA,SAAA1Z,GAAiB,IAAA9I,GAAA8I,EAAA0Z,KAAA,iBAAA5iB,EAAAkJ,EAAA0Z,KAAA,YAAoD,OAAAxiB,GAAAJ,GAAYszG,SAAA,SAAApqG,GAAsB,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,8BAAArjG,GAAAlJ,EAAAW,EAAA0rG,QAAAO,sBAAAxsG,GAAAlB,EAAA,CAAuGO,KAAAwB,EAAAqsG,OAAA4E,QAAAhmF,QAAA9rB,GAAiC,OAAAJ,IAAAd,EAAA41G,YAAA90G,GAAAd,IAA+B,CAAE0jB,KAAA,oBAAA0wF,SAAA,SAAApqG,GAA8C,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,mCAAArjG,GAAAlJ,EAAA,CAAuEP,KAAAwB,EAAAqsG,OAAA6E,OAAqB,OAAA/xG,KAAAgG,SAAApG,EAAAksB,QAAA9rB,GAAAJ,IAAqC,CAAE4iB,KAAA,uCAAA0wF,SAAA,SAAApqG,GAAiE,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,kCAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAA,mCAAArjG,IAAAvI,EAAA0rG,QAAAE,cAAA,aAAArjG,GAA2K,OAAOzJ,KAAAwB,EAAAqsG,OAAAK,WAAAzhF,QAAA9rB,KAAqC,CAAEwiB,KAAA,UAAA0wF,SAAA,SAAApqG,GAAoC,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,uBAAArjG,GAAwD,OAAOzJ,KAAAwB,EAAAqsG,OAAAI,KAAAxhF,QAAA9rB,KAA+B,CAAEwiB,KAAA,WAAA0wF,SAAA,SAAApqG,GAAqC,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,2BAAArjG,GAA4D,OAAOzJ,KAAAwB,EAAAqsG,OAAA2B,MAAA/iF,QAAA9rB,KAAgC,CAAEwiB,KAAA,WAAA0wF,SAAA,WAAoC,OAAO7zG,KAAAwB,EAAAqsG,OAAA8E,SAAsB,CAAExvF,KAAA,SAAA0wF,SAAA,WAAkC,OAAO7zG,KAAAwB,EAAAqsG,OAAA+E,YAAyB,CAAEzvF,KAAA,kBAAA0wF,SAAA,SAAApqG,GAA4C,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,mCAAArjG,GAAoE,OAAOzJ,KAAAwB,EAAAqsG,OAAAgF,aAAApmF,QAAA9rB,MAAyCA,EAAAisG,QAAA1sG,EAAAuJ,EAAAxK,QAAA0B,EAAAisG,SAAgC0I,GAAA,SAAA7rG,EAAA9I,EAAAJ,GAAoB,aAAaI,EAAAE,YAAA,EAAAF,EAAAisG,aAAA,EAAiC,IAAAntG,EAAAyB,GAAAzB,EAAAc,EAAA,MAAAd,EAAAoB,WAAApB,EAAA,CAAmCmtG,QAAAntG,GAAU+B,EAAAjB,EAAA,IAASL,EAAA,EAAQijB,KAAA,eAAA0wF,SAAA,WAAwC,OAAO77F,KAAA,MAAAu9F,OAAA,YAA6B,CAAEpyF,KAAA,YAAA0wF,SAAA,SAAApqG,GAAsC,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,aAAArjG,IAAA,OAAAlJ,EAAA,CAAyDyX,KAAAxW,EAAAssG,cAAAqE,OAAAoD,OAAA,UAA6C,OAAA50G,IAAAJ,EAAAi1G,MAAA70G,GAAAJ,IAAyB,CAAE4iB,KAAA,4BAAA0wF,SAAA,WAAqD,OAAO77F,KAAAxW,EAAAssG,cAAAoE,OAAAqD,OAAA,WAA6C,CAAEpyF,KAAA,UAAA0wF,SAAA,WAAmC,OAAO77F,KAAAxW,EAAAssG,cAAAoE,OAAAqD,OAAA,QAAAC,MAAA,UAA0D,CAAEryF,KAAA,gBAAA0wF,SAAA,WAAyC,OAAO77F,KAAAxW,EAAAssG,cAAAoE,OAAAqD,OAAA,SAAAC,MAAA,sBAAuE,CAAEryF,KAAA,UAAA0wF,SAAA,WAAmC,OAAO77F,KAAAxW,EAAAssG,cAAAoE,OAAAqD,OAAA,YAA8C,CAAEpyF,KAAA,mBAAA0wF,SAAA,WAA4C,OAAO77F,KAAAxW,EAAAssG,cAAAoE,UAA8B,CAAE/uF,KAAA,SAAA1Z,GAAiB,IAAA9I,EAAA8I,EAAA0Z,KAAA,gBAAA5iB,EAAAkJ,EAAA0Z,KAAA,uBAA6D,OAAAxiB,IAAAJ,GAAaszG,SAAA,SAAApqG,GAAsB,IAAA9I,EAAAO,EAAA0rG,QAAAE,cAAA,iBAAArjG,GAAkD,OAAOuO,KAAAxW,EAAAssG,cAAAqE,OAAAoD,OAAA,QAAAC,MAAA70G,KAAqD,CAAEwiB,KAAA,qCAAA0wF,SAAA,WAA8D,OAAO77F,KAAAxW,EAAAssG,cAAAqE,OAAAoD,OAAA,WAA6C,CAAEpyF,KAAA,cAAA0wF,SAAA,WAAuC,OAAO77F,KAAAxW,EAAAssG,cAAAqE,UAA8B,CAAEhvF,KAAA,SAAA1Z,GAAiB,qBAAAA,EAAAggD,gBAAA,IAA0CoqD,SAAA,WAAqB,OAAO77F,KAAAxW,EAAAssG,cAAAqE,OAAAoD,OAAA,gBAAkD,CAAEpyF,KAAA,SAAA1Z,GAAiB,eAAAA,EAAAggD,gBAAA,IAAoCoqD,SAAA,WAAqB,OAAO77F,KAAAxW,EAAAssG,cAAAqE,UAA8B,CAAEhvF,KAAA,SAAA1Z,GAAiB,wBAAAA,EAAAggD,kBAA2CoqD,SAAA,WAAqB,OAAO77F,KAAAxW,EAAAssG,cAAAqE,OAAAoD,OAAA,eAAiD,CAAEpyF,KAAA,SAAA1Z,GAAiB,IAAA9I,EAAAmqB,OAAA5hB,OAAAO,EAAA0qG,gBAAArgG,MAAA,SAAqD,kBAAArK,EAAAyqG,WAAA,IAAAvzG,GAAA,GAAwCkzG,SAAA,WAAqB,OAAO77F,KAAAxW,EAAAssG,cAAAoE,UAA8B,CAAE/uF,KAAA,SAAA1Z,GAAiB,kBAAAA,EAAAyqG,WAAA,IAAkCL,SAAA,WAAqB,OAAO77F,KAAAxW,EAAAssG,cAAAqE,UAA8B,CAAEhvF,KAAA,SAAA1Z,GAAiB,gBAAAA,EAAAyqG,WAAA,IAAgCL,SAAA,WAAqB,OAAO77F,KAAAxW,EAAAssG,cAAAx4D,QAAAigE,OAAA,WAA8C,CAAEpyF,KAAA,SAAA1Z,GAAiB,kBAAAA,EAAAyqG,WAAA,IAAkCL,SAAA,WAAqB,OAAO77F,KAAAxW,EAAAssG,cAAAx4D,WAA+B,CAAEnyB,KAAA,SAAA1Z,GAAiB,gBAAAA,EAAAyqG,WAAA,IAAgCL,SAAA,WAAqB,OAAO77F,KAAAxW,EAAAssG,cAAAx4D,WAA+B,CAAEnyB,KAAA,SAAA1Z,GAAiB,wBAAAA,EAAAyqG,WAAA,IAAwCL,SAAA,WAAqB,OAAO77F,KAAAxW,EAAAssG,cAAAsE,MAA0B,CAAEjvF,KAAA,SAAA1Z,GAAiB,eAAAA,EAAAyqG,WAAA,IAA+BL,SAAA,WAAqB,OAAO77F,KAAAxW,EAAAssG,cAAAsE,OAA4BzxG,EAAAisG,QAAA1sG,EAAAuJ,EAAAxK,QAAA0B,EAAAisG,SAAgC6I,GAAA,SAAAhsG,EAAA9I,EAAAJ,GAAoB,aAAaI,EAAAE,YAAA,EAAAF,EAAAisG,aAAA,EAAiC,IAAAntG,EAAAyB,GAAAzB,EAAAc,EAAA,MAAAd,EAAAoB,WAAApB,EAAA,CAAmCmtG,QAAAntG,GAAU+B,EAAAjB,EAAA,IAASL,EAAA,EAAQijB,KAAA,SAAA1Z,GAAiB,yBAAAA,EAAAggD,gBAAA,IAA8CoqD,SAAA,SAAApqG,GAAsB,cAAA0Z,KAAA1Z,GAAA,OAA6BzJ,KAAAwB,EAAAosG,WAAAmF,OAAyB,IAAApyG,EAAAO,EAAA0rG,QAAAE,cAAA,0BAAArjG,GAA2D,OAAOzJ,KAAAwB,EAAAosG,WAAAkF,SAAArmF,QAAA9rB,KAAuC,CAAEwiB,KAAA,aAAA0wF,SAAA,SAAApqG,GAAuC,IAAA9I,EAAA,CAAOX,KAAAwB,EAAAosG,WAAAoF,SAA0BzyG,EAAAW,EAAA0rG,QAAAE,cAAA,6BAAArjG,GAA2D,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,SAAA1Z,GAAiB,OAAAA,EAAA0Z,KAAA,YAAyB0wF,SAAA,SAAApqG,GAAsB,IAAA9I,EAAA,CAAOX,KAAAwB,EAAAosG,WAAAqF,QAAyB1yG,EAAAW,EAAA0rG,QAAAE,cAAA,4BAAArjG,GAA0D,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,SAAA1Z,GAAiB,IAAA9I,EAAA8I,EAAA0Z,KAAA,UAAA5iB,EAAAkJ,EAAA0Z,KAAA,eAA+C,OAAAxiB,IAAAJ,GAAaszG,SAAA,SAAApqG,GAAsB,IAAA9I,EAAA,CAAOX,KAAAwB,EAAAosG,WAAAsF,OAAwB3yG,EAAAW,EAAA0rG,QAAAE,cAAA,2BAAArjG,GAAyD,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,IAA2B,CAAEwiB,KAAA,6BAAA0wF,SAAA,WAAsD,OAAO7zG,KAAAwB,EAAAosG,WAAAmF,SAA0B,CAAE5vF,KAAA,oBAAA0wF,SAAA,SAAApqG,GAA8C,IAAA9I,EAAA,CAAOX,KAAAwB,EAAAosG,WAAAuF,QAAyB5yG,EAAAW,EAAA0rG,QAAAE,cAAA,4BAAArjG,GAA0D,OAAAlJ,IAAAI,EAAA8rB,QAAAlsB,GAAAI,KAA6BA,EAAAisG,QAAA1sG,EAAAuJ,EAAAxK,QAAA0B,EAAAisG,0gBCMn9vB,IAAM9+D,EAAuB7b,EAAQ,IAC/BL,EAASK,EAAQ,GAAqBP,UAAUQ,GAMhDwjF,EAAuB,GA4D7B,SAASC,EAAoBC,EAAaC,GACtC,OAAKA,GAAgBA,GAAgB,IACzBD,GAAeA,GAAe,EAC/B,EAGJv5F,KAAKy5F,MAAOF,EAAcC,EAAgB,KAOrD,SAASE,IACLhlG,KAAKilG,KAAO,GACZjlG,KAAKklG,QAAU,CACX/N,SAAU,EACVgO,OAAQ,GAEZnlG,KAAKw7B,WAAa,GAClBx7B,KAAKolG,UAAY,EAiDrB,SAASC,IAMLrlG,KAAKs9B,UAAY,GAMjBt9B,KAAKklG,QAAU,GAMfllG,KAAKslG,WAAa,KAMlBtlG,KAAKwgB,UAAY,GAkBN,SAAS+kF,EAChB7hF,EACAJ,EACAkiF,EACApjF,GAgBJpiB,KAAKylG,aAAehjF,IAAQ29B,UAC5B,IAAM76C,EAAOo/F,EAAqB3kG,KAAKylG,cAEvC,IAAKlgG,EAED,0BAAAlM,OAA2B2G,KAAKylG,aAAhC,sBAOJzlG,KAAK0lG,qBACCjjF,IAAQ84E,sBAAwB94E,IAAQiO,YAU9C1wB,KAAK2lG,cACC3lG,KAAK0lG,qBACD1lG,KAAK4lG,6BAA6BrgG,GAClCvF,KAAK6lG,0BAA0BtgG,GAEzCvF,KAAK0jB,eAAiBA,EACtB1jB,KAAK8lG,0BAA4B,KACjC9lG,KAAK+lG,yBAA2B,KAChC/lG,KAAKgmG,mBAAqB,KAC1BhmG,KAAKimG,oBAAsB,KAC3BjmG,KAAKkmG,wBAA0B,GAC/BlmG,KAAKmmG,sBAAwB,KAC7BnmG,KAAKoiB,aAAeA,EACpBpiB,KAAKomG,gBAAkB,IAAIf,EAG3BrlG,KAAKqmG,yBAA2B/iF,EAEhCtjB,KAAKsmG,gBAAkB,KACvBtmG,KAAKumG,mBAAqBf,EAM1BxlG,KAAKwmG,WAAa,IAAIrkF,IA7O1BwiF,EAAqB8B,IAAStvD,SAAW,CACrC3uB,KAAQ,OACRk+E,gBAAmB,kBACnBC,YAAe,cACfC,YAAe,cACfC,cAAiB,gBACjBhX,UAAa,YACbiX,cAAiB,gBACjB33E,GAAM,YACNlB,KAAQ,aACRvlB,SAAY,aAEhBi8F,EAAqB8B,IAASxvD,QAAU,CACpC8vD,iBAAoB,gCACpBC,cAAiB,6BACjBC,cAAiB,oBACjBC,cAAiB,oBACjBC,aAAgB,mBAChBC,iBAAoB,uBACpB5+E,KAAQ,OACRk+E,gBAAmB,kBACnBE,YAAe,cACfD,YAAe,cACfE,cAAiB,gBACjBhX,UAAa,YACbwX,wBAA2B,0BAC3BC,uBAA0B,yBAC1BC,oBAAuB,sBACvBC,mBAAsB,qBACtBC,sBAAyB,wBACzBC,kBAAqB,oBACrBC,gBAAmB,kBACnBC,iBAAoB,mBACpBC,qBAAwB,UACxBC,oBAAuB,0BACvBC,mBAAsB,yBACtB54E,GAAM,KACNlB,KAAQ,OACRvlB,SAAY,YAEhBi8F,EAAqB8B,IAASvvD,OACxBytD,EAAqB8B,IAASxvD,QACpC0tD,EAAqB8B,IAASnvD,MACxBqtD,EAAqB8B,IAASxvD,QACpC0tD,EAAqB8B,IAASlvD,UACxBotD,EAAqB8B,IAASxvD,QACpC0tD,EAAqB8B,IAASpvD,QACxBstD,EAAqB8B,IAASxvD,QACpC0tD,EAAqB8B,IAASjvD,cACxBmtD,EAAqB8B,IAASxvD,QAoCpC+tD,EAAU10G,UAAU03G,QAAU,SAAS/C,GACnCjlG,KAAKilG,KAAOA,GAAQ,IAOxBD,EAAU10G,UAAU23G,cAAgB,SAASzsE,GACzCx7B,KAAKw7B,WAAaA,GAAc,IAQpCwpE,EAAU10G,UAAU43G,WAAa,SAAShD,GACtCllG,KAAKklG,QAAQ/N,UAAY+N,EAAQ/N,SACjCn3F,KAAKklG,QAAQC,QAAUD,EAAQC,QAOnCH,EAAU10G,UAAU63G,aAAe,WAC/BnoG,KAAKklG,QAAQ/N,SAAW,EACxBn3F,KAAKklG,QAAQC,OAAS,GAO1BH,EAAU10G,UAAU83G,aAAe,SAAShD,GACxCplG,KAAKolG,UAAYA,GAAa,GA4HlCG,EAAej1G,UAAUk2B,KAAO,WACxBxmB,KAAKmmG,wBACLtmE,cAAc7/B,KAAKmmG,uBACnBnmG,KAAKmmG,sBAAwB,MAG7BnmG,KAAKsmG,kBACLzmE,cAAc7/B,KAAKsmG,iBACnBtmG,KAAKsmG,gBAAkB,OAQ/Bf,EAAej1G,UAAU69D,cAAgB,SAASnpD,GAC9C+3B,EAAqBC,iBAAiBh4B,GACtC6b,EAAO7b,MAAM,kBAAmBA,GAChChF,KAAKwmB,QAMT++E,EAAej1G,UAAUitB,MAAQ,SAAS8qF,GAAsB,IAAA1gG,EAAA3H,KACtD9K,EAAO8K,KAETqoG,IACAroG,KAAKmmG,sBAAwB3jE,YACzB,WAEIttC,EAAKwuB,eAAe4kF,SAChB,SAAA9pD,GACI,IAAIm1C,EAAU,KAMVA,EAJCn1C,GAAWA,EAAO/4C,QACS,mBAAlB+4C,EAAO/4C,OAGP+4C,EAAO/4C,SAFP+4C,EAIdtpD,EAAK6wG,yBAA2BpS,EAC5BhsF,EAAK+9F,qBACLxwG,EAAKqzG,6BAELrzG,EAAKszG,0BAGTtzG,EAAK4wG,0BACC5wG,EAAK6wG,0BAEf,SAAA/gG,GAAK,OAAI9P,EAAKi5D,cAAcnpD,MAGpC9P,EAAKmxG,2BAIbrmG,KAAKsmG,gBAAkB9jE,YACnB,WAEIttC,EAAKwuB,eAAe4kF,SAChB,SAAA9pD,GACI,IAAIm1C,EAAU,KAQVA,EANCn1C,GAAWA,EAAO/4C,QACS,mBAAlB+4C,EAAO/4C,OAKP+4C,EAAO/4C,SAHP+4C,EAMdtpD,EAAK8wG,mBAAqBrS,EAC1B,IACQhsF,EAAK+9F,qBACLxwG,EAAKuzG,wBAELvzG,EAAKwzG,qBAEX,MAAOhwG,GACLqkC,EAAqBC,iBAAiBtkC,GACtCmoB,EAAO7b,MAAP,mBAAA3L,OAAgCX,GAAKA,GAGzCxD,EAAK+wG,oBAAsB/wG,EAAK8wG,oBAEpC,SAAAhhG,GAAK,OAAI9P,EAAKi5D,cAAcnpD,MAGpC9P,EAAKqxG,qBAYbhB,EAAej1G,UAAUu1G,0BAA4B,SAAStgG,GAI1D,IAcIojG,EAEJ,OAAQ3oG,KAAKylG,cACb,KAAKgB,IAASxvD,OACd,KAAKwvD,IAASvvD,MACd,KAAKuvD,IAASnvD,KACd,KAAKmvD,IAASlvD,SAQVoxD,EAAgB,SAACp1E,EAAMtjC,GAAP,OAAesjC,EAAKq1E,KAAK34G,IACzC,MACJ,KAAKw2G,IAASjvD,aAIVmxD,EAAgB,SAASp1E,EAAMtjC,GAC3B,IAAIN,EAaJ,OAXA4jC,EAAKhO,OAAO0+D,KAAK,SAAAhV,GACb,QAAIA,EAAK1+E,eAAeN,KACpBN,EAAQs/E,EAAKh/E,IAEN,KAORN,GAEX,MACJ,QACIg5G,EAAgB,SAACp1E,EAAMtjC,GAAP,OAAesjC,EAAKtjC,IAMxC,OAAO,SAACsjC,EAAMtkC,GAAP,OAAgB05G,EAAcp1E,EA1DjB,SAAStkC,GACzB,IAAMgB,EAAMsV,EAAKtW,GAEjB,GAAIgB,EACA,OAAOA,EAIX,sBAAAoJ,OAAuBpK,EAAvB,sBAkDuC45G,CAAY55G,MAW3Ds2G,EAAej1G,UAAUw4G,mBAAqB,SAAStqD,EAAQvvD,GAC3D,IAAIU,EAAQqQ,KAAK2lG,cAAcnnD,EAAQvvD,GAMvC,MAJqB,iBAAVU,IACPA,EAAQoqB,OAAOpqB,IAGfuqB,MAAMvqB,GACC,EAGJ2b,KAAKouB,IAAI,EAAG/pC,IAQvB41G,EAAej1G,UAAUo4G,mBAAqB,WAAW,IAAAlgG,EAAAxI,KACrD,GAAKA,KAAKimG,oBAAV,CAIA,IAAM8C,EAAe/oG,KAAK2lG,cACpBqD,EAAgB,GAEtB,IAAK,IAAMz4D,KAAOvwC,KAAKgmG,mBACnB,GAAKhmG,KAAKgmG,mBAAmBz1G,eAAeggD,GAA5C,CAGA,IAAMj8B,EAAMtU,KAAKgmG,mBAAmBz1D,GAGpC,GAAKj8B,EAAL,CAIA,IACI,IAAMyyF,EAAmBgC,EAAaz0F,EAAK,oBACrC0yF,EAAgB+B,EAAaz0F,EAAK,kBAEpCyyF,GAAoBC,KACpBhnG,KAAKomG,gBAAgB9oE,UAAY,CAC7B65D,SAAY7rF,KAAKy5F,MAAMgC,EAAmB,KAC1C5B,OAAU75F,KAAKy5F,MAAMiC,EAAgB,OAG/C,MAAOtuG,IAET,GAAiB,sBAAb4b,EAAIrN,KAA8B,2BAClC,IAAIg2E,OAAM,EAAE9tD,OAAE,EAAE44E,OAAkB,EAAEkB,OAAO,EACvCnB,OAAmB,EAAEzxE,OAAG,EAAEpvB,OAAI,EAElC,IAEI,KADAg2E,EAAS8rB,EAAaz0F,EAAK,qBAEvB,iBAGJ6a,EAAK45E,EAAaz0F,EAAK,iBACvBrN,EAAO8hG,EAAaz0F,EAAK,iBACzB20F,EAAUF,EAAaz0F,EAAK,gBAC5ByzF,EAAqBgB,EAAaz0F,EAAK,sBACvCwzF,EAAsBiB,EAAaz0F,EAAK,uBACxC+hB,EAAM7tB,EAAKsgG,mBAAmBx0F,EAAK,wBACrC,MAAO5b,IACT,IAAKy2B,IAAOloB,IAASgiG,GAAsB,SAAXhsB,EAC5B,iBAIJ,IAAMisB,EAA2B1gG,EAAK49F,gBAAgB5lF,UAiBtD,OAfK0oF,EAAyBjlB,KACtB,SAAAr0F,GAAC,OACGA,EAAEu/B,KAAOA,GACFv/B,EAAEqX,OAASA,GACXrX,EAAEq5G,UAAYA,KAC7BC,EAAyBhmG,KAAK,CAC1BisB,KACAloB,OACAgiG,UACAxjD,IAAKj9C,EAAKkb,eAAe6mB,MACzBw9D,qBACAD,sBACAzxE,QAGR,WAvCkC,GAuClC,SAGJ,GAAiB,kBAAb/hB,EAAIrN,KAA0B,CAE9B,GAAkB,cAAdqN,EAAIgsD,QAA0BhsD,EAAI60F,SAClC,SAGJ,IAAMC,EAAQppG,KAAKgmG,mBAAmB1xF,EAAI+0F,kBACpCC,EAAStpG,KAAKgmG,mBAAmB1xF,EAAIi1F,mBAE3CvpG,KAAKomG,gBAAgB5lF,UAAUtd,KAAK,CAChCisB,GAAE,GAAA91B,OAAKiwG,EAAOE,UAAZ,KAAAnwG,OAAyBiwG,EAAOG,YAClCxiG,KAAMmiG,EAAM5oF,UACZyoF,QAAO,GAAA5vG,OAAK+vG,EAAMI,UAAX,KAAAnwG,OAAwB+vG,EAAMK,YACrChkD,IAAKzlD,KAAK0jB,eAAe6mB,MACzBw9D,mBAAoBqB,EAAMM,cAC1B5B,oBAAqBwB,EAAOI,gBAIpC,GAAiB,SAAbp1F,EAAIrN,MAAgC,gBAAbqN,EAAIrN,MACX,eAAbqN,EAAIrN,MAAsC,UAAbqN,EAAIrN,KADxC,CAKA,IAAM0iG,EAAS3pG,KAAKimG,oBAAoB11D,GACpC/nB,EAAOxoB,KAAK8oG,mBAAmBx0F,EAAK,QAOxC,GAJiB,UAAbA,EAAIrN,MAAoBxR,MAAMC,QAAQ4e,EAAIs1F,WAC1CphF,EAAOzO,OAAOzF,EAAIs1F,QAAQ,KAGzBD,GAAWnhF,IAaK,IAAjBlU,EAAIu1F,WAA0C,IAArBv1F,EAAIw1F,aAAjC,CAIA,IAAIC,EAAY/pG,KAAKwmG,WAAWj3G,IAAIi5B,GAE/BuhF,IACDA,EAAY,IAAI/E,EAChBhlG,KAAKwmG,WAAW1iF,IAAI0E,EAAMuhF,IAG9B,IAAIC,GAAmB,EACnB/5G,EAAM,kBACNg6G,EAAalB,EAAaz0F,EAAKrkB,GAE/B,MAAOg6G,GACkC,KAAfA,IAC1BD,GAAmB,EAGf,OADJC,EAAalB,EAAaz0F,EAD1BrkB,EAAM,iBAGF4wB,EAAO1b,KAAK,oDAGf8kG,GAAcA,EAAa,KAC5BA,EAAa,GAGjB,IAAMC,EAAgBlqG,KAAK8oG,mBAAmBa,EAAQ15G,GAChDk6G,EAAc7+F,KAAKouB,IAAI,EAAGuwE,EAAaC,GAEvCE,EACApqG,KAAK8oG,mBAAmBx0F,EAAK,eAC7B+1F,EACArqG,KAAK8oG,mBAAmBa,EAAQ,eAChCW,EAAkBh/F,KAAKouB,IAAI,EAAG0wE,EAAiBC,GAErDN,EAAU/B,QAAQ,CACduC,aAAcJ,EAAcG,EAC5B3D,YAAa2D,EACbN,qBAGJ,IAAMQ,EACAxqG,KAAK8oG,mBAAmBx0F,EAAK,iBAC7Bm2F,EACAzqG,KAAK8oG,mBAAmBa,EAAQ,iBAChC9C,EACAv7F,KAAKouB,IAAI,EAAG8wE,EAAmBC,GAEjC5a,EAAY,EAGZ6a,EAAsB3B,EAAaz0F,EAAK,aAET,iBAAxBo2F,GAC2B,iBAAxBA,IACVA,EAAsB3wF,OAAO2wF,GACxBxwF,MAAMwwF,KACP1B,EAAcxgF,GAAQkiF,EAClBA,EAAsB,IACtB7a,EAAY6a,EACN3B,EAAaY,EAAQ,gBAIvC9Z,EAAYvkF,KAAKouB,IAAI,EAAGm2D,GAExB,IAAM8a,EAASr2F,EAAI6qE,UAAYwqB,EAAOxqB,UAClCyrB,EAAsB,EAAGC,EAAkB,EAE3CF,EAAS,IAETC,EAAsBt/F,KAAKy5F,MAAuB,EAAhB8B,EAAqB8D,GACvDE,EAAkBv/F,KAAKy5F,MAAmB,EAAZlV,EAAiB8a,IAGnDZ,EAAU7B,WAAW,CACjB/Q,SAAYyT,EACZzF,OAAU0F,IAGd,IAAMrvE,EAAa,CACfhC,OAAQ,KACRkC,MAAO,MAGX,IACI,IAAIlC,OAAM,EAAEkC,OAAK,GAEZlC,EAASuvE,EAAaz0F,EAAK,8BACxBonB,EAAQqtE,EAAaz0F,EAAK,4BAC9BknB,EAAWhC,OAASA,EACpBgC,EAAWE,MAAQA,IACXlC,EAASuvE,EAAaz0F,EAAK,0BAC/BonB,EAAQqtE,EAAaz0F,EAAK,yBAC9BknB,EAAWhC,OAASA,EACpBgC,EAAWE,MAAQA,GAEzB,MAAOhjC,IAGT,IAAImkC,OAAS,EAEb,IACIA,EAAYksE,EAAaz0F,EAAK,0BACvBy0F,EAAaz0F,EAAK,sBAAwB,EACnD,MAAO5b,GAGL,IACImkC,EAAY78B,KAAK8oG,mBAAmBx0F,EAAK,iBAC3C,MAAOjE,KAEb05F,EAAU3B,aAAa98F,KAAKy5F,MAAMloE,GAAa,IAE3CrB,EAAWhC,QAAUgC,EAAWE,MAChCquE,EAAU9B,cAAczsE,GAExBuuE,EAAU9B,cAAc,SAIhCjoG,KAAKoiB,aAAa6C,KACdX,IAAkCtkB,KAAK0jB,eAAgBslF,GAE3DhpG,KAAK8qG,0BAMTvF,EAAej1G,UAAUw6G,sBAAwB,WAAW,IAAA/8F,EAAA/N,KAElD8kG,EAAe,CACjB3N,SAAU,EACVgO,OAAQ,GAENN,EAAc,CAChB1N,SAAU,EACVgO,OAAQ,GAER4F,EAAkB,EAClBC,EAAgB,EACdC,EAAc,GACdC,EAAa,GACfC,EAAuB,EACvBC,EAAqB,EACrBC,EAAuB,EACvBC,EAAqB,EAjB+BpmF,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAmBxD,QAAA8kB,EAAAC,EAAkCtlB,KAAKwmG,WAAvC/2G,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAmD,KAAAwsB,EAAAC,EAAAtsB,EAAA11B,MAAA,GAAtC64B,EAAsCkpB,EAAA,GAAhCq4D,EAAgCr4D,EAAA,GAEzCuzD,EAAO8E,EAAU9E,KACjBh+F,EAAOg+F,EAAK+E,iBAAmB,WAAa,SAElDlF,EAAa79F,IAASg+F,EAAKsF,aAC3B1F,EAAY59F,IAASg+F,EAAK0B,YAG1BoE,GAAmBhB,EAAU7E,QAAQ/N,SACrC6T,GAAiBjB,EAAU7E,QAAQC,OAGnC,IAAMzgE,EAAQ1kC,KAAK0jB,eAAeoqB,eAAetlB,GAEjD,GAAIkc,EAAO,CACHA,EAAMqJ,gBACNo9D,GAAwBpB,EAAU7E,QAAQ/N,SAC1CiU,GAAsBrB,EAAU7E,QAAQC,SAExCkG,GAAwBtB,EAAU7E,QAAQ/N,SAC1CmU,GAAsBvB,EAAU7E,QAAQC,QAG5C,IAAMhvE,EAAgBuO,EAAMqvB,mBAE5B,GAAI59B,EAAe,CACf,IAAMqF,EAAauuE,EAAUvuE,WAE7B,GAAIA,EAAWE,OACJF,EAAWhC,SACW,IAAtBgC,EAAWE,QACY,IAAvBF,EAAWhC,OAAe,CACjC,IAAM+xE,EAAkBN,EAAY90E,IAAkB,GAEtDo1E,EAAgB/iF,GAAQgT,EACxByvE,EAAY90E,GAAiBo1E,EAEjC,GAA4B,IAAxBxB,EAAU3E,UAAiB,CAC3B,IAAMoG,EAAiBN,EAAW/0E,IAAkB,GAEpDq1E,EAAehjF,GAAQuhF,EAAU3E,UACjC8F,EAAW/0E,GAAiBq1E,QAGhC3qF,EAAO7b,MAAP,iCAAA3L,OAA8CqrC,IAItDqlE,EAAU5B,gBApE0C,MAAA93F,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAuExDplB,KAAKomG,gBAAgBlB,QAAU,CAC3BC,OAAU6F,EACV7T,SAAY4T,GAGhB/qG,KAAKomG,gBAAgBlB,QAAQ1qE,MAAQ,CACjC2qE,OAAUiG,EACVjU,SAAYgU,GAGhBnrG,KAAKomG,gBAAgBlB,QAAQ3rE,MAAQ,CACjC4rE,OAAUmG,EACVnU,SAAYkU,GAGhBrrG,KAAKomG,gBAAgBd,WAAa,CAC9Brc,MACI2b,EACIC,EAAY1N,SAAW0N,EAAYM,OACnCL,EAAa3N,SAAW2N,EAAaK,QAC7ChO,SACIyN,EAAoBC,EAAY1N,SAAU2N,EAAa3N,UAC3DgO,OACIP,EAAoBC,EAAYM,OAAQL,EAAaK,SAG7D,IACIsG,EADEC,EAAiB,GAGvBt8G,OAAOmW,KAAKvF,KAAKkmG,yBAAyB52F,QAAQ,SAAAkZ,GAAQ,IAAAmjF,EAC5B59F,EAAKm4F,wBAAwB19E,GAA/CxvB,EAD8C2yG,EAC9C3yG,KAAM8wB,EADwC6hF,EACxC7hF,QACR8hF,EAAgB5yG,EAAK0M,OAAO,SAACmmG,EAAKC,GAAN,OAAuBD,EAAMC,IAAgB9yG,EAAKpD,OAEpF,GAAIk0B,EACA2hF,EAAsBG,MACnB,CACH,IAAMlnE,EAAQ32B,EAAK2V,eAAeoqB,eAAe/zB,OAAOyO,IAExD,GAAIkc,EAAO,CACP,IAAMvO,EAAgBuO,EAAMqvB,mBAExB59B,IACAu1E,EAAev1E,GAAiBy1E,OAKhD5rG,KAAKkmG,wBAA0B,GAE/BlmG,KAAKoiB,aAAa6C,KACdX,IACAtkB,KAAK0jB,eACL,CACI4Z,UAAat9B,KAAKomG,gBAAgB9oE,UAClC4nE,QAAWllG,KAAKomG,gBAAgBlB,QAChCI,WAActlG,KAAKomG,gBAAgBd,WACnC9pE,WAAcyvE,EACd7F,UAAa8F,EACb1qF,UAAaxgB,KAAKomG,gBAAgB5lF,UAClCirF,sBACAC,mBAER1rG,KAAKomG,gBAAgB5lF,UAAY,IAMrC+kF,EAAej1G,UAAUk4G,wBAA0B,WAC/C,GAAKxoG,KAAK8lG,0BAAV,CAIA,IAAMiD,EAAe/oG,KAAK2lG,cAE1B,IAAK,IAAMp1D,KAAOvwC,KAAK+lG,yBACnB,GAAK/lG,KAAK+lG,yBAAyBx1G,eAAeggD,GAAlD,CAIA,IAAMj8B,EAAMtU,KAAK+lG,yBAAyBx1D,GAE1C,GAAiB,SAAbj8B,EAAIrN,MAAgC,UAAbqN,EAAIrN,KAA/B,CAIA,IAAM0iG,EAAS3pG,KAAK8lG,0BAA0Bv1D,GAC1C/nB,EAAOxoB,KAAK8oG,mBAAmBx0F,EAAK,QAMxC,IAJKkU,GAAQ/yB,MAAMC,QAAQ4e,EAAIs1F,WAC3BphF,EAAOzO,OAAOzF,EAAIs1F,QAAQ,KAGzBD,EAKL,GAAKnhF,EAAL,CAQA,IAAIqlB,OAAU,EAEd,IACIA,EACMk7D,EAAaz0F,EAAK,oBACby0F,EAAaz0F,EAAK,oBAC/B,MAAO5b,GAIL,OAHAmoB,EAAO1b,KAAK,0DACZ06B,cAAc7/B,KAAKmmG,uBAKvB,GAAIt4D,EAAY,CACZ,IAAI/jB,OAAO,EAIPA,EADa,SAAbxV,EAAIrN,MACO8hG,EAAaz0F,EAAK,oBAIlBA,EAAIw1F,aAQnBj8D,GAA0B,MAEpBrlB,KAAQxoB,KAAKkmG,0BACflmG,KAAKkmG,wBAAwB19E,GAAQ,CACjCsB,UACA9wB,KAAM,KAGdgH,KAAKkmG,wBAAwB19E,GAAMxvB,KAAKkK,KAAK2qC,GAE7C7tC,KAAKoiB,aAAa6C,KACdX,IACAtkB,KAAK0jB,eACL8E,EACAqlB,EACA/jB,SApDC3hB,KAAKmM,MAAQA,EAAI6qE,UAAa,KAC/Bt+D,EAAO1b,KAAK,kBANhB0b,EAAO1b,KAAP,GAAA9L,OAAemvB,EAAf,yBAiFZ+8E,EAAej1G,UAAUs1G,6BAA+B,SAASrgG,GAkB7D,OAAO,SAACguB,EAAMtkC,GAAP,OAAgBskC,EAdH,SAAStkC,GACzB,IAAMgB,EAAMsV,EAAKtW,GAEjB,GAAIgB,EACA,OAAOA,EAIX,sBAAAoJ,OAAuBpK,EAAvB,sBAMwB45G,CAAY55G,MAU5Cs2G,EAAej1G,UAAUy7G,oBAAsB,SAAS/5D,GACpD,IAAIriD,EAAQqiD,EAMZ,MAJqB,iBAAVriD,IACPA,EAAQoqB,OAAOpqB,IAGfuqB,MAAMvqB,GACC,EAGJ2b,KAAKouB,IAAI,EAAG/pC,IAavB41G,EAAej1G,UAAU07G,kBAAoB,SAAS13F,EAAKq1F,EAAQsC,GAC/D,IAAMC,EAAWlsG,KAAK+rG,oBAAoBz3F,EAAI23F,IACxCE,EAAcnsG,KAAK+rG,oBAAoBpC,EAAOsC,IAC9CG,EAAiB9gG,KAAKouB,IAAI,EAAGwyE,EAAWC,GAExCxB,EAASr2F,EAAI6qE,UAAYwqB,EAAOxqB,UAClCktB,EAAc,EAOlB,OALI1B,EAAS,IAET0B,EAAc/gG,KAAKy5F,MAAwB,EAAjBqH,EAAsBzB,IAG7C0B,GAMX9G,EAAej1G,UAAUm4G,sBAAwB,WAAW,IAAAl6F,EAAAvO,KACxD,GAAKA,KAAKimG,oBAAV,CAIA,IAAM8C,EAAe/oG,KAAK2lG,cACpBqD,EAAgB,GAEtBhpG,KAAKgmG,mBAAmB12F,QAAQ,SAAAgF,GAI5B,GAAiB,mBAAbA,EAAIrN,MACDqN,EAAIg4F,WACU,cAAdh4F,EAAIgsD,MAAuB,CAE9B,IAAMisC,EAA2Bj4F,EAAIi4F,yBAC/BC,EAA2Bl4F,EAAIk4F,0BAEjCD,GAA4BC,KAC5Bj+F,EAAK63F,gBAAgB9oE,UAAY,CAC7B65D,SAAY7rF,KAAKy5F,MAAMwH,EAA2B,KAClDpH,OAAU75F,KAAKy5F,MAAMyH,EAA2B,OAIxD,IAAMC,EACAl+F,EAAKy3F,mBAAmBz2G,IAAI+kB,EAAIi1F,mBAChCmD,EACAn+F,EAAKy3F,mBAAmBz2G,IAAI+kB,EAAI+0F,kBAKtC,GAAIoD,GAAuBC,EAAoB,CAG3C,IAAMC,EAAkB5D,EAAa0D,EAAqB,MACpDG,EAAa7D,EAAa0D,EAAqB,QAC/Ct9E,EAAE,GAAA91B,OAAMszG,EAAN,KAAAtzG,OAAyBuzG,GAE3BC,EAAiB9D,EAAa2D,EAAoB,MAClDI,EAAY/D,EAAa2D,EAAoB,QAE7CK,EAAO,GAAA1zG,OAAMwzG,EAAN,KAAAxzG,OAAwByzG,GAC/B7lG,EAAO8hG,EAAa0D,EAAqB,YAGzCvD,EAA2B36F,EAAK63F,gBAAgB5lF,UAEjD0oF,EAAyBjlB,KACtB,SAAAr0F,GAAC,OACGA,EAAEu/B,KAAOA,GACNv/B,EAAEqX,OAASA,GACXrX,EAAEq5G,UAAY8D,KACzB7D,EAAyBhmG,KAAK,CAC1BisB,KACAloB,OACA8lG,UACAtnD,IAAKl3C,EAAKmV,eAAe6mB,MACzBw9D,mBAAoB2E,EAAmBhD,cACvC5B,oBAAqB2E,EAAoB/C,cACzCsD,YAAaN,EAAmBM,YAChC32E,IAAgC,IAA3B/hB,EAAIuzF,6BASlB,GAAiB,gBAAbvzF,EAAIrN,MAAuC,iBAAbqN,EAAIrN,KAAyB,CAClE,IAAM0iG,EAASp7F,EAAK03F,oBAAoB12G,IAAI+kB,EAAIpN,IAC1CshB,EAAOja,EAAKw9F,oBAAoBz3F,EAAIkU,MAE1C,IAAKmhF,IAAWnhF,EACZ,OAGJ,IAAIuhF,EAAYx7F,EAAKi4F,WAAWj3G,IAAIi5B,GAE/BuhF,IACDA,EAAY,IAAI/E,EAChBz2F,EAAKi4F,WAAW1iF,IAAI0E,EAAMuhF,IAG9B,IAAIC,GAAmB,EACnB/5G,EAAM,kBAEO,iBAAbqkB,EAAIrN,OACJ+iG,GAAmB,EACnB/5G,EAAM,eAGV,IAAIg6G,EAAa31F,EAAIrkB,KAEhBg6G,GAAcA,EAAa,KAC5BA,EAAa,GAGjB,IAAMC,EAAgB37F,EAAKw9F,oBAAoBpC,EAAO15G,IAChDk6G,EAAc7+F,KAAKouB,IAAI,EAAGuwE,EAAaC,GAEvCE,EACA77F,EAAKw9F,oBAAoBz3F,EAAIqyF,aAC7B0D,EACA97F,EAAKw9F,oBAAoBpC,EAAOhD,aAChC2D,EACAh/F,KAAKouB,IAAI,EAAG0wE,EAAiBC,GAEnCN,EAAU/B,QAAQ,CACduC,aAAcJ,EAAcG,EAC5B3D,YAAa2D,EACbN,qBAGa,gBAAb11F,EAAIrN,KAEJ8iG,EAAU7B,WAAW,CACjB/Q,SAAY5oF,EAAKy9F,kBACD13F,EAAKq1F,EAAQ,iBAC7BxE,OAAU,KAQd6D,EAAcxgF,GAAQja,EAAKw9F,oBAAoBz3F,EAAIu7E,WACnDka,EAAU7B,WAAW,CACjB/Q,SAAY,EACZgO,OAAU52F,EAAKy9F,kBACH13F,EAAKq1F,EAAQ,gBAUjC,IAAM7C,EAAgBxyF,EAAIwyF,cAEtBA,GACAiD,EAAU3B,aAAa98F,KAAKy5F,MAAM+B,GAAiB,SAQpD,GAAiB,UAAbxyF,EAAIrN,KAAkB,CAE7B,IAAMu0B,EAAa,CACfhC,OAAQllB,EAAI24F,YACZvxE,MAAOpnB,EAAI44F,YAIXrwE,EAAYvoB,EAAI64F,gBAEpB,IAAKtwE,EAAW,CAEZ,IAAM8sE,EAASp7F,EAAK03F,oBAAoB12G,IAAI+kB,EAAIpN,IAEhD,GAAIyiG,EAAQ,CACR,IAAMgB,EAASr2F,EAAI6qE,UAAYwqB,EAAOxqB,UAEtC,GAAIwrB,EAAS,GAAKr2F,EAAI84F,WAIlBvwE,GAFMvoB,EAAI84F,WAAazD,EAAOyD,YAEWzC,EAAU,IAI3D,IAAK9tE,EACD,OAIR,IAAMwwE,EAAkB/4F,EAAI+4F,gBACtB7kF,EAAOja,EAAKmV,eAAe4pF,iBAAiBD,GAC9CtD,EAAYx7F,EAAKi4F,WAAWj3G,IAAIi5B,GAE/BuhF,IACDA,EAAY,IAAI/E,EAChBz2F,EAAKi4F,WAAW1iF,IAAI0E,EAAMuhF,IAE9BA,EAAU3B,aAAa98F,KAAKy5F,MAAMloE,GAAa,IAE3CrB,EAAWhC,QAAUgC,EAAWE,MAChCquE,EAAU9B,cAAczsE,GAExBuuE,EAAU9B,cAAc,SAKpCjoG,KAAKoiB,aAAa6C,KACdX,IAAkCtkB,KAAK0jB,eAAgBslF,GAE3DhpG,KAAK8qG,0BAMTvF,EAAej1G,UAAUi4G,2BAA6B,WAAW,IAAA55F,EAAA3O,KACxDA,KAAK8lG,2BAIV9lG,KAAK+lG,yBAAyBz2F,QAAQ,SAAAgF,GAClC,GAAiB,UAAbA,EAAIrN,KAAR,CAKA,IAAM4mC,EAAav5B,EAAIu5B,WAEvB,GAAKA,EAAL,CAIA,IAAMw/D,EAAkB/4F,EAAI+4F,gBACtB7kF,EAAO7Z,EAAK+U,eAAe4pF,iBAAiBD,GAElD,GAAI7kF,EAAM,CACN,IAAMsB,EACAtB,IAAS7Z,EAAK+U,eAAe6pF,aAC/B5+F,EAAK+U,eAAekpB,eAAejI,MAEvCh2B,EAAKyT,aAAa6C,KACdX,IACA3V,EAAK+U,eACL8E,EACAqlB,EACA/jB,8FCvuChB,IAAAgsC,EAAetnE,EAAQ,IAYvB,SAAAouE,EAAAC,EAAArY,EAAAv9C,EAAAgd,EAAAupF,GACA,IAAAl7E,EAAAwjC,EAAAyE,oBAAAsC,EAAAr+B,KAAAgmB,GAuBA,GApBAlyB,GAAAwjC,EAAAgE,mBACA+C,EAAAC,YAAAC,sBAGAzqC,GAAAwjC,EAAA+C,oBACAgE,EAAAG,cAAAD,qBACA,UAAA91D,EAAA,UAAAumG,GAAA,UAEAl7E,GAAA,SAAAuqC,EAAAxsB,IAAA,OAEAwsB,EAAAI,WAAAJ,EAAAK,YACA5qC,GAAA,iBACGuqC,EAAAI,UACH3qC,GAAA,iBACGuqC,EAAAK,YACH5qC,GAAA,iBAEAA,GAAA,iBAGAuqC,EAAAI,UAAA,CACA,IAAAkgB,EAAAtgB,EAAAI,UAAAwwC,iBACA5wC,EAAAI,UAAAv4B,MAAAx9B,GACA21D,EAAAI,UAAAwwC,gBAAAtwB,EAEA,IAAAziC,EAAA,SAAAz2B,IAAA/c,GAAA,SACAi2E,EAAA,OACA7qD,GAAA,KAAAooB,EAEApoB,GAAA,UAAAuqC,EAAAM,uBAAA,GAAA30C,KACA,IAAAkyB,EAGAmiB,EAAAM,uBAAA,GAAAjC,MACA5oC,GAAA,UAAAuqC,EAAAM,uBAAA,GAAAjC,IAAA1yC,KACA,IAAAkyB,EACApoB,GAAA,oBACAuqC,EAAAM,uBAAA,GAAA30C,KAAA,IACAq0C,EAAAM,uBAAA,GAAAjC,IAAA1yC,KACA,QAUA,OANA8J,GAAA,UAAAuqC,EAAAM,uBAAA,GAAA30C,KACA,UAAAstC,EAAAE,WAAA,OACA6G,EAAAI,WAAAJ,EAAAM,uBAAA,GAAAjC,MACA5oC,GAAA,UAAAuqC,EAAAM,uBAAA,GAAAjC,IAAA1yC,KACA,UAAAstC,EAAAE,WAAA,QAEA1jC,EA2CA,SAAAo7E,EAAAC,EAAAC,GACA,IAAAC,EAAA,CACA5zC,OAAA,GACAC,iBAAA,GACAC,cAAA,IAGA2zC,EAAA,SAAAh+E,EAAAmqC,GACAnqC,EAAAhX,SAAAgX,EAAA,IACA,QAAAphC,EAAA,EAAmBA,EAAAurE,EAAArkE,OAAmBlH,IACtC,GAAAurE,EAAAvrE,GAAAkkC,cAAA9C,GACAmqC,EAAAvrE,GAAA6oE,uBAAAznC,EACA,OAAAmqC,EAAAvrE,IAKAq/G,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAN,EAAAE,EAAAp2C,WAAAmD,IAAAmzC,GACAG,EAAAP,EAAAG,EAAAr2C,WAAAmD,IAAAozC,GACA,OAAAC,GAAAC,GACAD,EAAAn/G,KAAA0T,gBAAA0rG,EAAAp/G,KAAA0T,eAqDA,OAlDAgrG,EAAA1zC,OAAA3qD,QAAA,SAAA8+F,GACA,QAAA1/G,EAAA,EAAmBA,EAAAk/G,EAAA3zC,OAAArkE,OAAsClH,IAAA,CACzD,IAAA2/G,EAAAT,EAAA3zC,OAAAvrE,GACA,GAAA0/G,EAAAn/G,KAAA0T,gBAAA0rG,EAAAp/G,KAAA0T,eACAyrG,EAAAh3C,YAAAi3C,EAAAj3C,UAAA,CACA,WAAAg3C,EAAAn/G,KAAA0T,eACAyrG,EAAAx2C,YAAAy2C,EAAAz2C,WAAAmD,MAGAgzC,EAAAK,EAAAC,EACAV,EAAA1zC,OAAA2zC,EAAA3zC,QACA,UAGAo0C,EAAAvhG,KAAA4L,MAAA5L,KAAA8L,UAAAy1F,KAEAh3C,YAAA/rD,KAAA2P,IAAAmzF,EAAA/2C,YACAg3C,EAAAh3C,aAEAw2C,EAAA5zC,OAAA/2D,KAAAmrG,GAGAA,EAAAp2C,aAAAo2C,EAAAp2C,aAAAjnC,OAAA,SAAAknC,GACA,QAAA3/D,EAAA,EAAyBA,EAAA61G,EAAAn2C,aAAAriE,OAAgC2C,IACzD,GAAA61G,EAAAn2C,aAAA1/D,GAAA0O,OAAAixD,EAAAjxD,MACAmnG,EAAAn2C,aAAA1/D,GAAAw/D,YAAAG,EAAAH,UACA,SAGA,WAIA,UAKA41C,EAAAzzC,iBAAA5qD,QAAA,SAAAg/F,GACA,QAAA5/G,EAAA,EAAmBA,EAAAk/G,EAAA1zC,iBAAAtkE,OACnBlH,IAAA,CACA,IAAA6/G,EAAAX,EAAA1zC,iBAAAxrE,GACA,GAAA4/G,EAAAp+E,MAAAq+E,EAAAr+E,IAAA,CACA29E,EAAA3zC,iBAAAh3D,KAAAqrG,GACA,UAMAV,EAIA,SAAAW,EAAAn5E,EAAApuB,EAAA46D,GACA,OASG,IATH,CACAmH,MAAA,CACAhE,oBAAA,8BACA4D,qBAAA,gCAEAE,OAAA,CACA9D,oBAAA,4CACA4D,qBAAA,8CAEG3hE,GAAAouB,GAAAzxB,QAAAi+D,GAGH,SAAA4sC,EAAAC,EAAA3/E,GAGA,IAAA4/E,EAAAD,EAAAE,sBACAr9E,KAAA,SAAAs9E,GACA,OAAA9/E,EAAAE,aAAA4/E,EAAA5/E,YACAF,EAAAI,KAAA0/E,EAAA1/E,IACAJ,EAAAd,OAAA4gF,EAAA5gF,MACAc,EAAAhd,WAAA88F,EAAA98F,UACAgd,EAAArmB,WAAAmmG,EAAAnmG,UACAqmB,EAAA9nB,OAAA4nG,EAAA5nG,OAKA,OAHA0nG,GACAD,EAAAI,mBAAA//E,IAEA4/E,EAIA,SAAAI,EAAA9/G,EAAA+qE,GACA,IAAAthE,EAAA,IAAAhC,MAAAsjE,GAUA,OATAthE,EAAAzJ,OAEAyJ,EAAAykB,KAAA,CACA6xF,kBAAA,EACAC,kBAAA,GACAC,mBAAA,GACAh5G,eAAAqK,EACA4uG,oBAAA5uG,GACGtR,GACHyJ,EAGAvK,EAAAD,QAAA,SAAAI,EAAA8gH,GAIA,SAAAC,EAAA3qE,EAAAzgB,GACAA,EAAAqgB,SAAAI,GACAzgB,EAAAqrF,cAAA,IAAAhhH,EAAAihH,sBAAA,WACA,CAAS7qE,WAST,SAAA8qE,EAAA7wD,EAAAja,EAAA2iD,EAAApjD,GACA,IAAAwrE,EAAA,IAAAC,MAAA,SACAD,EAAA/qE,QACA+qE,EAAApoB,WACAooB,EAAA5yC,YAAA,CAA8BwqB,YAC9BooB,EAAAxrE,UACA31C,EAAAmc,WAAA,WACAk0C,EAAAgxD,eAAA,QAAAF,KAIA,IAAApvE,EAAA,SAAA3M,GACA,IAAAirB,EAAA3+C,KAEA4vG,EAAAl1G,SAAA2I,yBAwBA,GAvBA,2DACAiM,QAAA,SAAAu7E,GACAlsC,EAAAksC,GAAA+kB,EAAA/kB,GAAA36F,KAAA0/G,KAGA5vG,KAAA6vG,wBAAA,KAEA7vG,KAAA8vG,iBAAA,EAEA9vG,KAAA+vG,aAAA,GACA/vG,KAAAgwG,cAAA,GAEAhwG,KAAAiwG,kBAAA,KACAjwG,KAAAkwG,mBAAA,KAEAlwG,KAAA6hE,eAAA,SACA7hE,KAAAgiE,mBAAA,MACAhiE,KAAA8hE,gBAAA,MACA9hE,KAAAmwG,kBAAA,MAEAz8E,EAAA5mB,KAAA4L,MAAA5L,KAAA8L,UAAA8a,GAAA,KAEA1zB,KAAAowG,YAAA,eAAA18E,EAAA6Y,aACA,cAAA7Y,EAAA28E,cACA,MAAAtB,EAAA,oBACA,8CAKA,OAJKr7E,EAAA28E,gBACL38E,EAAA28E,cAAA,WAGA38E,EAAAm1B,oBACA,UACA,YACA,MACA,QACAn1B,EAAAm1B,mBAAA,MAIA,OAAAn1B,EAAA6Y,cACA,eACA,iBACA,iBACA,MACA,QACA7Y,EAAA6Y,aAAA,WAOA,GAHA7Y,EAAAg1B,WA/OA,SAAAA,EAAA0mD,GACA,IAAAkB,GAAA,EAEA,OADA5nD,EAAA57C,KAAA4L,MAAA5L,KAAA8L,UAAA8vC,KACA13B,OAAA,SAAAiwB,GACA,GAAAA,MAAAsC,MAAAtC,EAAA9Z,KAAA,CACA,IAAAoc,EAAAtC,EAAAsC,MAAAtC,EAAA9Z,IACA8Z,EAAA9Z,MAAA8Z,EAAAsC,MACAx+C,QAAAI,KAAA,qDAEA,IAAAorG,EAAA,iBAAAhtD,EAoBA,OAnBAgtD,IACAhtD,EAAA,CAAAA,IAEAA,IAAAvyB,OAAA,SAAAmW,GAMA,OALA,IAAAA,EAAAvjC,QAAA,WACA,IAAAujC,EAAAvjC,QAAA,mBACA,IAAAujC,EAAAvjC,QAAA,WACA0sG,EAMA,IAAAnpE,EAAAvjC,QAAA,UAAAwrG,GAAA,QACA,IAAAjoE,EAAAvjC,QAAA,mBAJA0sG,GAAA,GACA,YAMArvD,EAAA9Z,IACA8Z,EAAAsC,KAAAgtD,EAAAhtD,EAAA,GAAAA,IACAA,EAAA3tD,UAkNA46G,CAAA98E,EAAAg1B,YAAA,GAAA0mD,GAEApvG,KAAAywG,cAAA,GACA/8E,EAAAg9E,qBACA,QAAAhiH,EAAAglC,EAAAg9E,qBAA+ChiH,EAAA,EAAOA,IACtDsR,KAAAywG,cAAAvtG,KAAA,IAAA5U,EAAAqiH,eAAA,CACAjoD,WAAAh1B,EAAAg1B,WACAkoD,aAAAl9E,EAAAm1B,2BAIAn1B,EAAAg9E,qBAAA,EAGA1wG,KAAA6wG,QAAAn9E,EAIA1zB,KAAAioF,aAAA,GAEAjoF,KAAA8wG,cAAAh7C,EAAAyG,oBACAv8D,KAAA+wG,mBAAA,EAEA/wG,KAAAgxG,eAAAzwG,EAEAP,KAAAixG,WAAA,GAGA7hH,OAAAC,eAAAgxC,EAAA/vC,UAAA,oBACAgyG,cAAA,EACA/yG,IAAA,WACA,OAAAyQ,KAAAiwG,qBAGA7gH,OAAAC,eAAAgxC,EAAA/vC,UAAA,qBACAgyG,cAAA,EACA/yG,IAAA,WACA,OAAAyQ,KAAAkwG,sBAKA7vE,EAAA/vC,UAAAmxE,eAAA,KACAphC,EAAA/vC,UAAA4gH,YAAA,KACA7wE,EAAA/vC,UAAA6gH,QAAA,KACA9wE,EAAA/vC,UAAA8gH,eAAA,KACA/wE,EAAA/vC,UAAAsxE,uBAAA,KACAvhC,EAAA/vC,UAAAyxE,2BAAA,KACA1hC,EAAA/vC,UAAA+gH,wBAAA,KACAhxE,EAAA/vC,UAAAghH,0BAAA,KACAjxE,EAAA/vC,UAAA8xE,oBAAA,KACA/hC,EAAA/vC,UAAAihH,cAAA,KAEAlxE,EAAA/vC,UAAAq/G,eAAA,SAAA1gH,EAAAy9B,GACA1sB,KAAAixG,YAGAjxG,KAAAsvG,cAAA5iF,GACA,mBAAA1sB,KAAA,KAAA/Q,IACA+Q,KAAA,KAAA/Q,GAAAy9B,KAIA2T,EAAA/vC,UAAAkhH,0BAAA,WACA,IAAA9kF,EAAA,IAAAgjF,MAAA,2BACA1vG,KAAA2vG,eAAA,0BAAAjjF,IAGA2T,EAAA/vC,UAAAmhH,iBAAA,WACA,OAAAzxG,KAAA6wG,SAGAxwE,EAAA/vC,UAAAohH,gBAAA,WACA,OAAA1xG,KAAA+vG,cAGA1vE,EAAA/vC,UAAAqhH,iBAAA,WACA,OAAA3xG,KAAAgwG,eAKA3vE,EAAA/vC,UAAAshH,mBAAA,SAAApzE,EAAAqzE,GACA,IAAAC,EAAA9xG,KAAAioF,aAAAryF,OAAA,EACAinE,EAAA,CACAn4B,MAAA,KACAo4B,YAAA,KACA4xC,aAAA,KACA1xC,cAAA,KACA2wC,kBAAA,KACAC,mBAAA,KACA3wC,UAAA,KACAC,YAAA,KACA1+B,OACA6R,IAAA,KACA8sB,uBAAA,KACA40C,uBAAA,KACA9tF,OAAA,KACA+tF,6BAAA,GACAC,aAAA,GAEA,GAAAjyG,KAAAowG,aAAA0B,EACAj1C,EAAA6xC,aAAA1uG,KAAAioF,aAAA,GAAAymB,aACA7xC,EAAAG,cAAAh9D,KAAAioF,aAAA,GAAAjrB,kBACK,CACL,IAAAp8C,EAAA5gB,KAAAkyG,8BACAr1C,EAAA6xC,aAAA9tF,EAAA8tF,aACA7xC,EAAAG,cAAAp8C,EAAAo8C,cAKA,OAHA60C,GACA7xG,KAAAioF,aAAA/kF,KAAA25D,GAEAA,GAGAx8B,EAAA/vC,UAAAg0C,SAAA,SAAAI,EAAAzgB,GACA,GAAAjkB,KAAAixG,UACA,MAAAlC,EAAA,oBACA,0DAGA,IAQAlyC,EAJA,GAJA78D,KAAAioF,aAAA12D,KAAA,SAAA9gC,GACA,OAAAA,EAAAi0C,YAIA,MAAAqqE,EAAA,8CAIA,QAAArgH,EAAA,EAAmBA,EAAAsR,KAAAioF,aAAAryF,OAA8BlH,IACjDsR,KAAAioF,aAAAv5F,GAAAg2C,OACA1kC,KAAAioF,aAAAv5F,GAAA8vC,OAAAkG,EAAAlG,OACAq+B,EAAA78D,KAAAioF,aAAAv5F,IAiBA,OAdAmuE,IACAA,EAAA78D,KAAA4xG,mBAAAltE,EAAAlG,OAGAx+B,KAAAmyG,+BAEA,IAAAnyG,KAAA+vG,aAAAnsG,QAAAqgB,IACAjkB,KAAA+vG,aAAA7sG,KAAA+gB,GAGA44C,EAAAn4B,QACAm4B,EAAA54C,SACA44C,EAAAI,UAAA,IAAA3uE,EAAA8jH,aAAA1tE,EACAm4B,EAAAG,eACAH,EAAAI,WAGA58B,EAAA/vC,UAAAg3F,UAAA,SAAArjE,GACA,IAAA06B,EAAA3+C,KACA,GAAAovG,GAAA,MACAnrF,EAAAmiB,YAAA92B,QAAA,SAAAo1B,GACAia,EAAAra,SAAAI,EAAAzgB,SAEK,CAIL,IAAAouF,EAAApuF,EAAA6hD,QACA7hD,EAAAmiB,YAAA92B,QAAA,SAAAo1B,EAAA6L,GACA,IAAA+hE,EAAAD,EAAAjsE,YAAAmK,GACA7L,EAAAnC,iBAAA,mBAAA7V,GACA4lF,EAAAvjB,QAAAriE,EAAAqiE,YAGAsjB,EAAAjsE,YAAA92B,QAAA,SAAAo1B,GACAia,EAAAra,SAAAI,EAAA2tE,OAKAhyE,EAAA/vC,UAAAm+F,YAAA,SAAAjH,GACA,GAAAxnF,KAAAixG,UACA,MAAAlC,EAAA,oBACA,6DAGA,KAAAvnB,aAAAl5F,EAAA8jH,cACA,UAAAl8G,UAAA,0FAIA,IAAA2mE,EAAA78D,KAAAioF,aAAA12D,KAAA,SAAA3hC,GACA,OAAAA,EAAAqtE,YAAAuqB,IAGA,IAAA3qB,EACA,MAAAkyC,EAAA,qBACA,8CAEA,IAAA9qF,EAAA44C,EAAA54C,OAEA44C,EAAAI,UAAAz2C,OACAq2C,EAAAI,UAAA,KACAJ,EAAAn4B,MAAA,KACAm4B,EAAA54C,OAAA,MAMA,IAHAjkB,KAAAioF,aAAAziF,IAAA,SAAA5V,GACA,OAAAA,EAAAq0B,SAEArgB,QAAAqgB,IACAjkB,KAAA+vG,aAAAnsG,QAAAqgB,IAAA,GACAjkB,KAAA+vG,aAAA9rG,OAAAjE,KAAA+vG,aAAAnsG,QAAAqgB,GAAA,GAGAjkB,KAAAmyG,+BAGA9xE,EAAA/vC,UAAAiiH,aAAA,SAAAtuF,GACA,IAAA06B,EAAA3+C,KACAikB,EAAAmiB,YAAA92B,QAAA,SAAAo1B,GACA,IAAA8iD,EAAA7oC,EAAA6zD,aAAAjhF,KAAA,SAAA9gC,GACA,OAAAA,EAAAi0C,YAEA8iD,GACA7oC,EAAA8vC,YAAAjH,MAKAnnD,EAAA/vC,UAAAkiH,WAAA,WACA,OAAAxyG,KAAAioF,aAAAj3D,OAAA,SAAA6rC,GACA,QAAAA,EAAAI,YAEAz3D,IAAA,SAAAq3D,GACA,OAAAA,EAAAI,aAIA58B,EAAA/vC,UAAAmiH,aAAA,WACA,OAAAzyG,KAAAioF,aAAAj3D,OAAA,SAAA6rC,GACA,QAAAA,EAAAK,cAEA13D,IAAA,SAAAq3D,GACA,OAAAA,EAAAK,eAKA78B,EAAA/vC,UAAAoiH,mBAAA,SAAAxvC,EACAktC,GACA,IAAAzxD,EAAA3+C,KACA,GAAAowG,GAAAltC,EAAA,EACA,OAAAljE,KAAAioF,aAAA,GAAAnrB,YACK,GAAA98D,KAAAywG,cAAA76G,OACL,OAAAoK,KAAAywG,cAAAziF,QAEA,IAAA8uC,EAAA,IAAAxuE,EAAAqiH,eAAA,CACAjoD,WAAA1oD,KAAA6wG,QAAAnoD,WACAkoD,aAAA5wG,KAAA6wG,QAAAhoD,qBAkBA,OAhBAz5D,OAAAC,eAAAytE,EAAA,QACA,CAASntE,MAAA,MAAA4yG,UAAA,IAGTviG,KAAAioF,aAAA/kB,GAAAyvC,wBAAA,GACA3yG,KAAAioF,aAAA/kB,GAAA0vC,iBAAA,SAAAlmF,GACA,IAAAmmF,GAAAnmF,EAAAqC,WAAA,IAAA3/B,OAAAmW,KAAAmnB,EAAAqC,WAAAn5B,OAGAknE,EAAAwD,MAAAuyC,EAAA,wBACA,OAAAl0D,EAAAspC,aAAA/kB,GAAAyvC,yBACAh0D,EAAAspC,aAAA/kB,GAAAyvC,wBAAAzvG,KAAAwpB,IAGAowC,EAAAv6B,iBAAA,iBACAviC,KAAAioF,aAAA/kB,GAAA0vC,kBACA91C,GAIAz8B,EAAA/vC,UAAAwiH,QAAA,SAAAziE,EAAA6yB,GACA,IAAAvkB,EAAA3+C,KACA88D,EAAA98D,KAAAioF,aAAA/kB,GAAApG,YACA,IAAAA,EAAAi2C,iBAAA,CAGA,IAAAJ,EACA3yG,KAAAioF,aAAA/kB,GAAAyvC,wBACA3yG,KAAAioF,aAAA/kB,GAAAyvC,wBAAA,KACA71C,EAAApjB,oBAAA,iBACA15C,KAAAioF,aAAA/kB,GAAA0vC,kBACA91C,EAAAi2C,iBAAA,SAAAC,GACA,KAAAr0D,EAAAyxD,aAAAltC,EAAA,IAMA,IAAAx2C,EAAA,IAAAgjF,MAAA,gBACAhjF,EAAAqC,UAAA,CAAyB40C,OAAAtzB,EAAA6yB,iBAEzB,IAAA1zC,EAAAwjF,EAAAjkF,UAEA8jF,GAAArjF,GAAA,IAAApgC,OAAAmW,KAAAiqB,GAAA55B,OACA,GAAAi9G,EAGA,QAAA/1C,EAAAwD,OAAA,cAAAxD,EAAAwD,QACAxD,EAAAwD,MAAA,iBAEO,CACP,QAAAxD,EAAAwD,QACAxD,EAAAwD,MAAA,aAGA9wC,EAAAN,UAAA,EAEAM,EAAAnC,MAAAyvC,EAAAC,qBAAAjG,iBAEA,IAAAm8C,EAAAn9C,EAAAiB,eAAAvnC,GACA9C,EAAAqC,UAAA3/B,OAAAggG,OAAA1iE,EAAAqC,UACA+mC,EAAAW,eAAAw8C,IAEAvmF,EAAAqC,oBAAAkkF,EACAvmF,EAAAqC,UAAAmkF,OAAA,WACA,OACAnkF,UAAArC,EAAAqC,oBACA40C,OAAAj3C,EAAAqC,UAAA40C,OACAT,cAAAx2C,EAAAqC,UAAAm0C,cACApM,iBAAApqC,EAAAqC,UAAA+nC,mBAMA,IAAAR,EAAAR,EAAAS,iBAAA5X,EAAAsxD,kBAAA39E,KAKAgkC,EAAA5pC,EAAAqC,UAAAm0C,gBAJA2vC,EAKA,0BAHA,KAAAnmF,EAAAqC,oBAAA,OAKA4vB,EAAAsxD,kBAAA39E,IACAwjC,EAAAO,eAAA1X,EAAAsxD,kBAAA39E,KACAgkC,EAAAnzD,KAAA,IACA,IAAAgwG,EAAAx0D,EAAAspC,aAAA2L,MAAA,SAAA/2B,GACA,OAAAA,EAAAC,aACA,cAAAD,EAAAC,YAAAwD,QAGA,cAAA3hB,EAAAwxD,oBACAxxD,EAAAwxD,kBAAA,YACAxxD,EAAA6yD,6BAKAqB,GACAl0D,EAAAgxD,eAAA,eAAAjjF,GAEAymF,IACAx0D,EAAAgxD,eAAA,mBAAAD,MAAA,iBACA/wD,EAAAwxD,kBAAA,WACAxxD,EAAA6yD,+BAKAljH,EAAAmc,WAAA,WACAkoG,EAAArjG,QAAA,SAAA5W,GACAokE,EAAAi2C,iBAAAr6G,MAEK,KAIL2nC,EAAA/vC,UAAA4hH,4BAAA,WACA,IAAAvzD,EAAA3+C,KACA0uG,EAAA,IAAApgH,EAAA8kH,gBAAA,MACA1E,EAAA2E,iBAAA,WACA10D,EAAA20D,4BACA30D,EAAA40D,0BAGA,IAAAv2C,EAAA,IAAA1uE,EAAAklH,iBAAA9E,GAWA,OAVA1xC,EAAAy2C,kBAAA,WACA90D,EAAA40D,0BAEAv2C,EAAA7gD,QAAA,WAEA/sB,OAAAC,eAAA2tE,EAAA,QACA,CAAWrtE,MAAA,SAAA4yG,UAAA,IACX5jD,EAAA40D,0BAGA,CACA7E,eACA1xC,kBAMA38B,EAAA/vC,UAAAojH,6BAAA,SACAxwC,GACA,IAAApG,EAAA98D,KAAAioF,aAAA/kB,GAAApG,YACAA,WACAA,EAAAi2C,wBACA/yG,KAAAioF,aAAA/kB,GAAApG,aAEA,IAAA4xC,EAAA1uG,KAAAioF,aAAA/kB,GAAAwrC,aACAA,WACAA,EAAA2E,wBACArzG,KAAAioF,aAAA/kB,GAAAwrC,cAEA,IAAA1xC,EAAAh9D,KAAAioF,aAAA/kB,GAAAlG,cACAA,WACAA,EAAAy2C,yBACAz2C,EAAA7gD,eACAnc,KAAAioF,aAAA/kB,GAAAlG,gBAKA38B,EAAA/vC,UAAAqjH,YAAA,SAAA92C,EACAtvD,EAAAqmG,GACA,IAAA7jF,EAAA29E,EAAA7wC,EAAA8wC,kBACA9wC,EAAA+wC,oBACArgG,GAAAsvD,EAAAI,YACAltC,EAAAg4D,UAAAlrB,EAAAM,uBACAptC,EAAAqqC,KAAA,CACAoB,MAAA1F,EAAAE,WACA2F,SAAAkB,EAAAvB,eAAAK,UAEAkB,EAAAk1C,uBAAAn8G,SACAm6B,EAAAqqC,KAAA5xC,KAAAq0C,EAAAk1C,uBAAA,GAAAvpF,MAEAq0C,EAAAI,UAAA1vD,KAAAwiB,IAEA6jF,GAAA/2C,EAAAK,aAAAntC,EAAAkqC,OAAArkE,OAAA,IAEA,UAAAinE,EAAAr+B,MACAq+B,EAAAk1C,wBACA3C,EAAA,OACAvyC,EAAAk1C,uBAAAziG,QAAA,SAAA9e,UACAA,EAAA0qE,MAGA2B,EAAAk1C,uBAAAn8G,OACAm6B,EAAAg4D,UAAAlrB,EAAAk1C,uBAEAhiF,EAAAg4D,UAAA,KAEAh4D,EAAAqqC,KAAA,CACAuB,SAAAkB,EAAAvB,eAAAK,UAEAkB,EAAAvB,eAAAE,QACAzrC,EAAAqqC,KAAAoB,MAAAqB,EAAAvB,eAAAE,OAEAqB,EAAAM,uBAAAvnE,SACAm6B,EAAAqqC,KAAA5xC,KAAAq0C,EAAAM,uBAAA,GAAA30C,MAEAq0C,EAAAK,YAAA22C,QAAA9jF,KAIAsQ,EAAA/vC,UAAA00E,oBAAA,SAAAhL,GACA,IAeA1D,EACAjmC,EAhBAsuB,EAAA3+C,KAGA,2BAAA4D,QAAAo2D,EAAA/yD,MACA,OAAAm8B,QAAAE,OAAAyrE,EAAA,YACA,qBAAA/0C,EAAA/yD,KAAA,MAGA,IAAAunG,EAAA,sBACAx0C,EAAA/yD,KAAA03C,EAAAkjB,iBAAAljB,EAAAsyD,UACA,OAAA7tE,QAAAE,OAAAyrE,EAAA,oBACA,qBAAA/0C,EAAA/yD,KACA,aAAA03C,EAAAkjB,iBAKA,aAAA7H,EAAA/yD,KAGAqvD,EAAAR,EAAAK,cAAA6D,EAAA1nC,KACAjC,EAAAimC,EAAAtoC,QACAsoC,EAAAhnD,QAAA,SAAAkpD,EAAA0K,GACA,IAAA1e,EAAAsR,EAAAiE,mBAAAvB,GACA7Z,EAAAspC,aAAA/kB,GAAAyqC,kBAAAnpD,IAGA7F,EAAAspC,aAAA34E,QAAA,SAAAutD,EAAAqG,GACAvkB,EAAAm0D,QAAAj2C,EAAAxsB,IAAA6yB,UAEK,cAAAlJ,EAAA/yD,KAAA,CACLqvD,EAAAR,EAAAK,cAAAxX,EAAAuxD,mBAAA59E,KACAjC,EAAAimC,EAAAtoC,QACA,IAAA8lF,EAAAh+C,EAAAU,YAAAnmC,EACA,cAAAz6B,OAAA,EACA0gE,EAAAhnD,QAAA,SAAAkpD,EAAA0K,GACA,IAAArG,EAAAle,EAAAspC,aAAA/kB,GACApG,EAAAD,EAAAC,YACA4xC,EAAA7xC,EAAA6xC,aACA1xC,EAAAH,EAAAG,cACA2wC,EAAA9wC,EAAA8wC,kBACAC,EAAA/wC,EAAA+wC,mBAMA,KAHA93C,EAAAwH,WAAA9E,IACA,IAAA1C,EAAAU,YAAAgC,EAAA,iBAAA5iE,UAEAinE,EAAAk3C,SAAA,CACA,IAAAC,EAAAl+C,EAAA+D,iBACArB,EAAAnoC,GACA4jF,EAAAn+C,EAAA4C,kBACAF,EAAAnoC,GACAyjF,IACAG,EAAAt7C,KAAA,UAGAha,EAAAyxD,aAAA,IAAAltC,IACAvkB,EAAAm0D,QAAAj2C,EAAAxsB,IAAA6yB,GACA,QAAAwrC,EAAApuC,OACAouC,EAAAnxF,MAAAu/C,EAAAk3C,EACAF,EAAA,4BAEA,QAAA92C,EAAAsD,OACAtD,EAAAz/C,MAAA02F,IAKA,IAAAlkF,EAAA29E,EAAAC,EACAC,GAIAjvD,EAAAg1D,YAAA92C,EACA9sC,EAAAkqC,OAAArkE,OAAA,GACA,MAeA,OAVA+oD,EAAAsxD,kBAAA,CACAhpG,KAAA+yD,EAAA/yD,KACAqrB,IAAA0nC,EAAA1nC,KAEA,UAAA0nC,EAAA/yD,KACA03C,EAAAu1D,sBAAA,oBAEAv1D,EAAAu1D,sBAAA,UAGA9wE,QAAAC,WAGAhD,EAAA/vC,UAAAs4E,qBAAA,SAAA5O,GACA,IAAArb,EAAA3+C,KAGA,2BAAA4D,QAAAo2D,EAAA/yD,MACA,OAAAm8B,QAAAE,OAAAyrE,EAAA,YACA,qBAAA/0C,EAAA/yD,KAAA,MAGA,IAAAunG,EAAA,uBACAx0C,EAAA/yD,KAAA03C,EAAAkjB,iBAAAljB,EAAAsyD,UACA,OAAA7tE,QAAAE,OAAAyrE,EAAA,oBACA,sBAAA/0C,EAAA/yD,KACA,aAAA03C,EAAAkjB,iBAGA,IAAA59B,EAAA,GACA0a,EAAAqxD,cAAA1gG,QAAA,SAAA2U,GACAggB,EAAAhgB,EAAA/c,IAAA+c,IAEA,IAAAkwF,EAAA,GACA79C,EAAAR,EAAAK,cAAA6D,EAAA1nC,KACAjC,EAAAimC,EAAAtoC,QACA8lF,EAAAh+C,EAAAU,YAAAnmC,EACA,cAAAz6B,OAAA,EACAw6G,EAAAt6C,EAAAU,YAAAnmC,EACA,mBAAAz6B,OAAA,EACA+oD,EAAAyxD,cACA,IAAAgE,EAAAt+C,EAAAU,YAAAnmC,EACA,qBA4UA,OA1UAsuB,EAAAkxD,0BADAuE,GACAA,EAAA7+F,OAAA,IAAAxS,MAAA,KACAa,QAAA,cAKA0yD,EAAAhnD,QAAA,SAAAkpD,EAAA0K,GACA,IAAAtzC,EAAAkmC,EAAAG,WAAAuC,GACAh6B,EAAAs3B,EAAAuH,QAAA7E,GAEAu7C,EAAAj+C,EAAAwH,WAAA9E,IACA,IAAA1C,EAAAU,YAAAgC,EAAA,iBAAA5iE,OACA8S,EAAAknB,EAAA,GAAAra,OAAA,GAAAxS,MAAA,QAEAktB,EAAA6lC,EAAAsH,aAAA5E,EAAAnoC,GACAgkF,EAAAv+C,EAAA+F,UAAArD,GAEAnoB,EAAAylB,EAAAyC,OAAAC,IAAA1C,EAAAC,qBAGA,GAAAg+C,GAAA,gBAAAv1E,IAAA,cAAA91B,GACA,kBAAAA,GAGAi2C,EAAAspC,aAAA/kB,GAAA,CACA7yB,MACA7R,OACA91B,WACAqrG,UAAA,OARA,CAmBA,IAAAl3C,EACAC,EACA4xC,EACA1xC,EACAE,EACAC,EACA40C,EACApE,EAEAjpE,GAfAqvE,GAAAp1D,EAAAspC,aAAA/kB,IACAvkB,EAAAspC,aAAA/kB,GAAA6wC,WAEAp1D,EAAAspC,aAAA/kB,GAAAvkB,EAAAizD,mBAAApzE,GAAA,IAcA,IACAw1E,EACAC,EAFArG,EAAA93C,EAAAiE,mBAAAvB,GAGAu7C,IACAC,EAAAl+C,EAAA+D,iBAAArB,EACAnoC,IACA4jF,EAAAn+C,EAAA4C,kBAAAF,EACAnoC,IACAsoC,KAAA,UAEAo5C,EACAj8C,EAAA4E,2BAAAlC,GAEA,IAAA8C,EAAAxF,EAAAuF,oBAAA7C,GAEA87C,EAAAx+C,EAAAU,YAAAgC,EACA,sBAAAnoC,GAAAz6B,OAAA,EACA8tE,EAAA5N,EAAAU,YAAAgC,EAAA,gBACAhzD,IAAA,SAAAgqB,GACA,OAAAsmC,EAAAW,eAAAjnC,KAEAwB,OAAA,SAAAxB,GACA,WAAAA,EAAAN,YAuBA,IAnBA,UAAA8qC,EAAA/yD,MAAA,WAAA+yD,EAAA/yD,QACA8sG,GAAA3D,GAAAltC,EAAA,GACAvkB,EAAAspC,aAAA/kB,KACAvkB,EAAA+0D,6BAAAxwC,GACAvkB,EAAAspC,aAAA/kB,GAAApG,YACAne,EAAAspC,aAAA,GAAAnrB,YACAne,EAAAspC,aAAA/kB,GAAAwrC,aACA/vD,EAAAspC,aAAA,GAAAymB,aACA/vD,EAAAspC,aAAA/kB,GAAAlG,cACAre,EAAAspC,aAAA,GAAAjrB,cACAre,EAAAspC,aAAA/kB,GAAAjG,WACAte,EAAAspC,aAAA/kB,GAAAjG,UAAAs3C,aACA51D,EAAAspC,aAAA,GAAAjrB,eAEAre,EAAAspC,aAAA/kB,GAAAhG,aACAve,EAAAspC,aAAA/kB,GAAAhG,YAAAq3C,aACA51D,EAAAspC,aAAA,GAAAjrB,gBAGA,UAAAhD,EAAA/yD,MAAA8sG,GAmGO,cAAA/5C,EAAA/yD,OAAA8sG,EAAA,CAEPj3C,GADAD,EAAAle,EAAAspC,aAAA/kB,IACApG,YACA4xC,EAAA7xC,EAAA6xC,aACA1xC,EAAAH,EAAAG,cACAE,EAAAL,EAAAK,YACAC,EAAAN,EAAAM,uBACAwwC,EAAA9wC,EAAA8wC,kBAEAhvD,EAAAspC,aAAA/kB,GAAA6uC,uBACAA,EACApzD,EAAAspC,aAAA/kB,GAAA0qC,mBACAA,EACAjvD,EAAAspC,aAAA/kB,GAAA5H,iBAEAoI,EAAA9tE,QAAA,QAAA84G,EAAApuC,SACAwzC,IAAAQ,GACAlE,GAAA,IAAAltC,EAGAQ,EAAAp0D,QAAA,SAAAyf,GACA0/E,EAAA5xC,EAAA6xC,aAAA3/E,KAHA2/E,EAAA8F,oBAAA9wC,IAQA0sC,GAAA,IAAAltC,IACA,QAAAwrC,EAAApuC,OACAouC,EAAAnxF,MAAAu/C,EAAAk3C,EACA,eAEA,QAAAh3C,EAAAsD,OACAtD,EAAAz/C,MAAA02F,KAMAvG,EACA7wC,EAAA8wC,kBACA9wC,EAAA+wC,oBAEA3zC,OAAAjpC,OAAA,SAAAjiC,GACA,cAAAA,EAAAE,KAAA0T,gBACS/M,QACTinE,EAAAM,uBAAA,GAAAjC,YACA2B,EAAAM,uBAAA,GAAAjC,IAGAvc,EAAAg1D,YAAA92C,EACA,aAAA5sC,GAAA,aAAAA,EACA,aAAAA,GAAA,aAAAA,IAGAitC,GACA,aAAAjtC,GAAA,aAAAA,SAiBA4sC,EAAAK,aAhBAx4B,EAAAw4B,EAAAx4B,MACA2vE,GACApwE,EAAAowE,EAAApwF,UACAggB,EAAAowE,EAAApwF,QAAA,IAAA31B,EAAAgzC,aAEA+tE,EAAA3qE,EAAAT,EAAAowE,EAAApwF,SACAkwF,EAAAjxG,KAAA,CAAAwhC,EAAAw4B,EAAAj5B,EAAAowE,EAAApwF,YAEAggB,EAAA43D,UACA53D,EAAA43D,QAAA,IAAAvtG,EAAAgzC,aAEA+tE,EAAA3qE,EAAAT,EAAA43D,SACAsY,EAAAjxG,KAAA,CAAAwhC,EAAAw4B,EAAAj5B,EAAA43D,iBAvKA,EACAh/B,EAAAle,EAAAspC,aAAA/kB,IACAvkB,EAAAizD,mBAAApzE,IACA6R,MAEAwsB,EAAAC,cACAD,EAAAC,YAAAne,EAAA+zD,mBAAAxvC,EACAktC,IAGA1sC,EAAA9tE,QAAA,QAAAinE,EAAA6xC,aAAApuC,SACAg0C,GAAAlE,GAAA,IAAAltC,EAGAQ,EAAAp0D,QAAA,SAAAyf,GACA0/E,EAAA5xC,EAAA6xC,aAAA3/E,KAHA8tC,EAAA6xC,aAAA8F,oBAAA9wC,IAQAiqC,EAAAr/G,EAAAmmH,eAAAC,gBAAAl2E,GAIA4wE,EAAA,QACAzB,EAAA1zC,OAAA0zC,EAAA1zC,OAAAjpC,OACA,SAAA8B,GACA,cAAAA,EAAA7jC,QAIAkuE,EAAAN,EAAAM,wBAAA,EACA30C,KAAA,QAAA06C,EAAA,KAIA,IAOAj/C,EAPA0wF,GAAA,EACA,gBAAA1kF,GAAA,aAAAA,GAKA,GAJA0kF,GAAA93C,EAAAK,YACAA,EAAAL,EAAAK,aACA,IAAA5uE,EAAAmmH,eAAA53C,EAAAG,cAAAx+B,GAEAm2E,EAEAjwE,EAAAw4B,EAAAx4B,MAEA2vE,GAAA,MAAAA,EAAApwF,SAEaowF,GACbpwE,EAAAowE,EAAApwF,UACAggB,EAAAowE,EAAApwF,QAAA,IAAA31B,EAAAgzC,YACAlyC,OAAAC,eAAA40C,EAAAowE,EAAApwF,QAAA,MACA10B,IAAA,WACA,OAAA8kH,EAAApwF,WAIA70B,OAAAC,eAAAq1C,EAAA,MACAn1C,IAAA,WACA,OAAA8kH,EAAA3vE,SAGAzgB,EAAAggB,EAAAowE,EAAApwF,UAEAggB,EAAA43D,UACA53D,EAAA43D,QAAA,IAAAvtG,EAAAgzC,aAEArd,EAAAggB,EAAA43D,UAEA53E,IACAorF,EAAA3qE,EAAAzgB,GACA44C,EAAAm1C,6BAAA9uG,KAAA+gB,IAEAkwF,EAAAjxG,KAAA,CAAAwhC,EAAAw4B,EAAAj5C,SAES44C,EAAAK,aAAAL,EAAAK,YAAAx4B,QACTm4B,EAAAm1C,6BAAA1iG,QAAA,SAAA7e,GACA,IA/zBAi0C,EAAAzgB,EA+zBA2wF,EAAAnkH,EAAA21C,YAAA7U,KAAA,SAAA3hC,GACA,OAAAA,EAAAsX,KAAA21D,EAAAK,YAAAx4B,MAAAx9B,KAEA0tG,IAl0BAlwE,EAm0BAkwE,GAn0BA3wF,EAm0BAxzB,GAl0BAg+F,YAAA/pD,GACAzgB,EAAAqrF,cAAA,IAAAhhH,EAAAihH,sBAAA,cACA,CAAS7qE,cAm0BTm4B,EAAAm1C,6BAAA,IAGAn1C,EAAA8wC,oBACA9wC,EAAA+wC,qBACA/wC,EAAAK,cACAL,EAAAvB,iBACAuB,EAAAM,yBACAN,EAAAk1C,yBAIApzD,EAAAg1D,YAAAh1D,EAAAspC,aAAA/kB,IACA,EACAyxC,YA8EAp0G,IAAAo+C,EAAAqyD,YACAryD,EAAAqyD,UAAA,UAAAh3C,EAAA/yD,KAAA,oBAGA03C,EAAAuxD,mBAAA,CACAjpG,KAAA+yD,EAAA/yD,KACAqrB,IAAA0nC,EAAA1nC,KAEA,UAAA0nC,EAAA/yD,KACA03C,EAAAu1D,sBAAA,qBAEAv1D,EAAAu1D,sBAAA,UAEA9kH,OAAAmW,KAAA0+B,GAAA30B,QAAA,SAAA/C,GACA,IAAA0X,EAAAggB,EAAA13B,GACA,GAAA0X,EAAAmiB,YAAAxwC,OAAA,CACA,QAAA+oD,EAAAqxD,cAAApsG,QAAAqgB,GAAA,CACA06B,EAAAqxD,cAAA9sG,KAAA+gB,GACA,IAAAyI,EAAA,IAAAgjF,MAAA,aACAhjF,EAAAzI,SACA31B,EAAAmc,WAAA,WACAk0C,EAAAgxD,eAAA,YAAAjjF,KAIAynF,EAAA7kG,QAAA,SAAAikB,GACA,IAAAmR,EAAAnR,EAAA,GACA8zD,EAAA9zD,EAAA,GACAtP,EAAA/c,KAAAqsB,EAAA,GAAArsB,IAGAsoG,EAAA7wD,EAAAja,EAAA2iD,EAAA,CAAApjE,SAIAkwF,EAAA7kG,QAAA,SAAAikB,GACAA,EAAA,IAGAi8E,EAAA7wD,EAAAprB,EAAA,GAAAA,EAAA,SAKAjlC,EAAAmc,WAAA,WACAk0C,KAAAspC,cAGAtpC,EAAAspC,aAAA34E,QAAA,SAAAutD,GACAA,EAAA6xC,cACA,QAAA7xC,EAAA6xC,aAAApuC,OACAzD,EAAA6xC,aAAAE,sBAAAh5G,OAAA,IACAmP,QAAAI,KAAA,sFAEA03D,EAAA6xC,aAAAI,mBAAA,QAGK,KAEL1rE,QAAAC,WAGAhD,EAAA/vC,UAAA2sB,MAAA,WACAjd,KAAAioF,aAAA34E,QAAA,SAAAutD,GAMAA,EAAA6xC,cACA7xC,EAAA6xC,aAAAloF,OAEAq2C,EAAAG,eACAH,EAAAG,cAAAx2C,OAEAq2C,EAAAI,WACAJ,EAAAI,UAAAz2C,OAEAq2C,EAAAK,aACAL,EAAAK,YAAA12C,SAIAxmB,KAAAixG,WAAA,EACAjxG,KAAAk0G,sBAAA,WAIA7zE,EAAA/vC,UAAA4jH,sBAAA,SAAAp/C,GACA90D,KAAA6hE,eAAA/M,EACA,IAAApoC,EAAA,IAAAgjF,MAAA,wBACA1vG,KAAA2vG,eAAA,uBAAAjjF,IAIA2T,EAAA/vC,UAAA6hH,4BAAA,WACA,IAAAxzD,EAAA3+C,KACA,WAAAA,KAAA6hE,iBAAA,IAAA7hE,KAAA8vG,kBAGA9vG,KAAA8vG,iBAAA,EACAxhH,EAAAmc,WAAA,WACA,GAAAk0C,EAAAmxD,gBAAA,CACAnxD,EAAAmxD,iBAAA,EACA,IAAApjF,EAAA,IAAAgjF,MAAA,qBACA/wD,EAAAgxD,eAAA,oBAAAjjF,KAEK,KAIL2T,EAAA/vC,UAAAgjH,0BAAA,WACA,IAAAx+C,EACA+/C,EAAA,CACAC,IAAA,EACAp1C,OAAA,EACAq1C,SAAA,EACAjrG,UAAA,EACAkrG,UAAA,EACAC,aAAA,EACAC,OAAA,GAuBA,GArBAl1G,KAAAioF,aAAA34E,QAAA,SAAAutD,GACAA,EAAA6xC,eAAA7xC,EAAAk3C,UACAc,EAAAh4C,EAAA6xC,aAAApuC,WAIAxL,EAAA,MACA+/C,EAAAK,OAAA,EACApgD,EAAA,SACK+/C,EAAAE,SAAA,EACLjgD,EAAA,WACK+/C,EAAAI,aAAA,EACLngD,EAAA,eACK+/C,EAAAC,IAAA,EACLhgD,EAAA,MACK+/C,EAAA/qG,UAAA,EACLgrD,EAAA,YACK+/C,EAAAG,UAAA,IACLlgD,EAAA,aAGAA,IAAA90D,KAAAgiE,mBAAA,CACAhiE,KAAAgiE,mBAAAlN,EACA,IAAApoC,EAAA,IAAAgjF,MAAA,4BACA1vG,KAAA2vG,eAAA,2BAAAjjF,KAKA2T,EAAA/vC,UAAAijH,uBAAA,WACA,IAAAz+C,EACA+/C,EAAA,CACAC,IAAA,EACAp1C,OAAA,EACAy1C,WAAA,EACArrG,UAAA,EACAkrG,UAAA,EACAC,aAAA,EACAC,OAAA,GAyBA,GAvBAl1G,KAAAioF,aAAA34E,QAAA,SAAAutD,GACAA,EAAA6xC,cAAA7xC,EAAAG,gBACAH,EAAAk3C,WACAc,EAAAh4C,EAAA6xC,aAAApuC,SACAu0C,EAAAh4C,EAAAG,cAAAsD,YAIAu0C,EAAA/qG,WAAA+qG,EAAAG,UAEAlgD,EAAA,MACA+/C,EAAAK,OAAA,EACApgD,EAAA,SACK+/C,EAAAM,WAAA,EACLrgD,EAAA,aACK+/C,EAAAI,aAAA,EACLngD,EAAA,eACK+/C,EAAAC,IAAA,EACLhgD,EAAA,MACK+/C,EAAA/qG,UAAA,IACLgrD,EAAA,aAGAA,IAAA90D,KAAA8hE,gBAAA,CACA9hE,KAAA8hE,gBAAAhN,EACA,IAAApoC,EAAA,IAAAgjF,MAAA,yBACA1vG,KAAA2vG,eAAA,wBAAAjjF,KAIA2T,EAAA/vC,UAAAw0E,YAAA,WACA,IAAAnmB,EAAA3+C,KAEA,GAAA2+C,EAAAsyD,UACA,OAAA7tE,QAAAE,OAAAyrE,EAAA,oBACA,yCAGA,IAAAqG,EAAAz2D,EAAAspC,aAAAj3D,OAAA,SAAAphC,GACA,gBAAAA,EAAA4uC,OACK5oC,OACLy/G,EAAA12D,EAAAspC,aAAAj3D,OAAA,SAAAphC,GACA,gBAAAA,EAAA4uC,OACK5oC,OAGL0/G,EAAAn0G,UAAA,GACA,GAAAm0G,EAAA,CAEA,GAAAA,EAAA36E,WAAA26E,EAAA16E,SACA,UAAA1kC,UACA,6DAEAqK,IAAA+0G,EAAAC,sBAEAH,GADA,IAAAE,EAAAC,oBACA,GACS,IAAAD,EAAAC,oBACT,EAEAD,EAAAC,0BAGAh1G,IAAA+0G,EAAAE,sBAEAH,GADA,IAAAC,EAAAE,oBACA,GACS,IAAAF,EAAAE,oBACT,EAEAF,EAAAE,qBAoBA,IAfA72D,EAAAspC,aAAA34E,QAAA,SAAAutD,GACA,UAAAA,EAAAr+B,OACA42E,EACA,IACAv4C,EAAAo1C,aAAA,GAEO,UAAAp1C,EAAAr+B,QACP62E,EACA,IACAx4C,EAAAo1C,aAAA,KAMAmD,EAAA,GAAAC,EAAA,GACAD,EAAA,IACAz2D,EAAAizD,mBAAA,SACAwD,KAEAC,EAAA,IACA12D,EAAAizD,mBAAA,SACAyD,KAIA,IAAA/iF,EAAAwjC,EAAA0G,wBAAA7d,EAAAmyD,cACAnyD,EAAAoyD,sBACApyD,EAAAspC,aAAA34E,QAAA,SAAAutD,EAAAqG,GAGA,IAAAx+B,EAAAm4B,EAAAn4B,MACAlG,EAAAq+B,EAAAr+B,KACA6R,EAAAwsB,EAAAxsB,KAAAylB,EAAAC,qBACA8G,EAAAxsB,MAEAwsB,EAAAC,cACAD,EAAAC,YAAAne,EAAA+zD,mBAAAxvC,EACAvkB,EAAAyxD,cAGA,IAAAzC,EAAAr/G,EAAA8jH,aAAAsC,gBAAAl2E,GAGA4wE,EAAA,QACAzB,EAAA1zC,OAAA0zC,EAAA1zC,OAAAjpC,OACA,SAAA8B,GACA,cAAAA,EAAA7jC,QAGA0+G,EAAA1zC,OAAA3qD,QAAA,SAAAwjB,GAGA,SAAAA,EAAA7jC,WACAsR,IAAAuyB,EAAA8kC,WAAA,6BACA9kC,EAAA8kC,WAAA,gCAKAiF,EAAA+wC,oBACA/wC,EAAA+wC,mBAAA3zC,QACA4C,EAAA+wC,mBAAA3zC,OAAA3qD,QAAA,SAAAmmG,GACA3iF,EAAA7jC,KAAA0T,gBAAA8yG,EAAAxmH,KAAA0T,eACAmwB,EAAAskC,YAAAq+C,EAAAr+C,YACAtkC,EAAAykC,qBAAAk+C,EAAA7iF,iBAKA+6E,EAAAzzC,iBAAA5qD,QAAA,SAAAomG,IACA74C,EAAA+wC,oBACA/wC,EAAA+wC,mBAAA1zC,kBAAA,IACA5qD,QAAA,SAAAqmG,GACAD,EAAAxlF,MAAAylF,EAAAzlF,MACAwlF,EAAAxuG,GAAAyuG,EAAAzuG,QAMA,IAAAi2D,EAAAN,EAAAM,wBAAA,EACA30C,KAAA,QAAA06C,EAAA,KAEAx+B,GAEA0qE,GAAA,iBAAA5wE,IACA2+B,EAAA,GAAAjC,MACAiC,EAAA,GAAAjC,IAAA,CACA1yC,KAAA20C,EAAA,GAAA30C,KAAA,IAKAq0C,EAAAo1C,cACAp1C,EAAAK,YAAA,IAAA5uE,EAAAmmH,eACA53C,EAAAG,cAAAx+B,IAGAq+B,EAAA8wC,oBACA9wC,EAAAM,2BAIA,eAAAxe,EAAAkyD,QAAAtkE,eACAja,GAAA,kBAAAqsB,EAAAspC,aAAAziF,IAAA,SAAA5V,GACA,OAAAA,EAAAygD,MACOltC,KAAA,aAEPmvB,GAAA,4BAEAqsB,EAAAspC,aAAA34E,QAAA,SAAAutD,EAAAqG,GACA5wC,GAAAsqC,EAAAC,IAAA8wC,kBACA,QAAA9wC,EAAA54C,OAAA06B,EAAAqyD,WACA1+E,GAAA,oBAEAuqC,EAAAC,aAAA,QAAAne,EAAAwxD,mBACA,IAAAjtC,GAAAvkB,EAAAyxD,cACAvzC,EAAAC,YAAA84C,qBAAAtmG,QAAA,SAAAkgB,GACAA,EAAAN,UAAA,EACAoD,GAAA,KAAAwjC,EAAAiB,eAAAvnC,GAAA,SAGA,cAAAqtC,EAAAC,YAAAwD,QACAhuC,GAAA,8BAKA,IAAA3C,EAAA,IAAArhC,EAAAk6E,sBAAA,CACAvhE,KAAA,QACAqrB,QAEA,OAAA8Q,QAAAC,QAAA1T,IAGA0Q,EAAA/vC,UAAAu4E,aAAA,WACA,IAAAlqB,EAAA3+C,KAEA,GAAA2+C,EAAAsyD,UACA,OAAA7tE,QAAAE,OAAAyrE,EAAA,oBACA,0CAGA,yBAAApwD,EAAAkjB,gBACA,wBAAAljB,EAAAkjB,eACA,OAAAz+B,QAAAE,OAAAyrE,EAAA,oBACA,+CAAApwD,EAAAkjB,iBAGA,IAAAvvC,EAAAwjC,EAAA0G,wBAAA7d,EAAAmyD,cACAnyD,EAAAoyD,sBACApyD,EAAAyxD,cACA99E,GAAA,kBAAAqsB,EAAAspC,aAAAziF,IAAA,SAAA5V,GACA,OAAAA,EAAAygD,MACOltC,KAAA,aAEPmvB,GAAA,4BAEA,IAAAujF,EAAA//C,EAAAS,iBACA5X,EAAAuxD,mBAAA59E,KAAA18B,OACA+oD,EAAAspC,aAAA34E,QAAA,SAAAutD,EAAAqG,GACA,KAAAA,EAAA,EAAA2yC,GAAA,CAGA,GAAAh5C,EAAAk3C,SAkBA,MAjBA,gBAAAl3C,EAAAr+B,KACA,cAAAq+B,EAAAn0D,SACA4pB,GAAA,qCAEAA,GAAA,mBAAAuqC,EAAAn0D,SACA,0BAES,UAAAm0D,EAAAr+B,KACTlM,GAAA,4DAES,UAAAuqC,EAAAr+B,OACTlM,GAAA,sEAGAA,GAAA,2CAEAuqC,EAAAxsB,IAAA,QAMA,IAAAzH,EADA,GAAAi0B,EAAA54C,OAEA,UAAA44C,EAAAr+B,KACAoK,EAAAi0B,EAAA54C,OAAA+Z,iBAAA,GACS,UAAA6+B,EAAAr+B,OACToK,EAAAi0B,EAAA54C,OAAAia,iBAAA,IAEA0K,GAEAwmE,GAAA,iBAAAvyC,EAAAr+B,OACAq+B,EAAAM,uBAAA,GAAAjC,MACA2B,EAAAM,uBAAA,GAAAjC,IAAA,CACA1yC,KAAAq0C,EAAAM,uBAAA,GAAA30C,KAAA,IAOA,IAAAqlF,EAAAH,EACA7wC,EAAA8wC,kBACA9wC,EAAA+wC,qBAEAC,EAAA5zC,OAAAjpC,OAAA,SAAAjiC,GACA,cAAAA,EAAAE,KAAA0T,gBACO/M,QACPinE,EAAAM,uBAAA,GAAAjC,YACA2B,EAAAM,uBAAA,GAAAjC,IAGA5oC,GAAAsqC,EAAAC,EAAAgxC,EACA,SAAAhxC,EAAA54C,OAAA06B,EAAAqyD,WACAn0C,EAAAvB,gBACAuB,EAAAvB,eAAAI,cACAppC,GAAA,uBAIA,IAAA3C,EAAA,IAAArhC,EAAAk6E,sBAAA,CACAvhE,KAAA,SACAqrB,QAEA,OAAA8Q,QAAAC,QAAA1T,IAGA0Q,EAAA/vC,UAAA6zE,gBAAA,SAAAp1C,GACA,IACAunC,EADA3X,EAAA3+C,KAEA,OAAA+uB,QAAAxuB,IAAAwuB,EAAAm0C,gBACAn0C,EAAA40C,OACAvgC,QAAAE,OAAA,IAAAptC,UAAA,qCAIA,IAAAktC,QAAA,SAAAC,EAAAC,GACA,IAAAqb,EAAAuxD,mBACA,OAAA5sE,EAAAyrE,EAAA,oBACA,2DACO,GAAAhgF,GAAA,KAAAA,YAeA,CACP,IAAAm0C,EAAAn0C,EAAAm0C,cACA,GAAAn0C,EAAA40C,OACA,QAAAj1E,EAAA,EAAyBA,EAAAiwD,EAAAspC,aAAAryF,OAA4BlH,IACrD,GAAAiwD,EAAAspC,aAAAv5F,GAAA2hD,MAAAthB,EAAA40C,OAAA,CACAT,EAAAx0E,EACA,MAIA,IAAAmuE,EAAAle,EAAAspC,aAAA/kB,GACA,IAAArG,EAqCA,OAAAv5B,EAAAyrE,EAAA,iBACA,8BArCA,GAAAlyC,EAAAk3C,SACA,OAAA1wE,IAEA,IAAA7T,EAAApgC,OAAAmW,KAAAwpB,aAAAn5B,OAAA,EACAkgE,EAAAW,eAAA1nC,aAAA,GAEA,WAAAS,EAAA9mB,WAAA,IAAA8mB,EAAAvB,MAAA,IAAAuB,EAAAvB,MACA,OAAAoV,IAGA,GAAA7T,EAAAN,WAAA,IAAAM,EAAAN,UACA,OAAAmU,IAIA,QAAA6/B,KAAA,GACArG,EAAA6xC,eAAA/vD,EAAAspC,aAAA,GAAAymB,gBACAD,EAAA5xC,EAAA6xC,aAAAl/E,GACA,OAAA8T,EAAAyrE,EAAA,iBACA,8BAKA,IAAA+G,EAAA/mF,YAAAs6B,OACA,IAAAysD,EAAAlyG,QAAA,QACAkyG,IAAAvgG,OAAA,KAEA+gD,EAAAR,EAAAS,iBAAA5X,EAAAuxD,mBAAA59E,MACA4wC,IAAA,MACA1zC,EAAAvoB,KAAA6uG,EAAA,qBACA,OACAn3D,EAAAuxD,mBAAA59E,IACAwjC,EAAAO,eAAA1X,EAAAuxD,mBAAA59E,KACAgkC,EAAAnzD,KAAA,SA5DA,QAAA5K,EAAA,EAAuBA,EAAAomD,EAAAspC,aAAAryF,SACvB+oD,EAAAspC,aAAA1vF,GAAAw7G,WAGAp1D,EAAAspC,aAAA1vF,GAAAm2G,aAAAI,mBAAA,KACAx4C,EAAAR,EAAAS,iBAAA5X,EAAAuxD,mBAAA59E,MACA/5B,IAAA,0BACAomD,EAAAuxD,mBAAA59E,IACAwjC,EAAAO,eAAA1X,EAAAuxD,mBAAA59E,KACAgkC,EAAAnzD,KAAA,KACAw7C,EAAAyxD,cAVmD73G,KAkEnD8qC,OAIAhD,EAAA/vC,UAAAg4G,SAAA,SAAAyN,GACA,GAAAA,gBAAAznH,EAAA0nH,iBAAA,CACA,IAAAC,EAAA,KAUA,GATAj2G,KAAAioF,aAAA34E,QAAA,SAAAutD,GACAA,EAAAI,WACAJ,EAAAI,UAAAv4B,QAAAqxE,EACAE,EAAAp5C,EAAAI,UACSJ,EAAAK,aACTL,EAAAK,YAAAx4B,QAAAqxE,IACAE,EAAAp5C,EAAAK,gBAGA+4C,EACA,MAAAlH,EAAA,0CAEA,OAAAkH,EAAA3N,WAGA,IAAA5U,EAAA,GASA,OARA1zF,KAAAioF,aAAA34E,QAAA,SAAAutD,GACA,wDACA,iBAAAvtD,QAAA,SAAAu7E,GACAhuB,EAAAguB,IACA6I,EAAAxwF,KAAA25D,EAAAguB,GAAAyd,gBAIAllE,QAAAmK,IAAAmmD,GAAAzzD,KAAA,SAAAi2E,GACA,IAAAviB,EAAA,IAAAxxE,IAMA,OALA+zF,EAAA5mG,QAAA,SAAAmc,GACAA,EAAAnc,QAAA,SAAAs5F,GACAjV,EAAA7vE,IAAA8kF,EAAA1hG,GAAA0hG,OAGAjV,KAKA,kDACA,sCACArkF,QAAA,SAAA6mG,GACA,IAAA/gH,EAAA9G,EAAA6nH,GACA,GAAA/gH,KAAA9E,WAAA8E,EAAA9E,UAAAg4G,SAAA,CACA,IAAA8N,EAAAhhH,EAAA9E,UAAAg4G,SACAlzG,EAAA9E,UAAAg4G,SAAA,WACA,OAAA8N,EAAAziF,MAAA3zB,MACAigC,KAAA,SAAAo2E,GACA,IAAAC,EAAA,IAAAn0F,IAKA,OAJA/yB,OAAAmW,KAAA8wG,GAAA/mG,QAAA,SAAApI,GA1uDA,IAAA0hG,EA2uDAyN,EAAAnvG,GAAAD,KA1uDA,CACAsvG,WAAA,cACAC,YAAA,eACAC,cAAA,iBACAC,eAAA,kBACAC,gBAAA,qBANA/N,EA2uDAyN,EAAAnvG,IApuDGD,OAAA2hG,EAAA3hG,KAquDHqvG,EAAAxyF,IAAA5c,EAAAmvG,EAAAnvG,MAEAovG,QAOA,IAAA3hB,EAAA,+BA8DA,OA7DAA,EAAArlF,QAAA,SAAAu7E,GACA,IAAA+rB,EAAAv2E,EAAA/vC,UAAAu6F,GACAxqD,EAAA/vC,UAAAu6F,GAAA,WACA,IAAA3iD,EAAA/mC,UACA,yBAAA+mC,EAAA,IACA,mBAAAA,EAAA,GACA0uE,EAAAjjF,MAAA3zB,KAAA,CAAAmB,UAAA,KACA8+B,KAAA,SAAA+5B,GACA,mBAAA9xB,EAAA,IACAA,EAAA,GAAAvU,MAAA,MAAAqmC,KAES,SAAAh1D,GACT,mBAAAkjC,EAAA,IACAA,EAAA,GAAAvU,MAAA,MAAA3uB,MAIA4xG,EAAAjjF,MAAA3zB,KAAAmB,eAIAwzF,EAAA,kEACArlF,QAAA,SAAAu7E,GACA,IAAA+rB,EAAAv2E,EAAA/vC,UAAAu6F,GACAxqD,EAAA/vC,UAAAu6F,GAAA,WACA,IAAA3iD,EAAA/mC,UACA,yBAAA+mC,EAAA,IACA,mBAAAA,EAAA,GACA0uE,EAAAjjF,MAAA3zB,KAAAmB,WACA8+B,KAAA,WACA,mBAAAiI,EAAA,IACAA,EAAA,GAAAvU,MAAA,OAES,SAAA3uB,GACT,mBAAAkjC,EAAA,IACAA,EAAA,GAAAvU,MAAA,MAAA3uB,MAIA4xG,EAAAjjF,MAAA3zB,KAAAmB,cAMA,aAAAmO,QAAA,SAAAu7E,GACA,IAAA+rB,EAAAv2E,EAAA/vC,UAAAu6F,GACAxqD,EAAA/vC,UAAAu6F,GAAA,WACA,IAAA3iD,EAAA/mC,UACA,yBAAA+mC,EAAA,GACA0uE,EAAAjjF,MAAA3zB,KAAAmB,WACA8+B,KAAA,WACA,mBAAAiI,EAAA,IACAA,EAAA,GAAAvU,MAAA,QAIAijF,EAAAjjF,MAAA3zB,KAAAmB,cAIAk/B,0yBCvyDA,IAAMxf,EAASF,oBAAUQ,GAyCV,SAASsrB,EAChBykB,EACAhqD,EACAy4D,EACA3zB,EACA1hB,EACAigB,EACApjC,GAAS,IAAAQ,EAAA3H,KAUbA,KAAK62G,uBAAgD,IAAxB1vG,EAAQo6D,aAQrCvhE,KAAK82G,iBAAcv2G,EAkBnBP,KAAK+2G,gBAAkB,GAUvB/2G,KAAKsmE,qBAAsB,EAO3BtmE,KAAKkxD,IAAMA,EAMXlxD,KAAKkH,GAAKA,EAOVlH,KAAKuqC,MAAQA,EASbvqC,KAAKgtC,aAAe,IAAI7qB,IAMxBniB,KAAKspC,YAAc,IAAInnB,IAQvBniB,KAAK2nF,cAAgB,GAoBrB3nF,KAAKynF,WAAa,IAAItlE,IAKtBniB,KAAKg3G,WAAa,KAKlBh3G,KAAKi3G,YAAc,KAMnBj3G,KAAK2/D,eAAiBA,EAGtB3/D,KAAKk3G,sBAAwBl3G,KAAKk3G,sBAAsBhnH,KAAK8P,MAC7DA,KAAK2/D,eAAet7C,GAChB8yF,IACAn3G,KAAKk3G,uBAETl3G,KAAKo3G,kBAAoBp3G,KAAKo3G,kBAAkBlnH,KAAK8P,MACrDA,KAAK2/D,eAAet7C,GAChB8yF,IACAn3G,KAAKo3G,mBACTp3G,KAAKmH,QAAUA,EAEfnH,KAAK0jB,eACC,IAAI8b,IAASY,sBAAsB4L,EAAW1hB,GACpDtqB,KAAKq3G,SAAW,IAAIlxB,IAASnmF,MAC7BA,KAAKs3G,UAAY,GACjBt3G,KAAKyrB,MAAQ,GACbzrB,KAAKu3G,cAAgB,KAMrBv3G,KAAK8gE,SAAW35D,EAAQ25D,SAExB9gE,KAAKw3G,QAAU,IAAIC,IACnB,IAAMC,EAAYx2F,EAAQ,KAE1BlhB,KAAK2mF,UAAY,IAAI+wB,EACjB,CACIC,YAAazxB,IAAetwF,OAC5BgiH,wBAAwB,EACxBt1C,gBAAiB7/C,IAAQ6/C,oBAEjCtiE,KAAK63G,eAAiB,IAAIC,IAAe93G,KAAKjK,YAO9CiK,KAAK+3G,eAAiB,IAAIC,IAAeh4G,MAMzCA,KAAKoiB,aAAe8uC,EAAI9uC,aACxBpiB,KAAKi4G,YAAc,IAAIC,IAGvBl4G,KAAKg1C,MAAQ,SAACmjE,EAAMjzG,GAChB2b,EAAO5b,MAAMkzG,EAAMjzG,GAEnByC,EAAK2vG,UAAUp0G,KAAK,CAChBk1G,KAAM,IAAIjwG,KACVlB,KAAMkxG,EACNxoH,MAAOuV,GAAQ,MAGvBlF,KAAKyhE,eAAiB,KACtBzhE,KAAK0jB,eAAe+9C,eAAiB,SAAA/0C,GACjC/kB,EAAKqtC,MACD,iBACAloC,KAAK8L,UAAU8T,EAAMqC,UAAW,KAAM,MAEd,OAAxBpnB,EAAK85D,gBACL95D,EAAK85D,eAAe/0C,IAKxBjK,IAAQ4lD,aACRroE,KAAK0jB,eAAewtF,YACd,SAAAxkF,GAAK,OAAI/kB,EAAK0wG,mBAAmB3rF,EAAMzI,SAC7CjkB,KAAK0jB,eAAe0tF,eACd,SAAA1kF,GAAK,OAAI/kB,EAAK2wG,qBAAqB5rF,EAAMzI,UAE/CjkB,KAAK0jB,eAAeytF,QAAU,SAAAzkF,GAC1B,IAAMzI,EAASyI,EAAMuX,QAAQ,GAE7Bt8B,EAAK4wG,kBAAkBt0F,EAAQyI,EAAMgY,MAAOhY,EAAMmwC,aAClD54C,EAAOu0F,cAAgB,SAAAxF,GACnBrrG,EAAK8wG,oBAAoBx0F,EAAQ+uF,EAAItuE,SAIjD1kC,KAAK4hE,uBAAyB,KAC9B5hE,KAAK0jB,eAAek+C,uBAAyB,SAAAl1C,GACzC/kB,EAAKqtC,MAAM,yBAA0BrtC,EAAKk6D,gBACN,OAAhCl6D,EAAKi6D,wBACLj6D,EAAKi6D,uBAAuBl1C,IAGpC1sB,KAAK+hE,2BAA6B,KAClC/hE,KAAK0jB,eAAeq+C,2BAA6B,SAAAr1C,GAC7C/kB,EAAKqtC,MAAM,6BAA8BrtC,EAAKq6D,oBACN,OAApCr6D,EAAKo6D,4BACLp6D,EAAKo6D,2BAA2Br1C,IAGxC1sB,KAAKoiE,oBAAsB,KAC3BpiE,KAAK0jB,eAAe0+C,oBAAsB,SAAA11C,GACtC/kB,EAAKqtC,MAAM,uBACsB,OAA7BrtC,EAAKy6D,qBACLz6D,EAAKy6D,oBAAoB11C,IAGjC1sB,KAAKuxG,cAAgB,KACrBvxG,KAAK0jB,eAAe6tF,cAAgB,SAAA7kF,GAChC/kB,EAAKqtC,MAAM,iBACgB,OAAvBrtC,EAAK4pG,eACL5pG,EAAK4pG,cAAc7kF,IAIvB1sB,KAAK8gE,WACL9gE,KAAKu3G,cAAgBjpH,OAAOk0C,YAAY,WACpC76B,EAAK2gG,SAAS,SAAA78E,GACV,GAAIA,EAAMhmB,QACqB,mBAAjBgmB,EAAMhmB,OAGhB,IAFA,IAAMkuF,EAAUloE,EAAMhmB,SADiB0qC,EAAA,SAG9BzhD,GACL,IAAM01C,EAAMuvD,EAAQjlG,GAEpB01C,EAAI9+B,QAAQgK,QAAQ,SAAArgB,GAChB0Y,EAAK+wG,aAAat0E,EAAKn1C,EAAMm1C,EAAIwkE,KAAK35G,OAJrCP,EAAI,EAAGA,EAAIilG,EAAQ/9F,SAAUlH,EAAGyhD,EAAhCzhD,QAQT+8B,EAAMnc,QAAQ,SAAA9f,GAAC,OAAImY,EAAK+wG,aAAalpH,EAAG,GAAIA,MAEjD,eAIJ,MAGPqxB,EAAO3b,KAAP,cAAA7L,OAA0B2G,OAY9BysC,EAAwBn8C,UAAUooH,aAC5B,SAASl6D,EAAQvvD,EAAM0pH,GACrB,IAAMzxG,EAAE,GAAA7N,OAAMmlD,EAAOt3C,GAAb,KAAA7N,OAAmBpK,GACvBwB,EAAIuP,KAAKyrB,MAAMvkB,GACboN,EAAM,IAAInM,KAEX1X,IACDuP,KAAKyrB,MAAMvkB,GAAMzW,EAAI,CACjBqlG,UAAWxhF,EACXskG,QAAStkG,EACTiR,OAAQ,GACRszF,MAAO,KAGfpoH,EAAE80B,OAAOriB,KAAKy1G,GACdloH,EAAEooH,MAAM31G,KAAKoR,EAAIlM,WACb3X,EAAE80B,OAAO3vB,OAASoK,KAAK8gE,WACvBrwE,EAAE80B,OAAOyI,QACTv9B,EAAEooH,MAAM7qF,SAEZv9B,EAAEmoH,QAAUtkG,GAMpB,IAAMwkG,EAAU,SAAS9+C,GACrB,OAAI,MAAOA,EACA,GAGX,SAAA3gE,OAAgB2gE,EAAY/yD,KAA5B,QAAA5N,OAAuC2gE,EAAY1nC,MAYvDma,EAAwBn8C,UAAUw/F,mBAAqB,WACnD,IAAMxvB,EAAQtgE,KAAK0jB,eAAes+C,mBAElC,MAAc,cAAV1B,EACO,YAGJA,GAaX7zB,EAAwBn8C,UAAUyoH,0BAA4B,SACtDniF,GACJ,IAAIoiF,GAAsB,EAO1B,OALIpiF,IAAc+N,IACdq0E,EAAsBh5G,KAAK62G,oBACpBjgF,IAAc+N,MACrBq0E,EAAsBh5G,KAAKsmE,qBAE3B0yC,EACOh5G,KAAKi5G,mBAAmBriF,GAAa,WAAa,WAGtD,YAQX6V,EAAwBn8C,UAAUk2F,cAAgB,WAC9C,OAAQxmF,KAAKmH,QAAQ65D,kBASzBv0B,EAAwBn8C,UAAU4mH,sBAAwB,SAClD7jD,EACAzuB,GAEJ,GAAKyuB,EAAL,CAKA,IAAMrD,EAAahwD,KAAKktC,gBAAgBmmB,EAAY1uB,KAEhDqrB,EAAWp6D,QAEXo6D,EAAW,GAAGkpD,cAAct0E,QAR5B/jB,EAAO7b,MAAP,yCAAA3L,OAAsD2G,QAmB9DysC,EAAwBn8C,UAAU8mH,kBAAoB,SAC9C/jD,EACAz8B,EACAi/B,GAEJ,GAAKxC,EAAL,CAKA,IAAM3uB,EAAQ1kC,KAAKktC,gBAAgBmmB,EAAYz8B,GAE3C8N,EAAM9uC,QAEN8uC,EAAM,GAAGy0E,QAAQtjD,QARjBh1C,EAAO7b,MAAM,wCAkBrBynC,EAAwBn8C,UAAUs8C,eAAiB,SAAShW,GACxD,IAAIkW,EAASr3C,MAAMO,KAAKgK,KAAKspC,YAAY/jB,UAMzC,YAJkBhlB,IAAdq2B,IACAkW,EAASA,EAAO9b,OAAO,SAAA0T,GAAK,OAAIA,EAAMqI,YAAcnW,KAGjDkW,GASXL,EAAwBn8C,UAAU2oH,mBAAqB,SAASriF,GAC5D,IAAKA,EACD,MAAM,IAAIlgC,MAAM,2BAGpB,OAAOsJ,KAAK4sC,eAAehW,GAAWhhC,OAAS,GAUnD62C,EAAwBn8C,UAAU48C,gBAAkB,SAC5CmmB,EACAz8B,GACJ,IAAMoW,EAAe,GACfosE,EACA/lD,EAAa,CAAEA,GAAerzD,KAAKgtC,aAAaznC,OAHvC2f,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAKf,QAAA8kB,EAAAC,EAAuB8zF,EAAvB3pH,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAkC,KAAvBi1E,EAAuB90E,EAAA11B,MACxB0pH,EAAmBr5G,KAAKgtC,aAAaz9C,IAAI4qG,GAE/C,GAAKkf,EAAL,CAH8B,IAAAvzF,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAU9B,QAAA0lB,EAAAC,EAA6BmzF,EAAiB9zG,OAA9C9V,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAsD,KAA3Cw2D,EAA2Cr2D,EAAAt2B,MAElD,IAAKinC,GAAaA,IAAc0lD,EAAgB,CAC5C,IAAMg9B,EAAaD,EAAiB9pH,IAAI+sF,GAEpCg9B,GACAtsE,EAAa9pC,KAAKo2G,KAhBA,MAAAjpG,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,MALnB,MAAA3V,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GA2Bf,OAAO4nB,GASXP,EAAwBn8C,UAAUw9C,eAAiB,SAAStlB,GACxD,GAAoB,iBAATA,EACP,MAAM,IAAI9xB,MAAJ,QAAA2C,OAAkBmvB,EAAlB,qBAFoD,IAAAxB,GAAA,EAAAC,GAAA,EAAAC,OAAA3mB,EAAA,IAI9D,QAAA4mB,EAAAC,EAAyBpnB,KAAKspC,YAAY/jB,SAA1C91B,OAAA4F,cAAA2xB,GAAAG,EAAAC,EAAA5B,QAAAC,MAAAuB,GAAA,EAAoD,KAAzC4hB,EAAyCzhB,EAAAx3B,MAChD,GAAIqQ,KAAKutG,aAAa3kE,KAAgBpgB,EAClC,OAAOogB,GAN+C,MAAAv4B,GAAA4W,GAAA,EAAAC,EAAA7W,EAAA,YAAA2W,GAAA,MAAAI,EAAAvB,QAAAuB,EAAAvB,SAAA,WAAAoB,EAAA,MAAAC,GAAA,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAAjnB,EAAA,IAS9D,QAAAknB,EAAAC,EAA0B1nB,KAAKktC,kBAA/Bz9C,OAAA4F,cAAAiyB,GAAAG,EAAAC,EAAAlC,QAAAC,MAAA6B,GAAA,EAAkD,KAAvCwsC,EAAuCrsC,EAAA93B,MAC9C,GAAImkE,EAAYylD,YAAc/wF,EAC1B,OAAOsrC,GAX+C,MAAAzjD,GAAAkX,GAAA,EAAAC,EAAAnX,EAAA,YAAAiX,GAAA,MAAAI,EAAA7B,QAAA6B,EAAA7B,SAAA,WAAA0B,EAAA,MAAAC,GAe9D,OAAO,MASXilB,EAAwBn8C,UAAUg9G,iBAAmB,SAASpmG,GAE1D,IAAMsyG,EAAgB,SAAA90E,GAAK,OAAIA,EAAMoiD,WAAW5/E,KAAOA,GACjD0hC,EAAa5oC,KAAK4sC,iBAAiBrb,KAAKioF,GAE9C,GAAI5wE,EACA,OAAO5oC,KAAKutG,aAAa3kE,GAG7B,IAAMkrB,EAAc9zD,KAAKktC,kBAAkB3b,KAAKioF,GAEhD,OAAI1lD,EACOA,EAAYylD,UAGhB,MAOX9sE,EAAwBn8C,UAAU+nH,mBAAqB,SAASp0F,GAAQ,IAAAzb,EAAAxI,KAC9D6qC,EAAW1B,IAAI1I,YAAYxc,GAEjC,GAAKklB,IAAIyB,iBAAiBC,GAA1B,CASIpoB,IAAQoe,oBACR5c,EAAOw1F,WAAa,SAAA/sF,GAChBlkB,EAAK+vG,kBAAkBt0F,EAAQyI,EAAMgY,QAEzCzgB,EAAOu0F,cAAgB,SAAA9rF,GACnBlkB,EAAKiwG,oBAAoBx0F,EAAQyI,EAAMgY,SAK/C,IAAMg1E,EAAoBz1F,EAAO+Z,iBAtBmCvV,GAAA,EAAAC,GAAA,EAAAC,OAAApoB,EAAA,IAwBpE,QAAAqoB,EAAAC,EAAyB6wF,EAAzBjqH,OAAA4F,cAAAozB,GAAAG,EAAAC,EAAArD,QAAAC,MAAAgD,GAAA,EAA4C,KAAjC2kB,EAAiCxkB,EAAAj5B,MACxCqQ,KAAKu4G,kBAAkBt0F,EAAQmpB,IAzBiC,MAAA/8B,GAAAqY,GAAA,EAAAC,EAAAtY,EAAA,YAAAoY,GAAA,MAAAI,EAAAhD,QAAAgD,EAAAhD,SAAA,WAAA6C,EAAA,MAAAC,GA2BpE,IAAMgxF,EAAoB11F,EAAOia,iBA3BmClV,GAAA,EAAAC,GAAA,EAAAC,OAAA3oB,EAAA,IA6BpE,QAAA4oB,EAAAC,EAAyBuwF,EAAzBlqH,OAAA4F,cAAA2zB,GAAAG,EAAAC,EAAA5D,QAAAC,MAAAuD,GAAA,EAA4C,KAAjCgnC,EAAiC7mC,EAAAx5B,MACxCqQ,KAAKu4G,kBAAkBt0F,EAAQ+rC,IA9BiC,MAAA3/C,GAAA4Y,GAAA,EAAAC,EAAA7Y,EAAA,YAAA2Y,GAAA,MAAAI,EAAAvD,QAAAuD,EAAAvD,SAAA,WAAAoD,EAAA,MAAAC,SAIhErI,EAAO3b,KACH,GAAA7L,OAAG2G,KAAH,mEAAA3G,OACUwxC,KAwCtB4B,EAAwBn8C,UAAUioH,kBAAoB,SAASt0F,EAAQygB,GAA2B,IAApBm4B,EAAoB17D,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAN,KAClF0pC,EAAW1B,IAAI1I,YAAYxc,GAC3B2S,EAAY8N,EAAMlG,KAExB,GAAKx+B,KAAKuqC,OAAUpB,IAAIyB,iBAAiBC,GAUzC,GAHAhqB,EAAO3b,KAAP,GAAA7L,OAAe2G,KAAf,wBAA2C6qC,EAAUjU,GAGhDA,EAAL,CAUA,IAGIgjF,EAHEC,EAAYp3F,IAAQ4lD,YACpB,IAAI14B,IAAI3vC,KAAKqiE,kBAAkB/vC,KAC/B,IAAIqd,IAAI3vC,KAAK0jB,eAAe2+C,kBAAkB/vC,KAGpD,GAAI7P,IAAQ6/C,kBACR,GAAIzF,GAAeA,EAAYxsB,IAAK,CAChC,IAAMA,EAAMwsB,EAAYxsB,IAExBupE,EAAaC,EAAU9rF,MAAMiD,OAAO,SAAA8oF,GAAG,OAAI/sF,IAAQO,SAASwsF,EAAjB,SAAAzgH,OAA+Bg3C,WAE1EupE,EAAaC,EAAU9rF,MAAMiD,OAAO,SAAA8oF,GAChC,IAAMp/D,EAAO3tB,IAAQO,SAASwsF,EAAK,UAEnC,YAAuB,IAATp/D,GAAwB7P,IAAa6P,EAAKjtB,UAAU,GAAG1qB,MAAM,KAAK,UAIxF62G,EAAaC,EAAU9rF,MAAMiD,OAAO,SAAA8oF,GAAG,OAAIA,EAAIrnF,WAAJ,KAAAp5B,OAAoBu9B,MAGnE,GAAKgjF,EAAWhkH,OAAhB,CAWA,IAAIg0E,EAAY78C,IAAQuD,UAAUspF,EAAW,GAAI,WAIjD,IAFAhwC,EACMA,EAAU54C,OAAO,SAAAxsB,GAAI,OAA0C,IAAtCA,EAAKZ,QAAL,QAAAvK,OAAqBwxC,OACrCj1C,OAAf,CAYA,IAAMw8B,EAAUw3C,EAAU,GAAGn8C,UAAU,GAAG1qB,MAAM,KAAK,GAC/Cg3G,EAAYhgG,OAAOqY,GACnB4nF,EAAkBh6G,KAAK2/D,eAAes6C,aAAaF,GAEzD,GAAI7/F,MAAM6/F,IAAcA,EAAY,EAChCh9E,mBACI,IAAIrmC,MAAJ,iBAAA2C,OACqB+4B,EADrB,6BAAA/4B,OAEQwxC,EAFR,iBAAAxxC,OAEgCu9B,UAIjC,GAAKojF,EAAL,CAWPn5F,EAAOjc,IAAP,GAAAvL,OAAc2G,KAAd,oBAAsCg6G,EAAiBD,GAEvD,IAAMG,EACAl6G,KAAK2/D,eAAew6C,iBAAiBH,EAAiBpjF,GAE5D,GAAKsjF,EAAL,CASA,IAAM5xF,EAAQ4xF,EAAc5xF,MACtBsc,EAAYs1E,EAAct1E,UAEhC5kC,KAAKo6G,mBACDJ,EAAiB/1F,EAAQygB,EAAO9N,EAAWgO,EAAWm1E,EAAWzxF,QAZjEyU,mBACI,IAAIrmC,MAAJ,GAAA2C,OACO2G,KADP,uCAAA3G,OAEQ2gH,UAnBZj9E,mBACI,IAAIrmC,MAAJ,4BAAA2C,OAEQ0gH,EAFR,6BAAA1gH,OAGQwxC,EAHR,iBAAAxxC,OAGgCu9B,UA5BpCmG,mBACI,IAAIrmC,MAAJ,8BAAA2C,OAEQwxC,EAFR,mCAAAxxC,OAEkDu9B,UAlBtDmG,mBACI,IAAIrmC,MAAJ,2BAAA2C,OAEQu9B,EAFR,2CAAAv9B,OAGQwxC,UAnCZ9N,mBACI,IAAIrmC,MAAJ,oDAAA2C,OACwDwxC,UAZ5DhqB,EAAO3b,KACH,GAAA7L,OAAG2G,KAAH,mEAAA3G,OACUwxC,KA4HtB4B,EAAwBn8C,UAAU8pH,mBAAqB,SAC/CJ,EACA/1F,EACAygB,EACA9N,EACAgO,EACApc,EACAF,GACJ,IAAI+xF,EAAkBr6G,KAAKgtC,aAAaz9C,IAAIyqH,GAEvCK,IACDA,EAAkB,IAAIl4F,IACtBniB,KAAKgtC,aAAalpB,IAAIk2F,EAAiBK,IAG3C,IAAMC,EAAgBD,EAAgB9qH,IAAIqnC,GAE1C,GAAI0jF,GAAiBA,EAAcxzB,aAAepiD,EAG9C7jB,EAAO3b,KACH,GAAA7L,OAAG2G,KAAH,yDAAA3G,OACS2gH,EADT,MAAA3gH,OAC6Bu9B,QALrC,CAQW0jF,GACPz5F,EAAO7b,MACH,GAAA3L,OAAG2G,KAAH,oCAAA3G,OACS2gH,EADT,KAAA3gH,OAC4Bu9B,IAGpC,IAAMk9B,EACA,IAAIymD,IACEv6G,KAAKkxD,IACLlxD,KAAKkxD,IAAI9nB,WACT4wE,EACA/1F,EACAygB,EACA9N,EACAgO,EACApc,EACAF,EACAtoB,KAAKuqC,OAEjB8vE,EAAgBv2F,IAAI8S,EAAWk9B,GAE/B9zD,KAAKoiB,aAAa6C,KAAKmZ,IAAUjG,mBAAoB27B,KAUzDrnB,EAAwBn8C,UAAUgoH,qBAAuB,SAASr0F,GAC9D,GAAKklB,IAAIqxE,aAAav2F,GAAtB,CAUA,IAAM01F,EAAoB11F,EAAOia,iBAXqC1U,GAAA,EAAAC,GAAA,EAAAC,OAAAnpB,EAAA,IAatE,QAAAopB,EAAAC,EAAyB+vF,EAAzBlqH,OAAA4F,cAAAm0B,GAAAG,EAAAC,EAAApE,QAAAC,MAAA+D,GAAA,EAA4C,KAAjCwmC,EAAiCrmC,EAAAh6B,MACxCqQ,KAAKy4G,oBAAoBx0F,EAAQ+rC,IAdiC,MAAA3/C,GAAAoZ,GAAA,EAAAC,EAAArZ,EAAA,YAAAmZ,GAAA,MAAAI,EAAA/D,QAAA+D,EAAA/D,SAAA,WAAA4D,EAAA,MAAAC,GAgBtE,IAAMgwF,EAAoBz1F,EAAO+Z,iBAhBqCxT,GAAA,EAAAC,GAAA,EAAAC,OAAAnqB,EAAA,IAkBtE,QAAAoqB,EAAAC,EAAyB8uF,EAAzBjqH,OAAA4F,cAAAm1B,GAAAG,EAAAC,EAAApF,QAAAC,MAAA+E,GAAA,EAA4C,KAAjC4iB,EAAiCziB,EAAAh7B,MACxCqQ,KAAKy4G,oBAAoBx0F,EAAQmpB,IAnBiC,MAAA/8B,GAAAoa,GAAA,EAAAC,EAAAra,EAAA,YAAAma,GAAA,MAAAI,EAAA/E,QAAA+E,EAAA/E,SAAA,WAAA4E,EAAA,MAAAC,QACtE,CACI,IAAMxjB,EAAKiiC,IAAI1I,YAAYxc,GAE3BpD,EAAO3b,KAAP,6DAAA7L,OACiE6N,MAyBzEulC,EAAwBn8C,UAAUmoH,oBAAsB,SAChDx0F,EACAygB,GACJ,IAAMmG,EAAW1B,IAAI1I,YAAYxc,GAC3Bk5D,EAAUz4C,GAASyE,IAAIxI,WAAW+D,GAExC7jB,EAAO3b,KAAP,GAAA7L,OAAe2G,KAAf,6BAAA3G,OAA+CwxC,EAA/C,MAAAxxC,OAA4D8jF,IAEvDtyC,EAOAsyC,EAOAn9E,KAAKy6G,uBAAuB5vE,EAAUsyC,IAWvCt8D,EAAO1b,KAAP,GAAA9L,OACO2G,KADP,uCAAA3G,OACiDwxC,EADjD,8BAAAxxC,OAEiB8jF,IAnBjBpgD,mBACI,IAAIrmC,MAAJ,GAAA2C,OAAa2G,KAAb,gDARJ+8B,mBACI,IAAIrmC,MAAJ,GAAA2C,OAAa2G,KAAb,kDAqCZysC,EAAwBn8C,UAAUoqH,oBAAsB,SAChD7vE,EACAsyC,GAAS,IAAA/xD,GAAA,EAAAC,GAAA,EAAAC,OAAA/qB,EAAA,IAEb,QAAAgrB,EAAAC,EAA+BxrB,KAAKgtC,aAAaznB,SAAjD91B,OAAA4F,cAAA+1B,GAAAG,EAAAC,EAAAhG,QAAAC,MAAA2F,GAAA,EAA2D,KAAhDiuF,EAAgD9tF,EAAA57B,MAAA+7B,GAAA,EAAAC,GAAA,EAAAC,OAAArrB,EAAA,IACvD,QAAAsrB,EAAAC,EAAyButF,EAAiB9zF,SAA1C91B,OAAA4F,cAAAq2B,GAAAG,EAAAC,EAAAtG,QAAAC,MAAAiG,GAAA,EAAoD,KAAzC4tF,EAAyCztF,EAAAl8B,MAGhD,GAAI2pH,EAAWp8B,eAAiBryC,GACzByuE,EAAWl8B,cAAgBD,EAC9B,OAAOm8B,GANwC,MAAAjpG,GAAAsb,GAAA,EAAAC,EAAAvb,EAAA,YAAAqb,GAAA,MAAAI,EAAAjG,QAAAiG,EAAAjG,SAAA,WAAA8F,EAAA,MAAAC,KAF9C,MAAAvb,GAAAgb,GAAA,EAAAC,EAAAjb,EAAA,YAAA+a,GAAA,MAAAI,EAAA3F,QAAA2F,EAAA3F,SAAA,WAAAwF,EAAA,MAAAC,KAyBjBmhB,EAAwBn8C,UAAUs9C,mBAAqB,SAASH,GAC5D,IAAMC,EAAgB,GAChB2sE,EAAkBr6G,KAAKgtC,aAAaz9C,IAAIk+C,GAE9C,GAAI4sE,EAAiB,CACjB,IAAMM,EAAoBN,EAAgB9qH,IAAIo1C,KACxCi2E,EAAoBP,EAAgB9qH,IAAIo1C,KAE9Cg2E,GAAqBjtE,EAAcxqC,KAAKy3G,GACxCC,GAAqBltE,EAAcxqC,KAAK03G,GAExC56G,KAAKgtC,aAAa1mB,OAAOmnB,GAO7B,OAJA5sB,EAAO5b,MAAP,GAAA5L,OACO2G,KADP,+BAAA3G,OACyCo0C,EADzC,YAAAp0C,OAEQq0C,EAAc93C,SAEf83C,GAQXjB,EAAwBn8C,UAAUuqH,mBAAqB,SAASC,GAC5DA,EAAY/1F,UACZ,IAAMoR,EAAgB2kF,EAAY/mD,mBAC5BsmD,EAAkBr6G,KAAKgtC,aAAaz9C,IAAI4mC,GAEzCkkF,EAGOA,EAAgB/zF,OAAOw0F,EAAY/tE,YAC3ClsB,EAAO7b,MAAP,oBAAA3L,OACwByhH,EADxB,gCAHAj6F,EAAO7b,MAAP,+CAAA3L,OACmD88B,IAKvDn2B,KAAKoiB,aAAa6C,KAAKmZ,IAAU/F,qBAAsByiF,IAa3DruE,EAAwBn8C,UAAUmqH,uBAAyB,SACnD5vE,EACAsyC,GACJ,IAAM29B,EAAc96G,KAAK06G,oBAAoB7vE,EAAUsyC,GAMvD,OAJI29B,GACA96G,KAAK66G,mBAAmBC,GAGrBA,GA8GX,IAAMC,EAAiB,SAASprF,GAC5B,GAAoB,WAAhBx6B,EAAOw6B,IAA8B,OAATA,GACL,iBAAbA,EAAK2C,IAGf,OAFAzR,EAAO1b,KAAK,mDAELwqB,EAIX,IAAM6rB,EAAYt6B,EAAQ,IACpBzI,EAAU+iC,EAAU9iC,MAAMiX,EAAK2C,UAEd,IAAZ7Z,QACyB,IAAlBA,EAAQsV,OACft4B,MAAMC,QAAQ+iB,EAAQsV,QAC7BtV,EAAQsV,MAAMze,QAAQ,SAAAyiB,GASlB,IAAMipF,EAAa,GACbC,EAAe,GAcrB,QAZgC,IAArBlpF,EAAMX,YACV37B,MAAMC,QAAQq8B,EAAMX,aACvBW,EAAMX,WAAW9hB,QAAQ,SAAAkiB,QACU,IAApBA,EAAMC,WACU,QAApBD,EAAMC,gBACkB,IAAhBD,EAAMV,OACbkqF,EAAW93G,KAAK6W,OAAOyX,EAAMV,MAAM/tB,MAAM,KAAK,OAM1DtN,MAAMC,QAAQq8B,EAAMjB,OAAQ,CAC5B,IAAIpiC,EAEJ,IAAKA,EAAI,EAAGA,EAAIqjC,EAAMjB,MAAMl7B,OAAQlH,IACF,WAA1ByG,EAAO48B,EAAMjB,MAAMpiC,UACa,IAAtBqjC,EAAMjB,MAAMpiC,GAAGwY,IACtB8zG,EAAWp3G,QAAQmuB,EAAMjB,MAAMpiC,GAAGwY,KAAO,IAC5C+zG,EAAa/3G,KAAK6uB,EAAMjB,MAAMpiC,WACvBqjC,EAAMjB,MAAMpiC,IAI3B,IAAKA,EAAI,EAAGA,EAAIqjC,EAAMjB,MAAMl7B,OAAQlH,SACF,IAAnBqjC,EAAMjB,MAAMpiC,IACnBusH,EAAa/3G,KAAK6uB,EAAMjB,MAAMpiC,IAItCqjC,EAAMjB,MA0BtB,WAAuD,IAAhB84C,EAAgBzoE,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAC/C,IAAKshB,IAAQga,aAAeha,IAAQokE,qBAAqB,IACrD,OAAOjd,EAGX,IAAIsxC,EAAa3lH,EAAQq0E,GAsBzB,OApB2BA,EAAU54C,OAAO,SAAAiB,GAAQ,MACzB,YAAvBA,EAAS30B,WAA8C,MAAnB20B,EAAStiC,QAC5C6V,IAAI,SAAAysB,GAAQ,OAAIA,EAAS/qB,KAEXoI,QAAQ,SAAA6rG,GAEvB,IAAMC,EAAYF,EAAc3pF,KAAK,SAAA/sB,GAAI,OACrCA,EAAK0C,KAAOi0G,GAA6B,UAAnB32G,EAAKlH,YAE/B89G,EAAUzrH,MAAV,YAAA0J,OAA8B8hH,IAG9BD,EACMA,EAAclqF,OAAO,SAAAxsB,GAAI,OAAIA,EAAK0C,KAAOi0G,KAIjCj4G,KAAKk4G,KAGhBF,EArDmBG,CAA8BJ,MAKxD,IAAMK,EAAS9/D,EAAUxF,MAAMv9B,GAG/B,OAAO,IAAI+vD,sBAAsB,CAC7BvhE,KAAM0oB,EAAK1oB,KACXqrB,IAAKgpF,KA2Fb7uE,EAAwBn8C,UAAUi9G,aAAe,SAAS3kE,GACtD,IAAM7X,EAAW/wB,KAAKu7G,SAAS3yE,EAAWE,OAE1C,OAAO/X,GAAYA,EAASD,MAAM,IAmBtC2b,EAAwBn8C,UAAUkrH,oCAC5B,SAAS7rF,GACP,IAAM2C,EAAMkpB,IAAU9iC,MAAMiX,EAAK2C,KAC3BiH,EAAQjH,EAAIvE,MAAMwD,KAAK,SAAAnD,GAAK,MAAmB,UAAfA,EAAMnnB,OAE5C,GAAIsyB,EAAMotD,UAAW,CACjB,IAAM71D,EAAQ,GAQd,GANAyI,EAAMzI,MAAMxhB,QAAQ,SAAAkZ,GACO,SAAnBA,EAAKlrB,WACLwzB,EAAM5tB,KAAKslB,EAAKthB,MAGxBqyB,EAAMnI,WAAamI,EAAMnI,YAAc,GACnCmI,EAAMnI,WAAWG,KAAK,SAAAC,GAAK,MAAwB,QAApBA,EAAMC,YAErC,OAAO9B,EAEX4J,EAAMnI,WAAWluB,KAAK,CAClBuuB,UAAW,MACXX,MAAOA,EAAM3tB,KAAK,OAI1B,OAAO,IAAIqlE,sBAAsB,CAC7BvhE,KAAM0oB,EAAK1oB,KACXqrB,IAAKkpB,IAAUxF,MAAM1jB,MAKjC,IAAMmpF,EAAU,CACZ55C,eADY,WAER,OAAO7hE,KAAK0jB,eAAem+C,gBAE/BG,mBAJY,WAKR,OAAOhiE,KAAK0jB,eAAes+C,oBAE/BS,iBAPY,WAQR,IAAI9yC,EAAO3vB,KAAK0jB,eAAe++C,iBAE/B,OAAK9yC,GAML3vB,KAAKg1C,MAAM,oCAAqC8jE,EAAQnpF,IAGpDlN,IAAQ6/C,mBACR3yC,EAAO3vB,KAAKw3G,QAAQkE,QAAQ/rF,GAC5B3vB,KAAKg1C,MAAM,8CACP8jE,EAAQnpF,IAEZA,EAAO3vB,KAAKw7G,oCAAoC7rF,GAChD3vB,KAAKg1C,MAAM,yDACP8jE,EAAQnpF,MAERlN,IAAQqsE,gCACRn/D,EAAO3vB,KAAK+3G,eAAe4D,mCAAmChsF,GAC9D9O,EAAO5b,MACH,uDAAwD0qB,IAWhEA,EAvIY,SAAS8yC,EAAkBt7D,GAC/C,IAAKs7D,EACD,MAAM,IAAI/rE,MAAM,mCAGpB,IAAMklH,EAAc,IAAIvgE,IAAiBonB,EAAiBnwC,KACpDupF,EAAaD,EAAYE,YAAY,SACvCC,GAAU,EAEVF,GAAuC,aAAzBA,EAAW5rF,YACrB9oB,EAAQo6D,YACRs6C,EAAW5rF,UAAY,WAEvB4rF,EAAW5rF,UAAY,WAG3B8rF,GAAU,GAGd,IAAMC,EAAaJ,EAAYE,YAAY,SAO3C,OALIE,GAAuC,aAAzBA,EAAW/rF,YACzB+rF,EAAW/rF,UAAY,WACvB8rF,GAAU,GAGVA,EACO,IAAIvzC,sBAAsB,CAC7BvhE,KAAMw7D,EAAiBx7D,KACvBqrB,IAAKspF,EAAYK,aAIlBx5C,EAsGQy5C,CAAgBvsF,EAAM3vB,KAAKmH,UAItCwoB,EAAO3vB,KAAK+3G,eAAeoE,2BAA2BxsF,KAnClD9O,EAAO5b,MAAM,iDAEN,KAqCfo9D,kBAlDY,WAmDR,IAAI1yC,EAAO3vB,KAAK0jB,eAAe2+C,kBAE/B,OAAK1yC,GAKL3vB,KAAKg1C,MAAM,qCAAsC8jE,EAAQnpF,IAGrDlN,IAAQ6/C,oBACR3yC,EAAO3vB,KAAKw3G,QAAQkE,QAAQ/rF,GAC5B3vB,KAAKg1C,MACD,+CAAgD8jE,EAAQnpF,KAGzDA,IAbH9O,EAAO5b,MAAM,mDAEN,MAenB7V,OAAOmW,KAAKk2G,GAASnsG,QAAQ,SAAA8sG,GACzBhtH,OAAOC,eACHo9C,EAAwBn8C,UACxB8rH,EAAM,CACF7sH,IAAKksH,EAAQW,OAKzB3vE,EAAwBn8C,UAAUirH,SAAW,SAASzyE,GAClD,OAAO9oC,KAAKynF,WAAWl4F,IAAIu5C,IAO/B2D,EAAwBn8C,UAAUg0C,SAAW,SAASI,GAA4B,IAArBs6B,EAAqB79D,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,IAAAA,UAAA,GACxE2nC,EAAQpE,EAAMoE,MAIpB,GAFAjoB,EAAO3b,KAAP,OAAA7L,OAAmBqrC,EAAnB,SAAArrC,OAAgC2G,OAE5BA,KAAKspC,YAAY3iB,IAAImiB,GACrBjoB,EAAO7b,MAAP,GAAA3L,OAAgBqrC,EAAhB,mBAAArrC,OAAuC2G,WAD3C,CAOA,GADAA,KAAKspC,YAAYxlB,IAAIglB,EAAOpE,GACxBjiB,IAAQ6/C,mBAAqBtD,EAC7B,OAAOh/D,KAAKq3G,SAAS/yE,SAASI,EAAOs6B,GAGzC,IAAMq9C,EAAe33E,EAAMsiD,oBAa3B,GAXIq1B,EACAr8G,KAAKs8G,WAAWD,KAGR55F,IAAQqsE,+BACLpqD,EAAMqJ,gBACLrJ,EAAM2kC,iBAAmB3kC,EAAMmxB,YAC3Ch1C,EAAO7b,MAAP,GAAA3L,OAAgB2G,KAAhB,2BAAA3G,OAA8CqrC,IAI9CjiB,IAAQ4lD,aAAe5lD,IAAQqsE,+BACxBpqD,EAAM2kC,gBAAkB3kC,EAAMmxB,UAAW,CAChD,IAAM9kC,EAAW/wB,KAAKu8G,0BAA0B73E,GAEhD1kC,KAAK63G,eAAe2E,eAAezrF,EAASD,MAAM,IAClD,IAAMY,EACAX,EAASqiB,OAAO7hB,KAAK,SAAA2pB,GAAS,MAA4B,QAAxBA,EAAUzpB,YAE9CC,GACA1xB,KAAK2mF,UAAU81B,aAAa/qF,EAASZ,OAEzC,IAAM4rF,EACA3rF,EAASqiB,OAAOpiB,OACd,SAAAkqB,GAAS,MAA4B,QAAxBA,EAAUzpB,YAE/B,GAAIirF,EAAW,CACX,IAAMC,EAAiB,IAAIx6F,IAE3Bu6F,EAAUptG,QAAQ,SAAAgiB,GACd,IAAMD,EAAcC,EAASR,MAAM,GAC7B8rF,EAAUtrF,EAASR,MAAM,GAE/B6rF,EAAe74F,IAAIuN,EAAaurF,KAEpC58G,KAAKi4G,YAAYwE,aAAaE,IAGlCl6F,IAAQ6/C,oBAAsB7/C,IAAQgkE,8BACtCzmF,KAAKq3G,SAAS9vB,aAAa7iD,KAWnC+H,EAAwBn8C,UAAUo6E,eAAiB,SAAShmC,GACxD,IAAK1kC,KAAK68G,oBAAoB,iBAAkBn4E,GAE5C,OAAO,EAIX,GADA7jB,EAAO3b,KAAP,UAAA7L,OAAsBqrC,EAAtB,kBAAArrC,OAA4C2G,OACxCyiB,IAAQ6/C,kBACR,OAAOtiE,KAAKq3G,SAAS3sC,eAAehmC,GAExC,IAAMo4E,EAAep4E,EAAMsiD,oBAE3B,OAAK81B,GAML98G,KAAKs8G,WAAWQ,IAET,IAPHj8F,EAAO7b,MAAP,iBAAA3L,OACqBqrC,EADrB,kBAAArrC,OAC2C2G,KAD3C,yBAGO,IAYfysC,EAAwBn8C,UAAUgsH,WAAa,SAASr1E,GACpDjnC,KAAK0jB,eAAe4jE,UAAUrgD,GAC9BjnC,KAAK2nF,cAAczkF,KAAK+jC,IAO5BwF,EAAwBn8C,UAAUysH,cAAgB,SAAS91E,GACnDxkB,IAAQu6F,oBACRh9G,KAAKi9G,0BAA0Bh2E,GAE/BjnC,KAAK0jB,eAAe6uF,aAAatrE,GAErCjnC,KAAK2nF,cACC3nF,KAAK2nF,cAAc32D,OAAO,SAAA/M,GAAM,OAAIA,IAAWgjB,KAczDwF,EAAwBn8C,UAAUusH,oBAAsB,SAChDz9D,EACAxW,GACJ,IAAMs0E,EAAal9G,KAAKspC,YAAY3iB,IAAIiiB,EAAWE,OAOnD,OALKo0E,GACDr8F,EAAO7b,MAAP,GAAA3L,OACO+lD,EADP,MAAA/lD,OACsBuvC,EADtB,wBAAAvvC,OACuD2G,OAGpDk9G,GASXzwE,EAAwBn8C,UAAU6sH,kBAAoB,SAASl2E,GAC3D,OAAOjnC,KAAK2nF,cAAc/jF,QAAQqjC,IAAgB,GAUtDwF,EAAwBn8C,UAAUm+F,YAAc,SAAS7lD,GACrD,GAAInmB,IAAQ6/C,kBACR,OAAOtiE,KAAKq3G,SAAS5oB,YAAY7lD,GAErC,IAAMk0E,EAAel0E,EAAWo+C,oBAEhChnF,KAAKg1C,MACD,eACApM,EAAWE,MAAOg0E,EAAeA,EAAa51G,QAAK3G,GAElDP,KAAK68G,oBAAoB,eAAgBj0E,KAI9C5oC,KAAKspC,YAAYhjB,OAAOsiB,EAAWE,OACnC9oC,KAAKynF,WAAWnhE,OAAOsiB,EAAWE,OAE9Bg0E,IACIr6F,IAAQu6F,oBACRh9G,KAAKi9G,0BAA0BH,GAE/B98G,KAAK0jB,eAAe6uF,aAAauK,MAW7CrwE,EAAwBn8C,UAAU8sH,iBAAmB,SAASxmF,GAC1D,OAAO52B,KAAK0jB,eAAe8uF,aAAajhF,KAAK,SAAA9gC,GAAC,OAAIA,EAAEi0C,OAASj0C,EAAEi0C,MAAMlG,OAAS5H,KAUlF6V,EAAwBn8C,UAAU+sH,mBAAqB,SAASp5F,GAC5D,IAAMygB,EAAQzgB,EAAOmiB,YAAY,GAEjC,GAAK1B,EAOL,OAAO1kC,KAAK0jB,eAAe8uF,aAAajhF,KAAK,SAAA9gC,GAAC,OAAIA,EAAEi0C,QAAUA,IAN1D7jB,EAAO7b,MAAM,mCAqBrBynC,EAAwBn8C,UAAUi5E,aAAe,SAASN,EAAUC,GAChE,OAAIzmD,IAAQ6/C,kBACDtiE,KAAKq3G,SAAS9tC,aAAaN,EAAUC,IAE5CD,GACAjpE,KAAKyuF,YAAYxlB,GAEjBC,GACAlpE,KAAKskC,SAAS4kC,GAGX9lC,QAAQC,SAAQ,KAU3BoJ,EAAwBn8C,UAAUm6E,gBAAkB,SAAS7hC,GACzD,IAAMk0E,EAAel0E,EAAWo+C,oBAMhC,OAJAhnF,KAAKg1C,MACD,mBACApM,EAAWE,MAAOg0E,EAAeA,EAAa51G,GAAK,QAElDlH,KAAK68G,oBAAoB,mBAAoBj0E,KAI9CnmB,IAAQ6/C,kBACDtiE,KAAKq3G,SAAS5sC,gBAAgB7hC,GAErCk0E,GACAj8F,EAAO3b,KAAP,YAAA7L,OACgBuvC,EADhB,kBAAAvvC,OAC2C2G,OAC3CA,KAAK+8G,cAAcD,IAEZ,IAGXj8F,EAAO7b,MAAP,2CAAA3L,OAAwDuvC,KAEjD,KAOX6D,EAAwBn8C,UAAU2sH,0BAA4B,SACtDh5F,GACJ,GAAKA,EAAL,CAKA,IAAMujE,EAASxnF,KAAKq9G,mBAAmBp5F,GAEnCujE,EACAxnF,KAAK0jB,eAAe+qE,YAAYjH,GAEhC3mE,EAAOjc,IAAI,yCAInB6nC,EAAwBn8C,UAAUsoG,kBAAoB,SAASt5D,EAAOg+E,GAGlE,OAFAt9G,KAAKg1C,MAAM,oBAAqB1V,EAAOg+E,GAEhCt9G,KAAK0jB,eAAek1E,kBAAkBt5D,EAAOg+E,IAWxD7wE,EAAwBn8C,UAAUitH,4BAA8B,SACxDC,GACJ,IAAIC,EAASD,EAASlrF,IAEhBorF,EAAkBD,EAAO75G,QAAQ,WACjC+5G,EAAgBF,EAAO75G,QAAQ,mBAAoB85G,GACrDE,EAAkBH,EAAO9hC,YAAY,gBAEzC,IAAuB,IAAnBgiC,IACwB,IAArBC,GACAA,IAAoBD,EACvB,OAAOH,EAGX,IAAMK,EAAcJ,EAAO75G,QAAQ,OAAQ+5G,GACrCG,EAASL,EAAOhwF,UAAUkwF,EAAeE,EAAc,GAG7DD,GADAH,EAASA,EAAO77G,QAAQk8G,EAAQ,KACPniC,YAAY,gBACrC,IAAMoiC,EAAgBN,EAAO75G,QAAQ,OAAQg6G,GACvCI,EAAUP,EAAOp7E,MAAM,EAAG07E,GAC1BE,EAAgBH,EAAOz0D,OACvB60D,EAAUT,EAAOp7E,MAAM07E,GAI7B,OAFAN,EAAM,GAAApkH,OAAM2kH,EAAN,QAAA3kH,OAAoB4kH,GAApB5kH,OAAoC6kH,GAEnC,IAAI11C,sBAAsB,CAC7BvhE,KAAMu2G,EAASv2G,KACfqrB,IAAKmrF,KAYbhxE,EAAwBn8C,UAAU6tH,2BAA6B,SACvD17C,GACJ,IAAMm5C,EAAc,IAAIvgE,IAAiBonB,EAAiBnwC,KACtD8rF,GAAoB,EAClBvC,EAAaD,EAAYE,YAAY,SAE3C,GAAID,EAAY,CACZ,IAAMwC,EACAr+G,KAAK+4G,0BAA0Bp0E,KAEjCk3E,EAAW5rF,YAAcouF,IACzBxC,EAAW5rF,UAAYouF,EACvBx9F,EAAO3b,KAAP,qCAAA7L,OACyCglH,IACzCD,GAAoB,QAGxBv9F,EAAO1b,KAAK,oDAGhB,IAAM62G,EAAaJ,EAAYE,YAAY,SAE3C,GAAIE,EAAY,CACZ,IAAMsC,EACAt+G,KAAK+4G,0BAA0Bp0E,KAEjCq3E,EAAW/rF,YAAcquF,IACzBtC,EAAW/rF,UAAYquF,EACvBz9F,EAAO3b,KAAP,qCAAA7L,OACyCilH,IACzCF,GAAoB,QAGxBv9F,EAAO1b,KAAK,mDAGhB,OAAIi5G,EACO,IAAI51C,sBAAsB,CAC7BvhE,KAAMw7D,EAAiBx7D,KACvBqrB,IAAKspF,EAAYK,aAIlBx5C,GAGXh2B,EAAwBn8C,UAAU00E,oBAAsB,SAAShL,GAAa,IAAAjsD,EAAA/N,KACtEw9G,EAAWxjD,EAIf,GAFAh6D,KAAKg1C,MAAM,oCAAqC8jE,EAAQ0E,IAEpDx9G,KAAKmH,QAAQ85D,aAAejhE,KAAKmH,QAAQ+5D,WAAY,CACrD,IAAMolB,EAAY9qC,IAAU9iC,MAAM8kG,EAASlrF,KACrC1B,EAAa01D,EAAUv4D,MAAMwD,KAAK,SAAAziC,GAAC,MAAe,UAAXA,EAAEmY,OAE3CjH,KAAKmH,QAAQ85D,YACbl0C,IAAQqG,gBAAgBxC,EAAY,QAEpC7D,IAAQ2F,iBAAiB9B,EAAY,QAGzC4sF,EAAW,IAAIh1C,sBAAsB,CACjCvhE,KAAMu2G,EAASv2G,KACfqrB,IAAKkpB,IAAUxF,MAAMswC,KAGzBtmF,KAAKg1C,MAAM,4CACP8jE,EAAQ0E,IAehB,OAZI/6F,IAAQ4lD,aACRm1C,EAAWx9G,KAAKm+G,2BAA2BX,GAC3CA,EAAWx9G,KAAKu9G,4BAA4BC,KAI5CA,EAAWx9G,KAAKw3G,QAAQ+G,cAAcf,GACtCx9G,KAAKg1C,MACD,oDACA8jE,EAAQ0E,KAGT,IAAIp6E,QAAQ,SAACC,EAASC,GACzBv1B,EAAK2V,eAAeshD,oBAAoBw4C,GACnCv9E,KAAK,WACFlyB,EAAKinC,MAAM,gCACX,IAAMgiE,EAAajqF,IAAQwF,SAASirF,EAASlrF,KAEzC0kF,IAAejpG,EAAKipG,aACpBjpG,EAAKipG,WAAaA,EAClBjpG,EAAKqU,aAAa6C,KACdmZ,IAAUvF,oBAAqB9qB,EAAMipG,IAE7C3zE,KACD,SAAAhzB,GACCtC,EAAKinC,MAAM,+BAAgC3kC,GAC3CtC,EAAKqU,aAAa6C,KACdmZ,IAAU7F,6BACVloB,EAAKtC,GACTu1B,EAAOjzB,QAkBvBo8B,EAAwBn8C,UAAU66E,uBAAyB,SAAS8R,GAEhE,GADAp8D,EAAO5b,MAAP,GAAA5L,OAAgB2G,KAAhB,4BAAA3G,OAA+C4jF,IAC3Cx6D,IAAQ6/C,kBACR,OAAOtiE,KAAKq3G,SAASlsC,uBAAuB8R,GAEhD,IAAM8+B,EAAU/7G,KAAK62G,sBAAwB55B,EAI7C,OAFAj9E,KAAK62G,oBAAsB55B,EAEpB8+B,GAWXtvE,EAAwBn8C,UAAUo5E,cAAgB,SAAS9gC,GAAY,IAAAr6B,EAAAvO,KAOnE,KANkB4oC,EAAW3hC,OAMV09B,KACXliB,IAAQ4lD,cAAgBroE,KAAKmH,QAAQ45D,uBACrCt+C,IAAQ4lD,aAAwC,WAAzBz/B,EAAWhE,WAG1C,GAAK5kC,KAAK0jB,eAAe8uF,WAAzB,CAKA,IAAM5tE,EAAYgE,EAAWhE,UACvBu4C,EAAUv0C,EAAWlE,MAAMx9B,GAEjClH,KAAK0jB,eAAe8uF,aACfxhF,OAAO,SAAAvgC,GAAC,OAAIA,EAAEi0C,OAASj0C,EAAEi0C,MAAMx9B,KAAOi2E,IACtC7tE,QAAQ,SAAAk4E,GACL,IACI,IAAM5vB,EAAa4vB,EAAOM,gBAE1B,IAAKlwB,EAAWmwB,YAAcnwB,EAAWmwB,UAAUnyF,OAC/C,OAGJ,IAAK,IAAMsyF,KADXrnE,EAAO5b,MAAM,uCACU2yD,EAAWmwB,UAC1BnwB,EAAWmwB,UAAUx3F,eAAe23F,KACpCtwB,EAAWmwB,UAAUG,GAAU9sB,WACX,YAAdx2B,GAA2BniB,IAAQ4lD,YAh3DrC,IAs3DM95D,EAAKi4E,gBACDj4E,EAAK8oG,SAASjxB,mBAAmB8B,GAAU9sB,WAx3D7D,MA43DJosB,EAAOQ,cAAcpwB,GACvB,MAAOvnD,GACLwQ,EAAO7b,MAAM,gGACsCqL,WAlC3DwQ,EAAO5b,MAAM,yCAuCrBwnC,EAAwBn8C,UAAUs4E,qBAAuB,SAAS5O,GAAa,IAAArrD,EAAA3O,KAG3E,GAFAA,KAAKg1C,MAAM,qCAAsC8jE,EAAQ9+C,IAErDv3C,IAAQ4lD,YAAa,CAQrB,GALArO,EAAch6D,KAAK2mF,UAAU63B,uBAAuBxkD,GACpDh6D,KAAKg1C,MACD,kDACA8jE,EAAQ9+C,IAERh6D,KAAKmH,QAAQ+5D,WAAY,CACzB,IAAMolB,EAAY9qC,IAAU9iC,MAAMshD,EAAY1nC,KACxC1B,EAAa01D,EAAUv4D,MAAMwD,KAAK,SAAAziC,GAAC,MAAe,UAAXA,EAAEmY,OAE/C8lB,IAAQ2F,iBAAiB9B,EAAY,QAGrCopC,EAAc,IAAIwO,sBAAsB,CACpCvhE,KAAM+yD,EAAY/yD,KAClBqrB,IAAKkpB,IAAUxF,MAAMswC,KAK7BtsB,EAAc+gD,EAAe/gD,OAC1B,CACH,IAAMykD,EAAqBz+G,KAAK0jB,eAAe2+C,kBAG/CrI,EAAch6D,KAAKw3G,QAAQ+G,cAAcvkD,EAAaykD,GACtDz+G,KAAKg1C,MACD,gDACA8jE,EAAQ9+C,IAERh6D,KAAKwmF,kBAELxsB,EAAch6D,KAAK2mF,UAAU63B,uBAAuBxkD,GAGpDA,EAAch6D,KAAKq3G,SAASqH,mCAAmC1kD,GAC/Dh6D,KAAKg1C,MACD,oDACA8jE,EAAQ9+C,IAGZA,EAAch6D,KAAKq3G,SAASsH,2BAA2B3kD,IAI/D,OAAO,IAAI52B,QAAQ,SAACC,EAASC,GACzB30B,EAAK+U,eAAeklD,qBAAqB5O,GACpC/5B,KAAK,WACFtxB,EAAKqmC,MAAM,iCACX,IAAMiiE,EAAclqF,IAAQwF,SAASynC,EAAY1nC,KAE7C2kF,IAAgBtoG,EAAKsoG,cACrBtoG,EAAKsoG,YAAcA,EACnBtoG,EAAKyT,aAAa6C,KACdmZ,IAAUtF,qBAAsBnqB,EAAMsoG,IAE9C5zE,KACD,SAAAhzB,GACC1B,EAAKqmC,MAAM,gCAAiC3kC,GAC5C1B,EAAKyT,aAAa6C,KACdmZ,IAAU5F,8BACVnoB,EACA1B,GACJ20B,EAAOjzB,QAkBvBo8B,EAAwBn8C,UAAU+6E,uBAAyB,SAAS4R,GAEhE,GADAp8D,EAAO5b,MAAP,GAAA5L,OAAgB2G,KAAhB,4BAAA3G,OAA+C4jF,IAC3Cx6D,IAAQ6/C,kBACR,OAAOtiE,KAAKq3G,SAAShsC,uBAAuB4R,GAEhD,IAAM8+B,EAAU/7G,KAAKsmE,sBAAwB2W,EAI7C,OAFAj9E,KAAKsmE,oBAAsB2W,EAEpB8+B,GAYXtvE,EAAwBn8C,UAAUsuH,UAAY,SAASC,GAA2C,IAApCC,EAAoC39G,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAzB,IAAK49G,EAAoB59G,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAL,IACzF,IAAKnB,KAAK82G,YAAa,CACnB,GAAI92G,KAAK0jB,eAAe8uF,WAAY,CAChC,IAAMv1C,EAAYj9D,KAAK0jB,eAAe8uF,aAAajhF,KAAK,SAAA9gC,GAAC,OAAIA,EAAEuuH,OAE/Dh/G,KAAK82G,YAAc75C,GAAaA,EAAU+hD,KAC1Ch/G,KAAK82G,aAAej2F,EAAO3b,KAAP,GAAA7L,OAAe2G,KAAf,6CAGxB,IAAKA,KAAK82G,YAAa,CACnB,IAAMmI,EAAkBxpH,MAAMO,KAAKgK,KAAKspC,YAAY/jB,UAAUgM,KAAK,SAAA3hC,GAAC,OAAIA,EAAEm+C,iBAEtE/tC,KAAK0jB,eAAew7F,kBAAoBD,IACxCj/G,KAAK82G,YAAc92G,KAAK0jB,eAAew7F,iBAAiBD,EAAgBn4B,aAE5E9mF,KAAK82G,aAAej2F,EAAO3b,KAAP,GAAA7L,OAAe2G,KAAf,8DAGpBA,KAAK82G,cACL92G,KAAK82G,YAAYqI,aAAen/G,KAAKo/G,cAAclvH,KAAK8P,OAIhE,GAAIA,KAAK82G,YAAa,CAClB,GAAI92G,KAAK82G,YAAYuI,WAOjB,YANAr/G,KAAK+2G,gBAAgB7zG,KAAK,CACtB27G,QACAC,WACAC,iBAMR/+G,KAAK82G,YAAYwI,WAAWT,EAAOC,EAAUC,QAE7Cl+F,EAAO1b,KAAP,GAAA9L,OAAe2G,KAAf,8CAaRysC,EAAwBn8C,UAAU8uH,cAAgB,SAAS1yF,GAGvD,GAAI1sB,KAAK82G,aAA8B,KAAfpqF,EAAM6yF,MAAev/G,KAAK+2G,gBAAgBnhH,OAAQ,KAAA4pH,EAC5Bx/G,KAAK+2G,gBAAgB/oF,QAAvD6wF,EAD8DW,EAC9DX,MAAOC,EADuDU,EACvDV,SAAUC,EAD6CS,EAC7CT,aAEzB/+G,KAAK82G,YAAYwI,WAAWT,EAAOC,EAAUC,KAQrDtyE,EAAwBn8C,UAAUm0E,qBAAuB,WACrD,IAAMrpB,EAAUruB,IAAQ4E,eAExB9Q,EAAO3b,KAAP,GAAA7L,OAAe2G,KAAf,kCAAA3G,OAAoD+hD,IACpDp7C,KAAK63G,eAAe2E,eAAephE,IAOvC3O,EAAwBn8C,UAAUg5E,kBAAoB,WAClDzoD,EAAO3b,KAAK,gCACZlF,KAAK63G,eAAe4H,uBAQxBhzE,EAAwBn8C,UAAU2sB,MAAQ,WACtCjd,KAAKg1C,MAAM,QAGXh1C,KAAK2/D,eAAehmB,IAChBw9D,IAAoCn3G,KAAKo3G,mBAC7Cp3G,KAAK2/D,eAAehmB,IAChBw9D,IAAyCn3G,KAAKk3G,uBAPD,IAAAwI,GAAA,EAAAC,GAAA,EAAAC,OAAAr/G,EAAA,IASjD,QAAAs/G,EAAAC,EAAyB9/G,KAAKgtC,aAAaznB,SAA3C91B,OAAA4F,cAAAqqH,GAAAG,EAAAC,EAAAt6F,QAAAC,MAAAi6F,GAAA,EAAqD,KAA1CK,EAA0CF,EAAAlwH,MAAAqwH,GAAA,EAAAC,GAAA,EAAAC,OAAA3/G,EAAA,IACjD,QAAA4/G,EAAAC,EAA0BL,EAAWx6F,SAArC91B,OAAA4F,cAAA2qH,GAAAG,EAAAC,EAAA56F,QAAAC,MAAAu6F,GAAA,EAA+C,KAApClsD,EAAoCqsD,EAAAxwH,MAC3CqQ,KAAK66G,mBAAmB/mD,IAFqB,MAAAzjD,GAAA4vG,GAAA,EAAAC,EAAA7vG,EAAA,YAAA2vG,GAAA,MAAAI,EAAAv6F,QAAAu6F,EAAAv6F,SAAA,WAAAo6F,EAAA,MAAAC,KATJ,MAAA7vG,GAAAsvG,GAAA,EAAAC,EAAAvvG,EAAA,YAAAqvG,GAAA,MAAAI,EAAAj6F,QAAAi6F,EAAAj6F,SAAA,WAAA85F,EAAA,MAAAC,GAcjD5/G,KAAKgtC,aAAas/B,QAElBtsE,KAAK2nF,cAAgB,GAErB3nF,KAAK82G,YAAc,KACnB92G,KAAK+2G,gBAAkB,GAElB/2G,KAAKkxD,IAAImvD,sBAAsBrgH,OAChC6gB,EAAO7b,MAAM,4CAEU,OAAvBhF,KAAKu3G,gBACLjpH,OAAOuxC,cAAc7/B,KAAKu3G,eAC1Bv3G,KAAKu3G,cAAgB,MAEzB12F,EAAO3b,KAAP,WAAA7L,OAAuB2G,KAAvB,QACAA,KAAK0jB,eAAezG,SA4ExB,SAASqjG,EAAeC,GACpB,OAAOA,EAAe3zE,iBACjBq3C,KAAK,SAAAr0F,GAAC,MAAoB,WAAhBA,EAAEg1C,YAhBrB6H,EAAwBn8C,UAAUu4E,aAAe,SAASv+C,GACtD,OAAOtqB,KAAKwgH,sBAAqB,EAAoBl2F,IAGzDmiB,EAAwBn8C,UAAUw0E,YAAc,SAASx6C,GACrD,OAAOtqB,KAAKwgH,sBAAqB,EAAkBl2F,IAcvDmiB,EAAwBn8C,UAAUkwH,qBAAuB,SACjDC,EACAn2F,GAAa,IAAA7Z,EAAAzQ,KACX0gH,EAAUD,EAAU,QAAU,SAEpCzgH,KAAKg1C,MAAL,SAAA37C,OAAoBqnH,GAAW5zG,KAAK8L,UAAU0R,EAAa,KAAM,MAEjE,IAAMq2F,EAAgB,SAACC,EAAWC,EAAWC,GACzC,IAsDI,GArDArwG,EAAKukC,MAAL,SAAA37C,OACaqnH,EADb,2BAC+C5H,EAAQ8H,IAEnDn+F,IAAQ4lD,cAGH53D,EAAKwoG,mBAAmBt0E,MACrBl0B,EAAKonG,eAAekJ,wBACxBtwG,EAAKg0D,uBAITm8C,EAAY,IAAIp4C,sBAAsB,CAClCvhE,KAAM25G,EAAU35G,KAChBqrB,IAAK7hB,EAAKonG,eAAemJ,gCACrBJ,EAAUtuF,OAGlB7hB,EAAKukC,MACD,SAAA37C,OAASqnH,EAAT,6BACO,8CACP5H,EAAQ8H,KAMZnwG,EAAK+1E,iBAAmB/jE,IAAQgkE,gCAC3Bh2E,EAAKtJ,QAAQ45D,uBACdtwD,EAAKtJ,QAAQ45D,uBAAyBu/C,EAAe7vG,MAEzDmwG,EAAYnwG,EAAKk2E,UAAUs6B,sBAAsBL,GACjDnwG,EAAKukC,MACD,SAAA37C,OAASqnH,GACH,uCACN5H,EAAQ8H,MAGXnwG,EAAKtJ,QAAQ29C,YAAcriC,IAAQsiC,gBAEpC67D,EAAY,IAAIp4C,sBAAsB,CAClCvhE,KAAM25G,EAAU35G,KAChBqrB,IAAK7hB,EAAKwnG,YAAYiJ,eAAeN,EAAUtuF,OAGnD7hB,EAAKukC,MACD,SAAA37C,OAASqnH,GACF,0CACP5H,EAAQ8H,MAKXH,EAAS,CACV,IAAMp+C,EACA,IAAI1yB,IAAIl/B,EAAK4xD,kBAAkB/vC,KAC/BmwC,EAAmB,IAAI9yB,IAAIixE,EAAUtuF,KApInB02C,EAsID3G,EAtIQyG,EAsIWrG,GArIhDhgD,IAAQoe,mBAAqBpe,IAAQC,kBA+BvCsmD,GAASF,GACFE,EAAMj7C,OAAS+6C,EAAO/6C,OACtBi7C,EAAMj7C,MAAMn4B,SAAWkzE,EAAO/6C,MAAMn4B,SAC3CkzE,EAAO/6C,MAAMze,QAAQ,SAACvY,EAAGrI,GACjBq+B,IAAQO,SACJ07C,EAAMj7C,MAAMr/B,GACZ,kBACAs6E,EAAMvwD,WACVqwD,EAAO/6C,MAAMr/B,GACPqI,EAAE6K,QAAQ,kBAAmB,sBAG3CknE,EAAOt4D,IAAMs4D,EAAOrwD,QAAUqwD,EAAO/6C,MAAM5qB,KAAK,KA6FxCy9G,EAAY,IAAIp4C,sBAAsB,CAClCvhE,KAAM25G,EAAU35G,KAChBqrB,IAAKmwC,EAAiBjyD,MAI9B,IAAMihC,EAvxClB,SAAwB9hB,GAKpB,IAAM8hB,EAAU,IAAItvB,IAMdg/F,EAAY,IAAIh/F,IAEtB,GAAoB,WAAhBhtB,EAAOw6B,IAA8B,OAATA,GACL,iBAAbA,EAAK2C,IAGf,OAFAzR,EAAO1b,KAAK,mDAELssC,EAGX,IAAMh5B,EAAU+iC,IAAU9iC,MAAMiX,EAAK2C,KAErC,IAAK78B,MAAMC,QAAQ+iB,EAAQsV,OACvB,OAAO0jB,EAvBe,IAAA2vE,GAAA,EAAAC,GAAA,EAAAC,OAAA/gH,EAAA,IA0B1B,QAAAghH,EAAAC,EAAoB/oG,EAAQsV,MAA5Bt+B,OAAA4F,cAAA+rH,GAAAG,EAAAC,EAAAh8F,QAAAC,MAAA27F,GAAA,EAAmC,KAAxBrvF,EAAwBwvF,EAAA5xH,MAC/B,GAAK8F,MAAMC,QAAQq8B,EAAMjB,OAAzB,CAIA,GAAIr7B,MAAMC,QAAQq8B,EAAMX,YAAa,KAAAqwF,GAAA,EAAAC,GAAA,EAAAC,OAAAphH,EAAA,IACjC,QAAAqhH,EAAAC,EAAoB9vF,EAAMX,WAA1B3hC,OAAA4F,cAAAosH,GAAAG,EAAAC,EAAAr8F,QAAAC,MAAAg8F,GAAA,EAAsC,KAA3BjwF,EAA2BowF,EAAAjyH,MAClC,QAA+B,IAApB6hC,EAAMC,gBACa,IAAhBD,EAAMV,MAAuB,CAEvC,IAAMgxF,EACAtwF,EAAMV,MAAM/tB,MAAM,KAAKyC,IACrB,SAAA4sB,GAAO,OAAItZ,SAASsZ,EAAS,MAC/BqoB,EAAcqnE,EAAW,GAI/BtwF,EAAMV,MAAQgxF,EAGTX,EAAUx6F,IAAI8zB,IACf0mE,EAAUr9F,IAAI22B,EAAa,IAE/B0mE,EAAU5xH,IAAIkrD,GAAav3C,KAAKsuB,KAlBP,MAAAnhB,GAAAqxG,GAAA,EAAAC,EAAAtxG,EAAA,YAAAoxG,GAAA,MAAAI,EAAAh8F,QAAAg8F,EAAAh8F,SAAA,WAAA67F,EAAA,MAAAC,IALN,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAA1hH,EAAA,IA2B/B,QAAA2hH,EAAAC,EAAmBpwF,EAAMjB,MAAzBrhC,OAAA4F,cAAA0sH,GAAAG,EAAAC,EAAA38F,QAAAC,MAAAs8F,GAAA,EAAgC,KAArBv5F,EAAqB05F,EAAAvyH,MAC5B,GAAuB,SAAnB64B,EAAKlrB,UAAT,CAIA,IAAMo9C,EAAOlyB,EAAK74B,MACdohC,EAAW0gB,EAAQliD,IAAImrD,GAEtB3pB,IACDA,EAAW,CACPD,MAAO,GACPsiB,OAAQ,GACRsH,QAEJjJ,EAAQ3tB,IAAI42B,EAAM3pB,IAGtB,IAAMspB,EAAa7xB,EAAKthB,GAIxB,GAFA6pB,EAASD,MAAM5tB,KAAKm3C,GAEhB8mE,EAAUx6F,IAAI0zB,GAAa,CAC3B,IAAMjpB,EAAa+vF,EAAU5xH,IAAI8qD,GADN+nE,GAAA,EAAAC,GAAA,EAAAC,OAAA/hH,EAAA,IAG3B,QAAAgiH,EAAAC,EAAoBpxF,EAApB3hC,OAAA4F,cAAA+sH,GAAAG,EAAAC,EAAAh9F,QAAAC,MAAA28F,GAAA,EAAgC,KAArB5wF,EAAqB+wF,EAAA5yH,MAC5BohC,EAASqiB,OAAOlwC,KAAKsuB,IAJE,MAAAnhB,GAAAgyG,GAAA,EAAAC,EAAAjyG,EAAA,YAAA+xG,GAAA,MAAAI,EAAA38F,QAAA28F,EAAA38F,SAAA,WAAAw8F,EAAA,MAAAC,OAhDJ,MAAAjyG,GAAA2xG,GAAA,EAAAC,EAAA5xG,EAAA,YAAA0xG,GAAA,MAAAI,EAAAt8F,QAAAs8F,EAAAt8F,SAAA,WAAAm8F,EAAA,MAAAC,MA1BT,MAAA5xG,GAAAgxG,GAAA,EAAAC,EAAAjxG,EAAA,YAAA+wG,GAAA,MAAAI,EAAA37F,QAAA27F,EAAA37F,SAAA,WAAAw7F,EAAA,MAAAC,GAoF1B,OAAO7vE,EAmsCiBgxE,CAAe7B,GAE/B//F,EAAO5b,MAAM,wBAAyBwsC,GACtChhC,EAAKiyG,sBAAsBjxE,GAE3BovE,EAAUD,GACZ,MAAOloH,GACL+X,EAAKukC,MAAL,SAAA37C,OAAoBqnH,EAApB,WAAsChoH,GACtC+X,EAAKukC,MAAL,SAAA37C,OAAoBqnH,EAApB,WAAsC5H,EAAQ8H,IAC9C//F,EAAO7b,MAAP,SAAA3L,OAAsBqnH,EAAtB,WAAwChoH,EAAGogH,EAAQ8H,IAEnDE,EAASpoH,GA1JU,IAASswE,EAAOF,GA0K3C,OAAO,IAAI1lC,QAAQ,SAACC,EAASC,IAGrBm9E,EACYhwG,EAAKiT,eAAeohD,YAAYx6C,GAEhC7Z,EAAKiT,eAAemlD,aAAav+C,IAI5C2V,KACG,SAAA3N,GAAG,OAAIquF,EAAcruF,EAAK+Q,EAASC,IACnC,SAAAt+B,GAAK,OAxBK,SAACqL,EAAKywG,GACxBrwG,EAAKukC,MAAL,SAAA37C,OAAoBqnH,EAApB,aAAwCrwG,GACxC,IAAMi6B,EACAm2E,EACIriF,IAAU1G,oBACV0G,IAAU3G,qBAEpBhnB,EAAK2R,aAAa6C,KAAKqlB,EAAWj6B,EAAKI,GAEvCqwG,EAASzwG,GAeQsyG,CAAc39G,EAAOs+B,QAS9CmJ,EAAwBn8C,UAAUs3F,oBAAsB,SAASrtC,GAC7D,OAAIA,GAAWA,EAAQnH,QAAUmH,EAAQnH,OAAOx9C,OACrC2kD,EAAQnH,OAAO,GAAGtiB,MAAM,GACxBypB,GAAWA,EAAQzpB,OAASypB,EAAQzpB,MAAMl7B,OAC1C2kD,EAAQzpB,MAAM,GAGlB,MAUX2b,EAAwBn8C,UAAUoyH,sBAAwB,SAASjxE,GAAS,IAAAmxE,GAAA,EAAAC,GAAA,EAAAC,OAAAviH,EAAA,IACxE,QAAAwiH,EAAAC,EAAoBhjH,KAAKspC,YAAY/jB,SAArC91B,OAAA4F,cAAAutH,GAAAG,EAAAC,EAAAx9F,QAAAC,MAAAm9F,GAAA,EAA+C,KAApCl+E,EAAoCq+E,EAAApzH,MACrCszH,EAAYv+E,EAAMspD,WAExB,GAAIv8C,EAAQ9qB,IAAIs8F,GAAY,CACxB,IAAM7nE,EAAU3J,EAAQliD,IAAI0zH,GAE5B,IAAK7nE,EAGD,YAFAv6B,EAAO7b,MAAP,sBAAA3L,OAAmC4pH,EAAnC,QAAA5pH,OAAmD2G,OAIvD,IAAMm7C,EAAUn7C,KAAKynF,WAAWl4F,IAAIm1C,EAAMoE,OACpCo6E,EAAaljH,KAAK4nF,oBAAoBxsC,GACtC+nE,EAAanjH,KAAK4nF,oBAAoBzsC,GAGxC+nE,IAAeC,GACI,OAAfA,EACAtiG,EAAO3b,KAAP,8BAAA7L,OACkCqrC,EADlC,QAAArrC,OAC8C2G,MAC1Co7C,GAEJv6B,EAAO7b,MAAP,wBAAA3L,OAC4BqrC,EAD5B,KAAArrC,OACqC4pH,EADrC,QAAA5pH,OACqD2G,KADrD,WAEeo7C,GAEnBp7C,KAAKynF,WAAW3jE,IAAI4gB,EAAMoE,MAAOsS,GAEjCp7C,KAAKoiB,aAAa6C,KACdmZ,IAAUnG,yBAA0ByM,EAAOw+E,IAE/CriG,EAAO5b,MACH,kBAAA5L,OAAkB6pH,EAAlB,UAAA7pH,OAAqCqrC,EAArC,KAAArrC,OAA8C4pH,GAA9C,0BAAA5pH,OAC6B2G,YAE7B0kC,EAAM2kC,gBAAmB3kC,EAAMmxB,WAIvCh1C,EAAO1b,KAAP,uCAAA9L,OAAmDqrC,EAAnD,WAAArrC,OAAkE4pH,EAAlE,QAAA5pH,OAAkF2G,QAxClB,MAAAqQ,GAAAwyG,GAAA,EAAAC,EAAAzyG,EAAA,YAAAuyG,GAAA,MAAAI,EAAAn9F,QAAAm9F,EAAAn9F,SAAA,WAAAg9F,EAAA,MAAAC,KA6C5Er2E,EAAwBn8C,UAAU6zE,gBAAkB,SAASp1C,GAQzD,OAPA/uB,KAAKg1C,MAAM,kBAAmBloC,KAAK8L,UAAU,CACzCmW,UAAWA,EAAUA,UACrB40C,OAAQ50C,EAAU40C,OAClBT,cAAen0C,EAAUm0C,cACzBpM,iBAAkB/nC,EAAU+nC,kBAC7B,KAAM,MAEF92D,KAAK0jB,eAAeygD,gBAAgBp1C,IAY/C0d,EAAwBn8C,UAAUg4G,SAAW,SAAS58F,EAAUmC,GAIxD4U,IAAQ84E,sBAAwB94E,IAAQiO,aACjCjO,IAAQC,gBAEf1iB,KAAK0jB,eAAe4kF,WACfroE,KAAKv0B,GACL83B,MAAM31B,GAAY,cAMvB7N,KAAK0jB,eAAe4kF,SAAS58F,IAWrC+gC,EAAwBn8C,UAAUisH,0BAA4B,SAAS73E,GACnE,IAAMoE,EAAQpE,EAAMoE,MAChB/X,EAAW/wB,KAAKu7G,SAASzyE,GAS7B,GAPI/X,GACAlQ,EAAO7b,MAAP,4CAAA3L,OAAyDyvC,IAMzD9oC,KAAKwmF,mBACAxmF,KAAKmH,QAAQ45D,uBACd/gE,KAAKmH,QAAQ45D,uBAAyBu/C,EAAetgH,OAAS,CAClE+wB,EAAW,CACPD,MAAO,GACPsiB,OAAQ,IAEZ,IAAK,IAAI1kD,EAAI,EAAGA,EAAIw3F,IAAetwF,OAAQlH,IACvCqiC,EAASD,MAAM5tB,KAAK6pB,IAAQ4E,gBAEhCZ,EAASqiB,OAAOlwC,KAAK,CACjB4tB,MAAOC,EAASD,MAAMuR,QACtB5Q,UAAW,aAGfV,EAAW,CACPD,MAAO,CAAE/D,IAAQ4E,gBACjByhB,OAAQ,IAGhB,IAAKpzC,KAAKmH,QAAQ29C,YAAcriC,IAAQsiC,cAOpC,IAFA,IAAMq+D,EAAeryF,EAASD,MAAMl7B,OAE3BlH,EAAI,EAAGA,EAAI00H,IAAgB10H,EAAG,CACnC,IAAM2iC,EAAcN,EAASD,MAAMpiC,GAC7BkuH,EAAU7vF,IAAQ4E,eAExBZ,EAASD,MAAM5tB,KAAK05G,GACpB7rF,EAASqiB,OAAOlwC,KAAK,CACjB4tB,MAAO,CAAEO,EAAaurF,GACtBnrF,UAAW,QAOvB,OAHAV,EAAS2pB,KAAOhW,EAAMspD,WACtBhuF,KAAKynF,WAAW3jE,IAAIglB,EAAO/X,GAEpBA,GAiDX0b,EAAwBn8C,UAAUyyE,cAAgB,SAASD,GACnD9iE,KAAKmH,QAAQm6D,wBACbzgD,EAAO5b,MAAM,mDAAA5L,OACgBypE,IAjDP,SAASy9C,EAAgBz9C,GACnD,GAAKy9C,EAAe/N,WAApB,CAMA,IAAM6Q,EAAc9C,EAAe/N,aAC9BjhF,KAAK,SAAAi2D,GAAM,MAA0B,UAAtBA,EAAO9iD,MAAMlG,OAEjC,GAAK6kF,EAKL,GAAKA,EAAYv7B,cAAjB,CAKA,IAAMlwB,EAAayrD,EAAYv7B,gBAE3BhlB,GACAjiD,EAAO5b,MAAM,+CAGb2yD,EAAWmwB,UAAUz4E,QAAQ,SAAA5W,GACzBA,EAAEukF,QAAS,MAGfp8D,EAAO5b,MAAM,kDAGb,CAAE,EAAG,GAAIqK,QAAQ,SAAAg0G,GACT1rD,EAAWmwB,UAAUu7B,KACrB1rD,EAAWmwB,UAAUu7B,GAAUrmC,QAAS,MAIpDomC,EAAYr7B,cAAcpwB,QAvBtB/2C,EAAO5b,MAAM,qDALb4b,EAAO1b,KAAK,0DATZ0b,EAAO5b,MAAM,qCAgDbs+G,CAAsBvjH,KAAK0jB,eAAgBo/C,KASnDr2B,EAAwBn8C,UAAUyF,SAAW,WACzC,aAAAsD,OAAc2G,KAAKkH,GAAnB,SAAA7N,OAA6B2G,KAAKuqC,MAAlC,44BChiFJ,IAAM1pB,EAASK,EAAQ,GAAqBP,UAAUQ,GAChDid,EAAYld,EAAQ,GAEtBsiG,GAA2B,EAC3BC,GAA2B,EAMzBC,EAAkB,CACpB,QAAS,UAAW,iBAAkB,UAAW,QAAS,QAAS,aAAc,iBAAkB,YACnG,QAAS,OAAQ,UAAW,aAAc,UAAW,UAAW,WAQ/CnJ,cAmBjB,SAAAA,EACQrpD,EACA9nB,EACA4wE,EACA/1F,EACAygB,EACA9N,EACAgO,EACApc,EACAF,EACAiiB,GAAO,IAAA5iC,MAaX,+FAbW83B,CAAAz/B,KAAAu6G,KACXv6G,OAAA2/B,EAAA46E,GAAA1rH,KAAAmR,KACIopC,EACAnlB,EACAygB,EACA,aAGA9N,EACAgO,IARJj9B,oDASKupD,IAAMA,EAGS,iBAAT1oC,EACP,MAAM,IAAItyB,UAAJ,QAAAmD,OAAsBmvB,EAAtB,qBAdC,OAgBX7gB,EAAK6gB,KAAOA,EACZ7gB,EAAKqyG,gBAAkBA,EACvBryG,EAAK2gB,MAAQA,EACb3gB,EAAK4iC,MAAQA,EAEb1pB,EAAO5b,MAAP,2BAAA5L,OAAA2wC,IAAAriC,MAKAA,EAAKg8G,aAAer7F,EAGhB3gB,EAAKupD,KAAOvpD,EAAK+8B,OACjB/8B,EAAKi8G,qBAETj8G,EAAKk8G,mBAAqB,GAC1BH,EAAgBp0G,QAAQ,SAAAod,GACpB/kB,EAAKk8G,mBAAmBn3F,GAAS/kB,EAAKm8G,uBAAuB5zH,KAA5B85C,IAAAriC,IAAuC+kB,KAlCjE/kB,wPA7B2By0E,2DAyErB,IAAA5zE,EAAAxI,KACjBA,KAAK0kC,MAAMnC,iBAAiB,OAAQ,kBAAM/5B,EAAKu7G,iBAC/C/jH,KAAK0kC,MAAMnC,iBAAiB,SAAU,kBAAM/5B,EAAKw7G,mBACjDhkH,KAAK0kC,MAAMnC,iBAAiB,QAAS,WACjC1hB,EAAO5b,MAAP,mBAAA5L,OAAgC8O,KAAKmM,MAArC,OAAAjb,OAAgDmP,6CAYpDqY,EAAO5b,MAAP,kBAAA5L,OAA+B8O,KAAKmM,MAApC,OAAAjb,OAA+C2G,OAE/CA,KAAKkxD,IAAI9uC,aAAa6C,KAAKmZ,EAAUhG,kBAAmBp4B,+CAWxD6gB,EAAO5b,MAAP,oBAAA5L,OAAiC8O,KAAKmM,MAAtC,OAAAjb,OAAiD2G,OAEjDA,KAAKkxD,IAAI9uC,aAAa6C,KAAKmZ,EAAU9F,oBAAqBt4B,sCAOtDrQ,GACAqQ,KAAKsoB,QAAU34B,IAIfA,IACAqQ,KAAK2jH,cAAe,GAIpB3jH,KAAKikB,SACLjkB,KAAKikB,OAAOqE,MAAQ34B,GAGxBqQ,KAAKsoB,MAAQ34B,EACbqQ,KAAKilB,KAAK+uC,qBAAqCh0D,yCAS/C,OAAOA,KAAKsoB,iDAUZ,OAAOtoB,KAAKg6G,kDAOZ,OAAO,oCAUP,OAAOh6G,KAAKwoB,2CAQFvhB,GACNjH,KAAK4kC,YAAc39B,IAGvBjH,KAAK4kC,UAAY39B,EACjBjH,KAAKilB,KAAK+uC,0BAA0C/sD,4CAOpD,IAAMA,EAAOjH,KAAKqpE,eAAiB,QAAU,QAEvC/0D,EAAMhmB,OAAO82D,YAAY9wC,MAE/BvP,QAAQH,IAAR,iBAAAvL,OAA6B4N,EAA7B,OAAwCqN,GACxCtU,KAAKopC,WAAW66E,qBAAhB,GAAA5qH,OAAwC4N,EAAxC,YAAyDqN,EAKzD,IAAM4vG,EAAW51H,OAAOs1D,gBAAgB,2BAClCugE,EAAS71H,OAAOs1D,gBAAgB,yBAChCwgE,EACClqG,MAAMiqG,IAAYjqG,MAAMgqG,GAAgC,EAApBC,EAASD,EAI9CG,EAAO/vG,GACNtU,KAAKopC,WAAW66E,qBAAqB,oBAClCjkH,KAAKopC,WAAW66E,qBAAqB,eACzCG,EAENpkH,KAAKopC,WAAW66E,qBAAhB,GAAA5qH,OAAwC4N,EAAxC,UAAuDo9G,EACvDt/G,QAAQH,IAAR,eAAAvL,OAA2B4N,EAA3B,OAAsCo9G,GAEtCriG,IAAW6K,cAAc2K,YACrB,CACIX,WAAc5vB,EACdqhB,MAAOtoB,KAAK2jH,aACZh0H,MAAO00H,gDAYAznC,GACV4mC,GAA4BxjH,KAAK+tC,gBAC9B01E,GAA4BzjH,KAAKqpE,iBAIrCrpE,KAAK+tC,iBACLy1E,GAA2B,GAE3BxjH,KAAKqpE,iBACLo6C,GAA2B,GAG/B7mC,EAAUr6C,iBAAiB,UAAWviC,KAAKskH,cAAcp0H,KAAK8P,+CAUnD48E,GAAW,IAAA7uE,EAAA/N,KACtB6gB,EAAO5b,MAAP,2CAAA5L,OAAwD2G,OAExD0jH,EAAgBp0G,QAAQ,SAAAod,GACpBkwD,EAAUr6C,iBAAiB7V,EAAO3e,EAAK81G,mBAAmBn3F,6CAWnDkwD,GAAW,IAAAruE,EAAAvO,KACtB6gB,EAAO5b,MAAP,6CAAA5L,OAA0D2G,OAE1D0jH,EAAgBp0G,QAAQ,SAAAod,GACpBkwD,EAAUljC,oBAAoBhtB,EAAOne,EAAKs1G,mBAAmBn3F,qDAS9CzlB,GACnB4Z,EAAO5b,MAAP,GAAA5L,OAAgB4N,EAAhB,sDAAA5N,OAAyE2G,4CAQhE,IAAAukH,EAC8BvkH,KAAK0kC,MAApCqqD,EADCw1B,EACDx1B,QAASzmE,EADRi8F,EACQj8F,MAAO9O,EADf+qG,EACe/qG,WAExB,qBAAAngB,OAAsBmgB,EAAtB,aAAAngB,OAA4CivB,EAA5C,eAAAjvB,OAA+D01F,sCAQ/D,6BAAA11F,OAA8B2G,KAAK+zD,mBAAnC,YAAA16D,OAAgE2G,KAAK+sC,UAArE,YAAA1zC,OACI2G,KAAKu5G,UADT,WAAAlgH,OAC4B2G,KAAKuqC,MADjC,cAAAlxC,OACmD2G,KAAKwkH,aADxD,oWCzTR,IAAM3jG,EAASF,oBAAUQ,GAUJ62F,aAOjB,SAAAA,EAAYpyF,gGAAK6Z,CAAAz/B,KAAAg4G,GACbh4G,KAAK4lB,IAAMA,gFAkBgBg2F,GAE3B,IAAM6I,EAAczkH,KAAK4lB,IAAIgnB,eAAejI,KAE5C,IAAK8/E,EAAY7uH,OACb,OAAO,EACuB,IAAvB6uH,EAAY7uH,QACnBirB,EAAO7b,MACH,GAAA3L,OAAG2G,KAAK4lB,IAAR,wCACM,8BAA+B6+F,GAG7C,IAAM7zF,EAAagrF,EAAYE,YAAY,SAE3C,IAAKlrF,EAKD,OAJA/P,EAAO5b,MACH,GAAA5L,OAAG2G,KAAK4lB,IAAR,yCACM,uBAEH,EAGX,IAAIgyD,GAAW,EAtByB1yD,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAwBxC,QAAA8kB,EAAAC,EAAyBm/F,EAAzBh1H,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAsC,KAA3B8qC,EAA2B3qC,EAAA11B,MAC5B24B,EAAQ0nC,EAAW6F,UACnB5uB,EAAc+oB,EAAWg3B,oBAKzB09B,EACAz9E,GAAejnC,KAAK4lB,IAAIu3F,kBAAkBl2E,GAC1C09E,EAAgBr8F,IAAUo8F,EAQhC,GANA7jG,EAAO5b,MAAP,GAAA5L,OACO2G,KAAK4lB,IADZ,KAAAvsB,OACmB22D,EADnB,YAAA32D,OAEQivB,EAFR,4BAAAjvB,OAGQqrH,EAHR,4BAAArrH,OAIQsrH,IAEHA,EAAL,CAKA,IAAMC,EACA5kH,KAAK4lB,IAAI4gE,gBACLxmF,KAAK4lB,IAAI+gE,UAAUk+B,UACnB,CAAE7kH,KAAK4lB,IAAIiyF,eAAeiN,mBAEpC,GAAKF,EAAchvH,OAAnB,CAOAgiF,GAAW,EAMXhnD,EAAWX,UAAY,WAGvB,IAAMwqB,EAAcmqE,EAAc,GAM5BG,EAAY,YAAA1rH,OAAeohD,GAjDC30B,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAmDlC,QAAA0lB,EAAAC,EAAsB0+F,EAAtBn1H,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAqC,KAA1B00B,EAA0Bv0B,EAAAt2B,MAEjCihC,EAAWo0F,WAAWxqE,GAGtB35B,EAAO5b,MAAP,GAAA5L,OACO2G,KAAK4lB,IADZ,2BAAAvsB,OACyCmhD,EADzC,SAAAnhD,OAEQ22D,IACRp/B,EAAWq0F,iBAAiB,CACxB/9G,GAAIszC,EACJl9C,UAAW,QACX3N,MAAOo1H,IAEXn0F,EAAWq0F,iBAAiB,CACxB/9G,GAAIszC,EACJl9C,UAAW,OACX3N,MAAOqgE,EAAWg+B,cAnEQ,MAAA39E,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAsElC,GAAI4+F,EAAchvH,OAAS,EAAG,CAC1B,IAAM47B,EAAQ,CACVV,MAAO8zF,EAAczhH,KAAK,KAC1BsuB,UAAW,OAGVb,EAAW+pB,UAAUnpB,EAAMC,UAAWD,EAAMV,SAE7CjQ,EAAO5b,MAAP,GAAA5L,OACO2G,KAAK4lB,IADZ,6BAAAvsB,OAC2C22D,GACvCx+B,GACJZ,EAAWs0F,aAAa1zF,IAQ3BxxB,KAAK4lB,IAAIze,QAAQ29C,YAClB9kD,KAAK4lB,IAAIqyF,YAAYkN,gBAAgBv0F,QA9DrC/P,EAAO7b,MAAP,wBAAA3L,OAC4B22D,EAD5B,QAAA32D,OAC6C2G,KAAK4lB,QArDlB,MAAAvV,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAsHxC,OAAOwyD,qDAagBpf,GACvB,IAAM4sD,EAAOplH,KAAK4lB,IAAI1e,GADe8f,GAAA,EAAAC,GAAA,EAAAC,OAAA3mB,EAAA,IAGrC,QAAA4mB,EAAAC,EAAuBoxC,EAAa1nC,MAApCrhC,OAAA4F,cAAA2xB,GAAAG,EAAAC,EAAA5B,QAAAC,MAAAuB,GAAA,EAA2C,KAAhCiL,EAAgC9K,EAAAx3B,MACvC,OAAQsiC,EAAS30B,WACjB,IAAK,QACL,IAAK,QACL,IAAK,UACD20B,EAAStiC,MAAQsiC,EAAStiC,OAAT,GAAA0J,OAAqB44B,EAAStiC,MAA9B,KAAA0J,OAAuC+rH,GACxD,MACJ,IAAK,OACD,GAAInzF,EAAStiC,MAAO,CAChB,IAAM01H,EAAoBpzF,EAAStiC,MAAMoT,MAAM,KAE/C,GAAiC,IAA7BsiH,EAAkBzvH,OAAc,CAChC,IAAMi1C,EAAWw6E,EAAkB,GAC7BloC,EAAUkoC,EAAkB,GAElCpzF,EAAStiC,MAAT,GAAA0J,OACSwxC,EADT,KAAAxxC,OACqB+rH,EADrB,KAAA/rH,OAC6B8jF,EAD7B,KAAA9jF,OACwC+rH,QAExCvkG,EAAO1b,KACH,yDAAA9L,OACkC44B,EAAStiC,WAvB1B,MAAA0gB,GAAA4W,GAAA,EAAAC,EAAA7W,EAAA,YAAA2W,GAAA,MAAAI,EAAAvB,QAAAuB,EAAAvB,SAAA,WAAAoB,EAAA,MAAAC,+DAwCNyI,GAC/B,IAAKA,EACD,MAAM,IAAIj5B,MAAM,mCAGpB,IAAMklH,EAAc,IAAIvgE,IAAiB1rB,EAAK2C,KAE9C,OAAItyB,KAAKslH,+BAA+B1J,GAC7B,IAAIpzC,sBAAsB,CAC7BvhE,KAAM0oB,EAAK1oB,KACXqrB,IAAKspF,EAAYK,aAIlBtsF,qDAkBgB41F,GAEvB,IAAKA,IAAgBA,EAAYjzF,MAAQizF,EAAYt+G,KACjD,OAAOs+G,EAGX,IAAM3J,EAAc,IAAIvgE,IAAiBkqE,EAAYjzF,KAC/CkzF,EAAa5J,EAAYE,YAAY,SAEvC0J,GACAxlH,KAAKylH,2BAA2BD,GAGpC,IAAM50F,EAAagrF,EAAYE,YAAY,SAM3C,OAJIlrF,GACA5wB,KAAKylH,2BAA2B70F,GAG7B,IAAI43C,sBAAsB,CAC7BvhE,KAAMs+G,EAAYt+G,KAClBqrB,IAAKspF,EAAYK,0WCpQ7B,IAAMp7F,EAASF,oBAAUQ,GAezB,SAASukG,EAA0B3zF,EAAO4zF,EAAiB/I,GACvD/7F,EAAO5b,MACH,+BAAA5L,OAA+BujH,GAA/B,iCAAAvjH,OACmCssH,EAAgBz+G,KACvD,IAAMmqB,EAAcs0F,EAAgBz+G,GAC9B0+G,EAAkBD,EAAgBjrE,KAClCmrE,EAAmBF,EAAgBnqD,MAEnCsqD,EAAkB/zF,EAAMg0F,WAAW10F,GAErCy0F,IAAoBlJ,GAKpBkJ,IACAjlG,EAAO5b,MACH,GAAA5L,OAAGg4B,EAAH,0CAAAh4B,OACKysH,EADL,oCAKJ/zF,EAAMizF,WAAWc,GAEjBjlG,EAAO5b,MAAP,+BAAA5L,OAA4CysH,IAC5CjlG,EAAO5b,MAAM8sB,EAAMi0F,kBAEnBj0F,EAAMk0F,qBAAqBH,IAE/B/zF,EAAMkzF,iBAAiB,CACnB/9G,GAAI01G,EACJt/G,UAAW,QACX3N,MAAOk2H,IAEX9zF,EAAMkzF,iBAAiB,CACnB/9G,GAAI01G,EACJt/G,UAAW,OACX3N,MAAOi2H,IAEX7zF,EAAMmzF,aAAa,CACfzzF,UAAW,MACXX,MAAK,GAAAz3B,OAAKg4B,EAAL,KAAAh4B,OAAoBujH,MA9BzB/7F,EAAO5b,MAAP,GAAA5L,OAAgBujH,EAAhB,iCAAAvjH,OAAuDg4B,QA0C1C6mF,aAIjB,SAAAA,iGAAcz4E,CAAAz/B,KAAAk4G,GAKVl4G,KAAKkmH,sBAAwB,IAAI/jG,oEASjCniB,KAAKkmH,sBAAsB55C,6CASlB65C,GACTtlG,EAAO5b,MAAM,yBAA0BkhH,GACvCnmH,KAAKkmH,sBAAwBC,yCAUlB1I,GACX,IAAM2I,EAAiB,IAAI/qE,IAAiBoiE,GACtC7sF,EAAaw1F,EAAetK,YAAY,SAE9C,OAAKlrF,EAME5wB,KAAKmlH,gBAAgBv0F,GACtBw1F,EAAenK,WAAawB,GAN9B58F,EAAO5b,MAAP,sCAAA5L,OAAmDokH,IAE5CA,2CAcC7sF,GACZ,GAA6B,aAAzBA,EAAWX,UAGX,OAFApP,EAAO5b,MAAM,wDAEN,EAEX,GAAI2rB,EAAWy1F,eAAiB,EAG5B,OAFAxlG,EAAO5b,MAAM,sDAEN,EAEX4b,EAAO5b,MAAM,yBAA0BjF,KAAKkmH,uBAC5C,IAAMI,EAAoB11F,EAAW21F,uBAErC1lG,EAAO5b,MAAM,8BAA+BqhH,EACxC,qCAfoB,IAAAphG,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAgBxB,QAAA8kB,EAAAC,EAAmBghG,EAAnB72H,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAsC,KAA3BsD,EAA2BnD,EAAA11B,MAC5B+qD,EAAO9pB,EAAW41F,iBAAiBh+F,EAAM,QACzCgzC,EAAQ5qC,EAAW41F,iBAAiBh+F,EAAM,SAC5Ci+F,EAAuBzmH,KAAKkmH,sBAAsB32H,IAAIi5B,GAE1D,GAAIi+F,EACA5lG,EAAO5b,MACH,wDAAA5L,OACgBmvB,EADhB,MAAAnvB,OACyBotH,QAC1B,CACH5lG,EAAO5b,MAAP,oDAAA5L,OACwDmvB,IAIxD,IAAMk+F,EAA8B91F,EAAWm1F,WAAWv9F,GAEtDk+F,GACA7lG,EAAO5b,MACH,cAAA5L,OAAcqtH,EAAd,KACE,mDADF,GAAArtH,OAEKmvB,IACTi+F,EAAuBC,IAEvBD,EAAuB15F,IAAQ4E,eAC/B9Q,EAAO5b,MAAM,sBAAA5L,OAAsBotH,EAAtB,iBAAAptH,OACcmvB,KAE/B3H,EAAO5b,MAAM,oBAAA5L,OAAoBotH,EAApB,uBAAAptH,OACoBmvB,IACjCxoB,KAAKkmH,sBAAsBpiG,IAAI0E,EAAMi+F,GAEzCf,EACI90F,EACA,CACI1pB,GAAIshB,EACJgzC,QACA9gB,QAEJ+rE,IAvDgB,MAAAp2G,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GA4DxB,OAAO,mCAQFq4F,GACL,IAAM2I,EAAiB,IAAI/qE,IAAiBoiE,GACtC7sF,EAAaw1F,EAAetK,YAAY,SAE9C,IAAKlrF,EAGD,OAFA/P,EAAO5b,MAAP,sCAAA5L,OAAmDokH,IAE5CA,EAEX,GAA6B,aAAzB7sF,EAAWX,UAGX,OAFApP,EAAO5b,MAAM,uDAENw4G,EAEX,GAAI7sF,EAAWy1F,eAAiB,EAG5B,OAFAxlG,EAAO5b,MAAM,qDAENw4G,EAEX,IAAK7sF,EAAW+1F,wBAIZ,OAHA9lG,EAAO5b,MAAM,0DAGNw4G,EAEX,IAAMf,EAAY9rF,EAAWg2F,WAAW,OAIxCh2F,EAAWi2F,wBAAwB,OA7BtB,IAAA/gG,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAgCb,QAAA0lB,EAAAC,EAAuBw2F,EAAvBjtH,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAAkC,KAAvBwL,EAAuBrL,EAAAt2B,MACxBitH,EAAU1iE,YAAmB5oB,GAEnCV,EAAWo0F,WAAWpI,IAnCb,MAAAvsG,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAsCb,OAAOogG,EAAenK,+VCvO9B,IAAMp7F,EAASF,oBAAUQ,GASJ22F,aAOjB,SAAAA,EAAYnwC,gGAAWloC,CAAAz/B,KAAA83G,GACnB93G,KAAKy/G,sBACLz/G,KAAK2nE,UAAYA,uEASjB3nE,KAAK8kH,kBAAoB,KACzB9kH,KAAK8mH,gBAAiB,yCAUXz1F,GACX,GAA2B,iBAAhBA,EACP,MAAM,IAAI36B,MAAM,kCAEpBsJ,KAAK8kH,kBAAoBzzF,iDAQzB,OAAO0M,QAAQ/9B,KAAK8kH,2EAcQrH,GAC5B,IAAM2I,EAAiB,IAAI/qE,IAAiBoiE,GACtC7sF,EAAaw1F,EAAetK,YAAY,SAE9C,IAAKlrF,EAKD,OAJA/P,EAAO5b,MACH,GAAA5L,OAAG2G,KAAK2nE,UAAR,2CAAAtuE,OACSokH,IAENA,EAGX,GAA6B,aAAzB7sF,EAAWX,UAGPjwB,KAAK8kH,mBAAqB9kH,KAAK8mH,eAC/Bl2F,EAAWq0F,iBAAiB,CACxB/9G,GAAIlH,KAAK8kH,kBACTxnH,UAAW,QACX3N,MAAK,YAAA0J,OAAc2G,KAAK8kH,qBAG5BjkG,EAAO3b,KACH,GAAA7L,OAAG2G,KAAK2nE,UAAR,yCACM,eAEX,CACH,IAAMo/C,EAAiBn2F,EAAWo2F,sBAElC,IAAKD,EAKD,OAJAlmG,EAAO3b,KACH,GAAA7L,OAAG2G,KAAK2nE,UAAR,6BACM,2BAEH81C,EAEX,GAAIz9G,KAAK8kH,kBAAmB,CACxBjkG,EAAO3b,KACH,GAAA7L,OAAG2G,KAAK2nE,UAAR,0CAAAtuE,OACS0tH,EADT,oBAAA1tH,OAES2G,KAAK8kH,oBAClBl0F,EAAWq2F,YAAYF,EAAgB/mH,KAAK8kH,mBALpB,IAAA5/F,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAMxB,QAAA8kB,EAAAC,EAAoBsL,EAAWQ,WAA/B3hC,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA2C,KAAhCsM,EAAgCnM,EAAA11B,MACvC,GAAwB,QAApB6hC,EAAMC,UAAqB,CAC3B,IAAMJ,EAAc4oB,YAAiBzoB,GAC/BorF,EAAU1iE,YAAmB1oB,GAG/BH,IAAgB01F,IAChBv1F,EAAMV,MAAN,GAAAz3B,OACS2G,KAAK8kH,kBADd,KAAAzrH,OACmCujH,MAdvB,MAAAvsG,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,SAmBxBplB,KAAK8kH,kBAAoBiC,EACzBlmG,EAAO3b,KACH,GAAA7L,OAAG2G,KAAK2nE,UAAR,4CAAAtuE,OACS2G,KAAK8kH,oBAGtB9kH,KAAK8mH,gBAAiB,EAG1B,OAAOV,EAAenK,kWClI9B,IAAMp7F,EAASF,oBAAUQ,GAMJ+lG,aAIjB,SAAAA,iGAAcznF,CAAAz/B,KAAAknH,GACVlnH,KAAKmnH,UAAW,EAChBnnH,KAAKonH,cAAgB,GACrBpnH,KAAKqnH,gBAAkB,iEAQZpjG,GACNA,EAAO+Z,kBACRnd,EAAO1b,KAAK,mDAGhBnF,KAAKonH,cAAclkH,KAAK+gB,mCAYxB,GAAIjkB,KAAKmnH,SACL,OAAOnnH,KAAKsnH,UAAUrjG,OAK1B,GAFAjkB,KAAKg+E,cAAgBX,eAEhBr9E,KAAKonH,cAAcxxH,OAGpB,OAFAirB,EAAO1b,KAAK,8DAEL,KAGXnF,KAAKmnH,UAAW,EAEhBnnH,KAAKsnH,UAAYtnH,KAAKg+E,cAAcupC,+BAhBhC,IAAAriG,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAkBJ,QAAA8kB,EAAAC,EAAqBtlB,KAAKonH,cAA1B33H,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAyC,KAA9BjB,EAA8BoB,EAAA11B,MAC/B63H,EAAYxnH,KAAKg+E,cAAczD,wBAAwBt2D,GAE7DujG,EAAU77G,QAAQ3L,KAAKsnH,WAGvBtnH,KAAKqnH,gBAAgBnkH,KAAKskH,IAxB1B,MAAAn3G,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GA2BJ,OAAOplB,KAAKsnH,UAAUrjG,uCAStBjkB,KAAKmnH,UAAW,EAChBnnH,KAAKonH,cAAgB,GAFjB,IAAAthG,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAKJ,QAAA0lB,EAAAC,EAAwBlmB,KAAKqnH,gBAA7B53H,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA8C,CAAAG,EAAAt2B,MAChC8f,cANV,MAAAY,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GASJhmB,KAAKqnH,gBAAkB,GAEnBrnH,KAAKg+E,gBACLh+E,KAAKg+E,mBAAgBz9E,qGCxDjCpS,EAAOD,QAlCU,CAsBbu5H,gBAtBa,SAsBGC,EAAY9/F,EAAU+/F,GAGlC,MAAmB,iBAFPD,EAGD,KAHCA,EAMD9lH,QAAQ,SAAUgmB,GACxBhmB,QAAQ,iBAAiC,IAAhB+lH,mCC9BtCn5H,EAAAQ,EAAAyuB,EAAA,sBAAAmqG,IAAA,IAAAC,EAAAr5H,EAAA,GAAAs5H,EAAAt5H,EAAA,IAAAu5H,EAAAv5H,EAAA,IAAAw5H,EAAAx5H,EAAA,GAAAy5H,EAAAz5H,EAAA,IAmBe,SAASo5H,EAAgBM,EAAOxkE,EAAOv8C,GAClDnH,KAAKkoH,MAAQA,EACbloH,KAAK0jD,MAAQA,EACb1jD,KAAKmH,QAAUA,EACfnH,KAAKiiB,KAAO,IAAIwhC,IAAKt8C,EAASu8C,GAG9B1jD,KAAKuiC,iBAAiBgkB,oBAClB,SAAC4hE,EAASrjH,EAAKqgD,EAAazvB,GACxB1T,IAAWyK,oBACP8I,YAA4B4yF,EAASrjH,EAAK4wB,MAItD11B,KAAKuiC,iBAAiBgkB,0BAClB,SAAAzhD,GAMQA,GACAkd,IAAW6K,cACPu7F,IACA,CAAE3jH,QAASK,IAEnBkd,IAAWkJ,QACPpe,KAAK8L,UACD,CACI1R,GAAIkhH,IACJtjH,WAUxB8iH,EAAgBt3H,UAAUqb,QAAU,WAAuB,IAAdxE,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACnDnB,KAAKiiB,KAAKtW,QAAQxE,EAAQD,GAAIC,EAAQm/C,WAU1CshE,EAAgBt3H,UAAUgc,OAAS,SAASnF,GACxCnH,KAAKiiB,KAAK3V,OAAOnF,IAOrBygH,EAAgBt3H,UAAUmf,WAAa,WAAkB,IAAA44G,EAKrD,OAAOA,EAAAroH,KAAKiiB,MAAKxS,WAAVkkB,MAAA00F,EAAAlnH,YAQXymH,EAAgBt3H,UAAUg4H,OAAS,WAC/B,OAAOtoH,KAAKiiB,KAAKqmG,UAOrBV,EAAgBt3H,UAAUi4H,SAAW,SAAS7kE,GAC1C1jD,KAAK0jD,MAAQA,GAWjBkkE,EAAgBt3H,UAAUk4H,oBAAsB,SAASv5H,EAAMkY,GAC3D,OAAO,IAAIshH,IAAgB,CACvBx5H,OACAykC,OAAQvsB,EACRuN,WAAY1U,QASpB4nH,EAAgBt3H,UAAUiyC,iBAAmB,SAAS7V,EAAOtI,GACzDpkB,KAAKiiB,KAAKkoB,YAAYzd,EAAOtI,IAQjCwjG,EAAgBt3H,UAAUopD,oBAAsB,SAAShtB,EAAOtI,GAC5DpkB,KAAKiiB,KAAKuC,eAAekI,EAAOtI,IAMpCwjG,EAAgBt3H,UAAU2zH,mBAAqB,WAC3C,OAAOjkH,KAAKiiB,KAAK2hC,iBAUrBgkE,EAAgBt3H,UAAUu0D,WAAa,SAASy/B,GAAyB,IAAhBU,EAAgB7jF,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,IAAAA,UAAA,GACrE,OAAOnB,KAAKiiB,KAAKuiC,KAAKK,WAAWy/B,EAASU,IAU9C4iC,EAAgBt3H,UAAU40F,cAAgB,SAASZ,GAAyB,IAAhBU,EAAgB7jF,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,IAAAA,UAAA,GACxE,OAAOnB,KAAKiiB,KAAKuiC,KAAK0gC,cAAcZ,EAASU,iqCCnGjD,IAAMnkE,GAASF,oBAAUQ,GAiDV,SAASsnG,GAAgBthH,GACpC,IAAKA,EAAQlY,MAAQkY,EAAQlY,KAAK0T,gBAAkBwE,EAAQlY,KAAM,CAC9D,IAAM6tC,EACA,8GAIN,MADAjc,GAAO7b,MAAM83B,GACP,IAAIpmC,MAAMomC,GAEpB98B,KAAKoiB,aAAe,IAAIC,IACxBriB,KAAKmH,QAAUA,EACfnH,KAAK0oH,aAAe,IAAIC,IAA4B3oH,MACpDA,KAAKo0D,aAAe,GACpBp0D,KAAK4oH,MAAMzhH,GACXnH,KAAK6oH,mBAAqB,IAAIC,IAAmB9oH,MAMjDA,KAAK+oH,iBAAmB,KACxB/oH,KAAKgpH,oBAAsB,KAC3BhpH,KAAKipH,YAAc,KACnBjpH,KAAKkpH,sBAAuB,EAC5BlpH,KAAKmpH,aAAc,EACnBnpH,KAAKopH,iBAAkB,EACvBppH,KAAKqpH,iBAAkB,EACvBrpH,KAAKspH,iBAAmB,CACpB9uF,OAAO,EACPjB,OAAO,GAEXv5B,KAAKupH,gBAAiB,EAGtBvpH,KAAKwpH,kBAAoB,KAMzBxpH,KAAKypH,YAAa,EAGlBzpH,KAAK4sB,WAAa,GAOlB5sB,KAAK0pH,kBACC,IAAIC,IAAkB3pH,KAAMA,KAAKoiB,aAAcjb,GAMrDnH,KAAK4pH,oBACC,IAAIC,IAAoB7pH,KAAMmH,EAAQusB,OAAOo2F,cAAgB,IAMnE9pH,KAAK+pH,4BAA8B,IAAIC,IAA2BhqH,MAKlEA,KAAKiqH,4BAA6B,EAKlCjqH,KAAKkqH,sBAAwB,IAAIC,IAAsBnqH,MAUvDA,KAAKoqH,qBAAuB,KAE5B,IAAMC,EACAvxG,SAAS3R,EAAQusB,OAAO+xB,KAAOt+C,EAAQusB,OAAO+xB,IAAI6kE,eAAgB,IAOxEtqH,KAAKsqH,eAAiBpwG,MAAMmwG,GAAS,EAAIA,EACzCxpG,GAAO3b,KAAP,mBAAA7L,OAA+B2G,KAAKsqH,iBAQpCtqH,KAAKuqH,4BAA6B,EAQlCvqH,KAAKylD,KAAM,EAMXzlD,KAAKwqH,iBAAmB,KAExBxqH,KAAKyqH,kBAAoB,IAAIC,IAAW1qH,KAAK2pD,MAC7C3pD,KAAK2qH,iBAAmB,IAAIC,IAAiB5qH,KAAK2pD,MAClD3pD,KAAK6qH,mCAAoC,EAI7CpC,GAAgBn4H,UAAUgF,YAAcmzH,GAcxCA,GAAgBqC,gBAAkB,SAASnnH,EAAKonH,GAC5C,IAAInjE,EAEJ,GAAImjE,EAEAnjE,EAAch2B,IAAWgxB,gBAAgB,GAAGjgD,kBACzC,CAIHilD,EAAc9sD,UAAQ4I,eAAeC,GAAK4R,OAAO,EAAG,GAC/C5S,cAIM,eAEHyP,KAAKw1C,KACTA,EAAch2B,IAAWgxB,gBAAgB,GAAGjgD,eAIpD,OAAOilD,GAQX6gE,GAAgBn4H,UAAUs4H,MAAQ,WAAuB,IAAAjhH,EAAA3H,KAAdmH,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAG7CgG,EAAQuN,aACR1U,KAAK0U,WAAavN,EAAQuN,WAC1B1U,KAAKiiB,KAAOjiB,KAAK0U,WAAWuN,KAG5BjiB,KAAK0oH,aAAasC,sBAR+B,IAW7Ct3F,EAAW1zB,KAAKmH,QAAhBusB,OA2FR,GAzFA1zB,KAAKirH,gBAAkBv3F,EAAOw3F,aAAex3F,EAAOw3F,aAAeC,IAAShpE,kBAC5EniD,KAAK2pD,KAAO3pD,KAAKiiB,KAAK6lC,WAClB9nD,KAAKmH,QAAQlY,KADL0mC,GAAA,GAEDjC,EAFC,CAGJ03F,QAASprH,KAAKirH,kBAElBxC,GAAgBqC,iBAIpB9qH,KAAKqrH,4BACCrrH,KAAKqrH,4BAA4Bn7H,KAAK8P,MAC5CA,KAAK2pD,KAAKxf,YACNob,0BAAmCvlD,KAAKqrH,6BAE5CrrH,KAAKsrH,yBAA2BtrH,KAAKsrH,yBAAyBp7H,KAAK8P,MACnEA,KAAK2pD,KAAKxf,YACNob,uBAAgCvlD,KAAKsrH,0BAEzCtrH,KAAKurH,4BACCvrH,KAAKurH,4BAA4Br7H,KAAK8P,MAC5CA,KAAK2pD,KAAKxf,YACNob,0BAAmCvlD,KAAKurH,6BAE5CvrH,KAAKwrH,kBAAoBxrH,KAAKwrH,kBAAkBt7H,KAAK8P,MACrDA,KAAK2pD,KAAKxf,YAAYob,iCAClBvlD,KAAKwrH,mBAETxrH,KAAKyrH,kCAAoCzrH,KAAKyrH,kCAAkCv7H,KAAK8P,MACrFA,KAAK2pD,KAAKxf,YAAYob,kBAA2BvlD,KAAKyrH,mCAEtDzrH,KAAK0rH,WAAa,IAAIC,IAAWj4F,EAAOg4F,YAAc,IAEtD1rH,KAAK4rH,QAAU,IAAIC,IACf7rH,KACA0zB,EACA,SAACjvB,EAAS0O,GACN,IACIxL,EAAKsmC,YACDxpC,EAAS0O,GAAI,GACnB,MAAOnO,GACL6b,GAAO1b,KAAK,+CAAgDH,GAASA,EAAMF,QAIlF9E,KAAKkxD,MACNlxD,KAAKkxD,IAAM,IAAI/nB,IAAInpC,KAAMmH,GACzBnH,KAAK0oH,aAAaoD,qBAGtB9rH,KAAKy1D,4BACC,IAAIxE,IACFjxD,KAAKkxD,IACLlxD,KACA,CAKIsxD,eAAgB59B,EAAOq4F,8BACvB16D,kBAAmB39B,EAAOs4F,mCAEtChsH,KAAKy1D,4BAA4B3qD,OAE5B9K,KAAKqnB,aACNrnB,KAAKqnB,WAAa,IAAIrF,IAAWhiB,KAAKiiB,KAAM,CACxCL,UAAW5hB,KAAKirH,gBAChBtpG,SAAU+R,EAAOu4F,sBAAwBv4F,EAAOu4F,sBAAwBjsH,KAAKuzD,WAC7ExwC,yBAA0B/iB,KAAK0U,WAAWvN,QAAQkgD,MAAMltD,OACxD4nB,OAAQ2R,EAAO3R,QAAP,GAAA1oB,OAAoB2G,KAAK0U,WAAWvN,QAAQkgD,MAAMltD,OAAlD,KAAAd,OAA4D2G,KAAKmH,QAAQlY,MACjF4zB,gBAAiB6Q,EAAOw4F,yBACxBzqG,YAAaiS,EAAOjS,YACpBC,gBAAiBgS,EAAOhS,gBACxBc,iCAAkCkR,EAAOlR,iCACzCoF,SAAU5nB,KAAKmH,QAAQlY,KACvB4yB,gBAAiB6R,EAAO7R,gBACxBC,mBAAoB4R,EAAO5R,qBAE/BE,IAAWuB,UAAU6oB,uBAAuB,CACxC+/E,eAAkBnsH,KAAKirH,mBAI/BjrH,KAAK0oH,aAAa0D,yBAIlBpsH,KAAK0oH,aAAa2D,2BAEd34F,EAAO44F,qBAIP,GAAI54F,EAAO08D,mBAAoB,CAC3BvvE,GAAO3b,KAAK,8DAEPlF,KAAKusH,iBACNvsH,KAAKusH,eAAiB,IAAIp8B,IAAiBnwF,KAAM0zB,EAAO08D,qBAG5D,IAAMo8B,EAAwB,IAAIC,IAElCD,EAAsBnoG,GAAGqoG,uBAAsC,kBAC3D/kH,EAAKya,aAAa6C,KAAK2mB,sBAE3B5rC,KAAKusH,eAAeI,uBAAuBH,QAI3C3rG,GAAO3b,KAAK,4EACZlF,KAAK4sH,yBAA2B,IAAIC,IAChC7sH,KAAM,kBAAM2H,EAAKya,aAAa6C,KAAK2mB,sBAI/C,GAAIlY,EAAOo5F,wBACP,GAAIp5F,EAAO08D,mBAAoB,CACtBpwF,KAAKusH,iBACNvsH,KAAKusH,eAAiB,IAAIp8B,IAAiBnwF,KAAM0zB,EAAO08D,qBAG5D,IAAM28B,EAAoB,IAAIC,IAE9BD,EAAkB1oG,GAAGqoG,mBAAkC,kBACnD/kH,EAAKya,aAAa6C,KAAK2mB,eAE3B5rC,KAAKusH,eAAeI,uBAAuBI,QAE3ClsG,GAAO1b,KAAK,0FAKhBuuB,EAAOu5F,yBACPjtH,KAAKktH,wBAA0B,IAAIC,IAAuBntH,MAC1DA,KAAKktH,wBAAwB7oG,GAAGqoG,iBAAgC,WAC5D/kH,EAAKya,aAAa6C,KAAK2mB,oBAE3B5rC,KAAKktH,wBAAwB7oG,GAAGqoG,2BAA0C,SAAAU,GACtEzlH,EAAKya,aAAa6C,KAAK2mB,2BAAgDwhF,MAK3E,iBAAkB15F,GAClB1zB,KAAKqtH,SAAS35F,EAAO45F,cAOzBttH,KAAKutH,aAAe,IAAIC,IAAqBxtH,MAG7CA,KAAKytH,4BAA8B,IAAIC,IAA4B1tH,MAE/D0zB,GAAUA,EAAOw1B,gBAAkBx1B,EAAOw1B,eAAeykE,YACzD3tH,KAAK4tH,4BACD,SAAUl6F,EAAOw1B,eAAeykE,aAQ5ClF,GAAgBn4H,UAAU6S,KAAO,SAASmjD,GAAU,IAAA99C,EAAAxI,KAC5CA,KAAK2pD,MACL3pD,KAAK2pD,KAAKxmD,KAAKmjD,GAAUrmB,KAAK,kBAAMz3B,EAAKqlH,wBAYjDpF,GAAgBn4H,UAAUw9H,2BAA6B,SAAS3mH,GAC5D,OAAO2mH,IAA2Bj/H,KAAKmR,KAAhC21B,GAAA,GACAxuB,EADA,CAEHsgD,iBAAkBghE,GAAgBqC,oBAO1CrC,GAAgBn4H,UAAUy9H,SAAW,WACjC,OAAO/tH,KAAK2pD,MAAQ3pD,KAAK2pD,KAAKqkE,QAOlCvF,GAAgBn4H,UAAU29H,aAAe,WACrC,OAAOlwF,QAAQ/9B,KAAKmH,QAAQusB,OAAO+xB,KAAOzlD,KAAKmH,QAAQusB,OAAO+xB,IAAIspC,eAGxB,IAA5B/uF,KAAKmH,QAAQusB,OAAO+xB,KAQtCgjE,GAAgBn4H,UAAU49H,qBAAuB,WAC7C,OAAOnwF,QAAQ/9B,KAAKmH,QAAQusB,OAAO2tC,SAC5BrhE,KAAKmH,QAAQusB,OAAO2tC,QAAQ8sD,cAOvC1F,GAAgBn4H,UAAU89H,MAAQ,WAAW,IAAArgH,EAAA/N,KA6CzC,GA5CIA,KAAKy1D,8BACLz1D,KAAKy1D,4BAA4B1wC,UACjC/kB,KAAKy1D,4BAA8B,MAEnCz1D,KAAK4pH,sBACL5pH,KAAK4pH,oBAAoB7kG,UACzB/kB,KAAK4pH,oBAAsB,MAG3B5pH,KAAK+pH,8BACL/pH,KAAK+pH,4BAA4BhlG,UACjC/kB,KAAK+pH,4BAA8B,MAGnC/pH,KAAK0rH,aACL1rH,KAAK0rH,WAAWllG,OAChBxmB,KAAK0rH,WAAa,MAGlB1rH,KAAK4rH,UACL5rH,KAAK4rH,QAAQplG,OACbxmB,KAAK4rH,QAAU,MAGnB5rH,KAAK4sC,iBAAiBt9B,QAAQ,SAAAo1B,GAAK,OAAI32B,EAAKsgH,oBAAoB3pF,KAEhE1kC,KAAKkxD,IAAIo9D,qBACLtuH,KAAKqnB,YACLrnB,KAAKqnB,WAAWtC,UAGpB/kB,KAAKuuH,mBAAqBvuH,KAAKuuH,kBAAkBC,SAG7CxuH,KAAK+oH,mBACL/oH,KAAK+oH,iBAAiB9rG,QACtBjd,KAAK+oH,iBAAmB,MAExB/oH,KAAKwqH,mBACLxqH,KAAKwqH,iBAAiBvtG,QACtBjd,KAAKwqH,iBAAmB,MAIxBxqH,KAAK2pD,KAAM,CACX,IAAMA,EAAO3pD,KAAK2pD,KAuBlB,OApBAA,EAAKnlC,eACD+gC,0BACAvlD,KAAKqrH,6BACT1hE,EAAKnlC,eACD+gC,uBACAvlD,KAAKsrH,0BACT3hE,EAAKnlC,eACD+gC,0BACAvlD,KAAKurH,6BAET5hE,EAAKnlC,eACD+gC,iCACAvlD,KAAKwrH,mBAET7hE,EAAKnlC,eAAe+gC,kBAA2BvlD,KAAKyrH,mCAEpDzrH,KAAK0oH,aAAa+F,sBAElBzuH,KAAK2pD,KAAO,KAELA,EAAKykE,QACPnuF,KAAK,WACElyB,EAAKmjD,KACLnjD,EAAKmjD,IAAIsgC,YAGhBhuD,MAAM,SAAAx+B,GAOH,MAHA+I,EAAKsmD,kBAAkB/kD,QACnB,SAAAmkD,GAAW,OAAI1lD,EAAK2gH,aAAaj7D,EAAY60D,YAE3CtjH,IAKlB,OAAOo+B,QAAQE,OACX,IAAI5sC,MAAM,6CAMlB+xH,GAAgBn4H,UAAU8vD,QAAU,WAChC,OAAOpgD,KAAKmH,QAAQlY,MAMxBw5H,GAAgBn4H,UAAUq+H,cAAgB,WACtC,OAAO3uH,KAAK0U,YAMhB+zG,GAAgBn4H,UAAUs+H,cAAgB,WACtC,OAAO5uH,KAAKmpH,aAMhBV,GAAgBn4H,UAAUu+H,WAAa,WACnC,OAAO9wF,QAAQ/9B,KAAK8uH,eAMxBrG,GAAgBn4H,UAAUy+H,aAAe,WACrC,OAAO/uH,KAAK8uH,cAMhBrG,GAAgBn4H,UAAU0+H,sBAAwB,WAC9C,OAAOhvH,KAAK2pD,MAAQ3pD,KAAK2pD,KAAKslE,UAAUD,yBAS5CvG,GAAgBn4H,UAAU4+H,mBAAqB,SAASC,GAAa,IAAA5gH,EAAAvO,KACjE,OAAO,IAAIojC,QAAQ,SAACC,EAASC,GACpB/0B,EAAKygH,wBAKNG,EACA5gH,EAAKo7C,KAAKslE,UAAUG,iBAAiB/rF,EAASC,GAE9C/0B,EAAKo7C,KAAKslE,UAAUI,YAAYhsF,EAASC,GAPzCA,OAiBZmlF,GAAgBn4H,UAAUs8C,eAAiB,SAAShW,GAChD,IAAIkW,EAAS,GAMb,OAJI9sC,KAAKkxD,MACLpkB,EAAS9sC,KAAKkxD,IAAItkB,eAAehW,IAG9BkW,GAOX27E,GAAgBn4H,UAAUg/H,mBAAqB,WAC3C,OAAOtvH,KAAKkxD,IAAMlxD,KAAKkxD,IAAIo+D,qBAAuB,MAOtD7G,GAAgBn4H,UAAUi/H,mBAAqB,WAC3C,OAAOvvH,KAAKkxD,IAAMlxD,KAAKkxD,IAAIq+D,qBAAuB,MAYtD9G,GAAgBn4H,UAAU+zB,GAAK,SAASmrG,EAASjrH,GACzCvE,KAAKoiB,cACLpiB,KAAKoiB,aAAaiC,GAAGmrG,EAASjrH,IAYtCkkH,GAAgBn4H,UAAUqpD,IAAM,SAAS61E,EAASjrH,GAC1CvE,KAAKoiB,cACLpiB,KAAKoiB,aAAaoC,eAAegrG,EAASjrH,IAKlDkkH,GAAgBn4H,UAAUiyC,iBAAmBkmF,GAAgBn4H,UAAU+zB,GACvEokG,GAAgBn4H,UAAUopD,oBAAsB+uE,GAAgBn4H,UAAUqpD,IAQ1E8uE,GAAgBn4H,UAAUm/H,mBAAqB,SAASC,EAASnrH,GACzDvE,KAAK2pD,MACL3pD,KAAK2pD,KAAKgmE,oBAAoBD,EAASnrH,IAS/CkkH,GAAgBn4H,UAAUs/H,sBAAwB,SAASF,EAASnrH,GAC5DvE,KAAK2pD,MACL3pD,KAAK2pD,KAAKkmE,uBAAuBH,EAASnrH,IAUlDkkH,GAAgBn4H,UAAUw/H,gBAAkB,SACpCrrH,GAA+B,IAAtBsrH,EAAsB5uH,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAR,OAC3B,GAAInB,KAAK2pD,KAAM,CACX,IAAMy+B,GAAepoF,KAAK2pD,KAAKqmE,gBAAgB,SAAW,IAAIrgI,MAE9DqQ,KAAK2pD,KAAK1b,YAAYxpC,EAASsrH,EAAa3nC,KAWpDqgC,GAAgBn4H,UAAU2/H,uBAAyB,SAC3C/oH,EAAIzC,GAA+B,IAAtBsrH,EAAsB5uH,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAR,OAC3BnB,KAAK2pD,MACL3pD,KAAK2pD,KAAKumE,mBAAmBhpH,EAAIzC,EAASsrH,IASlDtH,GAAgBn4H,UAAU6/H,YAAc,SAASlhI,EAAMs2B,GAC/CvlB,KAAK2pD,MACL3pD,KAAK2pD,KAAK67B,cAAcv2F,EAAMs2B,GAC9BvlB,KAAK2pD,KAAK/7C,gBAEViT,GAAO1b,KAAK,iDAUpBsjH,GAAgBn4H,UAAU8/H,gBAAkB,SAASnhI,EAAMs2B,GACvDvlB,KAAKmwH,YAAYlhI,EAAMs2B,GACvBvlB,KAAKqwH,cAAcphI,IAOvBw5H,GAAgBn4H,UAAU+/H,cAAgB,SAASphI,GAC3C+Q,KAAK2pD,MACL3pD,KAAK2pD,KAAK2mE,mBAAmBrhI,IAQrCw5H,GAAgBn4H,UAAUi4F,eAAiB,SAASt5F,GAC5C+Q,KAAK2pD,OAEL3pD,KAAK2pD,KAAK2mE,mBAAmB,QAE7BtwH,KAAK2pD,KAAK67B,cAAc,OAAQ,CAC5BlpF,WAAY,CAAE2J,MAAO,mCACrBtW,MAAOV,IAEX+Q,KAAK2pD,KAAK/7C,iBAQlB66G,GAAgBn4H,UAAUigI,WAAa,SAASC,GACxCxwH,KAAK2pD,MAAQ3pD,KAAKywH,eAClBzwH,KAAK2pD,KAAK4mE,WAAWC,IAQ7B/H,GAAgBn4H,UAAUogI,eAAiB,WACvC,QAAyBnwH,IAArBP,KAAK2wH,YAA2B,CAChC3wH,KAAK2wH,YAAc,IAAIC,IAGvB,IAAMC,EAAmB7wH,KAAK4sC,eAAejI,KAJbzf,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAMhC,QAAA8kB,EAAAC,EAAyBurG,EAAzBphI,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA2C,KAAhC2nB,EAAgCxnB,EAAA11B,MACvCqQ,KAAK2wH,YAAYrsF,SAASuI,IAPE,MAAAx8B,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAWhC,IAAM8oB,EAAoBluC,KAAKkxD,IAAIhkB,gBAAgBvI,KAXnB7e,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAahC,QAAA0lB,EAAAC,EAA0BgoB,EAA1Bz+C,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA6C,KAAlCguC,EAAkC7tC,EAAAt2B,MACzCqQ,KAAK2wH,YAAYrsF,SAASwvB,IAdE,MAAAzjD,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,IAkBpC,OAAOhmB,KAAK2wH,aAQhBlI,GAAgBn4H,UAAUwgI,uBAAyB,WAC/C,OAAO9wH,KAAK2pD,KAAKonE,qBAUrBtI,GAAgBn4H,UAAUg0C,SAAW,SAASI,GAC1C,GAAIA,EAAM2kC,eAAgB,CAEtB,IAAM2nD,EAAkBhxH,KAAKkxD,IAAIq+D,qBAEjC,GAAIyB,EAGA,OAAItsF,IAAUssF,EACH5tF,QAAQC,QAAQqB,GAGpBtB,QAAQE,OAAO,IAAI5sC,MACtB,oDAKZ,OAAOsJ,KAAKupE,aAAa,KAAM7kC,IAQnC+jF,GAAgBn4H,UAAU2gI,2BAA6B,SAC/CpjF,EACAjoB,GACJ,IAAMsrG,EAAYlxH,KAAKmxH,0BAOlBvrG,GAAOsrG,IAActrG,GACtB5lB,KAAKoiB,aAAa6C,KACd2mB,4BACA5rC,KAAKuzD,WAAY1lB,IAQ7B46E,GAAgBn4H,UAAU8gI,qBAAuB,SAAS1sF,GAStD,IAAI2sF,EAEJ,GATIrxH,KAAKupH,gBAAkB7kF,EAAMqJ,iBAAmBrJ,EAAMmxB,YACtD71D,KAAKupH,gBAAiB,EAGtBvpH,KAAK2pD,KAAK2nE,gBAAgBtxH,KAAK2pD,KAAK4nE,WAAW,IAK/CvxH,KAAKwpH,kBAAmB,CACxB,IAAMgI,EAAU12H,UAAQoJ,mBAAmBlE,KAAKwpH,mBAEhD6H,EAAmBrxH,KAAKo0D,aAAao9D,GAGzCxxH,KAAKoiB,aAAa6C,KAAK2mB,qBAA0ClH,EAAO2sF,IAO5E5I,GAAgBn4H,UAAU+9H,oBAAsB,SAAS3pF,GACrDA,EAAM+sF,eAAe,MACrBzxH,KAAKkxD,IAAIwgE,iBAAiBhtF,GAC1BA,EAAMgV,oBAAoBsa,qBACtBtvB,EAAMitF,aACVjtF,EAAMgV,oBAAoBsa,4BACtBtvB,EAAMktF,mBAKNltF,EAAM2kC,gBAAkB3kC,EAAME,YAAcC,IAAUC,SACtD9kC,KAAKqnB,WAAWkB,wBAAuB,GAG3CvoB,KAAKoiB,aAAa6C,KAAK2mB,gBAAqClH,IAShE+jF,GAAgBn4H,UAAUm+F,YAAc,SAAS/pD,GAC7C,OAAO1kC,KAAKupE,aAAa7kC,EAAO,OAYpC+jF,GAAgBn4H,UAAUi5E,aAAe,SAASN,EAAUC,GAAU,IAAAv6D,EAAA3O,KAElE,OAAIipE,GACIA,EAASuT,SACFp5C,QAAQE,OACX,IAAInZ,IAAgBolB,sBAG5B25B,GACIA,EAASsT,SACFp5C,QAAQE,OACX,IAAInZ,IAAgBolB,sBAKzBvvC,KAAK6xH,gBAAgB5oD,EAAUC,GACjCjpC,KAAK,WAUF,OATIgpC,GACAt6D,EAAK0/G,oBAAoBplD,GAEzBC,GAGAv6D,EAAKmjH,eAAe5oD,GAGjB9lC,QAAQC,WAChB,SAAAr+B,GAAK,OAAIo+B,QAAQE,OAAO,IAAI5sC,MAAMsO,OAe7CyjH,GAAgBn4H,UAAUuhI,gBAAkB,SAAS5oD,EAAUC,GAC3D,IAAM6oD,EAAuB,GAgB7B,OAdI/xH,KAAK+oH,iBACLgJ,EAAqB7uH,KACjBlD,KAAK+oH,iBAAiBx/C,aAAaN,EAAUC,IAEjDroD,GAAO3b,KAAK,0CAGZlF,KAAKwqH,iBACLuH,EAAqB7uH,KACjBlD,KAAKwqH,iBAAiBjhD,aAAaN,EAAUC,IAEjDroD,GAAO3b,KAAK,0CAGTk+B,QAAQmK,IAAIwkF,IAOvBtJ,GAAgBn4H,UAAUwhI,eAAiB,SAAS5oD,GAChD,GAAIA,EAASn7B,gBAAmBm7B,EAASG,gBAC9BH,EAAStkC,YAAcC,IAAUC,QAAU,CAElD,IACMlG,EADUuK,IAAIsB,oCAENlZ,KACN,SAAAviC,GAAC,OACGA,EAAEwvC,OAAF,GAAAnlC,OAAc6vE,EAAS4d,WAAWtoD,KAAlC,UACOxvC,EAAEswC,QAAU4pC,EAAS4d,WAAWxnD,QAE/CV,GACA5c,IAAWqH,0BACP8f,IAAIuB,4BAA4B9L,IAGxCsqC,EAASG,iBACTrpE,KAAKqwH,cAAc,aACnBrwH,KAAKmwH,YAAY,YAAa,CAC1BxgI,MAAOu5E,EAAStkC,UAChBtoC,WAAY,CACR2J,MAAO,qCAInBjG,KAAKkxD,IAAI8gE,cAAc9oD,GAGnBA,EAASn7B,eACT/tC,KAAK2pD,KAAKsoE,aAAa/oD,EAASrT,WAEhC71D,KAAK2pD,KAAKuoE,aAAahpD,EAASrT,WAGpCqT,EAASyoD,YAAc3xH,KAAKoxH,qBAAqBlhI,KAAK8P,KAAMkpE,GAC5DA,EAAS0oD,kBAAoB5xH,KAAKixH,2BAA2B/gI,KAAK8P,MAClEkpE,EAAS3mC,iBACLyxB,qBACAkV,EAASyoD,aACbzoD,EAAS3mC,iBACLyxB,4BACAkV,EAAS0oD,mBAEb1oD,EAASuoD,eAAezxH,MAExBA,KAAKoiB,aAAa6C,KAAK2mB,cAAmCs9B,IAY9Du/C,GAAgBn4H,UAAUm/F,uBAAyB,SAAS/qD,GACxD,IAAMytF,EAAsB,GAkB5B,OAhBInyH,KAAK+oH,iBACLoJ,EAAoBjvH,KAAKlD,KAAK+oH,iBAAiBqJ,iBAAiB1tF,IAEhE7jB,GAAO3b,KACH,uEAIJlF,KAAKwqH,iBACL2H,EAAoBjvH,KAAKlD,KAAKwqH,iBAAiB4H,iBAAiB1tF,IAEhE7jB,GAAO3b,KACH,uEAIDk+B,QAAQmK,IAAI4kF,IAUvB1J,GAAgBn4H,UAAUq/F,wBAA0B,SAASjrD,GACzD,IAAM2tF,EAAuB,GAiB7B,OAfIryH,KAAK+oH,iBACLsJ,EAAqBnvH,KACjBlD,KAAK+oH,iBAAiBuJ,kBAAkB5tF,IAE5C7jB,GAAO3b,KACH,+DAEJlF,KAAKwqH,iBACL6H,EAAqBnvH,KACjBlD,KAAKwqH,iBAAiB8H,kBAAkB5tF,IAE5C7jB,GAAO3b,KACH,+DAGDk+B,QAAQmK,IAAI8kF,IAOvB5J,GAAgBn4H,UAAUiiI,QAAU,WAChC,OAAOvyH,KAAK2pD,KAAKgP,MAUrB8vD,GAAgBn4H,UAAUkiI,SAAW,WACjC,OAAKxyH,KAAK0U,WAIH5Z,UAAQ+I,iBAAiB7D,KAAK0U,WAAW4zG,YACxCtoH,KAAKmH,QAAQusB,OAAO++F,aAJjB,MAYfhK,GAAgBn4H,UAAUmgI,YAAc,WACpC,OAAOzwH,KAAK2pD,KAAO3pD,KAAK2pD,KAAK8mE,cAAgB,MAQjDhI,GAAgBn4H,UAAUoiI,KAAO,SAASpsE,GAAU,IAAA71C,EAAAzQ,KAChD,OAAKA,KAAKywH,cAIH,IAAIrtF,QAAQ,SAACC,EAASC,GACzB7yB,EAAKk5C,KAAKgpE,SACNrsE,GAAY,GACZ,kBAAMjjB,KACN,SAAAhzB,GAAG,OAAIizB,EAAOjzB,IACd,kBAAMizB,EAAOsvF,8BARVxvF,QAAQE,OAAO,IAAI5sC,MAAM,4BAgBxC+xH,GAAgBn4H,UAAUuiI,OAAS,WAC/B,OAAO7yH,KAAK0yH,QAWhBjK,GAAgBn4H,UAAUwiI,kBAAoB,SAAS38F,GACnDn2B,KAAK+yH,mBAAmB,CAAE58F,KAe9BsyF,GAAgBn4H,UAAUyiI,mBAAqB,SAAS5/D,GACpD,IAAK19D,MAAMC,QAAQy9D,GACf,MAAM,IAAIz8D,MAAM,sDAGpBsJ,KAAKkxD,IAAI8hE,gBAAgB7/D,IAU7Bs1D,GAAgBn4H,UAAU2iI,eAAiB,SAAS98F,GAChDn2B,KAAKkxD,IAAIgiE,YAAY/8F,IAOzBsyF,GAAgBn4H,UAAUskE,SAAW,WACjC,OAAO50D,KAAKkxD,IAAI0D,YAWpB6zD,GAAgBn4H,UAAU+8H,SAAW,SAASzzB,GAC1C,IAAK7/E,OAAOo5G,UAAUv5B,KAAW7/E,OAAOjB,SAAS8gF,EAAO,IACpD,MAAM,IAAIljG,MAAJ,4BAAA2C,OAAsCugG,IAEhD,IAAMzpG,EAAI4pB,OAAO6/E,GAEjB,GAAIzpG,GAAK,EACL,MAAM,IAAIijI,WAAW,mCAMzB,GAJApzH,KAAKkxD,IAAIm8D,SAASl9H,GAId6P,KAAKwqH,iBAAkB,CACvB,IAAM6I,EAAsB,IAANljI,EAEtB6P,KAAKwqH,iBACA3iC,wBAAuB,EAAMwrC,GAC7B7vF,MAAM,SAAAx+B,GACH6b,GAAO7b,MAAP,2CAAA3L,OAC+Cg6H,EAD/C,KAEIruH,OAepByjH,GAAgBn4H,UAAUq7C,UAAY,SAASxV,GAC3C,OAAOn2B,KAAKkxD,IAAIvlB,UAAUxV,IAO9BsyF,GAAgBn4H,UAAU+jE,gBAAkB,WACxC,OAAOjlE,OAAOmW,KAAKvF,KAAKo0D,cAAc5uD,IAAI,SAASvV,GAC/C,OAAO+P,KAAKo0D,aAAankE,IAC1B+P,OASPyoH,GAAgBn4H,UAAUgjI,oBACpB,WAA8B,IAArBC,EAAqBpyH,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,IAAAA,UAAA,GAExBizD,EAAep0D,KAAKq0D,kBAOxB,OALKk/D,IACDn/D,EAAeA,EAAapjC,OAAO,SAAAxgC,GAAC,OAAKA,EAAEgiI,cAIxCp+D,EAAax+D,OAAS,GAQrC6yH,GAAgBn4H,UAAUgkE,mBAAqB,SAASptD,GACpD,OAAOlH,KAAKo0D,aAAaltD,IAO7BuhH,GAAgBn4H,UAAUkjI,gBAAkB,SAAStsH,GACjD,IAAMusD,EAAczzD,KAAKs0D,mBAAmBptD,GAEvCusD,GAGLzzD,KAAK2pD,KAAK8pE,KAAKhgE,EAAY60D,WAQ/BG,GAAgBn4H,UAAUojI,qBAAuB,WACzC1zH,KAAK2zH,0BACG3zH,KAAK+oH,kBAAoB/oH,KAAKszH,sBAAwB,KAC9DhlI,OAAOqf,aAAa3N,KAAK2zH,yBACzB3zH,KAAK2zH,wBAA0B,OASvClL,GAAgBn4H,UAAUu9H,mBAAqB,WAAW,IAAAv6G,EAAAtT,MAEjDA,KAAK+oH,kBACC/oH,KAAKszH,uBAAyB,IAC7BtzH,KAAK2zH,0BACb3zH,KAAK2zH,wBAA0BrlI,OAAOmc,WAAW,WAC7C6I,EAAKqgH,wBAA0B,KAC/B3xG,IAAW6K,cAAc6J,YACrBrC,IACA,CACIoxB,KAAK,EACL91D,MA3zCM,eAq0C1B84H,GAAgBn4H,UAAUghI,gBAAkB,SAASpqH,GACjD,IAAMusD,EAAczzD,KAAKs0D,mBAAmBptD,GAEvCusD,GAGLzzD,KAAK2pD,KAAK2nE,gBAAgB79D,EAAY60D,UAAU,IAoBpDG,GAAgBn4H,UAAUsjI,eAAiB,SACnCjwH,EAAKkwH,EAAMl7D,EAAM65D,EAAUsB,EAAS7jH,EAAQi2C,EAAU6tE,GAC1D,IAAM7sH,EAAKpM,UAAQoJ,mBAAmBP,GAEtC,GAAW,UAAPuD,GAAkBlH,KAAKuzD,aAAersD,EAA1C,CAIA,IAAMusD,EACA,IAAIugE,IAAiBrwH,EAAK3D,KAAM6zH,EAAMrB,EAAUsB,EAAS7jH,EAAQi2C,GAEvEuN,EAAYwgE,MAAQt7D,EACpBlF,EAAYygE,SAAWH,EACvB/zH,KAAKo0D,aAAaltD,GAAMusD,EACxBzzD,KAAKoiB,aAAa6C,KACd2mB,cACA1kC,EACAusD,GAEJzzD,KAAKm0H,gBAAgB1gE,GAErBzzD,KAAKo0H,uBACLp0H,KAAK6tH,uBAWTpF,GAAgBn4H,UAAU6jI,gBAAkB,SAAS1gE,GAAa,IAAAp/C,EAAArU,KAC9DyzD,EAAY4gE,cACPp0F,KAAK,SAAAn3B,GACF2qD,EAAY6gE,cAAgBxrH,EAAS6d,IAAI,0BACzCtS,EAAKkgH,oBAEDzrH,EAAS6d,IAAI,qCACb8sC,EAAY+gE,YAAY,mBAAmB,KAGlDhxF,MAAM,kBAAM,KASrBilF,GAAgBn4H,UAAUmkI,wBAA0B,SAAS9wH,EAAKowH,GAI9D,IACMW,EADQ10H,KAAKq0D,kBACU9iC,KAAK,SAAA/gC,GAAC,OAAIA,EAAE83H,WAAa3kH,IAEtD,GAAI+wH,EAAgB,CAChBA,EAAeR,SAAWH,EAC1B,IAAM7sH,EAAKpM,UAAQoJ,mBAAmBP,GAEtC3D,KAAKoiB,aAAa6C,KACd2mB,mBACA1kC,EACA6sH,GAOHW,EAAeR,UAChBl0H,KAAKo0H,wBAIb3L,GAAgBn4H,UAAUo+H,aAAe,SAAS/qH,GAAK,IAAAyhE,EAAAplE,KAC7CkH,EAAKpM,UAAQoJ,mBAAmBP,GAEtC,GAAW,UAAPuD,GAAkBlH,KAAKuzD,aAAersD,EAA1C,CAIA,IAAMusD,EAAczzD,KAAKo0D,aAAaltD,UAE/BlH,KAAKo0D,aAAaltD,GAEHlH,KAAKkxD,IAAItjB,mBAAmB1mC,GAEpCoI,QACV,SAAAo1B,GAAK,OACD0gC,EAAKhjD,aAAa6C,KAAK2mB,gBAAqClH,KAGhE+uB,GACAzzD,KAAKoiB,aAAa6C,KACd2mB,YAAiC1kC,EAAIusD,GAG7CzzD,KAAKo0H,sBAAqB,GAC1Bp0H,KAAK0zH,yBAYTjL,GAAgBn4H,UAAUqkI,eAAiB,SAASC,EAAgBpD,EAASqD,GACzE,IAAMxD,EAAmBrxH,KAAKo0D,aAAao9D,GAE3C,GAAIoD,EAMA,OALA50H,KAAKoiB,aAAa6C,KACd2mB,SAA8BylF,QAElCrxH,KAAKouH,QAKT,IAAM0G,EAAoB90H,KAAKo0D,aAAaygE,GAE5C70H,KAAKoiB,aAAa6C,KACd2mB,qBAA0CylF,EAAkByD,IAOpErM,GAAgBn4H,UAAUykI,mBAAqB,SAASp8D,GAEpD34D,KAAKoiB,aAAa6C,KACd2mB,oBAAyC5rC,KAAKuzD,WAAYoF,IAGlE8vD,GAAgBn4H,UAAU0kI,kBAAoB,SAASrxH,EAAKg1D,GACxD,IAAMzxD,EAAKpM,UAAQoJ,mBAAmBP,GAChC8vD,EAAczzD,KAAKs0D,mBAAmBptD,GAEvCusD,IAGLA,EAAYwgE,MAAQt7D,EACpB34D,KAAKoiB,aAAa6C,KAAK2mB,oBAAyC1kC,EAAIyxD,KAGxE8vD,GAAgBn4H,UAAU2kI,qBAAuB,SAAStxH,EAAKykF,GAC3D,IAAMlhF,EAAKpM,UAAQoJ,mBAAmBP,GAChC8vD,EAAczzD,KAAKs0D,mBAAmBptD,GAEvCusD,GAIDA,EAAYyhE,eAAiB9sC,IAIjC30B,EAAYyhE,aAAe9sC,EAC3BpoF,KAAKoiB,aAAa6C,KACd2mB,uBACA1kC,EACAkhF,KAURqgC,GAAgBn4H,UAAUqiE,mBAAqB,SAASjuB,GAAO,IAAAkhC,EAAA5lE,KAC3D,IAAI0kC,EAAM6F,OAAUvqC,KAAKw0D,cAKlB,GAAK9vB,EAAM6F,QAASvqC,KAAKw0D,cAAzB,CAOP,IAAMttD,EAAKw9B,EAAMqvB,mBACXN,EAAczzD,KAAKs0D,mBAAmBptD,GAE5C,GAAKusD,EAAL,CAOAA,EAAY0hE,QAAQjyH,KAAKwhC,GAErB1kC,KAAK2wH,aACL3wH,KAAK2wH,YAAYrsF,SAASI,GAG9B,IAAM8Q,EAAUx1C,KAAKoiB,aAErBsiB,EAAMnC,iBACFyxB,qBACA,kBAAMxe,EAAQvwB,KAAK2mB,qBAA0ClH,KACjEA,EAAMnC,iBACFyxB,4BACA,SAACnmB,EAAYjoB,GACSggD,EAAKurD,4BAELvrG,GACd4vB,EAAQvwB,KACJ2mB,4BACA1kC,EACA2mC,KAKhB2H,EAAQvwB,KAAK2mB,cAAmClH,QA/B5C7jB,GAAO7b,MAAP,gCAAA3L,OAA6C6N,SAV7C2Z,GAAO3b,KACH,8DANJ2b,GAAO3b,KACH,8DAuDZujH,GAAgBn4H,UAAU8kI,eAAiB,SAAS38G,EAASqwD,GACrD9oE,KAAKwqH,mBAAqB/xG,IAC1BoI,GAAO3b,KAAK,iBACZlF,KAAKwqH,iBAAiB6K,UAAUvsD,KAYxC2/C,GAAgBn4H,UAAUglI,gBAAkB,SAAS78G,EAAS88G,GACtDv1H,KAAKwqH,mBAAqB/xG,IAC1BoI,GAAO3b,KAAK,wBACZlF,KAAKwqH,iBAAiBgL,iBAAiBD,KAU/C9M,GAAgBn4H,UAAUuiE,qBAAuB,SAAS4iE,GAAc,IAAAvvD,EAAAlmE,KACpEA,KAAKq0D,kBAAkB/kD,QAAQ,SAAAmkD,GAG3B,IAFA,IAAM3mB,EAAS2mB,EAAYrtB,YAElB13C,EAAI,EAAGA,EAAIo+C,EAAOl3C,OAAQlH,IAC/B,GAAIo+C,EAAOp+C,KAAO+mI,EAAc,CAG5BhiE,EAAY0hE,QAAQlxH,OAAOvV,EAAG,GAE9Bw3E,EAAK9jD,aAAa6C,KACd2mB,gBAAqC6pF,GAErCvvD,EAAKyqD,aACLzqD,EAAKyqD,YAAYliC,YAAYgnC,GAGjC,QAGTz1H,OAMPyoH,GAAgBn4H,UAAUolI,mBAAqB,SACvCC,EACAjxD,GAEJ,IAAIkxD,EAECnzG,IAAQozG,cAMD71H,KAAKiuH,gBAAmBjuH,KAAKkuH,uBAM9BluH,KAAKwqH,iBAEZoL,EAAe,CACXlmH,OAAQ,OACRq3D,kBAAmB,0BACnB+uD,SAAU,qCAEN91H,KAAK+1H,uBACbH,EAAe,CACXlmH,OAAQ,UACRq3D,kBAAmB,2BACnB+uD,SAAU,kEAEd9zG,IAAW6K,cAAc6J,YAAkBjC,OAlB3CmhG,EAAe,CACXlmH,OAAQ,UACRq3D,kBAAmB,eACnB+uD,SAAU,0CATdF,EAAe,CACXlmH,OAAQ,2BACRq3D,kBAAmB,oBACnB+uD,SAAU,gDAwBdF,EACA51H,KAAKg2H,oBAAoBL,EAAeC,GAExC51H,KAAKi2H,uBAAuBN,EAAejxD,IAOnD+jD,GAAgBn4H,UAAU4lI,eAAiB,SACnCP,EACAjxD,EACApwD,GAEJ,GAAIqhH,EAAcprF,MACdvqC,KAAK01H,mBAAmBC,EAAejxD,OACpC,CACH,IAAK1kE,KAAK2pD,KAAKwsE,QAAQR,EAAc72D,WAAY,CAC7C,IAAM9E,EAAc,6CASpB,YAPAh6D,KAAKg2H,oBACDL,EAAe,CACXjmH,OAAQ,iBACRq3D,kBAAmB/M,EACnB87D,SAAU97D,IAKtBh6D,KAAKo2H,uBAAuBT,EAAejxD,EAAapwD,KAOhEm0G,GAAgBn4H,UAAU8lI,uBAAyB,SAC3CT,EACAjxD,EACApwD,GAAK,IAAAmyD,EAAAzmE,KAGTA,KAAK+oH,iBAAmB4M,EACxB31H,KAAK2pD,KAAK/F,gBAAgB,oBAAsBtvC,EAChDtU,KAAKyrH,oCAEDzrH,KAAKypH,YACLznG,IAAWyK,oBACPiK,YAAkBxC,IAAuB,CAAEuxB,KAAK,KAGxD,IAAM4wE,EACArjF,EAAE0xB,GACCnzC,KAAK,4DACLhwB,KAAK,UAEdvB,KAAKoiB,aAAa6C,KACd2mB,wBACAyqF,GAEJr2H,KAAK0zH,uBACL1xG,IAAW6K,cAAc6J,YACrBtC,IACA,CACIqxB,KAAK,EACL91D,MAAO2kB,KAEf,IACIqhH,EAAcr1E,WAAWtgD,KAAK2pD,KAAM3pD,KAAKkxD,IAAKlxD,KAAKmH,QAAQusB,QAC7D,MAAO1uB,GACL+3B,IAAqBC,iBAAiBh4B,GAI1ChF,KAAKs2H,kBAAkB5xD,EAAaixD,EAAcjyG,gBAGlD,IACIiyG,EAAcY,YACV7xD,EACA,WAIQ+B,EAAKjS,eAAiBiS,EAAKsiD,kBAC3BtiD,EAAK+vD,yCAGb,SAAAxxH,GACI+3B,IAAqBC,iBAAiBh4B,GACtC6b,GAAO7b,MACH,2CAA4CA,IAEpDhF,KAAK4sC,kBAOT/rB,GAAO3b,KAAK,4CACZlF,KAAKqnB,WAAWZ,eACZzmB,KAAK+oH,iBAAiBrlG,eACtB,SACJ1jB,KAAKqnB,WAAW5D,iBAAiBzjB,KAAK+oH,iBAAiBrlG,gBACzD,MAAOhrB,GACLqkC,IAAqBC,iBAAiBtkC,GACtCmoB,GAAO7b,MAAMtM,KAarB+vH,GAAgBn4H,UAAUgmI,kBAAoB,SAASpuD,EAASvpB,GAC5D,IAUI83E,EAVAzrF,EAAQ,KACN0rF,EACA1jF,EAAEk1B,GACC32C,KAAK,iCACLq6D,QAQT,OANyB,IAArB8qC,EAAU9gI,SACVo1C,EAAQ0rF,EAAU,GAAG9zH,aAAa,QAK9B5C,KAAKmH,QAAQusB,OAAOijG,mBAC5B,IAAK,cACL,KAAK,EACL,UAAKp2H,EACDk2H,EAAoB,cACpB,MACJ,IAAK,YACDA,EAAoB,YAIE,gBAAtBA,EACAz2H,KAAKkxD,IAAI0lE,wBAAwBj4E,EAAI,MACR,cAAtB83E,GAAqCzrF,GAC5ChrC,KAAKkxD,IAAI0lE,wBAAwB,KAAM5rF,IAgB/Cy9E,GAAgBn4H,UAAU0lI,oBAAsB,SACxCL,EACAxuH,GACAA,GAAWA,EAAQ2uH,UACnB/4F,IAAqBC,iBAAiB,IAAItmC,MAAMyQ,EAAQ2uH,WAI5DH,EAAc3uD,UACV,KACA,SAAAhiE,GACI6b,GAAO1b,KACH,qEACiCH,IACtC,CACC0K,OAAQvI,GAAWA,EAAQuI,OAC3Bq3D,kBAAmB5/D,GAAWA,EAAQ4/D,kBACtCF,sBAAsB,KAclC4hD,GAAgBn4H,UAAUumI,YAAc,SAChClB,EACA1uD,EACAC,GACJrmD,GAAO3b,KAAP,eAAA7L,OACmB4tE,EADnB,OAAA5tE,OACwC6tE,EADxC,UAAA7tE,OAEQs8H,EAAcprF,QAClBorF,IAAkB31H,KAAK+oH,kBACvB/oH,KAAKypH,YAAa,EAElBznG,IAAW6K,cACP6J,YAAkBpC,IAAyB,CAAEmxB,KAAK,KAGlDzlD,KAAKqnB,aACLrnB,KAAKqnB,WAAW1D,gBACZ3jB,KAAK+oH,iBAAiBrlG,gBAC1B7C,GAAO3b,KAAK,0BACZlF,KAAKqnB,WAAW1B,cACZ3lB,KAAK+oH,iBAAiBrlG,iBAI9B1jB,KAAK+oH,iBAAmB,KAGxB/oH,KAAKkxD,IAAI2lE,eACFlB,IAAkB31H,KAAKwqH,kBAGN,YAApBvjD,GAAgD,iBAAfC,GACjCrmD,GAAO3b,KAAK,6BACZ8c,IAAWuB,UAAU6oB,uBAAuB,CAAE0qF,aAAa,KAChC,uBAApB7vD,GACW,eAAfC,GAIHllD,IAAWuB,UAAU6oB,uBAAuB,CAAE2qF,WAAW,IAE7D/2H,KAAKg3H,mBAELn2G,GAAO7b,MACH,2CACA2wH,EAAcppH,IACdopH,EAAc72D,UACdmI,EACAC,IAQZuhD,GAAgBn4H,UAAU2mI,kBAAoB,SAAStB,GAC9CA,EAAcprF,QACfvqC,KAAKouH,QACLpuH,KAAKoiB,aAAa6C,KAAK2mB,sBAI/B68E,GAAgBn4H,UAAUikI,kBAAoB,WAK1C,IAJA,IAAIrL,GAAuB,EACrB90D,EAAep0D,KAAKq0D,kBAGjB3lE,EAAI,EAAGA,EAAI0lE,EAAax+D,OAAQlH,GAAK,EAC1C,GAAI0lE,EAAa1lE,GAAGwoI,eAAgB,CAChChO,GAAuB,EACvB,MAGJA,IAAyBlpH,KAAKkpH,uBAC9BlpH,KAAKkpH,qBAAuBA,EAC5BlpH,KAAKoiB,aAAa6C,KACd2mB,uBACAs9E,KASZT,GAAgBn4H,UAAU6mI,gBAAkB,WACxC,OAAOn3H,KAAKkpH,sBAOhBT,GAAgBn4H,UAAUijE,SAAW,WACjC,OACIvzD,KAAK2pD,MAAQ3pD,KAAK2pD,KAAK4nE,UACjBz2H,UAAQoJ,mBAAmBlE,KAAK2pD,KAAK4nE,WACrC,MAGd9I,GAAgBn4H,UAAUsuH,UAAY,SAASC,EAAOC,EAAU7zG,GAC5D,IAAMs1G,EAAiBvgH,KAAKmxH,0BAExB5Q,EACAA,EAAe3B,UAAUC,EAAOC,EAAU7zG,GAE1C4V,GAAO1b,KAAK,yCAWpBsjH,GAAgBn4H,UAAU8mI,eAAiB,SAASjwH,GAChD,OAAInH,KAAK2pD,KACE3pD,KAAK2qH,iBAAiByM,eAAejwH,GAGzCi8B,QAAQE,OAAO,IAAI5sC,MAAM,wCAUpC+xH,GAAgBn4H,UAAU+mI,cAAgB,SAASp5D,GAC/C,OAAIj+D,KAAK2pD,KACE3pD,KAAK2qH,iBAAiB0M,cAAcp5D,GAGxC76B,QAAQE,OAAO,IAAI5sC,MAAM,wCAMpC+xH,GAAgBn4H,UAAUgnI,sBAAwB,WAC9C,QAAIt3H,KAAK2pD,MACE3pD,KAAK2pD,KAAK2tE,yBAUzB7O,GAAgBn4H,UAAU23D,KAAO,SAASvV,GACtC,OAAI1yC,KAAK2pD,KACE3pD,KAAK2pD,KAAK1B,KAAKvV,GAGnB,IAAItP,QAAQ,SAACC,EAASC,GACzBA,EAAO,IAAI5sC,MAAM,0CAOzB+xH,GAAgBn4H,UAAUinI,OAAS,WAC/B,OAAIv3H,KAAK2pD,KACE3pD,KAAK2pD,KAAK4tE,SAGd,IAAIn0F,QAAQ,SAACC,EAASC,GACzBA,EAAO,IAAI5sC,MAAM,0CAOzB+xH,GAAgBn4H,UAAUknI,iBAAmB,WACzC,OAAOx3H,KAAKioD,KAAK,0BAOrBwgE,GAAgBn4H,UAAUmnI,gBAAkBhP,GAAgBn4H,UAAUinI,OAKtE9O,GAAgBn4H,UAAUonI,eAAiB,WACvC,OAAI13H,KAAK2pD,KACE3pD,KAAK2pD,KAAK+tE,iBAGd,MAMXjP,GAAgBn4H,UAAUqnI,YAAc,WACpC,OAAI33H,KAAK2pD,KACE3pD,KAAK2pD,KAAKguE,cAGd,MAQXlP,GAAgBn4H,UAAUsnI,mBAAqB,WAC3C,GAAI53H,KAAK2pD,KACL,OAAO3pD,KAAK2pD,KAAKkuE,gBAYzBpP,GAAgBn4H,UAAU6gI,wBAA0B,WAChD,OAAInxH,KAAKw0D,cACEx0D,KAAKwqH,iBAAiB9mG,eAG1B1jB,KAAK+oH,iBAAmB/oH,KAAK+oH,iBAAiBrlG,eAAiB,MAW1E+kG,GAAgBn4H,UAAUw/F,mBAAqB,WAC3C,IAAMywB,EAAiBvgH,KAAKmxH,0BAE5B,OAAO5Q,EAAiBA,EAAezwB,qBAAuB,MASlE24B,GAAgBn4H,UAAUwnI,oBAAsB,SAASC,GAChD/3H,KAAKywH,gBAGVzwH,KAAKspH,iBAAmByO,EACxB/3H,KAAK2pD,KAAK2mE,mBAAmB,cAC7BtwH,KAAK2pD,KAAK67B,cAAc,aAAc,CAClClpF,WAAY,CACRk+B,MAAOu9F,EAAOv9F,MACdjB,MAAOw+F,EAAOx+F,MACdtzB,MAAO,0CAGfjG,KAAK2pD,KAAK/7C,iBAOd66G,GAAgBn4H,UAAU0nI,oBAAsB,WAC5C,OAAOh4H,KAAKspH,kBAMhBb,GAAgBn4H,UAAU2nI,kBAAoB,WAC1C,OAAOj4H,KAAKopH,iBAMhBX,GAAgBn4H,UAAU4nI,kBAAoB,WAC1C,OAAOl4H,KAAKqpH,iBAMhBZ,GAAgBn4H,UAAU6nI,QAAU,WAChC,IAAMn/H,EAAOgH,KAAKiiB,KAAKm2G,eAEjBC,EAAW,GAEjBA,EAASjgB,KAAO,IAAIjwG,KACpBkwH,EAASlxF,IAAM74C,OAAOitB,SAAS87E,KAC/BghC,EAASz8B,GAAK77D,UAAUmY,UAExB,IAAMtzC,EAAM5E,KAAKiiB,KAAKq2G,aAQtB,OANI1zH,IACAyzH,EAASp2G,KAAOrd,GAGpB5L,EAAKq/H,SAAWA,EAETr/H,GAMXyvH,GAAgBn4H,UAAU2zH,mBAAqB,WAC3C,OAAOjkH,KAAK2pD,KAAK/F,iBAMrB6kE,GAAgBn4H,UAAUs9H,4BAA8B,SAAS3+H,EAAMU,GACnEqQ,KAAKmwH,YAAL,qBAAA92H,OAAsCpK,GAAQ,CAAEU,WAMpD84H,GAAgBn4H,UAAUioI,+BAAiC,SAAStpI,GAChE+Q,KAAKqwH,cAAL,qBAAAh3H,OAAwCpK,IACxC+Q,KAAK2pD,KAAK/7C,gBASd66G,GAAgBn4H,UAAUkoI,4BAA8B,SAASvpI,GAC7D,IAAMoB,EAAW2P,KAAK2pD,KAAK8uE,QAAQC,MAAMnnG,KAAK,SAAA6qF,GAAI,OAC9CA,EAAKj8G,UAAL,qBAAA9G,OAAsCpK,KAG1C,OAAOoB,EAAWA,EAASV,WAAQ4Q,GAWvCkoH,GAAgBn4H,UAAU27B,aAAe,SACjC0sG,EACAC,GACJ,OAAO54H,KAAKqnB,WAAW4E,aAAa0sG,EAAiBC,IAUzDnQ,GAAgBn4H,UAAUy3B,mBAAqB,WAC3C,OAAO/nB,KAAKqnB,WAAWU,sBAU3B0gG,GAAgBn4H,UAAUusF,eAAiB,SAASn4C,EAAOk4C,GACvD,IAAM9yD,EAAU4a,EAAM5a,UAClBtB,EAAO,KACL+hB,EAAQ7F,EAAM6F,MACdsuF,EAAetuF,EAAQ7F,EAAMqvB,mBAAqB,QAClDwsD,EACAh2E,EACIvqC,KAAKwqH,kBAAoBxqH,KAAKwqH,iBAAiB9mG,eAC/C1jB,KAAK+oH,kBAAoB/oH,KAAK+oH,iBAAiBrlG,eAErDoG,EAEIy2F,IACA/3F,EAAO+3F,EAAehT,aAAa7oE,IAGvClc,EAAOkc,EAAM60E,UAEZ38B,EAAU11E,IAAOshB,GAAS+3F,GAI/BvgH,KAAKqnB,WAAWwC,4BACZ02F,EACA/3F,EACAsB,EACA+uG,EACAn0F,EAAMo0F,gBACNl8C,EAAU11E,KAUlBuhH,GAAgBn4H,UAAU07B,mBAAqB,SAASvnB,GACpDud,IAAWkJ,QAAQzmB,IAWvBgkH,GAAgBn4H,UAAUyoI,SAAW,SAASC,GAC1C,OAAOh5H,KAAK2pD,KAAO3pD,KAAK2pD,KAAKwsE,QAAQ6C,GAAU,MAMnDvQ,GAAgBn4H,UAAU2oI,+BAAiC,WACvDj5H,KAAKoiB,aAAa6C,KAAK2mB,oBACnBgnF,iCAWRnK,GAAgBn4H,UAAU4oI,oBAAsB,SAAS/lH,EAAI4f,GACzD/yB,KAAKkxD,IAAIioE,mBAAmBhmH,EAAI4f,IASpC01F,GAAgBn4H,UAAU8oI,yBAA2B,SAASrmG,GAC1D/yB,KAAKk5H,oBAAoB,GAAInmG,IAiBjC01F,GAAgBn4H,UAAU29C,YAAc,SAChCxpC,GAEgC,IADhC0O,EACgChS,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAD3B,GACLk4H,EAAgCl4H,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,IAAAA,UAAA,GAC9Bm4H,EAAWnkI,GAAUsP,GAK3B,GAAoB,WAAhB60H,IACQD,GAA0C,WAAhBC,EAMtC,GAAID,EACAr5H,KAAKk5H,oBAAoB/lH,EAAI1O,OAC1B,CACH,IAAI80H,EAAgB90H,EAIhBsrH,EAAc,OAElB,GAAoB,WAAhBuJ,EAA0B,CAC1BvJ,EAAc,eAGTwJ,EAAchpI,eAAeizD,OAC9B+1E,EAAc/1E,KAAuB,IAGzC,IACI+1E,EAAgBzsH,KAAK8L,UAAU2gH,GACjC,MAAO7gI,GAGL,YAFAmoB,GAAO7b,MAAM,6CAA8CtM,IAM/Dya,EACAnT,KAAKiwH,uBAAuB98G,EAAIomH,EAAexJ,GAG/C/vH,KAAK8vH,gBAAgByJ,EAAexJ,QAnCxClvG,GAAO7b,MAAP,kCAAA3L,OAA+CigI,KAyCvD7Q,GAAgBn4H,UAAUkpI,wBAA0B,WAChD,OAAOx5H,KAAKw0D,cACNx0D,KAAKuqH,2BAA6BvqH,KAAKiqH,4BAQjDxB,GAAgBn4H,UAAU+6H,4BAA8B,SAAS5yG,GACzDA,EAAQ8xB,MACRvqC,KAAKuqH,4BAA6B,EAElCvqH,KAAKiqH,4BAA6B,EAElCxxG,EAAQ8xB,QAAUvqC,KAAKw0D,eACvBx0D,KAAKoiB,aAAa6C,KAAK2mB,2BAS/B68E,GAAgBn4H,UAAUmpI,uBAAyB,SAAShhH,GAGpDA,EAAQ8xB,OAGRvoB,IAAWuB,UAAU6oB,uBAAuB,CAAE2qF,WAAW,IAErD/2H,KAAKwqH,kBACLxoG,IAAWyK,oBACPqK,YACInC,IACA,CACIopC,UAAW/9D,KAAKwqH,iBAAiBxrD,eAIjDh/D,KAAKg3H,gBAAgB,qBAAsB,eACpCv+G,GAAWzY,KAAK+oH,mBAAqBtwG,IACxCzY,KAAKiiB,KAAKimC,mBACVloD,KAAKuuH,kBAAoB,IAAImL,IAAsB15H,MACnDA,KAAKuuH,kBAAkBhxG,MAAM9E,KAG7BoI,GAAO3b,KAAK,uDACZuT,EAAQkhH,+BAUpBlR,GAAgBn4H,UAAUg7H,yBAA2B,SAAS7yG,GACtDA,EAAQ8xB,MACRvqC,KAAKuqH,4BAA6B,GAElCvqH,KAAKiqH,4BAA6B,EAClCjqH,KAAKuuH,mBAAqBvuH,KAAKuuH,kBAAkBC,UAGjD/1G,EAAQ8xB,QAAUvqC,KAAKw0D,eACvBx0D,KAAKoiB,aAAa6C,KAAK2mB,wBAU/B68E,GAAgBn4H,UAAU2lI,uBAAyB,SAC3CN,EACAjxD,GACJ1kE,KAAKuqH,4BAA6B,EAGlCvqH,KAAKwqH,iBAAmBmL,EACxB31H,KAAKyrH,oCAELzrH,KAAKwqH,iBAAiBlqE,WAAWtgD,KAAK2pD,KAAM3pD,KAAKkxD,IAAKlxD,KAAKmH,QAAQusB,QAEnE7S,GAAO3b,KAAK,4CAEZ,IAAI00H,EAAW9+H,UAAQoJ,mBAAmBlE,KAAKwqH,iBAAiB1rD,WAE1DrL,EAAczzD,KAAKo0D,aAAawlE,GAElCnmE,IACAmmE,EAAWnmE,EAAYomE,cAAgBD,GAG3C55H,KAAKqnB,WAAWZ,eACZzmB,KAAKwqH,iBAAiB9mG,eACtBk2G,GAEJ,IAAMtwF,EAActpC,KAAK4sC,iBAEzB5sC,KAAKwqH,iBAAiB+L,YAClB7xD,EACA,WACI7jD,GAAO5b,MAAM,wCAEjB,SAAAD,GACI6b,GAAO7b,MACH,+CAAgDA,IAExDskC,IAORm/E,GAAgBn4H,UAAUwpI,oBAAsB,WAC5C95H,KAAK+5H,iBACD,MAAO/5H,KAAK+oH,iBAAiBrlG,eAAewpB,oBAOpDu7E,GAAgBn4H,UAAU0pI,oBAAsB,WAC5Ch6H,KAAK+5H,iBACD,MAAO/5H,KAAKwqH,iBAAiB9mG,eAAewpB,oBAUpDu7E,GAAgBn4H,UAAUypI,iBAAmB,SAASrZ,EAAS1zE,GAAc,IAAAhmB,GAAA,EAAAC,GAAA,EAAAC,OAAA3mB,EAAA,IACzE,QAAA4mB,EAAAC,EAAoB4lB,EAApBv9C,OAAA4F,cAAA2xB,GAAAG,EAAAC,EAAA5B,QAAAC,MAAAuB,GAAA,EAAkC,KAAvB0d,EAAuBvd,EAAAx3B,MAC9BkxB,GAAO3b,KAAP,iBAAA7L,OAA6BqnH,EAA7B,YAAArnH,OAA+CqrC,IAC/C1kC,KAAKkxD,IAAI9uC,aAAa6C,KAAKmZ,qBAA8BsG,IAHY,MAAAr0B,GAAA4W,GAAA,EAAAC,EAAA7W,EAAA,YAAA2W,GAAA,MAAAI,EAAAvB,QAAAuB,EAAAvB,SAAA,WAAAoB,EAAA,MAAAC,KAc7EuhG,GAAgBn4H,UAAUi7H,4BAA8B,SAChDoK,GAC0B,OAA1B31H,KAAKwqH,mBAILxqH,KAAKi6H,yBACCj6H,KAAKwqH,iBAAiBxqD,uBAGF,OAA1BhgE,KAAK+oH,mBACL/oH,KAAKk6H,yBACCl6H,KAAK+oH,iBAAiB/oD,uBAGhC,IAAIv6C,GAAO,EACL00G,EAAmBn6H,KAAKmH,QAAQusB,OAAOymG,iBAmB7C,GAhBKxE,EAAcprF,MAERvqC,KAAKwqH,mBAAqBmL,GACjC90G,GAAO7b,MAAM,0DAEbygB,GAAO,IACCkwG,EAAc32D,aACS,iBAArBm7D,GACP7uH,KAAKC,SAAW4uH,IACnBt5G,GAAO3b,KAAP,+BAAA7L,OAA2C8gI,EAA3C,SACAn4G,IAAWuB,UAAU6oB,uBAAuB,CAAE0qF,aAAa,IAC3D92H,KAAKg3H,gBAAgB,UAAW,gBAEhCvxG,GAAO,GAZPA,GAAO,GAeNvL,MAAMla,KAAKi6H,4BACR//G,MAAMla,KAAKk6H,0BAA2B,CAC1C,IAAME,EACAp6H,KAAKi6H,yBAA2Bj6H,KAAKk6H,yBAE3Cl4G,IAAW6K,cACPmI,IACA,CAAErlC,MAAOyqI,IAGbzE,EAAcprF,QAAUvqC,KAAKw0D,eAC7Bx0D,KAAKoiB,aAAa6C,KAAK2mB,0BAGvBnmB,IAMJzlB,KAAKq6H,eAAc,GAGfr6H,KAAK+oH,iBACL/oH,KAAKs6H,yBAELz5G,GAAO3b,KAAK,mDAGhBlF,KAAKg6H,sBAGDh6H,KAAK+oH,kBACL/oH,KAAKw2H,wCAGT31G,GAAO3b,KAAK,6CACZlF,KAAKqnB,WAAW5D,iBAAiBzjB,KAAKwqH,iBAAiB9mG,gBAEvD1B,IAAWyK,oBACPqK,YACIpC,IACA,CACIqpC,UAAW/9D,KAAKwqH,iBAAiBxrD,iBAajDypD,GAAgBn4H,UAAUk7H,kBAAoB,WAA0B,IAAjB5+F,EAAiBzrB,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAC1D46G,GAAWwe,IAAQ3tG,EAAY5sB,KAAK4sB,YAG1C,GADA5sB,KAAK4sB,WAAaA,EACdmvF,EAAS,CACT/7G,KAAKoiB,aAAa6C,KACd2mB,qBACA5rC,KAAK4sB,YAGa,CAIlB,eAGA,aACA,gBAGUtd,QAAQ,SAAArf,QACMsQ,IAApBqsB,EAAW38B,IACX+xB,IAAWuB,UAAU6oB,uBAArBmN,GAAA,GACKtpD,EAAI2R,QAAQ,IAAK,KAAOgrB,EAAW38B,SAaxDw4H,GAAgBn4H,UAAUkqI,YAAc,SAASvqI,GAC7C,OAAO+P,KAAK4sB,WAAW38B,IAO3Bw4H,GAAgBn4H,UAAUmqI,4BAA8B,WAChDz6H,KAAKoqH,uBACLvpG,GAAO3b,KAAK,mCACZyI,aAAa3N,KAAKoqH,sBAClBpqH,KAAKoqH,qBAAuB,OASpC3B,GAAgBn4H,UAAUgqI,uBAAyB,WAC/Ct6H,KAAK06H,oBACD,MAAO16H,KAAK+oH,iBAAiBrlG,eAAewpB,oBAQpDu7E,GAAgBn4H,UAAUqqI,uBAAyB,WAC/C36H,KAAK06H,oBACD,MAAO16H,KAAKwqH,iBAAiB9mG,eAAewpB,oBAUpDu7E,GAAgBn4H,UAAUoqI,oBAAsB,SACxCE,EACA5tF,GAAc,IAAA1lB,GAAA,EAAAC,GAAA,EAAAC,OAAAjnB,EAAA,IAClB,QAAAknB,EAAAC,EAAoBslB,EAApBv9C,OAAA4F,cAAAiyB,GAAAG,EAAAC,EAAAlC,QAAAC,MAAA6B,GAAA,EAAkC,KAAvBod,EAAuBjd,EAAA93B,MAC9BkxB,GAAO3b,KAAP,mBAAA7L,OAA+BuhI,EAA/B,YAAAvhI,OAAyDqrC,IACzD1kC,KAAKkxD,IAAI9uC,aAAa6C,KAAKmZ,uBAAgCsG,IAH7C,MAAAr0B,GAAAkX,GAAA,EAAAC,EAAAnX,EAAA,YAAAiX,GAAA,MAAAI,EAAA7B,QAAA6B,EAAA7B,SAAA,WAAA0B,EAAA,MAAAC,KAWtBihG,GAAgBn4H,UAAUuqI,qCAAuC,WAC7Dh6G,GAAO3b,KAAK,sDACZlF,KAAK+oH,iBAAiBlhC,wBAAuB,GAAM,GAAM5nD,KACrD,WACIpf,GAAO3b,KAAK,oDAEhB,SAAAF,GACI6b,GAAO7b,MACH,2DACAA,MAWhByjH,GAAgBn4H,UAAU+pI,cAAgB,SAAS3mE,GAC/C,GAAI1zD,KAAKylD,MAAQiO,EAAjB,CAMA,GADA1zD,KAAKylD,IAAMiO,EACPA,EAAW,CACX7yC,GAAO3b,KAAK,wCAIZ8c,IAAWuB,UAAU6oB,uBAAuB,CACxC2qF,WAAW,EACXD,aAAa,IAKjB,IAAMzD,EAAwC,IAAxBrzH,KAAKkxD,IAAI0D,WAE/B50D,KAAKwqH,iBACA3iC,wBAAuB,EAAMwrC,GAC7B7vF,MAAM,SAAAx+B,GACH6b,GAAO7b,MACH,kDAAA3L,OACUg6H,EADV,KAC4BruH,UAGxC6b,GAAO3b,KAAK,mCAIZlF,KAAK+oH,kBACL/oH,KAAKqnB,WAAWW,gCACZhoB,KAAK+oH,iBAAiBrlG,gBAAiBgwC,GAI/C1zD,KAAKipH,YAAc,KAGnBjpH,KAAKoiB,aAAa6C,KACd2mB,aACA5rC,KACAA,KAAKylD,KAGTzlD,KAAKoiB,aAAa6C,KACdjlB,KAAKw5H,0BACC5tF,yBACAA,4BAjDN/qB,GAAO5b,MAAP,8CAAA5L,OAA2Dq6D,KAyDnE+0D,GAAgBn4H,UAAUwqI,iBAAmB,SAASh8D,GAElD,GADA9+D,KAAKy6H,8BACDz6H,KAAKwqH,iBACL3pG,GAAO7b,MAAM,oCADjB,CAMAhF,KAAKuqH,4BAA6B,EAClCvqH,KAAKwqH,iBACCxqH,KAAKiiB,KAAKvN,WAAWw+B,OAAO6nF,oBAC1B/6H,KAAK2pD,KAAK4nE,UACVzyD,GACRj+C,GAAO3b,KACH,gCAAiClF,KAAK2pD,KAAK4nE,UAAWzyD,GAC1D9+D,KAAKyrH,oCAELzrH,KAAKwqH,iBAAiBlqE,WAAWtgD,KAAK2pD,KAAM3pD,KAAKkxD,IAAKlxD,KAAKmH,QAAQusB,QAEnE7S,GAAO3b,KAAK,4CAEZ,IAAI00H,EAAW9+H,UAAQoJ,mBAAmBlE,KAAKwqH,iBAAiB1rD,WAE1DrL,EAAczzD,KAAKo0D,aAAawlE,GAElCnmE,IACAmmE,EAAWnmE,EAAYomE,cAAgBD,GAG3C55H,KAAKqnB,WAAWZ,eACZzmB,KAAKwqH,iBAAiB9mG,eACtBk2G,GAKJ,IAAMtwF,EAActpC,KAAK4sC,iBAEzB5sC,KAAKwqH,iBAAiBwQ,OAAO1xF,KAOjCm/E,GAAgBn4H,UAAUkmI,sCAAwC,WAC9D31G,GAAO3b,KAAK,wDACZlF,KAAK+oH,iBAAiBlhC,wBAAuB,GAAO,GAAO5nD,KACvD,WACIpf,GAAO3b,KAAK,uDAEhB,SAAAF,GACI6b,GAAO7b,MACH,4DACAA,MAWhByjH,GAAgBn4H,UAAU8jI,qBAAuB,SAAS6G,GACtD,GAAKx4G,IAAQozG,eACL71H,KAAKiuH,iBACNjuH,KAAKkuH,uBAFZ,CAOA,IAAMgN,EAAQl7H,KAAKq0D,kBACb8mE,EAAYD,EAAMtlI,OAGlBwlI,EAAgBp7H,KAAK+1H,qBAQ3B,IALKqF,GAAiBp7H,KAAKoqH,sBACvBpqH,KAAKy6H,+BAIJz6H,KAAKwqH,kBAAoB4Q,EAAe,CACzC,IAAMp6E,EAAOm6E,GAAaD,EAAM,GAG1BG,EAAOr7H,KAAKuzD,WACZ+nE,EAAUt6E,EAAK4S,QAErB,GAAIynE,EAAOC,EAKP,YAJAz6G,GAAO5b,MACH,2DACqCo2H,EAAMC,GAG5C,GAAID,IAASC,EAGhB,YAFAz6G,GAAO7b,MAAM,kBAAmBq2H,EAAMC,GAK1C,IAAM33H,EAAMq9C,EAAKsnE,SAEjB,GAAI2S,EAAe,CACf,GAAIj7H,KAAKoqH,qBAGL,YAFAvpG,GAAO7b,MAAM,+CAIjB6b,GAAO3b,KAAP,wBAAA7L,OAC4BsK,EAD5B,WAAAtK,OAEQ2G,KAAKsqH,eAFb,gBAGAtqH,KAAKoqH,qBAAuB3/G,WACxBzK,KAAK86H,iBAAiB5qI,KAAK8P,KAAM2D,GACX,IAAtB3D,KAAKsqH,qBAETzpG,GAAO3b,KAAP,wBAAA7L,OAAoCsK,IACpC3D,KAAK86H,iBAAiBn3H,QAEnB3D,KAAKwqH,mBAAqB4Q,IACjCv6G,GAAO3b,KAAP,uBAAA7L,OAAmC2G,KAAKwqH,iBAAiB1rD,YAGrD9+D,KAAKwqH,iBAAiBxrD,aAAem8D,EAAY,GACjDn5G,IAAWyK,oBACPqK,YAAelC,MAEvB50B,KAAKg3H,wBA7DLn2G,GAAO3b,KAAK,sBAuEpBujH,GAAgBn4H,UAAUylI,mBAAqB,WAC3C,IAAMmF,EAAQl7H,KAAKq0D,kBACb8mE,EAAYD,EAAMtlI,OAClB2lI,OAA+Dh7H,IAAlD26H,EAAM3pG,KAAK,SAAA/gC,GAAC,MAAmB,gBAAfA,EAAE0jI,WAC/BkH,EAA8B,IAAdD,IAAoBI,EAI1C,OAFA16G,GAAO5b,MAAP,mBAAA5L,OAAgC8hI,EAAhC,kBAAA9hI,OAA0DkiI,EAA1D,QAAAliI,OAA2E+hI,IAEpEA,GAWX3S,GAAgBn4H,UAAU0mI,gBAAkB,SACpCtnH,EACAq3D,GACJ,GAAK/mE,KAAKwqH,iBAAV,CAMA,IAAMgR,EAAoBx7H,KAAKw0D,cAG3BgnE,IACIx7H,KAAK+oH,kBACL/oH,KAAK66H,uCAIT76H,KAAK26H,0BAIT95G,GAAO3b,KAAK,4CACZlF,KAAKqnB,WAAW1D,gBAAgB3jB,KAAKwqH,iBAAiB9mG,gBACtD7C,GAAO3b,KAAK,yCACZlF,KAAKqnB,WAAW1B,cAAc3lB,KAAKwqH,iBAAiB9mG,gBAEpD1jB,KAAKwqH,iBAAiBxjD,UAClB,WACInmD,GAAO3b,KAAK,iCAEhB,SAAAF,GAcQ0K,GACAmR,GAAO7b,MACH,iEAC6BA,IAEtC,CACC0K,OAAQA,GAAkB,UAC1Bq3D,kBAAmBA,GACO,yBAC1BF,qBAAsB7mE,KAAK2pD,MACpB3pD,KAAKs0D,mBACJx5D,UAAQoJ,mBAAmBlE,KAAKwqH,iBAAiB1rD,cAGjE9+D,KAAKwqH,iBAAmB,KAGxBxqH,KAAKq6H,eAAc,GAEfmB,IAEIx7H,KAAK+oH,iBACL/oH,KAAK85H,sBAELj5G,GAAO3b,KAAK,uDAjEhB2b,GAAO7b,MAAM,kCA4ErByjH,GAAgBn4H,UAAUkkE,YAAc,WACpC,OAAOx0D,KAAKylD,KAShBgjE,GAAgBn4H,UAAUmrI,sBAAwB,WAC9C,OAAIz7H,KAAKw0D,cACEx0D,KAAKwqH,iBAAiB9mG,eAAeosE,qBAGzC,MAOX24B,GAAgBn4H,UAAUorI,gBAAkB,WACxC,IAAMR,EAAQl7H,KAAKq0D,kBAGnB,GAAqB,IAAjB6mE,EAAMtlI,OAKN,MAAM,IAAIc,MACN,kEALJ,IAAMilI,EAAUT,EAAM,GAAG5S,SAEzBtoH,KAAK86H,iBAAiBa,IAU9BlT,GAAgBn4H,UAAUsrI,eAAiB,WACvC57H,KAAKg3H,mBAOTvO,GAAgBn4H,UAAUurI,gBAAkB,WACxC,OAAO77H,KAAKkqH,sBAAsB5hB,YAWtCmgB,GAAgBn4H,UAAUwrI,2BAA6B,SAC/CjwF,GACJ7rC,KAAKkxD,IAAI4qE,2BAA2BjwF,IAgBxC48E,GAAgBn4H,UAAUyrI,wBACpB,SAASC,EAAY5zC,GACnB,OAAKpoF,KAAK2pD,KAIH3pD,KAAKyqH,kBACPsR,wBAAwBC,EAAY5zC,GAJ9B,IAAI1xF,MAAMulI,wBAY7BxT,GAAgBn4H,UAAUm7H,kCAAoC,WAC1D,IAAMyQ,EAAYl8H,KAAK43H,sBAEnB53H,KAAK6qH,mCAAsCqR,GAAgD,OAAnCl8H,KAAKmxH,4BAIjEnvG,IAAW6K,cAAciJ,YAAsB,SAAU,CACrDomG,YACA/lG,cAAa,GAAA98B,OAAK6iI,EAAL,KAAA7iI,OAAkB2G,KAAKirH,oBAExCjrH,KAAK6qH,mCAAoC,qECrsG7C,SAAA1pG,GAAA3yB,EAAAQ,EAAAyuB,EAAA,sBAAAkrG,IAAA,IAAAwT,EAAA3tI,EAAA,GAAA4tI,EAAA5tI,EAAA,GAAA6tI,EAAA7tI,EAAA,IAAA8tI,EAAA9tI,EAAA2B,EAAAksI,GAAAE,EAAA/tI,EAAA,IAAAguI,EAAAhuI,EAAA2B,EAAAosI,GAAAE,EAAAjuI,EAAA,GAAAkuI,EAAAluI,EAAA,IAAAmuI,EAAAnuI,EAAA,GAAAouI,EAAApuI,EAAA,GAAAquI,EAAAruI,EAAA,GAAAsuI,EAAAtuI,EAAA2B,EAAA0sI,GAAAE,EAAAvuI,EAAA,IAAAwuI,EAAAxuI,EAAA2B,EAAA4sI,GAAAE,EAAAzuI,EAAA,GAAA0uI,EAAA1uI,EAAA,GAAA2uI,EAAA3uI,EAAA2B,EAAA+sI,GAuBMr8G,EAASF,oBAAUQ,GAMV,SAASwnG,EAA4Bv/E,GAChDppC,KAAKopC,WAAaA,EAClBppC,KAAKo9H,cAAgB,GAGrBh0F,EAAW/kB,GAAGunB,qBACV,SAAAlH,GACI,GAAKA,EAAM5a,WAAcsf,EAAW/hB,WAApC,CAGA,IAAM5O,EACAisB,EAAM6F,MACFnB,EAAWohF,iBAAmBphF,EAAW2/E,iBAI7CnjG,EAAOnN,GAAWA,EAAQiL,gBAAmB,KAEnD0lB,EAAW/hB,WAAWgB,cAClBzC,EACA8e,EAAMmxB,UACNnxB,EAAMqI,cAOtB47E,EAA4Br4H,UAAU87H,uBAAyB,WAAW,IAAAzkH,EAAA3H,KAChEopC,EAAappC,KAAKopC,WAClBi0F,EAAWj0F,EAAWugB,KAE5B3pD,KAAKs9H,kBAAoB,IAAIC,IAAsBF,EAC/Cr9H,KAAKopC,WAAWhnB,cAEpBi7G,EAASlzF,YAAYob,IAAWvzD,eAAgB,SAAA2jI,GACvCA,EAAcprF,OAMfnB,EAAW8nB,IAAIo9D,uBAMvB+O,EAASlzF,YACLob,IAAWtzD,oBACX,SAAC0jI,EAAeztD,IAGXytD,EAAcprF,OACRnB,EAAWktF,kBACVpuD,EAASytD,EAAcjyG,kBAIvC25G,EAASlzF,YAAYob,IAAW50D,qBAC5B,SAAA6sI,GAIIx7G,IAAW6K,cAAckK,eAEzBqS,EAAWogF,kBAAoBgU,EAG/Bp0F,EAAW8nB,IAAI+gE,cAAa,GAAMhyF,KAC9B,WACImJ,EAAWmgF,gBAAiB,EAC5BngF,EAAWogF,kBAAoB,OAElChmF,MACG,SAAAx+B,GACIokC,EAAWogF,kBAAoB,KAC/B3oG,EAAO1b,KACH,gDAAiDH,OAKzEhF,KAAKs9H,kBAAkBG,QAAQl4E,IAAW/wD,gBACtCo3C,mBAEJ5rC,KAAKs9H,kBAAkBG,QAAQl4E,IAAW9yD,WACtCm5C,qBAGJyxF,EAASlzF,YAAYob,IAAW9yD,WAC5B,WACIkV,EAAKyhC,WAAW6gF,4BAA6B,EAG7C76H,OAAOmW,KAAK83H,EAASz5E,iBAAiBt0C,QAAQ,SAAArf,GAC1C,IAAMy8B,EACAsJ,YAAiC,cAAA38B,OACjBpJ,GACd,CAAEN,MAAO0tI,EAASz5E,gBAAgB3zD,KAE1C+xB,IAAW6K,cAAcH,KAI7Bt9B,OAAOmW,KAAK83H,EAASp7G,KAAK2hC,iBAAiBt0C,QAAQ,SAAArf,GAC/C,IAAMy8B,EACAsJ,YAAiC,QAAA38B,OACvBpJ,GACR,CAAEN,MAAO0tI,EAASp7G,KAAK2hC,gBAAgB3zD,KAE/C+xB,IAAW6K,cAAcH,OAIrC2wG,EAASlzF,YAAYob,IAAW3xD,qBAAsB,SAAC8E,EAAG+f,GACjDA,EAAQ8xB,OACTnB,EAAWhnB,aAAa6C,KAAK2mB,oBACzBgnF,sBAA2Cl6H,KAIvDsH,KAAKs9H,kBAAkBG,QAAQl4E,IAAWvxD,gBACtC43C,oBACAgnF,oBAEJ5yH,KAAKs9H,kBAAkBG,QAAQl4E,IAAWzxD,mBACtC83C,oBACAgnF,oBACJ5yH,KAAKs9H,kBAAkBG,QAAQl4E,IAAWxxD,+BACtC63C,oBACAgnF,qBAEJ5yH,KAAKs9H,kBAAkBG,QAAQl4E,IAAWtxD,qBACtC23C,oBACAgnF,wBAEJ5yH,KAAKs9H,kBAAkBG,QAAQl4E,IAAWpyD,kBACtCy4C,oBACAgnF,qBAEJ5yH,KAAKs9H,kBAAkBG,QAAQl4E,IAAW30D,wBACtCg7C,oBACAgnF,2BAEJ5yH,KAAKs9H,kBAAkBG,QAAQl4E,IAAW10D,YACtC+6C,oBACAgnF,6BACJyK,EAASlzF,YACLob,IAAW10D,YACX,kBAAMmxB,IAAW6K,cAAcuI,iBAEnCp1B,KAAKs9H,kBAAkBG,QAAQl4E,IAAW1xD,kBACtC+3C,oBACAgnF,qBAEJ5yH,KAAKs9H,kBAAkBG,QAAQl4E,IAAWxzD,kBACtC65C,oBACAgnF,qBAEJyK,EAASlzF,YAAYob,IAAWh0D,sBAC5B,SAAAokI,GACIvsF,EAAWqwF,uBAAuB9D,KAG1C31H,KAAKs9H,kBAAkBG,QAAQl4E,IAAW/yD,cACtCo5C,oBACAgnF,wBAEJ5yH,KAAKs9H,kBAAkBG,QAAQl4E,IAAWt0D,oBACtC26C,mBACAgnF,cAEJ5yH,KAAKs9H,kBAAkBG,QAAQl4E,IAAW1zD,mBACtC+5C,oBACAgnF,sBAEJyK,EAASlzF,YAAYob,IAAWzzD,WAC5B,WACIkwB,IAAW6K,cAAc0J,eACzB6S,EAAWhnB,aAAa6C,KACpB2mB,oBACAgnF,gBAGZyK,EAASlzF,YAAYob,IAAWnxD,uBAC5B,SAAAuhI,GACI3zG,IAAWyK,oBACPiK,YACIvC,IACA,CAAEsxB,IAAKkwE,EAAcprF,WAGrC8yF,EAASlzF,YAAYob,IAAW7xD,uBAC5B,SAAC+kB,EAAS9U,GAEN,GAAIA,EAAK,CACL,IAAM8vD,EAAcrqB,EAAWkrB,mBAC3Bx5D,UAAQoJ,mBAAmBP,IAEH,QAAxB8U,EAAQilH,YACRjlH,EAAQklH,cAAclqE,GACS,OAAxBh7C,EAAQilH,aACfjlH,EAAQmlH,aAAanqE,GAI7BrqB,EAAWhnB,aAAa6C,KACpB2mB,yBACAnzB,KAGZzY,KAAKs9H,kBAAkBG,QAAQl4E,IAAW7wD,6BACtCk3C,gCAEJ5rC,KAAKs9H,kBAAkBG,QAAQl4E,IAAW3wD,kCACtCg3C,qCAEJ5rC,KAAKs9H,kBAAkBG,QACnBl4E,IAAW1wD,mCACX+2C,sCAEJ5rC,KAAKs9H,kBAAkBG,QAAQl4E,IAAWlyD,qBACtCu4C,wBAEJyxF,EAASQ,+BAA+B,SAAC38H,EAAMlL,GAC3C,IAAMy9D,EAAcrqB,EAAWkrB,mBAAmBt+D,GAE7Cy9D,GAILA,EAAY+gE,YACRtzH,EAAKf,QAAQstB,UAAU,qBAAqB73B,QAC5CsL,EAAKvR,SAGb0tI,EAASlzF,YAAYob,IAAWrzD,OAC5Bk3C,EAAWurF,eAAezkI,KAAKk5C,IACnCi0F,EAASlzF,YAAYob,IAAW9wD,iBAC5B20C,EAAW6tF,kBAAkB/mI,KAAKk5C,IAEtCppC,KAAKs9H,kBAAkBG,QAAQl4E,IAAWzyD,iBACtC84C,sBAEJyxF,EAASlzF,YAAYob,IAAW7yD,kBAC5B02C,EAAWwqF,eAAe1jI,KAAKk5C,IACnCi0F,EAASlzF,YAAYob,IAAWhzD,4BAC5B62C,EAAWqrF,wBAAwBvkI,KAAKk5C,IAC5Ci0F,EAASlzF,YAAYob,IAAW5yD,gBAC5By2C,EAAWslF,aAAax+H,KAAKk5C,IACjCppC,KAAKs9H,kBAAkBG,QAAQl4E,IAAW3yD,SACtCg5C,mBAEJyxF,EAASlzF,YAAYob,IAAW9zD,qBAC5B23C,EAAW6rF,qBAAqB/kI,KAAKk5C,IAEzCi0F,EAASlzF,YAAYob,IAAWpzD,mBAAoB,SAAAwmE,GAChDvvB,EAAW2rF,mBAAmBp8D,GAG1BvvB,EAAW/hB,YAAc+hB,EAAWqnF,eACpCrnF,EAAW/kB,GAAGunB,yBACV,SAAAkyF,GACI,IAAMC,EAAY,CACd/4H,MAAO84H,EAAgBE,WACvB92H,GAAI,kBACJ+I,OAAQ6tH,EAAgBJ,aAG5B17G,IAAWkJ,QAAQpe,KAAK8L,UAAUmlH,QAKlDV,EAASlzF,YAAYob,IAAW1yD,iBAC5Bu2C,EAAW4rF,kBAAkB9kI,KAAKk5C,IAEtCi0F,EAASlzF,YAAY8zF,IAAqB/0C,iBACtC,SAACigC,EAAa2F,GACV1lF,EAAW+/E,YAAcA,EACzB//E,EAAW0lF,aAAeA,EAC1B1lF,EAAWhnB,aAAa6C,KACpB2mB,sBAA2Cu9E,EAC3C2F,KAGZuO,EAASlzF,YACLob,IAAWlzD,iBAGX,SAACsR,EAAKykF,EAAa81C,EAAKC,EAAOC,GAC3B,IAAMl3H,EAAKpM,UAAQoJ,mBAAmBP,GAEtCylC,EAAWhnB,aAAa6C,KACpB2mB,mBACA1kC,EAAIg3H,EAAKE,EAAIh2C,KAGzBi1C,EAASlzF,YACLob,IAAWjzD,yBAGX,SAACqR,EAAKykF,EAAa81C,EAAKC,EAAOC,GAC3B,IAAMl3H,EAAKpM,UAAQoJ,mBAAmBP,GAEtCylC,EAAWhnB,aAAa6C,KACpB2mB,2BACA1kC,EAAIg3H,EAAKE,KAGrBf,EAASlzF,YAAYob,IAAWhyD,gBAC5B,SAACoQ,EAAKsM,GACF,IAAM/I,EAAKpM,UAAQoJ,mBAAmBP,GAChC8vD,EAAcrqB,EAAWkrB,mBAAmBptD,GAE7CusD,GAAeA,EAAYpI,UAAYp7C,IAG5CwjD,EAAYpI,QAAUp7C,EACtBm5B,EAAWhnB,aAAa6C,KACpB2mB,sBAA2C1kC,EAAI+I,MAG3DotH,EAASlzF,YAAYob,IAAWxwD,sBAC5B,SAACiB,EAAM+8B,GACH,IAAM7rB,EAAKpM,UAAQoJ,mBAAmBlO,GAChCy9D,EAAcrqB,EAAWkrB,mBAAmBptD,GAE9CusD,EACArqB,EAAWhnB,aAAa6C,KACpB2mB,4BACA6nB,EAAa1gC,GAEjBlS,EAAO1b,KACH,6EAAA9L,OACkBrD,GAClB+8B,KAIhBsqG,EAAS1N,oBAAoB,aAAc,SAAC32H,EAAMhD,GAC9C,IAAIy6H,GAAc,EAElB,GAAIrnF,EAAWmqB,aAAev9D,GAAQozC,EAAWqnF,cAC7CA,GAAc,MACX,CACH,IAAMh9D,EAAcrqB,EAAWkrB,mBAAmBt+D,GAE9Cy9D,GAAeA,EAAYg9D,gBAC3BA,GAAc,GAItB,GAAKA,EAAL,CAIA,IAAMrH,EAA4C,SAA1BpwH,EAAKsD,WAAWk+B,MAClC6uF,EAA4C,SAA1BrwH,EAAKsD,WAAWi9B,MAEpC8kG,GAAU,EAEVjV,IAAoBhgF,EAAWkgF,iBAAiB9uF,QAChD4O,EAAWkgF,iBAAiB9uF,MAAQ4uF,EACpCiV,GAAU,GAGVhV,IAAoBjgF,EAAWkgF,iBAAiB/vF,QAChD6P,EAAWkgF,iBAAiB/vF,MAAQ8vF,EACpCgV,GAAU,GAGVA,GACAj1F,EAAWhnB,aAAa6C,KACpB2mB,6BACAxC,EAAWkgF,qBAKnBlgF,EAAW/hB,aAEXg2G,EAASlzF,YAAYob,IAAWh0D,sBAC5B,SAAAknB,GACI2wB,EAAW/hB,WAAWe,6BAClB3P,EAAQiL,kBAIpB25G,EAASlzF,YAAYob,IAAW70D,yBAC5B,SAACgI,EAAGimD,GACAvV,EAAW/hB,WAAW4D,0BAA0BvyB,EAAGimD,OAQnEgqE,EAA4Br4H,UAAUw7H,kBAAoB,WACtD,IAAM1iF,EAAappC,KAAKopC,WAClB8nB,EAAM9nB,EAAW8nB,IAEvBA,EAAI/mB,YACA/L,IAAUjG,mBACViR,EAAWupB,mBAAmBziE,KAAKk5C,IAEvC8nB,EAAI/mB,YACA/L,IAAU/F,qBACV+Q,EAAWypB,qBAAqB3iE,KAAKk5C,IAEzC8nB,EAAI/mB,YAAY/L,IAAUjgB,yBACtB,SAAAjX,GACQkiC,EAAW4/E,sBAAwB9hH,GAAMkiC,EAAWugB,OACpDvgB,EAAW4/E,oBAAsB9hH,EACjCkiC,EAAWhnB,aAAa6C,KACpB2mB,2BAAgD1kC,GAEhDkiC,EAAW/hB,YAAc+hB,EAAWmqB,aAAersD,GAEnDkiC,EAAW/hB,WAAWyB,yBAClBsgB,EAAWugB,KAAKjC,YAKpCwJ,EAAI/mB,YAAY/L,IAAUzG,kBAAmB,WACzC,IAAMrjB,EAAMhmB,OAAO82D,YAAY9wC,MACzBrkB,EAAM,sBAGZ4wB,EAAOjc,IAAP,UAAAvL,OAAqBpJ,EAArB,OAA+BqkB,GAC/B80B,EAAWugB,KAAK/F,gBAAgB3zD,GAAOqkB,EACvC0N,IAAW6K,cACPmJ,YAAkC/lC,EAAK,CAAEN,MAAO2kB,KAEpD80B,EAAWhnB,aAAa6C,KAAK2mB,yBAGjCslB,EAAI/mB,YAAY/L,IAAU9f,0BACtB,SAACtoB,EAAM+8B,GACH,IAAM0gC,EAAcrqB,EAAWkrB,mBAAmBt+D,GAE9Cy9D,EACArqB,EAAWhnB,aAAa6C,KACpB2mB,4BACA6nB,EAAa1gC,GAEjBlS,EAAO1b,KACH,sEAAA9L,OACsBrD,GACtB+8B,KAIhBm+B,EAAI/mB,YAAY/L,IAAUvF,oBACtB,SAACjT,EAAKyH,GACGzH,EAAI2kB,OACLvoB,IAAWkJ,QACPpe,KAAK8L,UAAU,CACX1R,GAAI,cACJvX,MAAO09B,OAI3B6jC,EAAI/mB,YAAY/L,IAAUtF,qBACtB,SAAClT,EAAKyH,GACGzH,EAAI2kB,OACLvoB,IAAWkJ,QACPpe,KAAK8L,UAAU,CACX1R,GAAI,eACJvX,MAAO09B,OAK3B6jC,EAAI/mB,YAAY/L,IAAU3G,qBACtB,SAAC/+B,EAAGktB,GACAwjB,EAAW/hB,WAAWyD,uBAAuBpyB,EAAGktB,GAC3CA,EAAI2kB,OACLnB,EAAWhnB,aAAa6C,KAAK2mB,oBACzBgnF,sBAA2Cl6H,KAI3Dw4D,EAAI/mB,YAAY/L,IAAU1G,oBACtB,SAACh/B,EAAGktB,GACAwjB,EAAW/hB,WAAWwD,sBAAsBnyB,EAAGktB,GAC1CA,EAAI2kB,OACLnB,EAAWhnB,aAAa6C,KAAK2mB,oBACzBgnF,sBAA2Cl6H,KAI3Dw4D,EAAI/mB,YAAY/L,IAAU7F,6BACtB,SAAC7/B,EAAGktB,GACAwjB,EAAW/hB,WAAW0D,uBAAuBryB,EAAGktB,GAC3CA,EAAI2kB,OACLnB,EAAWhnB,aAAa6C,KAAK2mB,oBACzBgnF,sBAA2Cl6H,KAI3Dw4D,EAAI/mB,YAAY/L,IAAU5F,8BACtB,SAAC9/B,EAAGktB,GACAwjB,EAAW/hB,WAAW2D,wBAAwBtyB,EAAGktB,GAC5CA,EAAI2kB,OACLnB,EAAWhnB,aAAa6C,KAAK2mB,oBACzBgnF,sBAA2Cl6H,KAI3Dw4D,EAAI/mB,YAAY/L,IAAUnG,yBACtB,SAACyM,EAAOlc,GAKAkc,EAAM2kC,gBAAkB3kC,EAAME,YAAcC,IAAUC,SACtDsE,EAAW/hB,WAAWkB,wBAAuB,EAAMC,MAQnEmgG,EAA4Br4H,UAAUm+H,oBAAsB,WAAW,IAAAjmH,EAAAxI,KAC7DopC,EAAappC,KAAKopC,WAExBA,EAAWnnB,KAAKuiC,KAAKhgC,eACjB+gC,IAAWryD,4BACX8M,KAAKo9H,cAAc73E,IAAWryD,qCAC3B8M,KAAKo9H,cAAc73E,IAAWryD,6BAErC9D,OAAOmW,KAAKvF,KAAKo9H,eAAe9tH,QAAQ,SAAAwd,GACpCsc,EAAWnnB,KAAKuC,eACZsI,EACAtkB,EAAK40H,cAActwG,MAE3B9sB,KAAKo9H,cAAgB,IAOzBzU,EAA4Br4H,UAAU06H,mBAAqB,WACvD,IAAM5hF,EAAappC,KAAKopC,WAElBk1F,EAA0B,SAAAtoI,GAC5B,IAAMy9D,EACArqB,EAAWkrB,mBACbx5D,UAAQoJ,mBAAmBlO,IAE3By9D,GACArqB,EAAWhnB,aAAa6C,KACpB2mB,8BACA6nB,IAIZrqB,EAAWnnB,KAAKuiC,KAAKra,YACjBob,IAAWryD,4BACXorI,GACJt+H,KAAKo9H,cAAc73E,IAAWryD,6BACxBorI,EAENt+H,KAAKu+H,2BACDh5E,IAAWx0D,cACXq4C,EAAW8sF,eAAehmI,KAAKk5C,IACnCppC,KAAKu+H,2BACDh5E,IAAWz0D,cACXs4C,EAAWgsF,eAAellI,KAAKk5C,IACnCppC,KAAKu+H,2BACDh5E,IAAW5wD,eACXy0C,EAAWksF,gBAAgBplI,KAAKk5C,IACpCppC,KAAKu+H,2BACDh5E,IAAWv0D,WACXo4C,EAAWytF,YAAY3mI,KAAKk5C,IAEhCppC,KAAKu+H,2BAA2Bh5E,IAAWhxD,uBACvC,SAACiqI,EAAYC,GACLr1F,EAAWjiC,QAAQusB,OAAOgrG,mBAI9Bt1F,EAAWggF,gBAAkBoV,EAC7Bp1F,EAAWigF,gBAAkBoV,EAI7Br1F,EAAWwD,iBAAiBt9B,QAAQ,SAAAo1B,GAChC,OAAQA,EAAMqI,WACd,KAAKpI,IACDyE,EAAWggF,iBAAmB1kF,EAAM2I,OACpC,MACJ,KAAK1I,IACDyE,EAAWigF,iBAAmB3kF,EAAM2I,UAK5CjE,EAAWhnB,aAAa6C,KAAK2mB,oBAGrC5rC,KAAKu+H,2BAA2Bh5E,IAAWjxD,8BACvC,SAAAqqI,GACIv1F,EAAWhnB,aAAa6C,KAAK2mB,+BAAoD+yF,MAO7FhW,EAA4Br4H,UAAUiuI,2BAA6B,SAC3DzxG,EAAW1I,GACfpkB,KAAKo9H,cAActwG,GAAa1I,EAChCpkB,KAAKopC,WAAWnnB,KAAKkoB,YAAYrd,EAAW1I,IAMhDukG,EAA4Br4H,UAAU+7H,yBAA2B,WAC7D,IAAMjjF,EAAappC,KAAKopC,WAEnBA,EAAW/hB,aAKhB+hB,EAAW/hB,WAAWlD,sBAAsB,SAACyB,EAAK4C,EAAM3jB,EAAOilB,GAC3Dsf,EAAW8nB,IAAIljB,cAAcpoB,EAAK4C,EAAM3jB,EAAOilB,KAMnDsf,EAAW/hB,WAAW5C,0BAA0B,WAC5C2kB,EAAWhnB,aAAa6C,KACpB2mB,gCAIHxC,EAAWjiC,QAAQusB,OAAO6tC,aAC3Bn4B,EAAW/hB,WAAWxC,yBAAyB,SAACe,EAAK6F,GACjD2d,EAAWwD,eAAejI,KAAiBr1B,QAAQ,SAAAo1B,GAC/C,IAAMlc,EAAO5C,EAAI2nF,aAAa7oE,GAEzBlc,GAASiD,EAAMl7B,eAAei4B,IAInCkc,EAAMk6F,yBAAyBh5G,EAAK6F,EAAMjD,uECrqB1D,SAAS+0G,EAAsBz8F,EAAK+9F,GAChC,IAAK/9F,IAAQ+9F,GAAmC,mBAApB/9F,EAAIqJ,aACJ,mBAAd00F,EAAK55G,KACf,MAAM,IAAIvuB,MAAM,qDAEpBsJ,KAAK8gC,IAAMA,EACX9gC,KAAK6+H,KAAOA,EAWhBtB,EAAsBjtI,UAAUmtI,QAAU,WAAkB,QAAAx1F,EAAA9mC,UAAAvL,OAANsyC,EAAM,IAAAzyC,MAAAwyC,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,GAAAhnC,UAAAgnC,GACxD,IAAM22F,EAAW52F,EAAK,GAItBA,EAAK,GAAKloC,KAAK6+H,KAGf7+H,KAAK8gC,IAAIqJ,YACL20F,EACApuE,SAASpgE,UAAUJ,KAAKyjC,MAAM3zB,KAAK6+H,KAAK55G,KAAMijB,KAGtD/5C,EAAOD,QAAUqvI,mSC1BjB,IAAM18G,EAASF,oBAAUQ,GAKJ6yG,aAiBjB,SAAAA,EAAYrwH,EAAKylC,EAAYg/C,EAAa22C,EAAQjL,EAAS7jH,EAAQi2C,gGAAUzmB,CAAAz/B,KAAAg0H,GACzEh0H,KAAKg/H,KAAOr7H,EACZ3D,KAAKi/H,IAAMnkI,UAAQoJ,mBAAmBP,GACtC3D,KAAKk/H,YAAc91F,EACnBppC,KAAKk1H,aAAe9sC,EACpBpoF,KAAKs0H,eAAgB,EACrBt0H,KAAKm1H,QAAU,GACfn1H,KAAKi0H,MAAQ,OACbj0H,KAAKqrD,QAAUp7C,EACfjQ,KAAKm/H,QAAUJ,EACf/+H,KAAKo/H,SAAWtL,EAChB9zH,KAAKq/H,kBAAoBxuE,IAA4BxT,OACrDr9C,KAAKs/H,YAAc,GACnBt/H,KAAKu/H,UAAYr5E,iEAUjB,OAAOlmD,KAAKk/H,gDAMJjwI,GACR,OAAO+Q,KAAKs/H,YAAYrwI,yDAYxB,OACI+Q,KAAKomC,YAAY69C,KACb,SAAAu7C,GAAU,OACNA,EAAWzyF,YAAcpI,KAClB66F,EAAWC,oEASbxvH,GACjBjQ,KAAKq/H,kBAAoBpvH,gDAWzB,OAAOjQ,KAAKq/H,sDASJpwI,EAAMU,GACd,IAAM+vI,EAAW1/H,KAAKs/H,YAAYrwI,GAE9BU,IAAU+vI,IACV1/H,KAAKs/H,YAAYrwI,GAAQU,EACzBqQ,KAAKk/H,YAAY98G,aAAa6C,KAC1B2mB,+BACA5rC,KACA/Q,EACAywI,EACA/vI,wCASR,OAAOqQ,KAAKm1H,QAAQ9yF,qDAQHzL,GACjB,OAAO52B,KAAKomC,YAAYpV,OAAO,SAAA0T,GAAK,OAAIA,EAAMqI,YAAcnW,oCAO5D,OAAO52B,KAAKi/H,qCAOZ,OAAOj/H,KAAKg/H,8CAOZ,OAAOh/H,KAAKk1H,kDAOZ,OAAOl1H,KAAKo/H,6CAOZ,OAAOp/H,KAAKqrD,8CAOZ,MAAsB,cAAfrrD,KAAKi0H,yCASZ,OAAOj0H,KAAKm/H,+CAOZ,OAAOn/H,KAAK2/H,kBAAkBh7F,+CAchB/N,GACd,OAAO52B,KAAKomC,YAAY1gC,OACpB,SAAC4iB,EAAOoc,GAAR,OACIpc,IAAUoc,EAAMqI,YAAcnW,GAAa8N,EAAMmxB,aACrD,0CAOJ,OAAO71D,KAAK2/H,kBAAkBh7F,uCAO9B,OAAO3kC,KAAKi0H,6CAOZ,OAAOj0H,KAAKs0H,oDAQY,IAAA3sH,EAAA3H,KAAhB8N,EAAgB3M,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAN,IAClB,OAAInB,KAAK4/H,oBACE5/H,KAAK4/H,qBAGhB5/H,KAAK4/H,oBAAsB5/H,KAAKk/H,YAAYj9G,KAAKuiC,KAAK6vE,YAAYr0H,KAAKg/H,KAAMlxH,GACxE01B,MAAM,SAAAx+B,GAEH,OAAIA,IAAU++E,IACHp8E,EAAKu3H,YAAYj9G,KAAKuiC,KAAK6vE,YAAY1sH,EAAKq3H,KAAMlxH,IAG7D+S,EAAO1b,KAAP,kCAAA9L,OAA8CsO,EAAKq3H,MAAQh6H,GAEpDo+B,QAAQE,OAAOt+B,MAGvBhF,KAAK4/H,oBACP3/F,KAAK,SAAAx6B,GAGF,OAFAkC,EAAKi4H,yBAAsBr/H,EAEpBkF,GACR,SAAAT,GAGC,MAFA2C,EAAKi4H,yBAAsBr/H,EAErByE,0CAUd,OAAOhF,KAAKk0H,+GCrRpB1lI,EAAAQ,EAAAyuB,EAAA,sBAAAqwG,IAAA,IAAA+R,EAAArxI,EAAA,IAAAsxI,EAAAtxI,EAAA,IA2De,SAASs/H,EAATptF,GAYZ,IAEKq/F,EAFLp4H,EAAA3H,KAVCkH,EAUDw5B,EAVCx5B,GACAo/C,EASD5lB,EATC4lB,SACAmB,EAQD/mB,EARC+mB,iBAIAu4E,EAIDt/F,EAJCs/F,kBAGAC,EACDv/F,EADCu/F,aAEIC,GAAW,EAEXj+G,EAAO,IAAIwhC,IAAKzjD,KAAK0U,WAAWvN,SAE9B8wE,EAAU,IAAI70C,QAAQ,SAACC,EAASC,GAIlCy8F,EAAgBz8F,EAGhBrhB,EAAKkoB,YACDrV,0BACA,WACI7S,OAAO1hB,IAEf0hB,EAAKkoB,YACDh5C,yBACA,WACQ+uI,IAKJF,GAAqBA,IAGR/9G,EAAK6lC,WACdngD,EAAKR,QAAQlY,KACb0Y,EAAKR,QAAQusB,OACb+zB,GAGCwnE,UAAUt9G,eACVsuB,KAAK,WACFhe,GAAQA,EAAKxS,aAETywH,IAOJv4H,EAAKxE,KAAK88H,GAEV58F,OAEHG,MAAM,SAAA5C,GAAwB,IAArB57B,EAAqB47B,EAArB57B,MAAOP,EAAcm8B,EAAdn8B,QACbwd,EAAKxS,aAEL6zB,EAAO,CACH68F,oBAAqBn7H,EACrBP,iBAIpBwd,EAAKkoB,YACD/4C,oBACA,SAACgvI,EAAiB37H,EAAS0gD,GACvB7hB,EAAO,CACH88F,kBACAj7E,cACA1gD,YAEJwd,OAAO1hB,IAGf2/H,GAAYj+G,EAAKtW,QAAQzE,EAAIo/C,KAgBjC,OANA2xB,EAAQu2C,OAAS,WACb0R,GAAW,EACXH,EAAc,IACd99G,GAAQA,EAAKxS,cAGVwoE,8sCCnJX,IAAMp3D,EAASF,oBAAUQ,GAKJ2nC,cAKjB,SAAAA,EAAY7mC,GAAM,IAAAta,EAAA,mGAAA83B,CAAAz/B,KAAA8oD,IACdnhD,EAAA+3B,EAAA1/B,KAAA2/B,EAAAmpB,GAAAj6D,KAAAmR,QACKiiB,KAAOA,EACZta,EAAK88E,MAAQ,GAHC98E,wPAL2B07C,2CAexC3uC,GACDq5E,EAAApuD,EAAAmpB,EAAAx4D,WAAA,OAAA0P,MAAAnR,KAAAmR,KAAW0U,GAGX1U,KAAK0U,WAAWzG,WAAWjO,KAAKqgI,WAAWnwI,KAAK8P,MAAO,KACnD,WAAY,KAAM,KAAM,KAAM,MAClCA,KAAK0U,WAAWzG,WAAWjO,KAAKsgI,sBAAsBpwI,KAAK8P,MACvD,KAAM,WAAY,cAAe,MACrCA,KAAK0U,WAAWzG,WAAWjO,KAAKugI,gBAAgBrwI,KAAK8P,MAAO,KACxD,WAAY,QAAS,MACzBA,KAAK0U,WAAWzG,WAAWjO,KAAKwgI,UAAUtwI,KAAK8P,MAAO,KAClD,UAAW,KAAM,MACrBA,KAAK0U,WAAWzG,WAAWjO,KAAKygI,OAAOvwI,KAAK8P,MACxC,iCAAkC,KAAM,MAAO,KAAM,yCASlD2D,EAAK2iD,EAAUn/C,GACtB,IAAM4hB,EAAUjuB,UAAQiJ,kBAAkBJ,GAE1C,GAAI3D,KAAKykF,MAAM17D,GAAU,CACrB,IAAM+T,EAAS,+BAGf,MADAjc,EAAO7b,MAAM83B,GACP,IAAIpmC,MAAMomC,GAOpB,OALA98B,KAAKykF,MAAM17D,GAAW,IAAI23G,IAAS1gI,KAAK0U,WAAY/Q,EAChD2iD,EAAUtmD,KAAKiiB,KAAM9a,GACzBnH,KAAKoiB,aAAa6C,KACdsgC,IAAW7zD,gBAAiBsO,KAAKykF,MAAM17D,IAEpC/oB,KAAKykF,MAAM17D,mCAOdplB,GACJ3D,KAAKoiB,aAAa6C,KACdsgC,IAAW5zD,kBAAmBqO,KAAKykF,MAAM9gF,WACtC3D,KAAKykF,MAAM9gF,sCAOXgM,GACP,IAAM3Z,EAAO2Z,EAAK/M,aAAa,QAG/B,GAAI+M,EAAK/M,aAAa,QAClB,OAAO,EAGX,IAAM+mD,EAAO3pD,KAAKykF,MAAM3pF,UAAQiJ,kBAAkB/N,IAElD,OAAK2zD,IAKD3W,EAAErjC,GAAM4hB,KAAK,sEACY37B,QACzB+zD,EAAKg3E,yBAGTh3E,EAAK02E,WAAW1wH,IAET,iDAOWA,GAClB,IAAM3Z,EAAO2Z,EAAK/M,aAAa,QACzB+mD,EAAO3pD,KAAKykF,MAAM3pF,UAAQiJ,kBAAkB/N,IAElD,OAAK2zD,IAILA,EAAK22E,sBAAsB3wH,EAAM3Z,IAE1B,2CAOK2Z,GACZ,IAAM3Z,EAAO2Z,EAAK/M,aAAa,QACzB+mD,EAAO3pD,KAAKykF,MAAM3pF,UAAQiJ,kBAAkB/N,IAElD,OAAK2zD,IAILA,EAAK42E,gBAAgB5wH,EAAM3Z,IAEpB,qCAOD8O,GAEN,IAAM9O,EAAO8O,EAAIlC,aAAa,QACxB+mD,EAAO3pD,KAAKykF,MAAM3pF,UAAQiJ,kBAAkB/N,IAElD,OAAK2zD,IAILA,EAAK62E,UAAU17H,EAAK9O,IAEb,kCAOJod,GACH,IAAMpd,EAAOod,EAAGxQ,aAAa,QACvB+mD,EAAO3pD,KAAKykF,MAAM3pF,UAAQiJ,kBAAkB/N,IAGlD,OAAK2zD,IAILA,EAAK82E,OAAOrtH,IAEL,giCChKf,IAAMyN,EAASF,oBAAUQ,GAEZ20B,EAAS,CAClB8qF,YADkB,SACN3/H,EAAYy3H,GACpB,IAD2B,IAAAmI,EACPprI,MAAMO,KAAKiL,EAAW4xF,UAA1CpwF,EAAA,EAAAA,EAAAo+H,EAAAjrI,OAAA6M,IAAqD,CAOjD,IAPC,IAAMmD,EAAKi7H,EAAAp+H,GACNvB,EAAO,CACT5E,WAAY,GACZu2F,SAAU,GACV1yF,QAASyF,EAAMzF,SAJ8B2gI,EAO9BrrI,MAAMO,KAAK4P,EAAMtJ,YAApC8G,EAAA,EAAAA,EAAA09H,EAAAlrI,OAAAwN,IAAiD,CAA5C,IAAM7B,EAAIu/H,EAAA19H,GACXlC,EAAK5E,WAAWiF,EAAKtS,MAAQsS,EAAK5R,MAEtC,IAAMgS,EAAO7G,UAAQuH,QAAQuD,GAEzBjE,IAIAT,EAAKvR,MAAQmL,UAAQ+G,YAAYF,IAErC+2H,EAAMx1H,KAAKhC,GACXlB,KAAK4gI,YAAYh7H,EAAO1E,EAAK2xF,YAGrCkuC,YAxBkB,SAwBNrI,EAAOsI,GACf,IAAK,IAAItyI,EAAI,EAAGA,EAAIgqI,EAAM9iI,OAAQlH,IAAK,CACnC,IAAMwS,EAAOw3H,EAAMhqI,GAEfwS,IACA8/H,EAAOjyI,EAAEmS,EAAKf,QAASe,EAAK5E,YACxB4E,EAAKvR,OACLqxI,EAAOpxI,EAAEsR,EAAKvR,OAEduR,EAAK2xF,UACL7yF,KAAK+gI,YAAY7/H,EAAK2xF,SAAUmuC,GAEpCA,EAAO76H,SAcvB,SAAS86H,EAA2BtxH,EAAMnN,GAGtC,IAFA,IAAM4hC,EAAM,GAEH11C,EAAI,EAAGA,EAAIihB,EAAK/Z,OAAQlH,IACzBihB,EAAKjhB,GAAGyR,UAAYqC,GACpB4hC,EAAIlhC,KAAKyM,EAAKjhB,IAItB,OAAO01C,MAUUs8F,cAejB,SAAAA,EAAYhsH,EAAY/Q,EAAK2iD,EAAU7C,EAAMt8C,GAAS,IAAAQ,EAAA,mGAAA83B,CAAAz/B,KAAA0gI,IAClD/4H,EAAA+3B,EAAA1/B,KAAA2/B,EAAA+gG,GAAA7xI,KAAAmR,QACKiiB,KAAOwhC,EACZ97C,EAAK+M,WAAaA,EAClB/M,EAAK+/C,QAAU5sD,UAAQiJ,kBAAkBJ,GACzCgE,EAAK4pH,UAAY5tH,EACjBgE,EAAK2+C,SAAWA,EAChBzlC,EAAO3b,KAAP,iBAAA7L,OAA6BsO,EAAK4pH,YAClC5pH,EAAKu5H,QAAU,GACfv5H,EAAK8wH,QAAU,GACf9wH,EAAKw5H,aAAe,GACpBx5H,EAAKy5H,qBAAuB,GAC5Bz5H,EAAKqmH,QAAS,EACdrmH,EAAKgxD,KAAO,KACZhxD,EAAKwqF,YAAc,KACnBxqF,EAAK05H,mBAAoB,EACzB15H,EAAKR,QAAUA,GAAW,GAC1BQ,EAAKsnH,UACC,IAAIqS,IAAU35H,EAAK+/C,QAAS//C,EAAKsa,KAAMta,EAAKya,aAAc,CACxD1N,WAAY/M,EAAKsa,KAAK9a,QACtBiiC,WAAYzhC,EAAKR,UAEzBQ,EAAK45H,gBAAgBp6H,GACrBQ,EAAK65H,cAAgB,GACrB75H,EAAK85H,YAAc,KACnB95H,EAAK+5H,SAAW,KAChB/5H,EAAKi8C,gBAAkB,GACvBj8C,EAAKg6H,4BAA8B,KAEnCh6H,EAAKi6H,QAAS,EACdj6H,EAAKopH,oBAAsB8Q,MA9BuBl6H,wPAfpBi4B,wDAqDJ,IAAdz4B,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACtBnB,KAAKy4H,QAAQtlH,GAAKnT,KAAKuxH,UACvBvxH,KAAKy4H,QAAQqJ,IAAM,iCACnB9hI,KAAKy4H,QAAQC,MAAQ,GAEjBvxH,EAAQikH,SACRprH,KAAKy4H,QAAQC,MAAMx1H,KAAK,CACpB/C,QAAW,WACXxQ,MAASwX,EAAQikH,UAOzBprH,KAAK+hI,wBAAuB,GAExB56H,EAAQ+hD,gBAAkB/hD,EAAQ+hD,eAAeykE,YACjD3tH,KAAKy4H,QAAQC,MAAMx1H,KAAK,CACpB/C,QAAW,SACX7D,WAAc,CACV4K,GAAIC,EAAQ+hD,eAAeykE,WAC3B1nH,MAAO,8DAYlBqgD,GAAU,IAAA99C,EAAAxI,KAGX,OAFAA,KAAKsmD,SAAWA,EAET,IAAIljB,QAAQ,SAAAC,GACf76B,EAAKrB,QAAQ66H,cACNnhH,EAAO3b,KAAK,8BAGbsD,EAAKrB,QAAQ66H,aACT5+F,QAAQC,UACR76B,EAAKymH,UAAUgT,2BAEjBhiG,KAAK,WACTz3B,EAAKoF,cAAa,GAClBpF,EAAK44H,qBAAqBl+H,KACtBsF,EAAKkM,WAAW6tB,iBACZ6hB,IAAeuH,OAAOZ,oBACtBviD,EAAK05H,oBAAoBhyI,KAAKsY,KAEtC66B,6CASC8+F,GACT,IAAMhvH,EAAKnT,KAAKy4H,QAAQtlH,GAExB,GAAKnT,KAAK0U,YAAe1U,KAAK0U,WAAW5K,WAAcqJ,IAAQnT,KAAKguH,QAAWmU,GAA/E,CAKA,IAAMxyH,EAAO1U,gBAAM,CAAEkY,OAOjBgvH,IACAxyH,EAAK5gB,EAAE,IAAK,CAAEkX,MAAOjG,KAAKy4H,QAAQqJ,MAE9B9hI,KAAKsmD,UACL32C,EAAK5gB,EAAE,YAAYa,EAAEoQ,KAAKsmD,UAAUngD,KAExCwJ,EAAKxJ,MAGT2vC,EAAOirF,YAAY/gI,KAAKy4H,QAAQC,MAAO/oH,GACvC3P,KAAK0U,WAAWnH,KAAKoC,GACjBwyH,GAKAniI,KAAK0U,WAAWhH,2CASpBmT,EAAOjc,IAAI,WAAY5E,KAAKuxH,WAC5B,IAAM5hH,EAAO1U,gBAAM,CAAEkY,GAAInT,KAAKuxH,UAC1BtqH,KAAM,gBAEVjH,KAAKy4H,QAAQ7iI,OAAS,GAerBoK,KAAK0U,WAAW4zC,kBAAoBtoD,KAAK0U,WAAWhH,QACrD1N,KAAK0U,WAAWnH,KAAKoC,GACrB3P,KAAK0U,WAAWhH,gDAMJ,IAAAK,EAAA/N,KAGNoiI,EACApnI,cAAI,CACFiM,KAAM,MACNkM,GAAInT,KAAK0nD,UAER34D,EAAE,QAAS,CAAEkX,MAAOnL,UAAQK,GAAGO,aAExCsE,KAAK0U,WAAWpG,OAAO8zH,EAAS,SAAA38H,GAC5B,IAAMm8H,EAGM,IAFN5uF,EAAEvtC,GAAQ8rB,KAAK,+CACZ37B,OAGLgsI,IAAW7zH,EAAK6zH,SAChB7zH,EAAKqU,aAAa6C,KAAKsgC,IAAWzyD,iBAAkB8uI,GACpD7zH,EAAK6zH,OAASA,GAGlB,IAAMS,EACArvF,EAAEvtC,GAAQ8rB,KAAK,qEAEjB8wG,EAAezsI,OACfmY,EAAKu0H,aAAaD,EAAe1gI,QAEjCkf,EAAOm0B,MAAM,+BAElB,SAAAhwC,GACC+3B,IAAqBC,iBAAiBh4B,GACtC6b,EAAO7b,MAAM,4BAA6BA,0CAUrCk3H,GACLl8H,KAAKk8H,YAAcA,IACfl8H,KAAKk8H,WACLr7G,EAAO1b,KAAP,2BAAA9L,OAAuC2G,KAAKk8H,UAA5C,QAAA7iI,OAA4D6iI,IAEhEl8H,KAAKk8H,UAAYA,EACjBl8H,KAAKoiB,aAAa6C,KAAKsgC,IAAWnzD,eAAgB8pI,qDAUtD,IAAMqG,EAAUvnI,cAAI,CAAEiM,KAAM,MACxBkM,GAAInT,KAAK0nD,UACR34D,EAAE,QAAS,CAAEkX,MAAO,yCACpBlX,EAAE,IAAK,CAAEkX,MAAO,gBACbgB,KAAM,WAER/R,EAAO8K,KAEbA,KAAK0U,WAAWpG,OAAOi0H,EAAS,SAAAC,GAC5B,IAAKxvF,EAAEwvF,GAAMjxG,KACL,qEACwC37B,OAAQ,CACpD,IAAMknC,EAAS,oCAKf,OAHAC,IAAqBC,iBAAiB,IAAItmC,MAAMomC,SAChDjc,EAAO7b,MAAM83B,GAKjB,IAAM2lG,EAAaznI,cAAI,CAAEmY,GAAIje,EAAKwyD,QAC9BzgD,KAAM,QACLlY,EAAE,QAAS,CAAEkX,MAAO,yCAEzBw8H,EAAW1zI,EAAE,IAAK,CAAEkX,MAAO,gBACvBgB,KAAM,WAEVw7H,EAAW1zI,EAAE,QAAS,CAAE2zI,IAAO,cAC1B3zI,EAAE,SACFa,EAAE,6CAA6CuW,KAAKA,KAEzDs8H,EAAW1zI,EAAE,QAAS,CAAE2zI,IAAO,yBAC1B3zI,EAAE,SAASa,EAAE,UAAUuW,KAAKA,KAEjCjR,EAAKwf,WAAWpG,OAAOm0H,IAExB,SAAAz9H,GACC+3B,IAAqBC,iBAAiBh4B,GACtC6b,EAAO7b,MAAM,0CAA2CA,iDAS5CiL,GAEZA,IAAWm0C,IAAe3mD,OAAOM,WACjCiC,KAAK4N,kDAQF+B,GACP,IAAM3Z,EAAO2Z,EAAK/M,aAAa,QACzB+/H,EAAS,GACTC,EAAWjzH,EAAKqB,qBAAqB,UAAU,GAEjD4xH,IACAD,EAAO1yH,OAAS2yH,EAAStrH,aAAe,IAE5C,IAAIurH,GAAkB,EAClBC,GAAmB,EACjBC,EACApzH,EAAK6B,uBACH,sCAAuC,KAAK,GAC9CwxH,EACAD,GAAYA,EAAS/xH,qBAAqB,QAAQ,GAExD2xH,EAAOM,YACDD,GAAeA,EAAYpgI,aAAa,eAC9C+/H,EAAOhqE,KAAOqqE,GAAeA,EAAYpgI,aAAa,QAGtD,IAAMe,EAAMq/H,GAAeA,EAAYpgI,aAAa,OAEpD+/H,EAAOh/H,IAAMA,EACbg/H,EAAOxM,QACDxyH,GAA+D,IAAxDA,EAAIC,QAAJ,GAAAvK,OAAe2G,KAAKivH,UAAUiU,kBAA9B,MACbP,EAAOQ,eACDx/H,GAAOA,EAAIC,QAAQ,KAAO,GACrB5D,KAAKmH,QAAQsrH,eACR9uH,EAAI8pB,UAAU9pB,EAAIC,QAAQ,KAAO,EAAGD,EAAIC,QAAQ,MAEhE5D,KAAKoiB,aAAa6C,KAAKsgC,IAAWjyD,kBAAmB,CACjD8vI,iBAAkBT,EAAOQ,eACzBtlE,SAAUluD,IAGd,IAAM0zH,EAAM1zH,EAAK0H,cAAc,KAE3BgsH,GACAA,EAAIt9D,SAGR,IAAM2yD,EAAQ,GAEd5iF,EAAO8qF,YAAYjxH,EAAM+oH,GACzB14H,KAAKwhI,cAAcxrI,GAAQ0iI,EA4B3B,IAxBA,IAAM4K,EAA6B,SAAApiI,GAC/B,IAAMglD,EAAW,GACXq9E,EAAWriI,EAAK2xF,SAASthE,KAAK,SAAAxiC,GAAC,MAAkB,SAAdA,EAAEoR,UAE3C,GAAIojI,EAAU,CACVr9E,EAAS3+C,KAAO,GAChB,IAFU,IAAAi8H,EAEQ,CAAE,KAAM,OAAQ,UAFxBrzF,EAAA,WAEL,IAAM/yC,EAAGomI,EAAAlgI,GACJsC,EACA29H,EAAS1wC,SAASthE,KAAK,SAAAxiC,GAAC,OAAIA,EAAEoR,UAAY/C,IAE5CwI,IACAsgD,EAAS3+C,KAAKnK,GAAOwI,EAAMjW,QALnC2T,EAAA,EAAAA,EAAAkgI,EAAA5tI,OAAA0N,IAA8C6sC,IASlD,IAAM+K,EAAYh6C,EAAK2xF,SAASthE,KAAK,SAAAxiC,GAAC,MAAkB,UAAdA,EAAEoR,UAM5C,OAJI+6C,IACAgL,EAAS10B,MAAQ0pB,EAAUvrD,OAGxBu2D,GAGFx3D,EAAI,EAAGA,EAAIgqI,EAAM9iI,OAAQlH,IAAK,CACnC,IAAMwS,EAAOw3H,EAAMhqI,GAEnB,OAAQwS,EAAKf,SACb,IAAK,MAAO,IACA7D,EAAe4E,EAAf5E,WAER,IAAKA,EACD,MAJI,IAMA2K,EAAS3K,EAAT2K,KAER07H,EAAO5O,QAAU9sH,EACjB,MAEJ,IAAK,OACD07H,EAAO9O,KAAO3yH,EAAKvR,MACnB,MACJ,IAAK,SACDgzI,EAAOz7H,GAAKhG,EAAKvR,MACjB,MACJ,IAAK,WACDgzI,EAAO7O,QAAU5yH,EAAKvR,MACtB,MACJ,IAAK,WACDgzI,EAAOz8E,SAAWo9E,EAA2BpiI,GAC7C,MACJ,IAAK,OAAQ,IACD5E,EAAe4E,EAAf5E,WAER,IAAKA,EACD,MAIS,YAFIA,EAATrN,OAGJ0zI,EAAOjnH,QAAUpf,EAAW3M,QAOxC,GAAIqG,IAASgK,KAAKuxH,UAAW,CACzB,IAAMkS,EACuB,UAAvBd,EAAOM,YAA0BN,EAAOhqE,KAAO,OAQrD,GANI34D,KAAK24D,OAAS8qE,IACdzjI,KAAK24D,KAAO8qE,EACZzjI,KAAKoiB,aAAa6C,KACdsgC,IAAWpzD,mBACX6N,KAAK24D,QAER34D,KAAKguH,OAAQ,CACdhuH,KAAKguH,QAAS,EACd,IAAM15G,EAAMtU,KAAK4jD,gBAAgB,cAC3Bt1D,OAAO82D,YAAY9wC,MAEzBuM,EAAOjc,IAAI,uBAAwB0P,GAG/BtU,KAAKsmD,WACLtmD,KAAK4hI,QAAS,GAKlB5hI,KAAK4N,eAEL5N,KAAKoiB,aAAa6C,KAAKsgC,IAAW9yD,YAIlCuN,KAAK0jI,sBAEN,QAAYnjI,IAARoD,EACPkd,EAAO3b,KAAK,2CACT,QAA2B3E,IAAvBP,KAAKkhI,QAAQlrI,GAEpBgK,KAAKkhI,QAAQlrI,GAAQ2sI,EACrB9hH,EAAOjc,IAAI,UAAW5O,EAAM2sI,GAC5BE,OAAoCtiI,IAAlBoiI,EAAO1yH,OACzB6yH,OAAsCviI,IAAnBoiI,EAAOjnH,QACtBinH,EAAOxM,QACPn2H,KAAK2jI,WAAW3tI,EAAM2N,IAKtB3D,KAAKoiB,aAAa6C,KACdsgC,IAAW7yD,kBACXsD,EACA2sI,EAAO9O,KACP8O,EAAOhqE,KACPgqE,EAAOQ,eACPR,EAAO7O,QACP6O,EAAO1yH,OACP0yH,EAAOz8E,SACPy8E,EAAO5O,SAIX8O,GAAkB,OAEnB,CAGH,IAAMe,EAAe5jI,KAAKkhI,QAAQlrI,GAE9B4tI,EAAajrE,OAASgqE,EAAOhqE,OAC7BirE,EAAajrE,KAAOgqE,EAAOhqE,KAC3B34D,KAAKoiB,aAAa6C,KACdsgC,IAAW1yD,iBAAkBmD,EAAM2sI,EAAOhqE,OAI9CirE,EAAa7P,UAAY4O,EAAO5O,UAChC6P,EAAa7P,QAAU4O,EAAO5O,QAC9B/zH,KAAKoiB,aAAa6C,KACdsgC,IAAWhzD,4BACXyD,EACA2sI,EAAO5O,UAGX4O,EAAOxM,UAWPyN,EAAazN,SAAU,EACvBn2H,KAAK2jI,WAAW3tI,EAAM2N,IAItBg/H,EAAOv6C,cACPw7C,EAAax7C,YAAcu6C,EAAOv6C,aAIlCw7C,EAAa3zH,SAAW0yH,EAAO1yH,SAC/B4yH,GAAkB,EAClBe,EAAa3zH,OAAS0yH,EAAO1yH,QAG7B2zH,EAAaloH,UAAYinH,EAAOjnH,UAChConH,GAAmB,EACnBc,EAAaloH,QAAUinH,EAAOjnH,SAMtC,IAAK,IAAIhtB,EAAI,EAAGA,EAAIgqI,EAAM9iI,OAAQlH,IAAK,CACnC,IAAMwS,EAAOw3H,EAAMhqI,GAEnB,OAAQwS,EAAKf,SACb,IAAK,OACD,IAAKwiI,EAAOxM,QAAS,CACjB,IAAM/tC,EACApoF,KAAKiiB,KAAK9a,QAAQ08H,YACd/oI,UAAQoJ,mBAAmBlO,GAC3B2sI,EAAO9O,KAEjB7zH,KAAKoiB,aAAa6C,KACdsgC,IAAW9zD,qBACXuE,EACAoyF,GAER,MACJ,IAAK,qBACGu6C,EAAOxM,UAAYn2H,KAAKqhI,oBACxBrhI,KAAKqhI,mBAAoB,EACzBrhI,KAAKoiB,aAAa6C,KAAKsgC,IAAW10D,cAEtC,MACJ,IAAK,wBACD,GAAI8xI,EAAOxM,QAAS,CAGhB,IAFA,IAAMvpG,EAAa,GAEVr0B,EAAI,EAAGA,EAAI2I,EAAK2xF,SAASj9F,OAAQ2C,IAAK,KACnC+D,EAAe4E,EAAK2xF,SAASt6F,GAA7B+D,WAEJA,GAAcA,EAAWrM,MACzB28B,EAAWtwB,EAAWrM,KAAOqM,EAAW3M,OAIhDqQ,KAAKoiB,aAAa6C,KACdsgC,IAAWr0D,8BAA+B07B,GAElD,MACJ,IAAK,uBAAwB,IACjBtwB,EAAe4E,EAAf5E,WAER,IAAKA,EACD,MAJqB,IAOjB2T,EAAW3T,EAAX2T,OAEJA,GAAUA,IAAWjQ,KAAK+wH,sBAC1B/wH,KAAK+wH,oBAAsB9gH,EAC3BjQ,KAAKoiB,aAAa6C,KACdsgC,IAAW7wD,6BACXub,IAKR,MAEJ,IAAK,eACD,IAAM6zH,EAAM5iI,EAAK5E,WAEjB,IAAKwnI,EACD,MAEJ9jI,KAAKyhI,YAAcqC,EAAIC,OAAS,KAChC/jI,KAAK0hI,SAAWoC,EAAIE,KAAO,KAC3BhkI,KAAKoiB,aAAa6C,KAAKsgC,IAAWlyD,sBAClC,MAEJ,QACI2M,KAAKikI,YAAY/iI,EAAMlL,IAK3B6sI,GACA7iI,KAAKoiB,aAAa6C,KACdsgC,IAAWhyD,gBACXyC,EACA2sI,EAAO1yH,QAGX6yH,GACAjiH,EAAO3b,KAAP,wBAAA7L,OAAoCsK,EAApC,MAAAtK,OAA4CspI,EAAOjnH,6CAShD1lB,EAAMgjI,GACbh5H,KAAKmyF,YAAcn8F,EAEnB6qB,EAAO3b,KAAP,iBAAA7L,OAA6BrD,EAA7B,gBAAAqD,OAAgD2/H,2DAOrB50G,GAC3BpkB,KAAK2hI,4BAA8Bv9G,sCAQ3BljB,EAAMlL,GAGd,IACI,IAAIkuI,EAAclkI,KAAKmhI,aAAajgI,EAAKf,SAErCe,EAAKf,QAAQsyB,WAAW,wBACxByxG,EAAc,CAAElkI,KAAK2hI,8BAGrBuC,GACAA,EAAY50H,QAAQ,SAAA/K,GAChBA,EAAQrD,EAAMpG,UAAQoJ,mBAAmBlO,GAAOA,KAG1D,MAAO0C,GACLqkC,IAAqBC,iBAAiBtkC,GACtCmoB,EAAO7b,MAAP,oBAAA3L,OAAiC6H,EAAKf,QAAtC,UAAuDzH,wCAUnD+L,EAASsrH,EAAaoU,GAC9B,IAAMr/H,EAAMqR,eAAK,CAAEhD,GAAInT,KAAK0nD,QACxBzgD,KAAM,cAKU,SAAhB8oH,EACAjrH,EAAI/V,EAAEghI,EAAatrH,GAAS0B,KAE5BrB,EAAI/V,EAAEghI,EAAa,CAAE9pH,MAAO,4BAA8BxB,GACrD0B,KAELg+H,GACAr/H,EAAI/V,EAAE,OAAQ,CAAEkX,MAAO,oCAClBrW,EAAEu0I,GACFh+H,KACAA,KAETnG,KAAK0U,WAAWnH,KAAKzI,GACrB9E,KAAKoiB,aAAa6C,KAAKsgC,IAAWrxD,qBAAsBuQ,8CAWzCyC,EAAIzC,EAASsrH,EAAaoU,GACzC,IAAMr/H,EAAMqR,eAAK,CAAEhD,GAAE,GAAA9Z,OAAK2G,KAAK0nD,QAAV,KAAAruD,OAAqB6N,GACtCD,KAAM,SAKU,SAAhB8oH,EACAjrH,EAAI/V,EAAEghI,EAAatrH,GAAS0B,KAE5BrB,EAAI/V,EAAEghI,EAAa,CAAE9pH,MAAO,4BAA8BxB,GACrD0B,KAELg+H,GACAr/H,EAAI/V,EAAE,OAAQ,CAAEkX,MAAO,oCAClBrW,EAAEu0I,GACFh+H,KACAA,KAGTnG,KAAK0U,WAAWnH,KAAKzI,GACrB9E,KAAKoiB,aAAa6C,KACdsgC,IAAWpxD,6BAA8BsQ,sCAQtC+rH,GACP,IAAM1rH,EAAMqR,eAAK,CAAEhD,GAAInT,KAAK0nD,QACxBzgD,KAAM,cAEVnC,EAAI/V,EAAE,UAAWyhI,GACjBxwH,KAAK0U,WAAWnH,KAAKzI,6CASPnB,EAAKygI,UACZpkI,KAAKwhI,cAAc79H,GAEtBygI,IAIJpkI,KAAKoiB,aAAa6C,KAAKsgC,IAAW5yD,gBAAiBgR,GAEnD3D,KAAKivH,UAAUoV,gBAAgB1gI,kDAQbgM,EAAM3Z,GAAM,IAAAuY,EAAAvO,KAE9B,GAAIgzC,EAAErjC,GAAM4hB,KAAK,8CAA8C37B,OAC3D,OAAO,EAIX,GAAIo9C,EAAErjC,GAAM4hB,KAAK,2DACC37B,OAAQ,CACtB,IAAI8Z,EACE40H,EACAtxF,EAAErjC,GAAM4hB,KACN,kEAUR,OAPI+yG,EAAa1uI,SACb8Z,EAAS40H,EAAa3iI,QAG1B3B,KAAKoiB,aAAa6C,KAAKsgC,IAAW/yD,cAAekd,GACjD1P,KAAK0U,WAAWmzC,KAAK08E,QAAQvkI,KAAK0nD,UAE3B,EAIX,IAAMktE,EACA5hF,EAAErjC,GACC4hB,KACG,sEAEH37B,OACH4uI,EACAxxF,EAAErjC,GACC4hB,KACG,sEAEH37B,OACH6uI,EAAcr1I,OAAOmW,KAAKvF,KAAKkhI,SAErC,GAAIsD,EAAQ,CACR,IAIIE,EAJEC,EACA3xF,EAAErjC,GACH4hB,KAAK,8DAINozG,EAAY/uI,SACZ8uI,EAAYC,EAAYpjI,KAAK,SAK7BkjI,EAAYlzG,KAAK,SAAA5tB,GAAG,OAAI7I,UAAQoJ,mBAAmBP,KAAS+gI,KAI5D1kI,KAAKoiB,aAAa6C,KACdsgC,IAAWrzD,OACX0iI,EACA8P,EACA5pI,UAAQoJ,mBAAmBlO,IAIlC4+H,EAGM6P,EAAY7uI,OAAS,IAI5B6uI,EAAYn1H,QAAQ,SAAA3L,GAChB,IAAMg/H,EAASp0H,EAAK2yH,QAAQv9H,UAErB4K,EAAK2yH,QAAQv9H,GACpB4K,EAAKq2H,kBAAkBjhI,EAAKg/H,EAAOxM,WAEvCn2H,KAAK0U,WAAWmzC,KAAK08E,QAAQvkI,KAAK0nD,SAI7B88E,GACDxkI,KAAKoiB,aAAa6C,KAAKsgC,IAAW3yD,mBAjB/BoN,KAAKkhI,QAAQlrI,GACpBgK,KAAK4kI,kBAAkB5uI,GAAM,sCA0B3B8O,EAAK9O,GACX,IAAM69H,EACA7gF,EAAEluC,GAAKysB,KAAK,kDACT5vB,QACF7G,UAAQoJ,mBAAmBlO,GAE5BiR,EAAOnC,EAAIlC,aAAa,QAE9B,GAAa,UAATqE,EAAkB,CAClB,IAAM6uH,EAAW9iF,EAAEluC,GAAKysB,KAAK,eAAe5vB,OAI5C,OAFA3B,KAAKoiB,aAAa6C,KAAKsgC,IAAWt0D,oBAAqB6kI,IAEhD,EAGX,IAAMoI,EAAMlrF,EAAEluC,GAAKysB,KAAK,SAAS5vB,OAC3B6uH,EAAUx9E,EAAEluC,GAAKysB,KAAK,YAE5B,GAAIi/F,EAAQ56H,OAAQ,CAChB,IAAMivI,EAAcrU,EAAQ7uH,QAExBkjI,GAA+B,KAAhBA,KACf7kI,KAAKoiB,aAAa6C,KAAKsgC,IAAW/wD,gBAAiBqwI,GACnDhkH,EAAOjc,IAAP,yBAAAvL,OAAoCwrI,KAK5C,IAAIC,EAAQ9xF,EAAEluC,GAAKysB,KAAK,UAAUhwB,KAAK,SAEvC,IAAKujI,IAEDA,EAAQ9xF,EAAEluC,GAAKysB,KAAK,6BAA6BhwB,KAAK,UAE3C,CAEP,IAAMwjI,EACAD,EAAMrxH,MAAM,2CAElBqxH,EAAK,GAAAzrI,OAAM0rI,EAAU,GAAhB,KAAA1rI,OAAsB0rI,EAAU,GAAhC,KAAA1rI,OAAsC0rI,EAAU,GAAhD,KAIT/uI,IAASgK,KAAK0nD,SACP1U,EAAEluC,GAAKysB,KAAK,sEAAsE37B,QACzFoK,KAAK0jI,gBAET,IAAM55E,EAAc9W,EAAEluC,GAAKysB,KAAK,iBAAiB5vB,OAC3CooD,EAAa/pD,KAAKiiB,KAAK+nC,sBAAsBF,GAK/CC,QAAwBxpD,IAAVukI,EACd9kI,KAAKoiB,aAAa6C,KAAKsgC,IAAWxwD,sBAC9BiB,EAAM+zD,GAKVm0E,IACa,SAATj3H,EACAjH,KAAKoiB,aAAa6C,KAAKsgC,IAAWjzD,yBAC1B0D,EAAM69H,EAAMqK,EAAKl+H,KAAKuxH,UAAWuT,GACzB,cAAT79H,GACPjH,KAAKoiB,aAAa6C,KAAKsgC,IAAWlzD,iBAC1B2D,EAAM69H,EAAMqK,EAAKl+H,KAAKuxH,UAAWuT,4CAUrCn1H,EAAM3Z,GAClB,GAAIg9C,EAAErjC,GACG4hB,KACG,mFAGH37B,OACLirB,EAAOjc,IAAI,uBAAwB5O,GACnCgK,KAAKoiB,aAAa6C,KAAKsgC,IAAWpyD,wBAC/B,GAAI6/C,EAAErjC,GACJ4hB,KACG,kFAGH37B,OAAQ,CACIkF,UAAQ+I,iBAAiB8L,EAAK/M,aAAa,SAE3C5C,KAAKiiB,KAAK9a,QAAQkgD,MAAMC,gBAKrCtnD,KAAKoiB,aAAa6C,KAAKsgC,IAAWvxD,kBAGlC6sB,EAAO1b,KAAK,eAAgBwK,GAC5B3P,KAAKoiB,aAAa6C,KACdsgC,IAAWxxD,sCAEZi/C,EAAErjC,GAAM4hB,KAAK,8BAA8B37B,QAClDirB,EAAO1b,KAAK,oDACRwK,GACJ3P,KAAKoiB,aAAa6C,KAAKsgC,IAAWtxD,wBAElC4sB,EAAO1b,KAAK,eAAgBwK,GAC5B3P,KAAKoiB,aAAa6C,KAAKsgC,IAAWzxD,kDAQrC6P,GACD,IAAMqhI,EAAShqI,cAAI,CAAEmY,GAAInT,KAAK0nD,QAC1BzgD,KAAM,QACLlY,EAAE,QAAS,CAAEkX,MAAO,yCACpBlX,EAAE,OAAQ,CAAE8kI,KAAM/4H,UAAQoJ,mBAAmBP,GAC1Cg1D,KAAM,SACT5pE,EAAE,UAAUa,EAAE,yBAAyBuW,KAAKA,KAAKA,KAEtDnG,KAAK0U,WAAWpG,OACZ02H,EACA,SAAAv/H,GAAM,OAAIob,EAAOjc,IAAI,8BAA+BjB,EAAK8B,IACzD,SAAAT,GAAK,OAAI6b,EAAOjc,IAAI,2BAA4BI,sCAY/C/U,EAAKyjB,EAAWuxH,EAASC,GAAgB,IAAAv2H,EAAA3O,KAE9CA,KAAK0U,WAAWpG,OACZtT,cAAI,CACAmY,GAAInT,KAAK0nD,QACTzgD,KAAM,QAELlY,EAAE,QAAS,CAAEkX,MAAO,yCACzB,SAAAm+B,GACI,GAAI4O,EAAE5O,GACG7S,KACG,0EAEH37B,OAAQ,CACb,IAAMuvI,EACAnqI,cAAI,CACFmY,GAAIxE,EAAK+4C,QACTzgD,KAAM,QAELlY,EAAE,QAAS,CACRkX,MAAO,yCAGnBk/H,EAAWp2I,EAAE,IAAK,CACdkX,MAAO,gBACPgB,KAAM,WAEVk+H,EACKp2I,EAAE,QAAS,CAAE2zI,IAAO,cACpB3zI,EAAE,SACFa,EAAE,6CACFuW,KACAA,KACLg/H,EACKp2I,EAAE,QAAS,CAAE2zI,IAAO,8BACpB3zI,EAAE,SACFa,EAAEK,GACFkW,KACAA,KACLg/H,EACKp2I,EAAE,QACE,CAAE2zI,IAAO,yCACb3zI,EAAE,SACFa,EAAU,OAARK,GAA+B,IAAfA,EAAI2F,OAAe,IAAM,KAC3CuQ,KACAA,KAILg/H,EACKp2I,EAAE,QAAS,CAAE2zI,IAAO,yBACpB3zI,EAAE,SACFa,EAAE,UACFuW,KACAA,KAELwI,EAAK+F,WAAWpG,OAAO62H,EAAYzxH,EAAWuxH,QAE9CC,KAGRD,yCAUMh1I,EAAKs1B,GACfA,EAAOplB,QAAUlQ,EACjB+P,KAAKswH,mBAAmBrgI,GACxB+P,KAAKy4H,QAAQC,MAAMx1H,KAAKqiB,2CASZt1B,GACZ,OAAO+P,KAAKy4H,QAAQC,MAAMnnG,KAAK,SAAArwB,GAAI,OAAIjR,IAAQiR,EAAKf,qDAOrClQ,GACf,IAAMyoI,EAAQ14H,KAAKy4H,QAAQC,MAAM1nG,OAAO,SAAA9vB,GAAI,OAAIjR,IAAQiR,EAAKf,UAE7DH,KAAKy4H,QAAQC,MAAQA,8CAQLzpI,EAAMsV,GACtB,GAAuB,mBAAZA,EACP,MAAM,IAAI7N,MAAM,+BAEpB,IAAIwtI,EAAclkI,KAAKmhI,aAAalyI,GAE/Bi1I,IACDlkI,KAAKmhI,aAAalyI,GAAQi1I,EAAc,KAEN,IAAlCA,EAAYtgI,QAAQW,GACpB2/H,EAAYhhI,KAAKqB,GAEjBsc,EAAO1b,KAAP,sDAAA9L,OAC0DpK,mDAS3CA,EAAMsV,GACzB,IAAM2/H,EAAclkI,KAAKmhI,aAAalyI,GAChCm2I,EAAalB,EAAcA,EAAYtgI,QAAQW,IAAY,GAG7C,IAAhB6gI,EACAlB,EAAYjgI,OAAOmhI,EAAY,GAE/BvkH,EAAO1b,KAAP,gBAAA9L,OAA4BpK,EAA5B,wDAYA+pI,GACJ,IAAM2J,EAAS3iI,KAAKkhI,QAAQlI,GAE5B,OAAI2J,EACOA,EAAOxM,QAGX,2CAOP,MAAqB,cAAdn2H,KAAK24D,2CAOFgjE,GACV,OAAI37H,KAAKkhI,QAAQvF,GACN37H,KAAKkhI,QAAQvF,GAAShjE,KAG1B,0CAQEtrB,EAAM3hC,GACf1L,KAAKqlI,sBAAsBh4F,GACvB3hC,GACAA,EAAS2hC,wCASJA,EAAM3hC,GACf,OAAO1L,KAAKslI,sBAAsBj4F,EAAM3hC,kDAOrB2hC,GACnBrtC,KAAKswH,mBAAmB,cACxBtwH,KAAKwlF,cACD,aACA,CACIlpF,WAAY,CAAE2J,MAAS,kCACvBtW,MAAO09C,EAAKt3C,2DASFs3C,EAAM3hC,GACxB1L,KAAKulI,uBAAuBl4F,GAG5BrtC,KAAK4N,eACDlC,GACAA,mDAQe2hC,GACnBrtC,KAAKswH,mBAAmB,cACxBtwH,KAAKwlF,cACD,aACA,CACIlpF,WAAY,CAAE2J,MAAS,kCACvBtW,MAAO09C,EAAKt3C,2DAQFs3C,GAClBrtC,KAAK+hI,uBAAuB10F,GAC5BrtC,KAAK4N,4DAcYylD,EAAYz8B,GAE7B,IAAMjnB,EAAO3P,KAAKwhI,cAAL,GAAAnoI,OAAsB2G,KAAK0nD,QAA3B,KAAAruD,OAAsCg6D,IAEnD,IAAK1jD,EAED,OAAO,KAEX,IAAM3W,EAAO,CACTsvB,OAAO,EACPsc,eAAWrkC,GAEXilI,EAAY,KAEhB,GAAI5uG,IAAc+N,IACd6gG,EAAYvE,EAA2BtxH,EAAM,kBAC1C,IAAIinB,IAAc+N,IAUrB,OAFA9jB,EAAO7b,MAAP,2BAAA3L,OAAwCu9B,IAEjC,KATP4uG,EAAYvE,EAA2BtxH,EAAM,cAC7C,IAAM81H,EAAgBxE,EAA2BtxH,EAAM,aAEnD81H,EAAc7vI,OAAS,IACvBoD,EAAK4rC,UAAY6gG,EAAc,GAAG91I,OAU1C,OAFAqJ,EAAKsvB,MAAQk9G,EAAU5vI,OAAS,GAA4B,SAAvB4vI,EAAU,GAAG71I,MAE3CqJ,kDAOP,QAAIgH,KAAKivH,WACEjvH,KAAKivH,UAAUyW,mDAUzBhzF,GACD,OAAO1yC,KAAK0U,WAAWuwC,KAAKgD,KAAKvV,EAAQ,aACrC53C,UAAQiJ,kBAAkB/D,KAAKuxH,WAAYvxH,KAAKsmD,SAChDtmD,KAAKmyF,8CAOT,OAAOnyF,KAAK0U,WAAWuwC,KAAKsyE,kDAO5B,OAAOv3H,KAAKyhI,kDAOZ,OAAOzhI,KAAK0hI,gDASZ,OAAO1hI,KAAKk8H,kDAQAv4H,EAAK0pC,GACjBxsB,EAAO3b,KAAK,WAAYmoC,GACxB,IAAMs4F,EAAY3qI,cACd,CAAEmY,GAAInT,KAAKmyF,YACPlrF,KAAM,QACTlY,EAAE,OAAQ,CACPkX,MAAO,iCACPtC,QAEH/T,EAAEy9C,EAAKt3C,YACPoQ,KAELnG,KAAK0U,WAAWpG,OACZq3H,EACA,SAAAlgI,GAAM,OAAIob,EAAOjc,IAAI,WAAYa,IACjC,SAAAT,GAAK,OAAI6b,EAAOjc,IAAI,iBAAkBI,oCAOvCoO,GAGH,GAFaA,EAAGxQ,aAAa,UAEhB5C,KAAKmyF,YAAlB,CAKA,IAAM9kD,EAAO2F,EAAE5/B,GAAIme,KAAK,QAEpB8b,EAAKz3C,QAA0B,SAAhBy3C,EAAK1rC,OACpB3B,KAAKoiB,aAAa6C,KAAKsgC,IAAW50D,qBAAsB08C,EAAK9rC,KAAK,UAKlEsf,EAAO1b,KAAK,2FAZZ0b,EAAO1b,KAAK,oEAuBZ,IAAAsL,EAAAzQ,KACJ,OAAO,IAAIojC,QAAQ,SAACC,EAASC,GACzB,IAAMx1B,EAAUrD,WAAW,kBAAMm7H,GAAU,IAAO,KAC5CxjH,EAAe3R,EAAK2R,aAS1B,SAASwjH,IAA4B,IAAlBC,EAAkB1kI,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,IAAAA,UAAA,GACjCihB,EAAaoC,eAAe+gC,IAAW3yD,SAAUgzI,GACjDj4H,aAAaG,GACT+3H,EAEAviG,EAAO,IAAI5sC,MAAM,qEAGjB2sC,IAfR5yB,EAAK2wH,qBAAqB9xH,QAAQ,SAAAy2D,GAAM,OAAIA,MAC5Ct1D,EAAK2wH,qBAAuB,GAiB5Bh/G,EAAaiC,GAAGkhC,IAAW3yD,SAAUgzI,GACrCn1H,EAAK8zH,wHC59CjB,SAAApjH,GAAA3yB,EAAAQ,EAAAyuB,EAAA,sBAAA6jH,IAAA,IAAAnF,EAAA3tI,EAAA,GAAAs3I,EAAAt3I,EAAA,IAEMqyB,EAASK,EAAQ,GAAqBP,UAAUQ,GAIhDokC,EAAarkC,EAAQ,GACrB+8G,EACA/8G,EAAQ,IACR6b,EAAuB7b,EAAQ,IAQrC,SAAS6kH,EAAsBC,GAC3B,IAAIC,EAAQ,EAEZ,OAAO,SAAS59H,GAEZ,IAAIA,EAAJ,CAOA,IAAMyF,EAAUxC,KAAK4P,IAAI,EAAG+qH,EAAQ,GAIpC,OAFAA,GAAS,EAEFn4H,EAAUk4H,EAVbC,EAAQ,GAuBL,SAAS3E,EAAU15G,EAAU3F,EAAMuzB,EAASruC,GA0BvD,SAASid,EAASsI,GACd,GAAIA,EAAM1zB,MAAQ0zB,EAAM1zB,KAAKm6C,UAAW,CACpC,GAAIzmB,EAAMw5G,SAAW53I,OAAOitB,SAAS2qH,OAKjC,YAJArlH,EAAO1b,KAAP,6CAAA9L,OAEQqzB,EAAMw5G,SAIlB/a,IAASh4E,UAAYzmB,EAAM1zB,KAAKm6C,WAlCxCnzC,KAAK4nB,SAAWA,EAChB5nB,KAAKmmI,YAAclkH,EACnBjiB,KAAKomI,eAAiBL,EAAsB,KAC5C/lI,KAAKqmI,oBAAsBN,EAAsB,KAGjD/lI,KAAKsmI,qBAAsB,EAC3BtmI,KAAKmH,QAAUA,EAKfnH,KAAKumI,kBACCvmI,KAAKmH,QAAQuN,WAAW2yC,YAC4B9mD,IAA/CP,KAAKmH,QAAQuN,WAAW2yC,MAAMm/E,aAEzCxmI,KAAKoiB,aAAeozB,EAEpBx1C,KAAK0U,WAAa1U,KAAKmmI,YAAYzxH,WAuB/BpmB,OAAOi0C,iBACPj0C,OAAOi0C,iBAAiB,UAAWne,GAAU,GAE7C91B,OAAOm4I,YAAY,YAAariH,GAMxCk9G,EAAUhxI,UAAU0+H,sBAAwB,WACxC,OAAOhvH,KAAKsmI,qBAGhBhF,EAAUhxI,UAAUo1I,oBAAsB,WACtC,OAAO1lI,KAAKumI,mBAGhBjF,EAAUhxI,UAAU+zI,gBAAkB,SAAS1gI,GAC3Ckd,EAAO3b,KAAP,8BAAA7L,OAA0CsK,IAGzB,UAFA7I,UAAQoJ,mBAAmBP,KAGxCkd,EAAO3b,KACH,gDACJlF,KAAKoiB,aAAa6C,KAAKsgC,EAAWzzD,cAI1CwvI,EAAUhxI,UAAUo2I,gBAAkB,SAASC,GACtC3mI,KAAK4mI,eACN5mI,KAAK4mI,aAAeD,EACpB9lH,EAAO3b,KAAP,sBAAA7L,OAAkC2G,KAAK4mI,iBAI/CtF,EAAUhxI,UAAU4yI,gBAAkB,WAClC,OAAOljI,KAAK4mI,cAGhBtF,EAAUhxI,UAAUu2I,kBAAoB,WAEpC,IAAIC,EAAiB9mI,KAAKmH,QAAQuN,WAAW2yC,MAAMi4C,MAQnD,OAJKwnC,IACDA,EAAc,SAAAztI,OAAY2G,KAAKmH,QAAQuN,WAAW2yC,MAAMltD,SAGrD2sI,GAGXxF,EAAUhxI,UAAUy2I,mBAAqB,WAErC,IA4GIC,EA5GEtnI,EAAO1E,cAAI,CAAEmY,GAAInT,KAAK6mI,oBACxB5/H,KAAM,QAGFksC,EAAcg4E,IAAdh4E,UACF8zF,EAAa9b,IAAS5oE,UACtB7uB,EAAS1zB,KAAKmH,QAAQiiC,WAwG5B,OAtGAvoB,EAAO3b,KAAP,eAAA7L,OAA2B85C,EAA3B,kBAAA95C,OAAqD4tI,IAErDvnI,EAAK3Q,EAAE,aAAc,CACjBkX,MAAO,kCACP0jD,KAAM3pD,KAAK4nB,SACXs/G,cAAeD,IAGf9zF,GACAzzC,EAAK7E,MAAM,CAAEssI,aAAch0F,SAEgB5yC,IAA3CP,KAAKmH,QAAQuN,WAAW0yH,gBACxB1nI,EAAK3Q,EACD,WAAY,CACRE,KAAM,iBACNU,MAAOqQ,KAAKmH,QAAQuN,WAAW0yH,iBAChCjhI,UAI2B5F,IAAlCP,KAAKmH,QAAQuN,WAAW2yC,YAC0B9mD,IAA/CP,KAAKmH,QAAQuN,WAAW2yC,MAAMm/E,cACjC9mI,EAAK3Q,EACD,WAAY,CACRE,KAAM,eACNU,MAAOqQ,KAAKmH,QAAQuN,WAAW2yC,MAAMm/E,eACtCrgI,UAEiB5F,IAAxBmzB,EAAO45F,cACP5tH,EAAK3Q,EACD,WAAY,CACRE,KAAM,eACNU,MAAO+jC,EAAO45F,eACfnnH,KAEXzG,EAAK3Q,EACD,WAAY,CACRE,KAAM,aACNU,MAAOouC,QAAQrK,EAAOoxB,cACvB3+C,UAEkB5F,IAArBmzB,EAAO2zG,WACP3nI,EAAK3Q,EACG,WAAY,CACRE,KAAM,YACNU,MAAOouC,QAAQrK,EAAO2zG,aACvBlhI,UAEW5F,IAAtBmzB,EAAO4zG,YACP5nI,EAAK3Q,EACG,WAAY,CACRE,KAAM,aACNU,MAAOouC,QAAQrK,EAAO4zG,cACvBnhI,UAEgB5F,IAA3BmzB,EAAO6zG,iBACP7nI,EAAK3Q,EACG,WAAY,CACRE,KAAM,kBACNU,MAAO+jC,EAAO6zG,kBACfphI,KAGfzG,EAAK3Q,EACD,WAAY,CACRE,KAAM,gBACNU,OAAiD,IAA1CqQ,KAAKmH,QAAQuN,WAAWswC,gBAChC7+C,UACyB5F,IAA5BmzB,EAAO8zG,kBACP9nI,EAAK3Q,EACD,WAAY,CACRE,KAAM,mBACNU,MAAO+jC,EAAO8zG,mBACfrhI,KAEPutB,EAAO+zG,cACP/nI,EAAK3Q,EACD,WAAY,CACRE,KAAM,eACNU,MAAO+jC,EAAO+zG,eACfthI,KAEPutB,EAAOg0G,YACPhoI,EAAK3Q,EACD,WAAY,CACRE,KAAM,aACNU,MAAO+jC,EAAOg0G,aACfvhI,KAEPutB,EAAO2tC,SAAW3tC,EAAO2tC,QAAQsmE,MACa,iBAApCj0G,EAAO2tC,QAAQsmE,KAAKC,aAC1Bt8H,KAAKC,SAAWmoB,EAAO2tC,QAAQsmE,KAAKC,aACpCloI,EAAK3Q,EACD,WAAY,CACRE,KAAM,OACNU,OAAO,IACRwW,KAMPnG,KAAKmH,QAAQiiC,WAAWutF,mBAChC,IAAK,cACL,KAAK,EACL,UAAKp2H,EACDymI,GAAW,EACX,MACJ,IAAK,YACDA,GAAW,EAwCf,OApCAtnI,EAAK3Q,EACD,WAAY,CACRE,KAAM,WACNU,MAAOq3I,IACR7gI,UAEyC5F,IAA5CP,KAAKmH,QAAQiiC,WAAWggF,iBACxB1pH,EAAK3Q,EACD,WAAY,CACRE,KAAM,kBACNU,MAAOqQ,KAAKmH,QAAQiiC,WAAWggF,kBAChCjjH,UAEqC5F,IAA5CP,KAAKmH,QAAQiiC,WAAWigF,iBACxB3pH,EAAK3Q,EACD,WAAY,CACRE,KAAM,kBACNU,MAAOqQ,KAAKmH,QAAQiiC,WAAWigF,kBAChCljH,UAE4B5F,IAAnCP,KAAKmH,QAAQiiC,WAAWy+F,QACxBnoI,EAAK3Q,EACD,WAAY,CACRE,KAAM,SACNU,MAAOqQ,KAAKmH,QAAQiiC,WAAWy+F,SAChC1hI,UAEiD5F,IAAxDP,KAAKmH,QAAQiiC,WAAW0+F,6BACxBpoI,EAAK3Q,EACD,WAAY,CACRE,KAAM,8BACNU,MAAOqQ,KAAKmH,QAAQiiC,WAAW0+F,8BAChC3hI,KAEXzG,EAAKyG,KAEEzG,GAIX4hI,EAAUhxI,UAAUy3I,eAAiB,SAASC,GAE1C,IAAM70F,EAAYH,EAAEg1F,GAAUz2G,KAAK,cAAchwB,KAAK,cAElD4xC,IACAtyB,EAAO3b,KAAP,wBAAA7L,OAAoC85C,IACpCg4E,IAASh4E,UAAYA,IAI7BmuF,EAAUhxI,UAAU23I,mBAAqB,SAASD,GAE9ChoI,KAAK0mI,gBAAgB1zF,EAAEg1F,GAAUz2G,KAAK,cAAchwB,KAAK,aAEzD,IAAM2mI,EACAl1F,EAAEg1F,GAAUz2G,KACV,6DAC+C37B,OAAS,EAEhEirB,EAAO3b,KAAP,2BAAA7L,OAAuC6uI,IAEvCloI,KAAKsmI,oBAAsBtzF,EAAEg1F,GAAUz2G,KACnC,2DACiD37B,OAAS,EAE9DirB,EAAO3b,KAAP,oCAAA7L,OACwC2G,KAAKsmI,sBAExCtmI,KAAKsmI,qBAENtmI,KAAK+nI,eAAeC,GAIxB,IAAMlZ,EAAe97E,EAAEg1F,GAAUz2G,KAAK,eAAehwB,KAAK,YAE1DvB,KAAKoiB,aAAa6C,KAAKg5G,EAAqB/0C,iBACxCg/C,EAAuBpZ,GAIvB97E,EAAEg1F,GAAUz2G,KACZ,gEACkD37B,SAClDoK,KAAKumI,mBAAoB,GAG7B1lH,EAAO3b,KAAP,yBAAA7L,OAAqC2G,KAAKumI,qBAa9CjF,EAAUhxI,UAAU2xI,wBAA0B,WAAW,IAAAt6H,EAAA3H,KACrD,OAAO,IAAIojC,QAAQ,SAAAC,GAEf17B,EAAK++H,gBAAgB/+H,EAAKR,QAAQuN,WAAWkyH,cAG7Cj/H,EAAK+M,WAAWpG,OACZ3G,EAAKo/H,qBACL,SAAAthI,GAAM,OAAIkC,EAAKwgI,gCAAgC1iI,EAAQ49B,IACvD,SAAAr+B,GAAK,OAAI2C,EAAKygI,8BAA8BpjI,EAAOq+B,KAMvD17B,EAAK+M,WAAWhH,WAaxB4zH,EAAUhxI,UAAU83I,8BAAgC,SAASpjI,EAAO0G,GAAU,IAAAlD,EAAAxI,KAGpEqoI,EACAr1F,EAAEhuC,GAAOusB,KAAK,0BAA0B37B,QACnCo9C,EAAEhuC,GAAOusB,KAAK,yBAAyB37B,OAMlD,GAJIyyI,IACAxnH,EAAO3b,KAAK,+BACZimH,IAASh4E,eAAY5yC,GAErByyC,EAAEhuC,GAAOusB,KAAK,4BAA4B37B,OAC1CoK,KAAKoiB,aAAa6C,KAAKsgC,EAAWxzD,uBADtC,CAOA,IAAMu2I,EAAiBt1F,EAAEhuC,GAAOusB,KAAK,4BAErC,GAAI+2G,EAAe1yI,OAAQ,CAEvB,IAEIkgI,EAFEyS,EAAYD,EAAe/mI,KAAK,cAChCinI,EAAgBx1F,EAAEhuC,GAAOusB,KAAK,eAWpC,OARIi3G,IACA1S,EAAW0S,EAAc7mI,aAE7B3B,KAAKoiB,aAAa6C,KACdsgC,EAAW1xD,kBACX00I,EACAzS,GAMR,GAAI9iF,EAAEhuC,GAAOusB,KAAK,yBAAyB37B,OAWvC,OAVAirB,EAAO1b,KAAK,uCAAwCH,GACnClK,UAAQ+I,iBAAiBmB,EAAMpC,aAAa,SAE5C5C,KAAKmH,QAAQuN,WAAW2yC,MAAMC,kBAG3CtnD,KAAKsmI,qBAAsB,QAE/BtmI,KAAKoiB,aAAa6C,KAAKsgC,EAAW30D,yBAItC,IAAM63I,EAASzoI,KAAKqmI,sBACdvpG,EAAM,4BAAAzjC,OAA+BovI,GAE3C1rG,EAAqBC,iBAAiB,IAAItmC,MAAMomC,IAChDjc,EAAO7b,MAAM83B,EAAQ93B,GAGrB,IAAM8hI,EAAiB9mI,KAAK6mI,oBACtB6B,EAAWD,EAAS,IAKrBJ,GACDroI,KAAKoiB,aAAa6C,KACdsgC,EAAW1zD,mBACXi1I,EACA4B,GAIR1oI,KAAKomI,gBAAe,GACpB93I,OAAOmc,WACH,kBAAMjC,EAAKy5H,0BAA0BhiG,KAAKv0B,IAC1C+8H,KAYRnH,EAAUhxI,UAAU63I,gCAAkC,SAC9C1iI,EACAiG,GAAU,IAAAqC,EAAA/N,KAQd,GANAA,KAAKioI,mBAAmBxiI,GAGxBzF,KAAKqmI,qBAAoB,GAG0B,SAA/CrzF,EAAEvtC,GAAQ8rB,KAAK,cAAchwB,KAAK,SAElCvB,KAAKomI,gBAAe,GAGpB16H,QACG,CACH,IAAM+8H,EAASzoI,KAAKomI,iBAEpBvlH,EAAO3b,KAAP,4BAAA7L,OAAwCovI,IACxCn6I,OAAOmc,WACH,kBAAMsD,EAAKk0H,0BAA0BhiG,KAAKv0B,IAC1C+8H,KAIZnH,EAAUhxI,UAAUqhB,aAAe,WAAW,IAAApD,EAAAvO,KAC1C,OAAO,IAAIojC,QAAQ,SAACC,EAASC,GACzB/0B,EAAKmG,WAAWpG,OACZC,EAAKw4H,qBACL,SAAAthI,GACI8I,EAAKw5H,eAAetiI,GACpB49B,KAEJ,SAAAsvD,GAAO,OAAIrvD,EAAO,CACdt+B,MAAOguC,EAAE2/C,GAASphE,KAAK,mBAClB6qF,KAAK,WACV33G,QAASuuC,EAAE2/C,GAASphE,KAAK,iBACpB5vB,cAMrB2/H,EAAUhxI,UAAU++H,YAAc,SAASsZ,EAAaC,GACpD5oI,KAAK6oI,cAAyB,EAAOF,EAAaC,IAUtDtH,EAAUhxI,UAAUu4I,aAAe,SAASC,EAAOC,EAAOh9D,GACtD,IAAM34D,EAAKpY,cAAI,CAAEmY,GAAInT,KAAK6mI,oBACtB5/H,KAAM,QACJpM,EAAQ,CACVoL,MAAO,kCACP0jD,KAAM3pD,KAAK4nB,SACXs/G,cAAe/b,IAAS5oE,WAExB9rD,EAAM,WAeV,SAASwoD,EAAYniB,EAAQzsB,GACzB0sB,EAAqBC,iBAAiB,IAAItmC,MAAMomC,IAChDjc,EAAO7b,MAAM83B,EAAQzsB,GACrB07D,EAAU17D,GAhBVy4H,IACAjuI,EAAMiuI,OAAQ,EACdryI,EAAG,SAAA4C,OAAY5C,IAEnB2c,EAAGrkB,EAAE,YAAa8L,GAclBmF,KAAK0U,WAAWpG,OACZ8E,EACA,SAAA3N,GAEI,IAAI0hC,EAAM6L,EAAEvtC,GAAQ8rB,KAAK,aAAahwB,KAAK,QAE3C4lC,EAAM6hG,mBAAmB7hG,KAErBtmB,EAAO3b,KAAP,OAAA7L,OAAmB5C,EAAnB,MAAA4C,OAA2B8tC,IAC3B4hG,EAAM5hG,IAEN8X,EAAW,iBAAA5lD,OAAkB5C,EAAlB,mBAAwCgP,IAG3Dw5C,EAAY/uD,UAAKqQ,EAAjB,OAAAlH,OAAmC5C,EAAnC,aAIR6qI,EAAUhxI,UAAU8+H,iBAAmB,SAASuZ,EAAaC,GACzD5oI,KAAK6oI,cAAyB,EAAMF,EAAaC,IAGrDtH,EAAUhxI,UAAU24I,OAAS,SAASv9H,GAClC,IAAM0H,EAAKpY,cAAI,CAAEmY,GAAInT,KAAK6mI,oBACtB5/H,KAAM,QACFksC,EAAcg4E,IAAdh4E,UAEHA,GAKL//B,EAAGrkB,EAAE,SAAU,CACXkX,MAAO,kCACPkhI,aAAch0F,IAElBnzC,KAAK0U,WAAWpG,OACZ8E,EACA,SAAA3N,GAEI,IAAIyjI,EAAYl2F,EAAEvtC,GAAQ8rB,KAAK,UAAUhwB,KAAK,cAE1C2nI,IACAA,EAAYF,mBAAmBE,IAEnCroH,EAAO3b,KAAP,oBAAA7L,OAAgC6vI,GAAazjI,GAC7C0lH,IAASh4E,eAAY5yC,EACrBmL,EAASw9H,IAEb,SAAAlkI,GAGI+3B,EAAqBC,iBAAiB,IAAItmC,MAF3B,iBAGfmqB,EAAO7b,MAHQ,eAGMA,MAzBzB0G,+DC7kBR,IAAMkmB,EAAa1Q,EAAQ,IASrB5b,EAAQ,CACV,UAAW,QAAS,UAAW,QAAS,QAAS,WAAY,OAC7D,SAAU,QAAS,WAAY,MAAO,OAAQ,WAAY,UAC1D,UAAW,WAAY,QAAS,UAAW,MAAO,OAAQ,YAC1D,UAAW,OAAQ,OAAQ,QAAS,UAAW,QAAS,WAAY,QACpE,SAAU,UAAW,QAAS,SAAU,SAAU,SAAU,QAC5D,SAAU,SAAU,WAAY,SAAU,SAAU,SAAU,UAC9D,WAAY,SAAU,SAAU,WAAY,QAAS,QAAS,QAC9D,UAAW,WAAY,QAAS,QAAS,OAAQ,QAAS,QAAS,SACnE,QAAS,SAAU,QAAS,KAAM,SAAU,OAAQ,QAAS,SAC7D,SAAU,SAAU,OAAQ,SAAU,UAAW,WAAY,UAC7D,QAAS,SAAU,OAAQ,QAAS,OAAQ,QAAS,YACrD,aAAc,OAAQ,QAAS,QAAS,aAAc,aACtD,UAAW,SAAU,OAAQ,QAAS,YAAa,YAAa,YAChE,aAAc,aAAc,cAAe,YAAa,UACxD,WAAY,SAAU,SAAU,SAAU,aAAc,MAAO,UAC/D,UAAW,SAAU,SAAU,UAAW,UAAW,MAAO,OAAQ,QACpE,SAAU,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACpE,QAAS,QAAS,QAAS,SAAU,QAAS,UAAW,OAAQ,WACjE,OAAQ,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SAClE,QAAS,QAAS,SAAU,QAAS,SAAU,SAAU,UACzD,SAAU,SAAU,QAAS,QAAS,QAAS,QAAS,QAAS,UACjE,SAAU,SAAU,QAAS,UAAW,UAAW,OAAQ,QAAS,OACpE,QAAS,QAAS,OAAQ,SAAU,MAAO,OAAQ,MAAO,SAC1D,WAAY,QAAS,QAAS,YAAa,YAAa,WAAY,QACpE,WAAY,YAAa,SAAU,SAAU,OAAQ,QAAS,SAC9D,WAAY,WAAY,WAAY,WAAY,SAAU,QAAS,QACnE,SAAU,QAAS,SAAU,QAAS,QAAS,SAAU,SAAU,OACnE,UAAW,WAAY,YAAa,WAAY,UAAW,YAC3D,OAAQ,UAAW,UAAW,QAAS,QAAS,SAAU,UAC1D,aAAc,SAAU,YAAa,YAAa,UAAW,aAC7D,WAAY,UAAW,SAAU,SAAU,OAAQ,QAAS,MAC5D,UAAW,UAAW,OAAQ,YAAa,UAAW,QAAS,SAC/D,QAAS,MAAO,SAAU,UAAW,OAAQ,QAAS,UAAW,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,SAAU,UAAW,OACrE,OAAQ,SAAU,UAAW,UAAW,OAAQ,MAAO,SAAU,SACjE,QAAS,QAAS,UAAW,UAAW,MAAO,OAAQ,SAAU,WACjE,SAAU,QAAS,UAAW,SAAU,SAAU,OAAQ,UAC1D,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,YAC1D,SAAU,SAAU,UAAW,YAAa,WAAY,UACxD,UAAW,UAAW,SAAU,SAAU,SAAU,SAAU,SAC9D,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,OAAQ,QAAS,OACnE,SAAU,SAAU,UAAW,SAAU,QAAS,UAAW,QAC7D,OAAQ,aAAc,SAAU,SAAU,WAAY,OAAQ,UAC9D,OAAQ,QAAS,QAAS,MAAO,WAAY,WAAY,UACzD,SAAU,QAAS,SAAU,WAAY,aAAc,YACvD,UAAW,WAAY,WAAY,WAAY,UAAW,SAC1D,WAAY,UAAW,QAAS,OAAQ,QAAS,SAAU,UAC3D,WAAY,QAAS,SAAU,OAAQ,UAAW,SAAU,QAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,SAAU,OACrE,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,SACzD,UAAW,QAAS,KAAM,SAAU,QAAS,SAAU,SAAU,QACjE,OAAQ,OAAQ,SAAU,WAAY,UAAW,SAAU,QAC3D,UAAW,QAAS,SAAU,SAAU,UAAW,SAAU,SAC7D,UAAW,UAAW,UAAW,QAAS,UAAW,UAAW,SAChE,SAAU,UAAW,UAAW,SAAU,UAAW,UAAW,UAChE,SAAU,UAAW,UAAW,QAAS,OAAQ,QAAS,OAAQ,QAClE,SAAU,UAAW,QAAS,UAAW,YAAa,SAAU,UAChE,WAAY,UAAW,QAAS,UAAW,WAAY,QAAS,YAChE,QAAS,QAAS,SAAU,WAAY,SAAU,QAAS,QAC3D,SAAU,QAAS,SAAU,QAAS,OAAQ,MAAO,QAAS,SAC9D,QAAS,WAAY,SAAU,UAAW,SAAU,OAAQ,QAC5D,SAAU,UAAW,OAAQ,QAAS,UAAW,OAAQ,UACzD,SAAU,SAAU,UAAW,SAAU,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,UAAW,aAAc,UACxD,UAAW,UAAW,OAAQ,QAAS,UAAW,SAAU,WAC5D,SAAU,QAAS,SAAU,QAAS,SAAU,WAAY,SAC5D,UAAW,WAAY,UAAW,SAAU,UAAW,QAAS,YAChE,SAAU,WAAY,WAAY,UAAW,WAAY,SACzD,UAAW,SAAU,SAAU,OAAQ,WAAY,QAAS,UAC5D,UAAW,SAAU,YAAa,YAAa,UAAW,SAC1D,WAAY,WAAY,YAAa,YAAa,WAAY,UAC9D,QAAS,QAAS,SAAU,UAAW,QAAS,SAAU,UAC1D,UAAW,YAAa,YAAa,QAAS,SAAU,QAAS,OACjE,QAAS,WAAY,QAAS,SAAU,WAAY,SAAU,WAC9D,UAAW,WAAY,UAAW,UAAW,UAAW,YACxD,QAAS,UAAW,WAAY,QAAS,OAAQ,UAAW,UAC5D,UAAW,UAAW,UAAW,OAAQ,WAAY,WAAY,QACjE,QAAS,SAAU,UAAW,aAAc,YAAa,aACzD,YAAa,YAAa,WAAY,aAAc,cACpD,UAAW,QAAS,QAAS,SAAU,QAAS,SAAU,QAC1D,WAAY,QAAS,SAAU,QAAS,aAAc,QAAS,WAC/D,QAAS,QAAS,SAAU,UAAW,UAAW,WAAY,OAC9D,UAAW,UAAW,aAAc,aAAc,UAAW,OAC7D,SAAU,QAAS,SAAU,QAAS,YAAa,WAAY,UAC/D,QAAS,UAAW,WAAY,SAAU,QAAS,QAAS,OAAQ,OACpE,QAAS,OAAQ,UAAW,QAAS,UAAW,SAAU,OAAQ,SAClE,SAAU,WAAY,aAAc,SAAU,SAAU,SAAU,QAClE,SAAU,YAAa,aAAc,WAAY,SAAU,OAC3D,UAAW,SAAU,WAAY,UAAW,SAAU,SAAU,SAChE,SAAU,YAAa,UAAW,UAAW,SAAU,UAAW,OAClE,OAAQ,WAAY,MAAO,QAAS,WAAY,SAAU,UAC1D,WAAY,WAAY,YAAa,aAAc,OAAQ,UAC3D,UAAW,SAAU,OAAQ,SAAU,SAAU,UAAW,QAC5D,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,OACnE,SAAU,SAAU,SAAU,UAAW,SAAU,SAAU,SAC7D,SAAU,QAAS,MAAO,OAAQ,SAAU,OAAQ,WAAa,UACjE,SAAU,UAAW,WAAY,WAAY,SAAU,SAAU,QACjE,QAAS,SAAU,SAAU,UAAW,UAAW,QAAS,QAC5D,SAAU,UAAW,SAAU,QAAS,SAAU,SAAU,UAC5D,QAAS,SAAU,UAAW,SAAU,UAAW,SAAU,UAC7D,SAAU,SAAU,SAAU,QAAS,UAAW,QAAS,OAAQ,QACnE,QAAS,SAAU,QAAS,UAAW,OAAQ,SAAU,MAAO,SAChE,QAAS,QAAS,SAAU,OAAQ,WAAY,SAAU,UAC1D,SAAU,SAAU,UAAW,MAAO,QAAS,OAAQ,QAAS,QAChE,SAAU,UAAW,UAAW,UAAW,QAAS,UAAW,OAC/D,QAAS,SAAU,UAAW,SAAU,UAAW,WAAY,QAC/D,UAAW,WAAY,UAAW,WAAY,YAAa,SAAU,OACrE,QAAS,SAAU,OAAQ,UAAW,UAAW,SAAU,SAC3D,QAAS,SAAU,QAAS,UAAW,UAAW,UAAW,UAC7D,UAAW,SAAU,UAAW,SAAU,WAAY,WAAY,UAClE,UAAW,QAAS,UAAW,QAAS,QAAS,QAAS,UAC1D,QAAS,UAAW,SAAU,SAAU,UAAW,QAAS,SAC5D,QAAS,SAAU,SAAU,UAAW,OAAQ,OAAQ,OAAQ,QAChE,OAAQ,QAAS,UAAW,UAAW,WAAY,WAAY,WAC/D,UAAW,UAAW,YAAa,MAAO,SAAU,SAAU,UAC9D,QAAS,UAAW,SAAU,QAAS,OAAQ,SAAU,SAAU,QACnE,WAAY,UAAW,SAAU,SAAU,SAAU,OAAQ,UAC7D,QAAS,QAAS,QAAS,OAAQ,QAAS,SAAU,QAAS,SAC/D,UAAW,SAAU,QAAS,SAAU,QAAS,OAAQ,UACzD,UAAW,UAAW,aAAc,SAAU,SAAU,OAAQ,QAChE,KAAM,MAAO,MAAO,QAAS,OAAQ,QAAS,UAAW,SAAU,SACnE,SAAU,OAAQ,UAAW,SAAU,UAAW,QAAS,SAC3D,QAAS,SAAU,QAAS,SAAU,QAAS,SAAU,QAAS,OAClE,SAAU,SAAU,SAAU,OAAQ,QAAS,SAAU,SACzD,WAAY,WAAY,WAAY,UAAW,SAAU,QAAS,SAClE,UAAW,WAAY,WAAY,MAAO,QAAS,SAAU,QAC7D,UAAW,SAAU,SAAU,UAAW,QAAS,YAAa,QAChE,SAAU,SAAU,SAAU,QAAS,YAAa,OAAQ,QAC5D,QAAS,SAAU,UAAW,QAAS,YAAa,QAAS,SAC7D,OAAQ,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,UACjE,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,OAAQ,SACnE,QAAS,QAAS,QAAS,QAAS,QAAS,SAAU,OAAQ,UAC/D,SAAU,SAAU,QAAS,UAAW,UAAW,QAAS,OAAQ,OACpE,QAAS,SAAU,WAAY,SAAU,SAAU,QAAS,OAC5D,UAAW,WAAY,aAAc,QAAS,SAAU,QAAS,SACjE,OAAQ,QAAS,MAAO,OAAQ,QAAS,QAAS,OAAQ,SAC1D,UAAW,UAAW,MAAO,WAAY,OAAQ,QAAS,QAAS,QACnE,SAAU,OAAQ,QAAS,OAAQ,SAAU,OAAQ,SAAU,YAC/D,YAAa,UAAW,QAAS,QAAS,QAAS,OAAQ,YAC3D,YAAa,OAAQ,UAAW,YAAa,QAAS,SAAU,UAChE,UAAW,UAAW,SAAU,WAAY,OAAQ,QAAS,QAC7D,UAAW,QAAS,QAAS,SAAU,SAAU,UAAW,OAAQ,QACpE,UAAW,OAAQ,SAAU,UAAW,MAAO,SAAU,OACzD,aAAc,QAAS,MAAO,UAAW,SAAU,WAAY,UAC/D,WAAY,QAAS,OAAQ,QAAS,QAAS,UAAW,WAC1D,OAAQ,SAAU,UAAW,MAAO,SAAU,QAAS,SAAU,WACjE,SAAU,SAAU,MAAO,OAAQ,WAAY,UAAW,WAC1D,WAAY,SAAU,SAAU,QAAS,SAAU,SAAU,OAC7D,WAAY,QAAS,QAAS,YAAa,WAAY,OAAQ,QAC/D,SAAU,SAAU,QAAS,WAAY,MAAO,WAAY,YAC5D,UAAW,UAAW,UAAW,UAAW,OAAQ,QAAS,OAC7D,SAAU,UAAW,SAAU,UAAW,YAAa,YACvD,UAAW,YAAa,YAAa,SAAU,QAAS,UAAW,QACnE,OAAQ,QAAS,UAAW,SAAU,WAAY,YAAa,WAC/D,aAAc,WAAY,QAAS,SAAU,UAAW,SAAU,QAClE,SAAU,YAAa,QAAS,SAAU,OAAQ,UAAW,YAC7D,YAAa,UAAW,OAAQ,OAAQ,UAAW,SAAU,WAC7D,UAAW,SAAU,UAAW,SAAU,UAAW,UAAW,WAChE,QAAS,QAAS,SAAU,QAAS,MAAO,QAAS,UAAW,OAChE,UAAW,UAAW,YAAa,UAAW,WAAY,MAAO,WACjE,SAAU,YAAa,YAAa,aAAc,WAAY,WAC9D,UAAW,SAAU,YAAa,SAAU,UAAW,QAAS,UAChE,WAAY,SAAU,QAAS,SAAU,WAAY,MAAO,SAC5D,SAAU,UAAW,WAAY,QAAS,QAAS,UAAW,OAC9D,OAAQ,UAAW,WAAY,WAAY,WAAY,WACvD,WAAY,UAAW,SAAU,OAAQ,SAAU,SAAU,UAC7D,SAAU,UAAW,QAAS,SAAU,UAAW,SAAU,QAC7D,SAAU,WAAY,QAAS,SAAU,QAAS,YAAa,SAC/D,UAAW,QAAS,OAAQ,QAAS,WAAY,WAAY,UAC7D,QAAS,WAAY,UAAW,UAAW,SAAU,YAAa,SAClE,QAAS,YAAa,WAAY,SAAU,SAAU,MAAO,SAC7D,OAAQ,UAAW,MAAO,OAAQ,YAAa,SAAU,SAAU,SACnE,SAAU,MAAO,UAAW,QAAS,QAAS,QAAS,SAAU,OACjE,QAAS,SAAU,OAAQ,QAAS,SAAU,SAAU,UAAW,SACnE,WAAY,QAAS,SAAU,UAAW,SAAU,SAAU,SAC9D,QAAS,SAAU,SAAU,SAAU,SAAU,QAAS,QAAS,QACnE,UAAW,SAAU,QAAS,SAAU,QAAS,QAAS,SAC1D,SAAU,QAAS,SAAU,SAAU,UAAW,YAAa,QAC/D,YAAa,QAAS,UAAW,SAAU,UAAW,UAAW,WACjE,WAAY,UAAW,QAAS,SAAU,SAAU,SAAU,UAC9D,UAAW,QAAS,YAAa,UAAW,UAAW,QAAS,SAChE,WAAY,QAAS,SAAU,SAAU,SAAU,SAAU,QAC7D,OAAQ,SAAU,UAAW,WAAY,QAAS,UAAW,SAC7D,SAAU,OAAQ,SAAU,SAAU,OAAQ,QAAS,WAAY,SACnE,QAAS,MAAO,UAAW,OAAQ,MAAO,QAAS,SAAU,UAC7D,WAAY,MAAO,MAAO,QAAS,SAAU,MAAO,QAAS,SAC7D,WAAY,UAAW,OAAQ,OAAQ,SAAU,QAAS,QAAS,SACnE,UAAW,WAAY,WAAY,OAAQ,UAAW,OAAQ,SAC9D,SAAU,SAAU,SAAU,SAAU,OAAQ,SAAU,QAAS,QACnE,MAAO,OAAQ,QAAS,MAAO,WAAY,SAAU,SAAU,OAC/D,QAAS,WAAY,UAAW,OAAQ,YAAa,SAAU,UAC/D,UAAW,QAAS,SAAU,YAAa,UAAW,WAAY,OAClE,OAAQ,QAAS,QAAS,QAAS,SAAU,QAAS,SAAU,SAChE,QAAS,QAAS,UAAW,OAAQ,QAAS,SAAU,QAAS,QACjE,QAAS,SAAU,QAAS,QAAS,WAAY,QAAS,UAC1D,QAAS,QAAS,QAAS,QAAS,UAAW,SAAU,MAAO,OAChE,QAAS,OAAQ,UAAW,UAAW,QAAS,SAAU,SAAU,QACpE,QAAS,SAAU,SAAU,OAAQ,SAAU,WAAY,YAC3D,QAAS,QAAS,QAAS,QAAS,SAAU,UAAW,SACzD,UAAW,SAAU,SAAU,QAAS,SAAU,QAAS,SAC3D,UAAW,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAC3D,QAAS,QAAS,SAAU,SAAU,SAAU,SAAU,UAAW,OACrE,WAAY,SAAU,SAAU,MAAO,WAAY,WAAY,OAC/D,WAAY,UAAW,UAAW,SAAU,OAAQ,UAAW,SAC/D,WAAY,WAAY,WAAY,SAAU,QAAS,SAAU,UACjE,SAAU,QAAS,UAAW,SAAU,UAAW,WAAY,SAC/D,QAAS,SAAU,SAAU,UAAW,SAAU,UAAW,QAC7D,OAAQ,QAAS,UAAW,SAAU,UAAW,QAAS,UAC1D,QAAS,OAAQ,SAAU,QAAS,QAAS,SAAU,UAAW,SAClE,QAAS,KAAM,OAAQ,QAAS,SAAU,SAAU,UAAW,SAC/D,QAAS,UAAW,UAAW,QAAS,OAAQ,MAAO,OAAQ,SAC/D,SAAU,OAAQ,QAAS,SAAU,UAAW,WAAY,OAC5D,YAAa,YAAa,UAAW,SAAU,WAAY,UAC3D,QAAS,MAAO,QAAS,UAAW,WAAY,WAAY,SAC5D,UAAW,QAAS,SAAU,QAAS,SAAU,QAAS,OAAQ,SAClE,WAAY,SAAU,YAAa,OAAQ,SAAU,UAAW,SAChE,UAAW,WAAY,QAAS,QAAS,QAAS,SAAU,UAC5D,SAAU,MAAO,QAAS,QAAS,UAAW,QAAS,OAAQ,OAC/D,QAAS,SAAU,OAAQ,QAAS,QAAS,SAAU,UACvD,WAAY,QAAS,SAAU,SAAU,QAAS,SAAU,OAC5D,SAAU,SAAU,SAAU,UAAW,UAAW,UAAW,SAC/D,SAAU,SAAU,UAAW,QAAS,QAAS,OAAQ,QAAS,OAClE,QAAS,QAAS,QAAS,SAAU,OAAQ,SAAU,SAAU,SACjE,UAAW,UAAW,OAAQ,QAAS,UAAW,QAAS,OAAQ,SACnE,UAAW,UAAW,SAAU,SAAU,SAAU,OAAQ,OAC5D,SAAU,UAAW,QAAS,OAAQ,UAAW,WAAY,SAC7D,SAAU,OAAQ,SAAU,SAAU,QAAS,SAAU,WACzD,SAAU,WAAY,QAAS,YAAa,WAAY,UACxD,UAAW,WAAY,YAAa,YAAa,WAAY,WAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,UAAW,UAClE,SAAU,QAAS,MAAO,OAAQ,SAAU,SAAU,QAAS,SAC/D,SAAU,WAAY,SAAU,QAAS,SAAU,SAAU,SAC7D,QAAS,QAAS,SAAU,SAAU,SAAU,QAAS,SAAU,QACnE,QAAS,SAAU,SAAU,QAAS,SAAU,QAAS,QAAS,SAClE,SAAU,SAAU,MAAO,UAAW,SAAU,WAAY,QAC5D,UAAW,UAAW,UAAW,UAAW,QAAS,SAAU,QAC/D,WAAY,SAAU,OAAQ,UAAW,UAAW,QAAS,QAC7D,QAAS,QAAS,WAAY,SAAU,SAAU,OAAQ,QAAS,SACnE,QAAS,SAAU,OAAQ,QAAS,SAAU,QAAS,MAAO,WAC9D,OAAQ,MAAO,OAAQ,OAAQ,UAAW,UAAW,QAAS,OAC9D,OAAQ,OAAQ,QAAS,OAAQ,SAAU,QAAS,OAAQ,QAAS,OACrE,SAAU,WAAY,UAAW,WAAY,YAAa,aAC1D,aAAc,SAAU,UAAW,UAAW,WAAY,OAAQ,SAClE,OAAQ,OAAQ,QAAS,UAAW,QAAS,QAAS,OAAQ,QAC9D,OAAQ,WAAY,YAAa,QAAS,SAAU,QAAS,UAC7D,SAAU,QAAS,SAAU,OAAQ,QAAS,UAAW,QAAS,QAClE,QAAS,QAAS,SAAU,SAAU,WAAY,WAAY,WAC9D,YAAa,SAAU,UAAW,QAAS,SAAU,SAAU,SAC/D,UAAW,UAAW,SAAU,UAAW,QAAS,UAAW,WAC/D,SAAU,QAAS,QAAS,SAAU,MAAO,QAAS,SAAU,SAChE,SAAU,OAAQ,MAAO,OAAQ,QAAS,UAAW,OAAQ,QAC7D,SAAU,QAAS,QAAS,SAAU,QAAS,SAAU,QAAS,SAClE,SAAU,MAAO,QAAS,OAAQ,UAAW,WAAY,QAAS,SAClE,SAAU,SAAU,UAAW,UAAW,WAAY,QAAS,OAC/D,SAAU,SAAU,QAAS,SAAU,SAAU,OAAQ,QAAS,UAClE,OAAQ,MAAO,QAAS,OAAQ,QAAS,QAAS,MAAO,OAAQ,QACjE,SAAU,QAAS,OAAQ,SAAU,UAAW,UAAW,QAC3D,UAAW,WAAY,SAAU,QAAS,OAAQ,SAAU,OAC5D,UAAW,QAAS,UAAW,UAAW,SAAU,SAAU,UAC9D,SAAU,OAAQ,WAAY,UAAW,QAAS,OAAQ,SAC1D,SAAU,YAAa,QAAS,QAAS,OAAQ,OAAQ,SAAU,OACnE,MAAO,SAAU,QAAS,SAAU,QAAS,QAAS,OAAQ,UAC9D,QAAS,SAAU,SAAU,UAAW,UAAW,OAAQ,SAC3D,QAAS,SAAU,MAAO,QAAS,SAAU,UAAW,WACxD,SAAU,MAAO,QAAS,QAAS,QAAS,UAAW,QAAS,WAChE,SAAU,UAAW,QAAS,UAAW,SAAU,OAAQ,QAC3D,SAAU,MAAO,SAAU,QAAS,OAAQ,QAAS,QAAS,OAC9D,OAAQ,OAAQ,OAAQ,OAAQ,UAAW,SAAU,MAAO,OAAQ,QACpE,OAAQ,OAAQ,QAAS,UAAW,QAAS,UAAW,QAAS,MACjE,QAAS,OAAQ,QAAS,OAAQ,YAAa,OAAQ,WACvD,UAAW,WAAY,WAAY,UAAW,WAAY,QAAS,QACnE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,MAClE,SAAU,QAAS,UAAW,SAAU,WAAY,YAAa,SACjE,WAAY,SAAU,OAAQ,QAAS,QAAS,QAAS,UACzD,UAAW,WAAY,UAAW,UAAW,SAAU,UAAW,SAClE,UAAW,UAAW,QAAS,SAAU,SAAU,UAAW,OAC9D,OAAQ,SAAU,YAAa,YAAa,WAAY,WACxD,YAAa,UAAW,SAAU,QAAS,SAAU,SAAU,WAC/D,YAAa,YAAa,aAAc,aAAc,YAAa,QACnE,SAAU,SAAU,UAAW,aAAc,QAAS,SAAU,SAChE,SAAU,UAAW,UAAW,WAAY,WAAY,UACxD,UAAW,QAAS,UAAW,WAAY,WAAY,UAAW,UAClE,WAAY,SAAU,QAAS,SAAU,SAAU,UAAW,UAC9D,aAAc,WAAY,UAAW,OAAQ,SAAU,SAAU,SACjE,UAAW,SAAU,SAAU,SAAU,UAAW,UAAW,WAC/D,WAAY,QAAS,SAAU,UAAW,UAAW,QAAS,SAC9D,OAAQ,SAAU,WAAY,SAAU,QAAS,QAAS,SAC1D,UAAW,WAAY,UAAW,UAAW,OAAQ,SAAU,SAC/D,OAAQ,QAAS,SAAU,UAAW,UAAW,WAAY,UAC7D,WAAY,QAAS,MAAO,QAAS,SAAU,aAAc,aAC7D,cAAe,SAAU,UAAW,SAAU,UAAW,MAAO,OAChE,UAAW,WAAY,OAAQ,SAAU,UAAW,QAAS,QAC7D,UAAW,UAAW,WAAY,SAAU,UAAW,OAAQ,SAC/D,SAAU,SAAU,QAAS,SAAU,QAAS,SAAU,UAC1D,SAAU,SAAU,SAAU,UAAW,SAAU,UAAW,WAC9D,WAAY,OAAQ,QAAS,SAAU,UAAW,SAAU,SAC5D,OAAQ,MAAO,UAAW,QAAS,UAAW,WAAY,UAC1D,UAAW,SAAU,UAAW,WAAY,SAAU,UAAW,OACjE,QAAS,QAAS,QAAS,UAAW,SAAU,SAAU,OAAQ,SAClE,OAAQ,UAAW,SAAU,UAAW,WAAY,SAAU,SAC9D,WAAY,QAAS,UAAW,WAAY,SAAU,UAAW,UACjE,UAAW,WAAY,WAAY,SAAU,SAAU,QAAS,OAChE,SAAU,UAAW,SAAU,YAAa,aAAc,UAC1D,QAAS,QAAS,SAAU,SAAU,SAAU,WAAY,SAC5D,OAAQ,QAAS,QAAS,SAAU,SAAU,UAAW,WACzD,SAAU,OAAQ,SAAU,SAAU,UAAW,MAAO,OAAQ,SAChE,QAAS,OAAQ,SAAU,OAAQ,QAAS,QAAS,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,OAAQ,SAAU,QAAS,SACjE,WAAY,UAAW,OAAQ,QAAS,MAAO,UAAW,UAC1D,UAAW,SAAU,YAAa,YAAa,YAAa,SAC5D,SAAU,OAAQ,MAAO,QAAS,OAAQ,OAAQ,QAAS,QAAS,QACpE,SAAU,OAAQ,SAAU,QAAS,SAAU,SAAU,OAAQ,SACjE,SAAU,MAAO,WAAY,YAAa,UAAW,OAAQ,WAC7D,WAAY,OAAQ,SAAU,UAAW,SAAU,YAAa,QAChE,SAAU,QAAS,QAAS,OAAQ,UAAW,OAAQ,OAAQ,OAC/D,QAAS,MAAO,OAAQ,SAAU,QAAS,SAAU,QAAS,OAC9D,QAAS,OAAQ,OAAQ,UAAW,WAAY,SAAU,QAAS,SACnE,SAAU,UAAW,OAAQ,UAAW,MAAO,OAAQ,SAAU,OACjE,SAAU,OAAQ,UAAW,MAAO,QAAS,SAAU,OAAQ,SAC/D,OAAQ,MAAO,OAAQ,MAAO,OAAQ,QAAS,OAAQ,OAAQ,SAC/D,QAAS,MAAO,QAAS,OAAQ,MAAO,OAAQ,OAAQ,UAAW,MACnE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,SAAU,UAC3D,OAAQ,QAAS,QAAS,QAAS,UAAW,UAAW,UAAW,QACpE,UAAW,SAAU,UAAW,OAAQ,OAAQ,SAAU,OAAQ,UAClE,QAAS,OAAQ,MAAO,OAAQ,SAAU,QAAS,QAAS,QAC5D,SAAU,QAAS,QAAS,QAAS,SAAU,UAAW,WAAY,MACtE,WAAY,WAAY,UAAW,QAAS,SAAU,OAAQ,QAC9D,UAAW,SAAU,SAAU,QAAS,UAAW,WAAY,QAC/D,SAAU,WAAY,WAAY,QAAS,QAAS,OAAQ,QAC5D,QAAS,SAAU,SAAU,SAAU,UAAW,SAAU,SAC5D,SAAU,OAAQ,SAAU,QAAS,QAAS,SAAU,WACxD,UAAW,UAAW,QAAS,SAAU,WAAY,YACrD,aAAc,WAAY,QAAS,UAAW,UAAW,SAAU,QACnE,UAAW,UAAW,UAAW,SAAU,WAAY,MAAO,SAC9D,SAAU,UAAW,SAAU,UAAW,QAAS,QAAS,UAC5D,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,QAAS,QACpE,SAAU,QAAS,UAAW,YAAa,SAAU,SAAU,UAC/D,UAAW,OAAQ,QAAS,MAAO,UAAW,WAAY,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,UAAW,QAAS,OACrE,QAAS,QAAS,SAAU,WAAY,OAAQ,SAAU,QAC1D,WAAY,YAAa,OAAQ,QAAS,SAAU,OAAQ,QAC5D,QAAS,SAAU,OAAQ,MAAO,MAAO,QAAS,WAAY,QAC9D,UAAW,OAAQ,QAAS,UAAW,WAAY,QAAS,UAC5D,UAAW,SAAU,WAAY,OAAQ,SAAU,SAAU,QAC7D,OAAQ,YAAa,QAAS,OAAQ,QAAS,OAAQ,SAAU,SACjE,UAAW,UAAW,QAAS,QAAS,QAAS,QAAS,MAAO,WACjE,SAAU,UAAW,UAAW,UAAW,OAAQ,UAAW,QAC9D,SAAU,UAAW,SAAU,OAAQ,UAAW,QAAS,MAAO,UAClE,QAAS,YAAa,OAAQ,OAAQ,UAAW,UAAW,WAC5D,YAAa,UAAW,WAAY,UAAW,UAAW,SAAU,OACpE,UAAW,UAAW,YAAa,WAAY,UAAW,UAC1D,QAAS,SAAU,SAAU,OAAQ,SAAU,QAAS,SAAU,UAClE,SAAU,UAAW,MAAO,QAAS,QAAS,UAAW,QAAS,QAClE,OAAQ,QAAS,UAAW,OAAQ,SAAU,OAAQ,SAAU,UAChE,QAAS,OAAQ,QAAS,SAAU,OAAQ,QAAS,QAAS,QAC9D,QAAS,UAAW,QAAS,SAAU,UAAW,UAAW,QAC7D,QAAS,OAAQ,QAAS,SAAU,QAAS,QAAS,WACtD,YAAa,MAAO,UAAW,WAAY,SAAU,QAAS,SAC9D,QAAS,SAAU,SAAU,WAAY,QAAS,UAAW,QAC7D,WAAY,UAAW,UAAW,SAAU,QAAS,QAAS,SAC9D,QAAS,OAAQ,UAAW,UAAW,WAAY,SAAU,WAC7D,WAAY,OAAQ,UAAW,SAAU,SAAU,OAAQ,YAC3D,UAAW,SAAU,SAAU,SAAU,SAAU,WAAY,OAC/D,OAAQ,SAAU,UAAW,QAAS,QAAS,SAAU,WACzD,SAAU,SAAU,UAAW,SAAU,UAAW,SAAU,SAC9D,QAAS,SAAU,QAAS,QAAS,SAAU,UAAW,SAC1D,SAAU,OAAQ,SAAU,UAAW,SAAU,WAAY,UAC7D,WAAY,UAAW,SAAU,UAAW,QAAS,MAAO,SAC5D,SAAU,SAAU,UAAW,SAAU,SAAU,QAAS,MAAO,SACnE,SAAU,UAAW,SAAU,OAAQ,QAAS,SAAU,QAC1D,UAAW,QAAS,QAAS,QAAS,QAAS,SAAU,SACzD,UAAW,SAAU,QAAS,OAAQ,WAAY,UAAW,UAC7D,SAAU,WAAY,SAAU,UAAW,YAAa,YACxD,WAAY,UAAW,UAAW,WAAY,QAAS,SAAU,UACjE,QAAS,SAAU,SAAU,QAAS,QAAS,SAAU,UAAW,QACpE,UAAW,OAAQ,QAAS,SAAU,SAAU,QAAS,SAAU,SACnE,YAAa,SAAU,UAAW,MAAO,QAAS,QAAS,SAC3D,QAAS,QAAS,SAAU,QAAS,OAAQ,QAAS,OAAQ,QAC9D,UAAW,UAAW,UAAW,OAAQ,SAAU,SAAU,MAAO,QACpE,UAAW,SAAU,WAAY,UAAW,WAAY,UAAW,QACnE,OAAQ,SAAU,QAAS,OAAQ,WAAY,SAAU,OAAQ,SACjE,OAAQ,WAAY,WAAY,UAAW,UAAW,WAAY,SAClE,SAAU,QAAS,UAAW,MAAO,QAAS,SAAU,QAAS,SACjE,UAAW,UAAW,WAAY,QAAS,UAAW,OAAQ,OAC9D,QAAS,QAAS,OAAQ,MAAO,MAAO,QAAS,SAAU,SAC3D,QAAS,OAAQ,OAAQ,QAAS,WAAY,SAAU,MAAO,QAC/D,SAAU,QAAS,SAAU,SAAU,MAAO,WAAY,WAC1D,QAAS,UAAW,SAAU,UAAW,QAAS,SAAU,UAC5D,SAAU,OAAQ,UAAW,SAAU,WAAY,UAAW,UAC9D,OAAQ,SAAU,SAAU,UAAW,SAAU,QAAS,QAAS,OACnE,QAAS,SAAU,QAAS,SAAU,SAAU,UAAW,UAC3D,QAAS,SAAU,SAAU,SAAU,MAAO,SAAU,QAAS,QACjE,QAAS,SAAU,OAAQ,WAAY,YAAa,YAAa,UACjE,SAAU,MAAO,QAAS,UAAW,SAAU,OAAQ,QAAS,QAChE,QAAS,QAAS,OAAQ,QAAS,SAAU,SAAU,QAAS,SAChE,OAAQ,QAAS,SAAU,UAAW,SAAU,SAAU,SAC1D,WAAY,QAAS,UAAW,UAAW,SAAU,QAAS,SAC9D,WAAY,OAAQ,QAAS,QAAS,QAAS,UAAW,WAC1D,WAAY,SAAU,QAAS,SAAU,WAAY,SAAU,SAC/D,WAAY,WAAY,OAAQ,OAAQ,OAAQ,SAAU,UAC1D,WAAY,SAAU,WAAY,WAAY,OAAQ,QAAS,QAC/D,SAAU,UAAW,SAAU,SAAU,QAAS,OAAQ,SAC1D,SAAU,OAAQ,SAAU,QAAS,UAAW,SAAU,aAC1D,UAAW,QAAS,SAAU,UAAW,SAAU,UAAW,SAC9D,UAAW,UAAW,QAAS,UAAW,UAAW,WAAY,UACjE,UAAW,aAAc,OAAQ,QAAS,UAAW,UAAW,SAChE,SAAU,SAAU,QAAS,QAAS,SAAU,SAAU,SAC1D,WAAY,WAAY,YAAa,SAAU,UAAW,UAC1D,QAAS,QAAS,SAAU,SAAU,UAAW,SAAU,UAC3D,SAAU,UAAW,SAAU,UAAW,WAAY,UAAW,UACjE,SAAU,SAAU,YAAa,UAAW,UAAW,OAAQ,UAC/D,UAAW,SAAU,SAAU,OAAQ,QAAS,YAAa,QAC7D,QAAS,QAAS,OAAQ,QAAS,OAAQ,OAAQ,MAAO,OAAQ,OAClE,QAAS,OAAQ,OAAQ,QAc7BnX,EAAOD,QAAU,CACbo0D,iBARJ,WACI,IAAMrzD,EAAO2iC,EAAW8wB,cAAcp9C,GAChC8F,EAASwmB,EAAWixB,kBAAkB,GAE5C,SAAAxpD,OAAUpK,EAAV,KAAAoK,OAAkB+R,mCCxaf,SAASkhD,EAAe68E,GAAiC,IAA1BC,EAA0BjoI,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAf,IAAK4hD,EAAU5hD,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAH,EACzD,OAAOmK,KAAKqM,MAAOrM,KAAKC,UAAqC,IAAxBD,KAAK4P,IAAI6nC,EAAMomF,GAAiBC,GAAaA,GAZtF56I,EAAAQ,EAAAyuB,EAAA,sBAAA6uC,4OCGqB+8E,aAIjB,SAAAA,iGAAc5pG,CAAAz/B,KAAAqpI,GACVrpI,KAAKspI,aAAe,kEAQVC,GACV,IAAMC,EAAmBD,EAAkBn8H,SAE3Cm8H,EAAkBn8H,SAAW,WACzBpN,KAAKspI,aAAenhI,KAAKmM,MADkB,QAAA2zB,EAAA9mC,UAAAvL,OAANsyC,EAAM,IAAAzyC,MAAAwyC,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,GAAAhnC,UAAAgnC,GAE3CqhG,EAAiB71G,MAAM41G,EAAmBrhG,sDAU9C,OAAOloC,KAAKspI,aACNnhI,KAAKmM,MAAQtU,KAAKspI,aAClB,qyCCfd,IAAMzoH,EAASF,oBAAUQ,GASJ4nC,cAQjB,SAAAA,EAAY9mC,EAAMG,EAAc4pB,GAAW,IAAArkC,EAAA,mGAAA83B,CAAAz/B,KAAA+oD,IACvCphD,EAAA+3B,EAAA1/B,KAAA2/B,EAAAopB,GAAAl6D,KAAAmR,QACKiiB,KAAOA,EACZta,EAAKya,aAAeA,EACpBza,EAAKwgD,SAAW,GAChBxgD,EAAK8hI,aAAez9F,EAAUyc,IAC9B9gD,EAAK+hI,aAAe19F,EAAUyZ,IAC9B99C,EAAKo3D,iBAAmB,CACpBw2C,qBAAqB,EACrBC,qBAAqB,GATc7tG,wPARKgiI,2CAyB3Cj1H,GACDq5E,EAAApuD,EAAAopB,EAAAz4D,WAAA,OAAA0P,MAAAnR,KAAAmR,KAAW0U,GACX1U,KAAK0U,WAAWzG,WAAWjO,KAAK4pI,SAAS15I,KAAK8P,MAC1C,oBAAqB,KAAM,MAAO,KAAM,uCAOvCoT,GACL,IAAM7G,EAAMymC,EAAE5/B,GAAIme,KAAK,UAAUhwB,KAAK,OAChC8zB,EAAS2d,EAAE5/B,GAAIme,KAAK,UAAUhwB,KAAK,UACnCsoI,EAAUz2H,EAAGxQ,aAAa,QAG1BknI,EAAM9uI,cAAI,CAAEiM,KAAM,SACpBkM,GAAI02H,EACJ3iI,GAAIkM,EAAGxQ,aAAa,QAGxBie,EAAOjc,IAAP,aAAAvL,OAAwBg8B,EAAxB,UAAAh8B,OAAuCwwI,GAAWz2H,GAClD,IAAI22H,EAAO/pI,KAAKmoD,SAAS57C,GAEzB,GAAe,qBAAX8oB,EAA+B,CAC/B,IAAK00G,EAaD,OAZAD,EAAIjvI,MAAM,CAAEoM,KAAM,UAClB6iI,EAAI/6I,EAAE,QAAS,CAAEkY,KAAM,WAClBlY,EAAE,iBAAkB,CACjBkX,MAAO,wCAEVE,KACApX,EAAE,kBAAmB,CAClBkX,MAAO,6BAEf4a,EAAO1b,KAAK,qBAAsBiO,GAClCpT,KAAK0U,WAAWnH,KAAKu8H,IAEd,EAIX,GAAID,IAAYE,EAAKjrE,UAcjB,OAbAj+C,EAAO1b,KACH,8BAA+BoH,EAAKw9H,EAAKjrE,UAAW1rD,GACxD02H,EAAIjvI,MAAM,CAAEoM,KAAM,UAClB6iI,EAAI/6I,EAAE,QAAS,CAAEkY,KAAM,WAClBlY,EAAE,iBAAkB,CACjBkX,MAAO,wCAEVE,KACApX,EAAE,kBAAmB,CAClBkX,MAAO,6BAEfjG,KAAK0U,WAAWnH,KAAKu8H,IAEd,OAER,QAAavpI,IAATwpI,EAYP,OATAD,EAAIjvI,MAAM,CAAEoM,KAAM,UAClB6iI,EAAI/6I,EAAE,QAAS,CAAEkY,KAAM,WAClBlY,EAAE,sBAAuB,CACtBkX,MAAO,wCAEVE,KACL0a,EAAO1b,KAAK,uBAAwBoH,EAAK6G,GACzCpT,KAAK0U,WAAWnH,KAAKu8H,IAEd,EAEX,IAAMx1H,EAAMhmB,OAAO82D,YAAY9wC,MAKzBi2B,EAAgD,UAAxCzvC,UAAQoJ,mBAAmB2lI,GAIzC,OAAQx0G,GACR,IAAK,mBACDxU,EAAOjc,IAAI,sCAAuC0P,GAClD,IAAM01H,EAAah3F,EAAE5/B,GAAIme,KAAK,qBAE9B,GAAIy4G,GAAcA,EAAWp0I,OAAS,EAAG,CACrC,IAAM4oI,EAAawL,EAAWzoI,KAAK,SAC7Bk9H,EAAauL,EAAWzoI,KAAK,SAEnCvB,KAAKoiB,aAAa6C,KACdsgC,IAAWhxD,uBACI,SAAfiqI,EACe,SAAfC,GAGR59G,EAAO3b,KAAP,wBAAA7L,OAC4BwwI,EAD5B,QAAAxwI,OAEWkxC,EAAQ,GAAK,QAFxB,SAGAw/F,EACM,IAAInrE,IACF5rB,EAAE5/B,GAAIme,KAAK,UAAUhwB,KAAK,OAC1ByxC,EAAE5/B,GAAI7R,KAAK,MACXsoI,EACA7pI,KAAK0U,WACL1U,KAAK++D,iBACLx0B,EAAQvqC,KAAK0pI,aAAe1pI,KAAKypI,aACjCl/F,GACgB,GAExBvqC,KAAKmoD,SAAS4hF,EAAKx9H,KAAOw9H,EAE1B/pI,KAAKoiB,aAAa6C,KAAKsgC,IAAWx0D,cAC9Bg5I,EAAM/2F,EAAE5/B,GAAIme,KAAK,WAAYjd,GACjC,MAEJ,IAAK,iBACDtU,KAAKoiB,aAAa6C,KACdsgC,IAAWz0D,cAAei5I,EAAM/2F,EAAE5/B,GAAIme,KAAK,YAC/C,MAEJ,IAAK,iBACDw4G,EAAKE,eAAej3F,EAAE5/B,GAAIme,KAAK,YAC/B,MAEJ,IAAK,iBACDvxB,KAAKoiB,aAAa6C,KACdsgC,IAAW5wD,eAAgBo1I,EAAM/2F,EAAE5/B,GAAIme,KAAK,YAChD,MAEJ,IAAK,oBACD1Q,EAAOjc,IAAI,iBAAkBmlI,EAAKx9H,KAClC,IAAI06D,EAAkB,KAClBC,EAAa,KAEbl0B,EAAE5/B,GAAIme,KAAK,kBAAkB37B,SAC7BqxE,EACMj0B,EAAE5/B,GAAIme,KAAK,yBAAyB,GAAGpxB,QAC7C+mE,EAAal0B,EAAE5/B,GAAIme,KAAK,uBAAuB5vB,QAEnD3B,KAAKgnE,UAAU+iE,EAAKx9H,IAAK06D,EAAiBC,GAC1ClnE,KAAKoiB,aAAa6C,KAAKsgC,IAAWv0D,WAC9B+4I,EAAM9iE,EAAiBC,GAC3B,MAEJ,IAAK,oBACDrmD,EAAO3b,KAAK,oCAAqCoP,GACjD0N,IAAW6K,cAAc6J,YACrBnC,IACA,CACIkxB,IAAKlb,EACL56C,MAAO2kB,KAGfy1H,EAAKG,iBAAiBl3F,EAAE5/B,GAAIme,KAAK,WAAY,WACzC,IAAM44G,EAAc77I,OAAO82D,YAAY9wC,MAEvCuM,EAAO3b,KAAK,sCAAuCilI,GACnDnoH,IAAW6K,cAAc6J,YACrBlC,IACA,CACIixB,IAAKlb,EACL56C,MAAOw6I,MAEhB,SAAAnlI,GACC+3B,IAAqBC,iBAAiBh4B,GACtC6b,EAAO7b,MAAM,2BAA4BA,GACzC+kI,EAAKK,wBAET,MACJ,IAAK,YACL,IAAK,aACDL,EAAKM,gBAAgBr3F,EAAE5/B,GAAIme,KAAK,oBAChC,MACJ,IAAK,eACL,IAAK,gBACDw4G,EAAKO,mBAAmBt3F,EAAE5/B,GAAIme,KAAK,oBACnC,MACJ,QACI1Q,EAAO1b,KAAK,gCAAiCkwB,GAC7Cy0G,EAAIjvI,MAAM,CAAEoM,KAAM,UAClB6iI,EAAI/6I,EAAE,QAAS,CAAEkY,KAAM,WAClBlY,EAAE,cACC,CAAEkX,MAAO,wCACZE,KAKT,OAFAnG,KAAK0U,WAAWnH,KAAKu8H,IAEd,8CAUSS,EAAIvpF,GACpB,IAAM+oF,EACA,IAAInrE,IACFhtC,IAAWgxB,gBAAgB,IAC3B2nF,EACAvpF,EACAhhD,KAAK0U,WACL1U,KAAK++D,iBACL/+D,KAAK0pI,cACK,GACM,GAIxB,OAFA1pI,KAAKmoD,SAAS4hF,EAAKx9H,KAAOw9H,EAEnBA,oCASDx9H,EAAK06D,EAAiBC,GACxBlnE,KAAKmoD,SAAS53D,eAAegc,KACI,UAA7BvM,KAAKmoD,SAAS57C,GAAK+zD,OACnBtgE,KAAKmoD,SAAS57C,GAAKi+H,aAAavjE,EAAiBC,UAE9ClnE,KAAKmoD,SAAS57C,wDAOD,IAAA/D,EAAAxI,KAaxBA,KAAK0U,WAAWpG,OACZtT,cAAI,CAAEiM,KAAM,MACRkM,GAAInT,KAAK0U,WAAWva,SACnBpL,EAAE,WAAY,CAAEkX,MAAO,wBAC5B,SAAAm+B,GACI,IAAMqmG,EAAa,GAEnBz3F,EAAE5O,GAAK7S,KAAK,qBAAqBwhB,KAAK,SAACxC,EAAKrwC,GAGxC,IAAMwqI,EAAO,GACPzjI,GAFN/G,EAAK8yC,EAAE9yC,IAESqB,KAAK,QAErB,OAAQ0F,GACR,IAAK,OACDyjI,EAAKnnF,KAAL,QAAAlqD,OAAoB6G,EAAGqB,KAAK,SACxBrB,EAAGqB,KAAK,UACRmpI,EAAKnnF,MAAL,IAAAlqD,OAAiB6G,EAAGqB,KAAK,UAE7BkpI,EAAWvnI,KAAKwnI,GAChB,MACJ,IAAK,OACL,IAAK,QACDA,EAAKnnF,KAAL,GAAAlqD,OAAe4N,EAAf,KACA,IAAMm7C,EAAWliD,EAAGqB,KAAK,YAKzB,GAAI6gD,EAAU,CACV,IAAM3uC,EACAssB,UAAUmY,UAAUzkC,MAClB,4BAEJA,GAASqF,SAASrF,EAAM,GAAI,IAAM,GAClCi3H,EAAKnnF,MAAL,GAAAlqD,OAAgB+oD,EAAhB,KAGAsoF,EAAKtoF,SAAWA,EAGxBsoF,EAAKnnF,MAAQrjD,EAAGqB,KAAK,QACRrB,EAAGqB,KAAK,UAGjBmpI,EAAKnnF,MAAL,IAAAlqD,OAAiB6G,EAAGqB,KAAK,UAE7B,IAAMif,EAAYtgB,EAAGqB,KAAK,aAEtBif,GAA2B,QAAdA,IACbkqH,EAAKnnF,MAAL,cAAAlqD,OAA2BmnB,IAG/BkqH,EAAKC,WAAazqI,EAAGqB,KAAK,aACfmpI,EAAKC,WAChBF,EAAWvnI,KAAKwnI,MAMxB,IAAMvjI,EAAUqB,EAAKyZ,KAAK9a,QAEtBA,EAAQq+C,cAGRh9C,EAAKihI,aAAa/gF,WACZ+hF,EAAWz5G,OAAO,SAAAvgC,GAAC,OAAIA,EAAE8yD,KAAK9wB,WAAW,YAG/CtrB,EAAQs+C,KAAOt+C,EAAQs+C,IAAID,cAC3Bh9C,EAAKkhI,aAAahhF,WAAa+hF,IAGpC,SAAAp6H,GACCwQ,EAAO1b,KAAK,kCAAmCkL,GAC/CwQ,EAAO1b,KAAK,mFASf,IAAA4I,EAAA/N,KACChH,EAAO,GAgBb,OAdA5J,OAAOmW,KAAKvF,KAAKmoD,UAAU74C,QAAQ,SAAA/C,GAC/B,IACMoyC,EADU5wC,EAAKo6C,SAAS57C,GACXmX,eAEfi7B,GAAMA,EAAG24D,YAETt+G,EAAI,UAAAK,OAAWkT,IAAS,CACpB+qG,UAAW34D,EAAG24D,UACd7rF,MAAOkzB,EAAGlzB,MACV0b,IAAK74C,OAAOitB,SAAS87E,SAK1Br+F,oGC1Xf7K,EAAOD,QAAU,CAAE0+E,YAhBnB,SAAqB/vD,GACjB,IAAKA,EACD,OAAO,EAGX,IAAoBnuB,EAAVwJ,EAAO,EAEjB,IAAKxJ,EAAI,EAAGA,EAAImuB,EAAOjnB,OAAQlH,IAE3BwJ,GADO2kB,EAAOjmB,WAAWlI,GACV4c,KAAK4P,IAAI,GAAI2B,EAAOjnB,OAAS,EAAIlH,GAChDwJ,EAAOoT,KAAK6P,IAAW,EAAPjjB,GAGpB,OAAOA,wQChBX,IAAM2oB,EAASF,oBAAUQ,GAOJg/C,aAiBjB,SAAAA,EACQ5zD,EACAsyD,EACAC,EACApqD,EACAqqD,EACA/yB,EACAgzB,gGAAav/B,CAAAz/B,KAAAmgE,GACjBngE,KAAKuM,IAAMA,EACXvM,KAAK6+D,SAAWA,EAChB7+D,KAAK8+D,UAAYA,EACjB9+D,KAAK0U,WAAaA,EAClB1U,KAAK++D,iBAAmBA,EACxB/+D,KAAKgsC,UAAYA,EAOjBhsC,KAAKg/D,YAAcA,EAMnBh/D,KAAKojE,SAAU,EAKfpjE,KAAKqjE,cAAgB,GAMrBrjE,KAAK2pD,KAAO,KAMZ3pD,KAAKsgE,MAAQ,KAMbtgE,KAAKkxD,IAAM,+DA6BJvH,EAAMuH,EAAK/pD,GAClB,GAAmB,OAAfnH,KAAKsgE,MAAgB,CACrB,IAAMxjC,EAAM,kCAAAzjC,OAC4B2G,KAAKuM,IADjC,kCAAAlT,OAEM2G,KAAKsgE,OAGvB,MADAz/C,EAAO7b,MAAM83B,GACP,IAAIpmC,MAAMomC,GAEpB98B,KAAK2pD,KAAOA,EACZ3pD,KAAKkxD,IAAMA,EACXlxD,KAAKsgE,MAAQC,IACbvgE,KAAK4qI,aAAazjI,wCASTA,6CAWIksC,uCASb,OAAOrzC,KAAKsgE,yCAULjtB,0CAOGA,sCAeJkO,EAASojB,EAASx9D,wCAWhB+rC,EAAQqO,EAASojB,+CAMzB,OAAO3kE,KAAKg/D,YAAch/D,KAAK6+D,SAAW7+D,KAAK8+D,+CA/G/C,OAAO9+D,KAAKg/D,YAAch/D,KAAK6+D,SAAW7+D,KAAK8+D,+CAQ/C,OAAO9+D,KAAKg/D,YAAch/D,KAAK8+D,UAAY9+D,KAAK6+D,g/BCtFxD,IAAMh+C,EAASF,oBAAUQ,GAMJy+C,cAIjB,SAAAA,IAAc,IAAAj4D,EAAA,mGAAA83B,CAAAz/B,KAAA4/D,IACVj4D,EAAA+3B,EAAA1/B,KAAA2/B,EAAAigC,GAAA/wE,KAAAmR,QAUK6qI,WAAa,IAAI1oH,IAMtBxa,EAAK01H,SAAW,KAjBN11H,wPAJ8BmjI,kDA4BhCnhF,GAAM,IAAAnhD,EAAAxI,KACR+qI,EAAc/qI,KAAKq9H,SAEzBr9H,KAAKq9H,SAAW1zE,EACZohF,IACAA,EAAYlb,uBACR,aAAc7vH,KAAKgrI,mBACvBD,EAAYlb,uBACR,aAAc7vH,KAAKirI,mBACvBF,EAAYlb,uBACR,YAAa7vH,KAAKkrI,oBAEtBvhF,IAEA3pD,KAAKgrI,kBAAoB,SAAC9pI,EAAMlL,GAC5BwS,EAAK4Z,aAAa6C,KACdkyF,IACAnhH,EAAM2uC,IAAgC,SAAfzjC,EAAKvR,QAEpCg6D,EAAKgmE,oBAAoB,aAAc3vH,KAAKgrI,mBAE5ChrI,KAAKirI,kBAAoB,SAAC/pI,EAAMlL,GAC5BwS,EAAK4Z,aAAa6C,KACdkyF,IACAnhH,EAAM2uC,IAAgC,SAAfzjC,EAAKvR,QAEpCg6D,EAAKgmE,oBAAoB,aAAc3vH,KAAKirI,mBAE5CjrI,KAAKkrI,kBAAoB,SAAChqI,EAAMlL,GAC5BwS,EAAK4Z,aAAa6C,KACdkyF,IACAnhH,EAAMkL,EAAKvR,QAEnBg6D,EAAKgmE,oBAAoB,YAAa3vH,KAAKkrI,6DAOlCz9F,EAAO7W,GACpB,GAAI52B,KAAKq9H,SACL,OAAOr9H,KAAKq9H,SAAS8N,qBAAqB19F,EAAO7W,GAErD/V,EAAO7b,MAAM,uFAMJwjB,GACT,OAAOxoB,KAAK6qI,WAAWt7I,IAAIi5B,wCASlBA,EAAM6qC,GACf,GAAoB,iBAAT7qC,EACP,MAAM,IAAItyB,UAAJ,QAAAmD,OAAsBmvB,EAAtB,uBAEVxoB,KAAK6qI,WAAW/mH,IAAI0E,EAAM6qC,+8BCxFby3E,gaAAuBlrG,mDAO3BpX,GACT,MAAM,IAAI9xB,MAAM,4DAcH+2C,EAAO7W,GACpB,MAAM,IAAIlgC,MAAM,sTCnCHopE,aAIjB,SAAAA,iGAAcrgC,CAAAz/B,KAAA8/D,GACV9/D,KAAKorI,OAASjpI,IAAMo2E,MAAMv4E,KAAKqrI,mBAAmBn7I,KAAK8P,MAAO,GAC9DA,KAAKsrI,UAAW,yDAOhBtrI,KAAKorI,OAAOG,kDAMGC,EAAMjpE,GACrBipE,EAAKjpE,gCAoBJipE,EAAM9/H,GACH1L,KAAKsrI,SACL5/H,GAAYA,EAAS,IAAIhV,MAAM,+BAInCsJ,KAAKorI,OAAOloI,KAAKsoI,EAAM9/H,sCAQvB1L,KAAKsrI,UAAW,yDC3DxB,SAAArzD,EAAAwzD,GAAA,IAAAtiD;;;;;;;;;;;;;;;CASA,WAEA,IAGAn7F,EAAA09I,EAHAvpI,EAAA,GAeA,SAAAwpI,EAAAC,GACA,IAAAC,GAAA,EACA,kBACA,GAAAA,EAAA,UAAAn1I,MAAA,gCACAm1I,GAAA,EACAD,EAAAj4G,MAAA3lC,EAAAmT,YAdA,OADAnT,EAAAgS,QAEA0rI,EAAA19I,EAAAmU,OAGAA,EAAA2pI,WAAA,WAEA,OADA99I,EAAAmU,MAAAupI,EACAvpI,GAcA,IAAA4pI,EAAA38I,OAAAkB,UAAAyF,SAEAi2I,EAAAv2I,MAAAC,SAAA,SAAAN,GACA,yBAAA22I,EAAAl9I,KAAAuG,IAGA62I,EAAA,SAAAz2I,EAAAH,GACA,GAAAG,EAAA8Z,QACA,OAAA9Z,EAAA8Z,QAAAja,GAEA,QAAA3G,EAAA,EAAuBA,EAAA8G,EAAAI,OAAgBlH,GAAA,EACvC2G,EAAAG,EAAA9G,KAAA8G,IAIA02I,EAAA,SAAA12I,EAAAH,GACA,GAAAG,EAAAgQ,IACA,OAAAhQ,EAAAgQ,IAAAnQ,GAEA,IAAAs+F,EAAA,GAIA,OAHAs4C,EAAAz2I,EAAA,SAAAa,EAAA3H,EAAAqI,GACA48F,EAAAzwF,KAAA7N,EAAAgB,EAAA3H,EAAAqI,MAEA48F,GAaAw4C,EAAA,SAAA/2I,GACA,GAAAhG,OAAAmW,KACA,OAAAnW,OAAAmW,KAAAnQ,GAEA,IAAAmQ,EAAA,GACA,QAAA9D,KAAArM,EACAA,EAAA7E,eAAAkR,IACA8D,EAAArC,KAAAzB,GAGA,OAAA8D,QAMA,IAAA0yE,KAAA,UAgBA91E,EAAA62E,SAAAf,EAAAe,SAEA72E,EAAAspI,kBADA,IAAAA,EACA,SAAAG,GAEAH,EAAAG,IAIAzpI,EAAA62E,UAvBA,mBAAAyyD,GACAtpI,EAAA62E,SAAA,SAAA4yD,GAEAH,EAAAG,IAEAzpI,EAAAspI,aAAAtpI,EAAA62E,WAGA72E,EAAA62E,SAAA,SAAA4yD,GACAnhI,WAAAmhI,EAAA,IAEAzpI,EAAAspI,aAAAtpI,EAAA62E,UAgBA72E,EAAA4wC,KAAA,SAAAv9C,EAAAH,EAAAqW,GAEA,GADAA,KAAA,cACAlW,EAAAI,OACA,OAAA8V,IAEA,IAAAspG,EAAA,EAIA,SAAAvvF,EAAApV,GACAA,GACA3E,EAAA2E,GACA3E,EAAA,eAGAspG,GAAA,IACAx/G,EAAAI,QACA8V,IAXAugI,EAAAz2I,EAAA,SAAAa,GACAhB,EAAAgB,EAAAs1I,EAAAlmH,OAeAtjB,EAAAmN,QAAAnN,EAAA4wC,KAEA5wC,EAAAiqI,WAAA,SAAA52I,EAAAH,EAAAqW,GAEA,GADAA,KAAA,cACAlW,EAAAI,OACA,OAAA8V,IAEA,IAAAspG,EAAA,EACAq3B,EAAA,WACAh3I,EAAAG,EAAAw/G,GAAA,SAAA3kG,GACAA,GACA3E,EAAA2E,GACA3E,EAAA,eAGAspG,GAAA,IACAx/G,EAAAI,OACA8V,IAGA2gI,OAKAA,KAEAlqI,EAAAmqI,cAAAnqI,EAAAiqI,WAEAjqI,EAAAoqI,UAAA,SAAA/2I,EAAAg3I,EAAAn3I,EAAAqW,GACA+gI,EAAAD,GACA74G,MAAA,MAAAn+B,EAAAH,EAAAqW,KAEAvJ,EAAAuqI,aAAAvqI,EAAAoqI,UAEA,IAAAE,EAAA,SAAAD,GAEA,gBAAAh3I,EAAAH,EAAAqW,GAEA,GADAA,KAAA,cACAlW,EAAAI,QAAA42I,GAAA,EACA,OAAA9gI,IAEA,IAAAspG,EAAA,EACA23B,EAAA,EACAC,EAAA,GAEA,SAAAC,IACA,GAAA73B,GAAAx/G,EAAAI,OACA,OAAA8V,IAGA,KAAAkhI,EAAAJ,GAAAG,EAAAn3I,EAAAI,QAEAg3I,GAAA,EACAv3I,EAAAG,GAFAm3I,GAAA,GAEA,YAAAt8H,GACAA,GACA3E,EAAA2E,GACA3E,EAAA,eAIAkhI,GAAA,GADA53B,GAAA,IAEAx/G,EAAAI,OACA8V,IAGAmhI,OApBA,KA8BAC,EAAA,SAAAlB,GACA,kBACA,IAAA1jG,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,WACA,OAAAyqI,EAAAj4G,MAAA,MAAAxxB,EAAA4wC,MAAA15C,OAAA6uC,MASA6kG,EAAA,SAAAnB,GACA,kBACA,IAAA1jG,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,WACA,OAAAyqI,EAAAj4G,MAAA,MAAAxxB,EAAAiqI,YAAA/yI,OAAA6uC,MAKA8kG,EAAA,SAAAC,EAAAz3I,EAAAH,EAAAqW,GAIA,GAHAlW,EAAA02I,EAAA12I,EAAA,SAAAa,EAAA3H,GACA,OAAoBuiC,MAAAviC,EAAAiB,MAAA0G,KAEpBqV,EAMS,CACT,IAAAioF,EAAA,GACAs5C,EAAAz3I,EAAA,SAAAa,EAAAqV,GACArW,EAAAgB,EAAA1G,MAAA,SAAA0gB,EAAA2hC,GACA2hD,EAAAt9F,EAAA46B,OAAA+gB,EACAtmC,EAAA2E,MAEa,SAAAA,GACb3E,EAAA2E,EAAAsjF,UAbAs5C,EAAAz3I,EAAA,SAAAa,EAAAqV,GACArW,EAAAgB,EAAA1G,MAAA,SAAA0gB,GACA3E,EAAA2E,QAeAlO,EAAAqD,IAAAsnI,EAAAE,GACA7qI,EAAA+qI,UAAAH,EAAAC,GACA7qI,EAAAgrI,SAAA,SAAA33I,EAAAg3I,EAAAn3I,EAAAqW,GACA,OAAA0hI,EAAAZ,EAAAY,CAAA53I,EAAAH,EAAAqW,IAGA,IAAA0hI,EAAA,SAAAZ,GACA,OA3CA,SAAAA,EAAAZ,GACA,kBACA,IAAA1jG,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,WACA,OAAAyqI,EAAAj4G,MAAA,MAAA84G,EAAAD,IAAAnzI,OAAA6uC,KAwCAmlG,CAAAb,EAAAQ,IAKA7qI,EAAAuD,OAAA,SAAAlQ,EAAA83I,EAAAj4I,EAAAqW,GACAvJ,EAAAiqI,WAAA52I,EAAA,SAAAa,EAAAqV,GACArW,EAAAi4I,EAAAj3I,EAAA,SAAAga,EAAA2hC,GACAs7F,EAAAt7F,EACAtmC,EAAA2E,MAES,SAAAA,GACT3E,EAAA2E,EAAAi9H,MAIAnrI,EAAAorI,OAAAprI,EAAAuD,OAEAvD,EAAAqrI,MAAArrI,EAAAuD,OAEAvD,EAAAsrI,YAAA,SAAAj4I,EAAA83I,EAAAj4I,EAAAqW,GACA,IAAAgiI,EAAAxB,EAAA12I,EAAA,SAAAa,GACA,OAAAA,IACSkmG,UACTp6F,EAAAuD,OAAAgoI,EAAAJ,EAAAj4I,EAAAqW,IAGAvJ,EAAAwrI,MAAAxrI,EAAAsrI,YAEA,IAAAG,EAAA,SAAAX,EAAAz3I,EAAAH,EAAAqW,GACA,IAAAioF,EAAA,GAIAs5C,EAHAz3I,EAAA02I,EAAA12I,EAAA,SAAAa,EAAA3H,GACA,OAAoBuiC,MAAAviC,EAAAiB,MAAA0G,KAEpB,SAAAA,EAAAqV,GACArW,EAAAgB,EAAA1G,MAAA,SAAAqiD,GACAA,GACA2hD,EAAAzwF,KAAA7M,GAEAqV,OAES,SAAA2E,GACT3E,EAAAwgI,EAAAv4C,EAAAryF,KAAA,SAAAvK,EAAAC,GACA,OAAAD,EAAAk6B,MAAAj6B,EAAAi6B,QACa,SAAA56B,GACb,OAAAA,EAAA1G,YAIAwS,EAAA6uB,OAAA87G,EAAAc,GACAzrI,EAAA0rI,aAAAd,EAAAa,GAEAzrI,EAAA2rI,OAAA3rI,EAAA6uB,OACA7uB,EAAA4rI,aAAA5rI,EAAA0rI,aAEA,IAAAG,EAAA,SAAAf,EAAAz3I,EAAAH,EAAAqW,GACA,IAAAioF,EAAA,GAIAs5C,EAHAz3I,EAAA02I,EAAA12I,EAAA,SAAAa,EAAA3H,GACA,OAAoBuiC,MAAAviC,EAAAiB,MAAA0G,KAEpB,SAAAA,EAAAqV,GACArW,EAAAgB,EAAA1G,MAAA,SAAAqiD,GACAA,GACA2hD,EAAAzwF,KAAA7M,GAEAqV,OAES,SAAA2E,GACT3E,EAAAwgI,EAAAv4C,EAAAryF,KAAA,SAAAvK,EAAAC,GACA,OAAAD,EAAAk6B,MAAAj6B,EAAAi6B,QACa,SAAA56B,GACb,OAAAA,EAAA1G,YAIAwS,EAAAmhC,OAAAwpG,EAAAkB,GACA7rI,EAAA8rI,aAAAlB,EAAAiB,GAEA,IAAA11F,EAAA,SAAA20F,EAAAz3I,EAAAH,EAAA64I,GACAjB,EAAAz3I,EAAA,SAAAa,EAAAqV,GACArW,EAAAgB,EAAA,SAAAoP,GACAA,GACAyoI,EAAA73I,GACA63I,EAAA,cAGAxiI,OAGS,SAAA2E,GACT69H,OAGA/rI,EAAAgsI,OAAArB,EAAAx0F,GACAn2C,EAAAisI,aAAArB,EAAAz0F,GAEAn2C,EAAA8hF,KAAA,SAAAzuF,EAAAH,EAAA64I,GACA/rI,EAAA4wC,KAAAv9C,EAAA,SAAAa,EAAAqV,GACArW,EAAAgB,EAAA,SAAA27C,GACAA,IACAk8F,GAAA,GACAA,EAAA,cAEAxiI,OAES,SAAA2E,GACT69H,GAAA,MAIA/rI,EAAAksI,IAAAlsI,EAAA8hF,KAEA9hF,EAAAyxF,MAAA,SAAAp+F,EAAAH,EAAA64I,GACA/rI,EAAA4wC,KAAAv9C,EAAA,SAAAa,EAAAqV,GACArW,EAAAgB,EAAA,SAAA27C,GACAA,IACAk8F,GAAA,GACAA,EAAA,cAEAxiI,OAES,SAAA2E,GACT69H,GAAA,MAIA/rI,EAAAorC,IAAAprC,EAAAyxF,MAEAzxF,EAAAmsI,OAAA,SAAA94I,EAAAH,EAAAqW,GACAvJ,EAAAqD,IAAAhQ,EAAA,SAAAa,EAAAqV,GACArW,EAAAgB,EAAA,SAAAga,EAAAk+H,GACAl+H,EACA3E,EAAA2E,GAGA3E,EAAA,MAAoC/b,MAAA0G,EAAAk4I,gBAG3B,SAAAl+H,EAAAsjF,GACT,GAAAtjF,EACA,OAAA3E,EAAA2E,GAOA3E,EAAA,KAAAwgI,EAAAv4C,EAAAryF,KAJA,SAAAktI,EAAAC,GACA,IAAA13I,EAAAy3I,EAAAD,SAAAv3I,EAAAy3I,EAAAF,SACA,OAAAx3I,EAAAC,GAAA,EAAAD,EAAAC,EAAA,MAEA,SAAAX,GACA,OAAAA,EAAA1G,YAMAwS,EAAAusI,KAAA,SAAAC,EAAAjjI,GACAA,KAAA,aACA,IAAAnG,EAAA4mI,EAAAwC,GACAC,EAAArpI,EAAA3P,OACA,IAAAg5I,EACA,OAAAljI,IAGA,IAAAioF,EAAA,GAEA/+C,EAAA,GACAzK,EAAA,SAAAyhG,GACAh3F,EAAAzhB,QAAAy4G,IAUAiD,EAAA,WACAD,IACA3C,EAAAr3F,EAAAvS,MAAA,YAAAupG,GACAA,OAIAzhG,EAAA,WACA,IAAAykG,EAAA,CACA,IAAAE,EAAApjI,EAEAA,EAAA,aAEAojI,EAAA,KAAAn7C,MAIAs4C,EAAA1mI,EAAA,SAAA9D,GACA,IAAA+pI,EAAAQ,EAAA2C,EAAAltI,IAAAktI,EAAAltI,GAAA,CAAAktI,EAAAltI,IACAstI,EAAA,SAAA1+H,GACA,IAAA63B,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GAIA,GAHA+mC,EAAAtyC,QAAA,IACAsyC,IAAA,IAEA73B,EAAA,CACA,IAAA2+H,EAAA,GACA/C,EAAAE,EAAAx4C,GAAA,SAAAs7C,GACAD,EAAAC,GAAAt7C,EAAAs7C,KAEAD,EAAAvtI,GAAAymC,EACAx8B,EAAA2E,EAAA2+H,GAEAtjI,EAAA,kBAGAioF,EAAAlyF,GAAAymC,EACA/lC,EAAAspI,aAAAoD,IAGAK,EAAA1D,EAAAnpG,MAAA,EAAA/2B,KAAA6P,IAAAqwH,EAAA51I,OAAA,QACAu5I,EAAA,WACA,OAlaA95I,EAkaA,SAAA0B,EAAAV,GACA,OAAAU,GAAA48F,EAAApjG,eAAA8F,IAnaAi3I,GAoaiB,IApajB93I,EAkaA05I,GAjaAxpI,OACAlQ,EAAAkQ,OAAArQ,EAAAi4I,IAEArB,EAAAz2I,EAAA,SAAAa,EAAA3H,EAAAqI,GACAu2I,EAAAj4I,EAAAi4I,EAAAj3I,EAAA3H,EAAAqI,KAEAu2I,MA6ZiB35C,EAAApjG,eAAAkR,GApajB,IAAAjM,EAAAH,EAAAi4I,GAsaA,GAAA6B,IACA3D,IAAA51I,OAAA,GAAAm5I,EAAAp7C,OAEA,CACA,IAAAvvE,EAAA,WACA+qH,OA1DA,SAAAvD,GACA,QAAAl9I,EAAA,EAA2BA,EAAAkmD,EAAAh/C,OAAsBlH,GAAA,EACjD,GAAAkmD,EAAAlmD,KAAAk9I,EAEA,YADAh3F,EAAA3wC,OAAAvV,EAAA,GAwDA81B,CAAAJ,GACAonH,IAAA51I,OAAA,GAAAm5I,EAAAp7C,KAGAxpD,EAAA/lB,OAKAjiB,EAAAgnI,MAAA,SAAAtwB,EAAA2yB,EAAA9/H,GACA,IACA0jI,EAAA,GAEA,mBAAAv2B,IACAntG,EAAA8/H,EACAA,EAAA3yB,EACAA,EANA,GASAA,EAAA//F,SAAA+/F,EAAA,KATA,EAUA,IAAAw2B,EAAA,SAAAC,EAAAC,GAQA,IAPA,IAAAC,EAAA,SAAAhE,EAAAiE,GACA,gBAAAC,GACAlE,EAAA,SAAAn7H,EAAA5K,GACAiqI,GAAAr/H,GAAAo/H,EAAA,CAA8Dp/H,MAAA5K,YACzC8pI,KAGrB12B,GACAu2B,EAAAlsI,KAAAssI,EAAAhE,IAAA3yB,GAAA,KAEA12G,EAAAwtI,OAAAP,EAAA,SAAA3pH,EAAAzsB,GACAA,MAAApD,OAAA,IACA05I,GAAA5jI,GAAA1S,EAAAqX,IAAArX,EAAAyM,WAIA,OAAAiG,EAAA2jI,OAGAltI,EAAAytI,UAAA,SAAAjB,EAAAjjI,GAEA,GADAA,KAAA,cACAsgI,EAAA2C,GAAA,CACA,IAAAt+H,EAAA,IAAA3Z,MAAA,6DACA,OAAAgV,EAAA2E,GAEA,IAAAs+H,EAAA/4I,OACA,OAAA8V,IAEA,IAAAmkI,EAAA,SAAAx6I,GACA,gBAAAgb,GACA,GAAAA,EACA3E,EAAAioB,MAAA,KAAAxyB,WACAuK,EAAA,iBAEA,CACA,IAAAw8B,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACAqkB,EAAAnwB,EAAAmwB,OACAA,EACA0iB,EAAAhlC,KAAA2sI,EAAArqH,IAGA0iB,EAAAhlC,KAAAwI,GAEAvJ,EAAAspI,aAAA,WACAp2I,EAAAs+B,MAAA,KAAAuU,QAKA2nG,EAAA1tI,EAAA9M,SAAAs5I,GAAAkB,IAGA,IAAAC,EAAA,SAAA7C,EAAA0B,EAAAjjI,GAEA,GADAA,KAAA,aACAsgI,EAAA2C,GACA1B,EAAAznI,IAAAmpI,EAAA,SAAA/C,EAAAlgI,GACAkgI,GACAA,EAAA,SAAAv7H,GACA,IAAA63B,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACA+mC,EAAAtyC,QAAA,IACAsyC,IAAA,IAEAx8B,EAAA7c,KAAA,KAAAwhB,EAAA63B,MAGax8B,OAEb,CACA,IAAAioF,EAAA,GACAs5C,EAAAl6F,KAAAo5F,EAAAwC,GAAA,SAAAltI,EAAAiK,GACAijI,EAAAltI,GAAA,SAAA4O,GACA,IAAA63B,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACA+mC,EAAAtyC,QAAA,IACAsyC,IAAA,IAEAyrD,EAAAlyF,GAAAymC,EACAx8B,EAAA2E,MAEa,SAAAA,GACb3E,EAAA2E,EAAAsjF,OAKAxxF,EAAA4tI,SAAA,SAAApB,EAAAjjI,GACAokI,EAAA,CAAmBtqI,IAAArD,EAAAqD,IAAAutC,KAAA5wC,EAAA4wC,MAAmC47F,EAAAjjI,IAGtDvJ,EAAA6tI,cAAA,SAAArB,EAAAnC,EAAA9gI,GACAokI,EAAA,CAAmBtqI,IAAA4nI,EAAAZ,GAAAz5F,KAAA05F,EAAAD,IAAiDmC,EAAAjjI,IAGpEvJ,EAAAwtI,OAAA,SAAAhB,EAAAjjI,GAEA,GADAA,KAAA,aACAsgI,EAAA2C,GACAxsI,EAAA+qI,UAAAyB,EAAA,SAAA/C,EAAAlgI,GACAkgI,GACAA,EAAA,SAAAv7H,GACA,IAAA63B,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACA+mC,EAAAtyC,QAAA,IACAsyC,IAAA,IAEAx8B,EAAA7c,KAAA,KAAAwhB,EAAA63B,MAGax8B,OAEb,CACA,IAAAioF,EAAA,GACAxxF,EAAAiqI,WAAAD,EAAAwC,GAAA,SAAAltI,EAAAiK,GACAijI,EAAAltI,GAAA,SAAA4O,GACA,IAAA63B,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACA+mC,EAAAtyC,QAAA,IACAsyC,IAAA,IAEAyrD,EAAAlyF,GAAAymC,EACAx8B,EAAA2E,MAEa,SAAAA,GACb3E,EAAA2E,EAAAsjF,OAKAxxF,EAAA9M,SAAA,SAAAs5I,GACA,IAAAsB,EAAA,SAAAh/G,GACA,IAAA26G,EAAA,WAIA,OAHA+C,EAAA/4I,QACA+4I,EAAA19G,GAAA0C,MAAA,KAAAxyB,WAEAyqI,EAAApmH,QAKA,OAHAomH,EAAApmH,KAAA,WACA,OAAAyL,EAAA09G,EAAA/4I,OAAA,EAAAq6I,EAAAh/G,EAAA,SAEA26G,GAEA,OAAAqE,EAAA,IAGA9tI,EAAAwxB,MAAA,SAAAi4G,GACA,IAAA1jG,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACA,kBACA,OAAAyqI,EAAAj4G,MACA,KAAAuU,EAAA7uC,OAAA5D,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,eAKA,IAAA+uI,EAAA,SAAAjD,EAAAz3I,EAAAo2I,EAAAlgI,GACA,IAAAlc,EAAA,GACAy9I,EAAAz3I,EAAA,SAAAa,EAAA85I,GACAvE,EAAAv1I,EAAA,SAAAga,EAAA/Z,GACA9G,IAAA6J,OAAA/C,GAAA,IACA65I,EAAA9/H,MAES,SAAAA,GACT3E,EAAA2E,EAAA7gB,MAGA2S,EAAA9I,OAAAyzI,EAAAoD,GACA/tI,EAAAiuI,aAAArD,EAAAmD,GAEA/tI,EAAAkuI,OAAA,SAAAj+H,EAAA/c,EAAAqW,GACA0G,IACA/c,EAAA,SAAAgb,GACA,GAAAA,EACA,OAAA3E,EAAA2E,GAEAlO,EAAAkuI,OAAAj+H,EAAA/c,EAAAqW,KAIAA,KAIAvJ,EAAAmuI,SAAA,SAAAj7I,EAAA+c,EAAA1G,GACArW,EAAA,SAAAgb,GACA,GAAAA,EACA,OAAA3E,EAAA2E,GAEA,IAAA63B,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACAiR,EAAAuhB,MAAA,KAAAuU,GACA/lC,EAAAmuI,SAAAj7I,EAAA+c,EAAA1G,GAGAA,OAKAvJ,EAAAouI,MAAA,SAAAn+H,EAAA/c,EAAAqW,GACA0G,IASA1G,IARArW,EAAA,SAAAgb,GACA,GAAAA,EACA,OAAA3E,EAAA2E,GAEAlO,EAAAouI,MAAAn+H,EAAA/c,EAAAqW,MAQAvJ,EAAAquI,QAAA,SAAAn7I,EAAA+c,EAAA1G,GACArW,EAAA,SAAAgb,GACA,GAAAA,EACA,OAAA3E,EAAA2E,GAEA,IAAA63B,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACAiR,EAAAuhB,MAAA,KAAAuU,GAIAx8B,IAHAvJ,EAAAquI,QAAAn7I,EAAA+c,EAAA1G,MAQAvJ,EAAAo2E,MAAA,SAAAk4D,EAAAC,GAIA,SAAAC,EAAA75I,EAAAkC,EAAAw0C,EAAA9hC,GAOA,GANA5U,EAAA61I,UACA71I,EAAA61I,SAAA,GAEAX,EAAAhzI,KACAA,EAAA,CAAAA,IAEA,GAAAA,EAAApD,OAEA,OAAAuM,EAAAspI,aAAA,WACA30I,EAAA85I,OACA95I,EAAA85I,UAIA3E,EAAAjzI,EAAA,SAAAwyI,GACA,IAAAj4G,EAAA,CACAv6B,KAAAwyI,EACA9/H,SAAA,mBAAAA,IAAA,MAGA8hC,EACA12C,EAAA63I,MAAAx7G,QAAAI,GAEAz8B,EAAA63I,MAAAzrI,KAAAqwB,GAGAz8B,EAAA+5I,WAAA/5I,EAAA63I,MAAA/4I,SAAAkB,EAAA45I,aACA55I,EAAA+5I,YAEA1uI,EAAAspI,aAAA30I,EAAAmhF,gBAjCA13E,IAAAmwI,IACAA,EAAA,GAoCA,IAAAI,EAAA,EACAh6I,EAAA,CACA63I,MAAA,GACA+B,cACAG,UAAA,KACAE,MAAA,KACAH,MAAA,KACAjE,SAAA,EACA1iI,QAAA,EACA/G,KAAA,SAAAlK,EAAA0S,GACAilI,EAAA75I,EAAAkC,GAAA,EAAA0S,IAEA6/H,KAAA,WACAz0I,EAAA85I,MAAA,KACA95I,EAAA63I,MAAA,IAEAx7G,QAAA,SAAAn6B,EAAA0S,GACAilI,EAAA75I,EAAAkC,GAAA,EAAA0S,IAEAusE,QAAA,WACA,IAAAnhF,EAAAmT,QAAA6mI,EAAAh6I,EAAA45I,aAAA55I,EAAA63I,MAAA/4I,OAAA,CACA,IAAA41I,EAAA10I,EAAA63I,MAAA3gH,QACAl3B,EAAAi6I,OAAA,IAAAj6I,EAAA63I,MAAA/4I,QACAkB,EAAAi6I,QAEAD,GAAA,EACA,IAUAX,EAAAxE,EAVA,WACAmF,GAAA,EACAtF,EAAA9/H,UACA8/H,EAAA9/H,SAAAioB,MAAA63G,EAAArqI,WAEArK,EAAA85I,OAAA95I,EAAA63I,MAAA/4I,OAAAk7I,IAAA,GACAh6I,EAAA85I,QAEA95I,EAAAmhF,YAGAw4D,EAAAjF,EAAAxyI,KAAAm3I,KAGAv6I,OAAA,WACA,OAAAkB,EAAA63I,MAAA/4I,QAEAg3I,QAAA,WACA,OAAAkE,GAEAE,KAAA,WACA,OAAAl6I,EAAA63I,MAAA/4I,OAAAk7I,IAAA,GAEA7lI,MAAA,YACA,IAAAnU,EAAAmT,SACAnT,EAAAmT,QAAA,EACAnT,EAAAmhF,YAEA/sE,OAAA,YACA,IAAApU,EAAAmT,SACAnT,EAAAmT,QAAA,EACAnT,EAAAmhF,aAGA,OAAAnhF,GAGAqL,EAAA8uI,cAAA,SAAAR,EAAAC,GAEA,SAAAQ,EAAAn6I,EAAAC,GACA,OAAAD,EAAAgb,SAAA/a,EAAA+a,SAiDA,IAAAjb,EAAAqL,EAAAo2E,MAAAk4D,EAAAC,GAUA,OAPA55I,EAAAoM,KAAA,SAAAlK,EAAA+Y,EAAArG,IAnCA,SAAA5U,EAAAkC,EAAA+Y,EAAArG,GAOA,GANA5U,EAAA61I,UACA71I,EAAA61I,SAAA,GAEAX,EAAAhzI,KACAA,EAAA,CAAAA,IAEA,GAAAA,EAAApD,OAEA,OAAAuM,EAAAspI,aAAA,WACA30I,EAAA85I,OACA95I,EAAA85I,UAIA3E,EAAAjzI,EAAA,SAAAwyI,GACA,IAAAj4G,EAAA,CACAv6B,KAAAwyI,EACAz5H,WACArG,SAAA,mBAAAA,IAAA,MAGA5U,EAAA63I,MAAA1qI,OApCA,SAAAktI,EAAA59G,EAAA69G,GAGA,IAFA,IAAAC,GAAA,EACAx+B,EAAAs+B,EAAAv7I,OAAA,EACAy7I,EAAAx+B,GAAA,CACA,IAAAxiE,EAAAghG,GAAAx+B,EAAAw+B,EAAA,OACAD,EAAA79G,EAAA49G,EAAA9gG,KAAA,EACAghG,EAAAhhG,EAEAwiE,EAAAxiE,EAAA,EAGA,OAAAghG,EAyBAC,CAAAx6I,EAAA63I,MAAAp7G,EAAA29G,GAAA,IAAA39G,GAEAz8B,EAAA+5I,WAAA/5I,EAAA63I,MAAA/4I,SAAAkB,EAAA45I,aACA55I,EAAA+5I,YAEA1uI,EAAAspI,aAAA30I,EAAAmhF,WASA04D,CAAA75I,EAAAkC,EAAA+Y,EAAArG,WAIA5U,EAAAq8B,QAEAr8B,GAGAqL,EAAAovI,MAAA,SAAAd,EAAA19G,GACA,IAAAy+G,GAAA,EACA7C,EAAA,GAEA4C,EAAA,CACA5C,QACA57G,UACA89G,UAAA,KACAE,MAAA,KACAH,MAAA,KACAa,SAAA,EACAvuI,KAAA,SAAAlK,EAAA0S,GACAsgI,EAAAhzI,KACAA,EAAA,CAAAA,IAEAizI,EAAAjzI,EAAA,SAAAwyI,GACAmD,EAAAzrI,KAAA,CACAlK,KAAAwyI,EACA9/H,SAAA,mBAAAA,IAAA,OAEA6lI,EAAAE,SAAA,EACAF,EAAAV,WAAAlC,EAAA/4I,SAAAm9B,GACAw+G,EAAAV,cAGA1uI,EAAAspI,aAAA8F,EAAAt5D,UAEAA,QAAA,SAAAA,IACA,IAAAu5D,EAAA,CACA,OAAA7C,EAAA/4I,OAGA,OAFA27I,EAAAX,QAAAW,EAAAE,SAAAF,EAAAX,aACAW,EAAAE,SAAA,GAIA,IAAArT,EAAA,iBAAArrG,EACA47G,EAAA1qI,OAAA,EAAA8uB,GACA47G,EAAA1qI,OAAA,EAAA0qI,EAAA/4I,QAEAisC,EAAAqqG,EAAA9N,EAAA,SAAAoN,GACA,OAAAA,EAAAxyI,OAGAu4I,EAAAR,OAAAQ,EAAAR,QACAS,GAAA,EACAf,EAAA5uG,EAAA,WACA2vG,GAAA,EAEA,IAAAtpG,EAAA/mC,UACA8qI,EAAA7N,EAAA,SAAAplI,GACAA,EAAA0S,UACA1S,EAAA0S,SAAAioB,MAAA,KAAAuU,KAIA+vC,QAGAriF,OAAA,WACA,OAAA+4I,EAAA/4I,QAEAg3I,QAAA,WACA,OAAA4E,IAGA,OAAAD,GAGA,IAAAG,EAAA,SAAAziJ,GACA,gBAAA28I,GACA,IAAA1jG,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACAyqI,EAAAj4G,MAAA,KAAAuU,EAAA7uC,OAAA,UAAAgX,GACA,IAAA63B,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACA,oBAAA4D,UACAsL,EACAtL,QAAAC,OACAD,QAAAC,MAAAqL,GAGAtL,QAAA9V,IACAg9I,EAAA/jG,EAAA,SAAA7xC,GACA0O,QAAA9V,GAAAoH,YAOA8L,EAAAyC,IAAA8sI,EAAA,OACAvvI,EAAAu3E,IAAAg4D,EAAA,OAKAvvI,EAAAwvI,QAAA,SAAA/F,EAAAgG,GACA,IAAAtE,EAAA,GACAuE,EAAA,GACAD,KAAA,SAAAv7I,GACA,OAAAA,GAEA,IAAAy7I,EAAA,WACA,IAAA5pG,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,WACAuK,EAAAw8B,EAAAt3B,MACA3gB,EAAA2hJ,EAAAj+G,MAAA,KAAAuU,GACAj4C,KAAAq9I,EACAnrI,EAAA62E,SAAA,WACAttE,EAAAioB,MAAA,KAAA25G,EAAAr9I,MAGAA,KAAA4hJ,EACAA,EAAA5hJ,GAAAiT,KAAAwI,IAGAmmI,EAAA5hJ,GAAA,CAAAyb,GACAkgI,EAAAj4G,MAAA,KAAAuU,EAAA7uC,OAAA,YACAi0I,EAAAr9I,GAAAkR,UACA,IAAArK,EAAA+6I,EAAA5hJ,UACA4hJ,EAAA5hJ,GACA,QAAAvB,EAAA,EAAAC,EAAAmI,EAAAlB,OAAiDlH,EAAAC,EAAOD,IACxDoI,EAAApI,GAAAilC,MAAA,KAAAxyB,iBAOA,OAFA2wI,EAAAxE,OACAwE,EAAAC,WAAAnG,EACAkG,GAGA3vI,EAAA6vI,UAAA,SAAApG,GACA,kBACA,OAAAA,EAAAmG,YAAAnG,GAAAj4G,MAAA,KAAAxyB,aAIAgB,EAAA02G,MAAA,SAAAotB,EAAA5wI,EAAAqW,GAEA,IADA,IAAAumI,EAAA,GACAvjJ,EAAA,EAAuBA,EAAAu3I,EAAWv3I,IAClCujJ,EAAA/uI,KAAAxU,GAEA,OAAAyT,EAAAqD,IAAAysI,EAAA58I,EAAAqW,IAGAvJ,EAAA+vI,YAAA,SAAAjM,EAAA5wI,EAAAqW,GAEA,IADA,IAAAumI,EAAA,GACAvjJ,EAAA,EAAuBA,EAAAu3I,EAAWv3I,IAClCujJ,EAAA/uI,KAAAxU,GAEA,OAAAyT,EAAA+qI,UAAA+E,EAAA58I,EAAAqW,IAGAvJ,EAAAgwI,IAAA,WACA,IAAAC,EAAAjxI,UACA,kBACA,IAAAkxI,EAAAryI,KACAkoC,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,WACAuK,EAAAw8B,EAAAt3B,MACAzO,EAAAuD,OAAA0sI,EAAAlqG,EAAA,SAAAoqG,EAAA1G,EAAAuE,GACAvE,EAAAj4G,MAAA0+G,EAAAC,EAAAj5I,OAAA,YACA,IAAAgX,EAAAlP,UAAA,GACAoxI,EAAA98I,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACAgvI,EAAA9/H,EAAAkiI,QAGA,SAAAliI,EAAAsjF,GACAjoF,EAAAioB,MAAA0+G,EAAA,CAAAhiI,GAAAhX,OAAAs6F,QAKAxxF,EAAAqwI,QAAA,WACA,OAAArwI,EAAAgwI,IAAAx+G,MAAA,KAAAl+B,MAAAnF,UAAAisG,QAAA1tG,KAAAsS,aAGA,IAAAsxI,EAAA,SAAAxF,EAAAmF,GACA,IAAAM,EAAA,WACA,IAAAL,EAAAryI,KACAkoC,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,WACAuK,EAAAw8B,EAAAt3B,MACA,OAAAq8H,EAAAmF,EAAA,SAAAxG,EAAAuE,GACAvE,EAAAj4G,MAAA0+G,EAAAnqG,EAAA7uC,OAAA,CAAA82I,MAEAzkI,IAEA,GAAAvK,UAAAvL,OAAA,GACA,IAAAsyC,EAAAzyC,MAAAnF,UAAA+xC,MAAAxzC,KAAAsS,UAAA,GACA,OAAAuxI,EAAA/+G,MAAA3zB,KAAAkoC,GAGA,OAAAwqG,GAGAvwI,EAAAwwI,UAAA7F,EAAA2F,GACAtwI,EAAAywI,gBAAA7F,EAAA0F,GAEAtwI,EAAA0wI,QAAA,SAAAjH,EAAAlgI,IACA,SAAA8Z,EAAAnV,GACA,GAAAA,EAAA,CACA,GAAA3E,EACA,OAAAA,EAAA2E,GAEA,MAAAA,EAEAu7H,EAAApmH,GAEAA,IAIqCr3B,EAAAD,QACrCC,EAAAD,QAAAiU,OAMS5B,KAFQ4oF,EAAA,WACjB,OAAAhnF,GACSwxB,MAAAzlC,EAFM,OAENC,EAAAD,QAAAi7F,GAllCT,yECTA,SAAAhoE,GAAA,IAAAygC,EAAApzD,EAAA,GAAAskJ,EAAAtkJ,EAAA,GAAAukJ,EAAAvkJ,EAAA,IAAAwkJ,EAAAxkJ,EAAA2B,EAAA4iJ,GASMlyH,EAASF,oBAAUQ,GAkBrB4lC,GAAmB,EAQjBksF,EAA8B,6BAO9BC,EACA,wDAKSz1H,EAAA,aAEX3iB,UAAQ8J,IAAM,SAASC,EAAOC,GAe1B,OATA+b,EAAOm0B,MAAM,UAAWnwC,EAAOC,GACZ,iBAARA,IAC6B,IAA7BA,EAAIlB,QAAQ,cAC0C,IAAtDkB,EAAIlB,QAAQ,uCAEnBiB,EAAQ/J,UAAQ8D,SAASG,MAIrB8F,GACR,KAAK/J,UAAQ8D,SAASC,OAGO,IAArBkoD,GACOksF,EAA4B7gI,KAAKtN,KACxC+b,EAAO5b,MAAM,yBACb8hD,GAAmB,GAEvB,MACJ,KAAKjsD,UAAQ8D,SAASG,KAClB8hB,EAAO1b,KAAP,YAAA9L,OAAwByL,IACxB,IAAMquI,EAAmBD,EAAuBjjE,KAAKnrE,GAEjDquI,GAAgD,IAA5BA,EAAiBv9I,SACrCmxD,EAAkBjuC,SAASq6H,EAAiB,GAAI,IAChDtyH,EAAO5b,MAAP,2BAAA5L,OAAwC0tD,KAE5C,MACJ,KAAKjsD,UAAQ8D,SAASlB,MACtB,KAAK5C,UAAQ8D,SAASI,MAElB8F,EAAG,YAAAzL,OAAeyL,GAClBi4B,IAAqBC,iBAAiB,IAAItmC,MAAMoO,IAChD+b,EAAO7b,MAAMF,KAarBhK,UAAQksD,mBAAqB,WACzB,OAAOD,GAGXjsD,UAAQwqD,gBAAkB,SAASr1C,GAC/B,OAAQA,GACR,KAAKnV,UAAQ2C,OAAOY,aAChB,MAAO,eACX,KAAKvD,UAAQ2C,OAAOC,MAChB,MAAO,QACX,KAAK5C,UAAQ2C,OAAOE,WAChB,MAAO,aACX,KAAK7C,UAAQ2C,OAAOG,SAChB,MAAO,WACX,KAAK9C,UAAQ2C,OAAOI,eAChB,MAAO,iBACX,KAAK/C,UAAQ2C,OAAOK,SAChB,MAAO,WACX,KAAKhD,UAAQ2C,OAAOM,UAChB,MAAO,YACX,KAAKjD,UAAQ2C,OAAOO,aAChB,MAAO,eACX,KAAKlD,UAAQ2C,OAAOQ,cAChB,MAAO,gBACX,KAAKnD,UAAQ2C,OAAOS,SAChB,MAAO,WACX,QACI,MAAO,6vCCzHnB,IAAM2iB,EAASF,oBAAUQ,GAsBnBiyH,EAA0B,GAOXpqF,cAMjB,SAAAA,EAAY/mC,GAAM,IAAAta,EAAA,mGAAA83B,CAAAz/B,KAAAgpD,IACdrhD,EAAA+3B,EAAA1/B,KAAA2/B,EAAAqpB,GAAAn6D,KAAAmR,QACKqzI,YAAc,EACnB1rI,EAAKsa,KAAOA,EACZta,EAAK2rI,kBAAoB,IAAI79I,MAAM29I,GAJrBzrI,wPAN4BgiI,2CAiBzCj1H,GACDq5E,EAAApuD,EAAAqpB,EAAA14D,WAAA,OAAA0P,MAAAnR,KAAAmR,KAAW0U,GACX5Z,UAAQ0E,aAAa,OAAQ,8CAa5BmE,EAAK49C,EAASv8C,EAAO8I,GACtB9N,KAAKuzI,6BAEL,IAAMngI,EAAKpY,cAAI,CACXiM,KAAM,MACNkM,GAAIxP,IAGRyP,EAAGrkB,EAAE,OAAQ,CAAEkX,MAAOnL,UAAQK,GAAG4qD,OACjC/lD,KAAK0U,WAAWpG,OAAO8E,EAAImuC,EAASv8C,EAAO8I,yCAYjCgxD,GAAqC,IAAAt2D,EAAAxI,KAA1B4vD,EAA0BzuD,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GA7EjC,IA8Ed0+B,cAAc7/B,KAAK+5E,YACnB/5E,KAAK+5E,WAAazrF,OAAOk0C,YAAY,WACjCh6B,EAAKw9C,KAAK8Y,EAAW,WACjBt2D,EAAK6qI,YAAc,GACpB,SAAAruI,GACCwD,EAAK6qI,aAAe,EACpB,IAAMv2G,EAAM,QAAAzjC,OAAW2L,EAAQ,QAAU,WAErCwD,EAAK6qI,aA5EF,GA6EHt2G,IAAqBC,iBAAiB,IAAItmC,MAAMomC,IAChDjc,EAAO7b,MAAM83B,EAAQ93B,IASrB6b,EAAO1b,KAAK23B,EAAQ93B,IA5FnB,OA+FV4qD,GACH/uC,EAAO3b,KAAP,iCAAA7L,OAA6Cu2D,EAA7C,+CAOI5vD,KAAK+5E,aACLzrF,OAAOuxC,cAAc7/B,KAAK+5E,YAC1B/5E,KAAK+5E,WAAa,KAClB/5E,KAAKqzI,YAAc,EACnBxyH,EAAO3b,KAAK,+EAShBlF,KAAKszI,kBAAkBpwI,MAAK,IAAIiF,MAAOC,WAGnCpI,KAAKszI,kBAAkB19I,OAASw9I,GAChCpzI,KAAKszI,kBAAkBtlH,qDAa3B,IAAMwlH,EAAgBxzI,KAAKszI,kBAAkBjxG,QAM7CmxG,EAActwI,MAAK,IAAIiF,MAAOC,WAE9B,IAAIqrI,EAAc,EACdC,EAAaF,EAAc,GAkB/B,OAhBAA,EAAclkI,QAAQ,SAAA5W,GAClB,IAAMi7I,EAAkBj7I,EAAIg7I,EAExBC,EAAkBF,IAClBA,EAAcE,GAGlBD,EAAah7I,IAMjB+6I,GAlKc,IAqKPnoI,KAAKouB,IAAI+5G,EAAa,uwCC3KrC,IAAM5yH,EAASF,oBAAUQ,GAOJ8nC,gaAA6B0gF,2CAKzCj1H,GACDq5E,EAAApuD,EAAAspB,EAAA34D,WAAA,OAAA0P,MAAAnR,KAAAmR,KAAW0U,GAEX1U,KAAK0U,WAAWzG,WACZjO,KAAK4zI,OAAO1jJ,KAAK8P,MAdV,kBAc6B,KAAM,MAAO,KAAM,qCAOxDoT,GACHyN,EAAO3b,KAAK,UAAWkO,gCAatBD,EAAInd,EAAM4xB,EAAUisH,EAAU1hD,GAAa,IAAAxqF,EAAA3H,KAC5C,OAAO,IAAIojC,QAAQ,SAACC,EAASC,GACzB,GAAK6uD,EAAL,CAKA,IAAM5hF,EAAMvV,cAAI,CACZiM,KAAM,MACNkM,GAAIg/E,IAGR5hF,EAAIxhB,EAAE,OAAQ,CACVkX,MAhDG,kBAiDHkN,KACAnd,SAEJua,EAAIxhB,EAAE,SAAU,CACZE,KAAM,cACNU,MAAOi4B,IACRzhB,KAEC0tI,GAAYA,EAASj+I,QACrB2a,EAAIxhB,EAAE,SAAU,CACZE,KAAM,kBACNU,MAAOkkJ,IACR1tI,KAGPwB,EAAK+M,WAAWpG,OACZiC,EACA,SAAA9K,GACIob,EAAO3b,KAAK,eAAgBO,GAG5B,IAAMuO,EAAWg/B,EAAEvtC,GAAQ8rB,KAAK,OAAOhwB,KAAK,OAE5CoG,EAAKmsI,aAAe9/H,EAASuB,OAAO,QAAQ3f,QAC5CirB,EAAO3b,KAAP,2BAAA7L,OAAuCsO,EAAKmsI,eAC5CzwG,KAEJ,SAAAr+B,GACI6b,EAAO3b,KAAK,cAAeF,GAC3Bs+B,EAAOt+B,UAxCXs+B,EAAO,IAAI5sC,MAAM,uDAkDpB,IAAA8R,EAAAxI,KACL,OAAO,IAAIojC,QAAQ,SAACC,EAASC,GACzB,IAAK96B,EAAKsrI,aAIN,OAHAxwG,EAAO,IAAI5sC,MAAM,6BACjBmqB,EAAO1b,KAAK,uBAKhB,IAAMoL,EAAMvV,cAAI,CACZiM,KAAM,MACNkM,GAAI3K,EAAKsrI,eAGbvjI,EAAIxhB,EAAE,SAAU,CACZkX,MAvGG,oBA0GPuC,EAAKkM,WAAWpG,OAAOiC,EAAK,SAAA9K,GACxBob,EAAO3b,KAAK,iBAAkBO,GAC9B+C,EAAKsrI,aAAe,KACpBzwG,KACD,SAAAr+B,GACC6b,EAAO3b,KAAK,gBAAiBF,GAC7BwD,EAAKsrI,aAAe,KACpBxwG,EAAO,IAAI5sC,MAAM,0uCCnH3Bq9I,cAIF,SAAAA,IAAc,IAAApsI,EAAA,mGAAA83B,CAAAz/B,KAAA+zI,IACVpsI,EAAA+3B,EAAA1/B,KAAA2/B,EAAAo0G,GAAAllJ,KAAAmR,QACK4E,IAAM,GAFD+C,wPAJUgiI,2CAanBj1H,GACDq5E,EAAApuD,EAAAo0G,EAAAzjJ,WAAA,OAAA0P,MAAAnR,KAAAmR,KAAW0U,GACX1U,KAAK0U,WAAWtH,SAAWpN,KAAKg0I,YAAY9jJ,KAAK8P,MACjDA,KAAK0U,WAAWrH,UAAYrN,KAAKi0I,YAAY/jJ,KAAK8P,0CAO1CkO,GACRlO,KAAK4E,IAAI1B,KAAK,EAAE,IAAIiF,MAAOC,UAAW,WAAY8F,wCAO1CA,GACRlO,KAAK4E,IAAI1B,KAAK,EAAE,IAAIiF,MAAOC,UAAW,WAAY8F,yCAO3CuP,EAAA,aACX3iB,UAAQiL,oBAAoB,SAAU,IAAIguI,mQCvC9C,IAUqBrmB,aAMjB,SAAAA,EAAYtkF,gGAAY3J,CAAAz/B,KAAA0tH,GACpB1tH,KAAKopC,WAAaA,EAElBA,EAAW7G,iBACPqJ,4BACA5rC,KAAKk0I,YAAYhkJ,KAAK8P,OAE1BA,KAAKm0I,SAAWn0I,KAAKopC,WAAWmqB,sEASxBrsD,EAAI2mC,IAKP7tC,KAAKopC,WAAWorB,eACd3mB,GAtCiB,IAuChB3mC,IAAOlH,KAAKm0I,UACLn0I,KAAKopC,WAAWkmF,qBAAqBz5D,WAIpD71D,KAAKopC,WAAW8nB,IAAI9uC,aAAa6C,KAC7BmZ,IAAUjgB,yBACVjX,uRC/CZ,IAKqB2lH,aAQjB,SAAAA,EAAYzjF,EAAY19B,gGAAU+zB,CAAAz/B,KAAA6sH,GAO9B7sH,KAAKsR,UAAY5F,EASjB1L,KAAKo0I,aAAc,EAYnBhrG,EAAW/hB,WAAWlD,sBAClBnkB,KAAKk0I,YAAYhkJ,KAAK8P,OAE1BopC,EAAW/kB,GACPunB,qBACA5rC,KAAK6wF,kBAAkB3gG,KAAK8P,OAChCopC,EAAW/kB,GACPunB,cACA5rC,KAAK2wF,YAAYzgG,KAAK8P,kEAclB4lB,EAAK4C,EAAMqlB,EAAY/jB,GAG1BA,GAAY9pB,KAAKotC,aAAcptC,KAAKo0I,aAIrCp0I,KAAKotC,WAAWyoB,WACbhoB,EAvEiB,KAwEpB7tC,KAAKo0I,aAAc,EACnBp0I,KAAKsR,wDAeMozB,GACf,OAAOA,EAAMqJ,gBAAkBrJ,EAAM5a,8CAW7B4a,GACJ1kC,KAAKq0I,mBAAmB3vG,KACxB1kC,KAAKotC,WAAa1I,6CAYRA,GACV1kC,KAAKq0I,mBAAmB3vG,IAAUA,EAAMmxB,YACxC71D,KAAKo0I,aAAc,q2BChH/B,IAuBqB3nB,cAKjB,SAAAA,IAAc,IAAA9kH,MAAA,mGAAA83B,CAAAz/B,KAAAysH,KACVzsH,MAAA2H,MAAAg4B,EAAA8sF,GAAA59H,KAAAmR,sDAMKs0I,aAAc,EAKnB3sI,EAAK4sI,YAAc,GAKnB5sI,EAAK6sI,SAAU,EAEf7sI,EAAK8sI,mBAAqB9sI,EAAK8sI,mBAAmBvkJ,KAAxB85C,IAAAriC,KAnBhBA,wPALiC0a,sEAiC7B05B,YAAiB/7C,KAAKu0I,aAxDlB,KA2Ddv0I,KAAKilB,KAAK4wB,wBAIV71C,KAAK00I,iBAAgB,IAIzB10I,KAAKqI,gDASO40E,GACZj9E,KAAKw0I,QAAUv3D,EACfj9E,KAAKilB,KAAKwwB,wBAAuBz1C,KAAKw0I,iDAQ1B3+E,GAEZ71D,KAAK00I,gBAAgB7+E,GACrB71D,KAAKqI,2CASL,OAAOrI,KAAKw0I,gDAYAv1D,GACPj/E,KAAKw0I,UAKNx0I,KAAKs0I,YACLt0I,KAAKu0I,YAAYrxI,KAAK+7E,EAASG,OAO/BH,EAASG,MArHG,KAsHZp/E,KAAKs0I,aAAc,EACnBt0I,KAAKu0I,YAAYrxI,KAAK+7E,EAASG,OAG/Bp/E,KAAK20I,gBAAkBlqI,WAAWzK,KAAKy0I,mBA/GhB,uCAyH3Bz0I,KAAKs0I,aAAc,EACnBt0I,KAAKu0I,YAAc,GACnB5mI,aAAa3N,KAAK20I,m3BC9I1B,IA6BqB3nB,cAMjB,SAAAA,IAAc,IAAArlH,MAAA,mGAAA83B,CAAAz/B,KAAAgtH,KACVhtH,MAAA2H,MAAAg4B,EAAAqtF,GAAAn+H,KAAAmR,sDAMKs0I,aAAc,EAKnB3sI,EAAK4sI,YAAc,GAKnB5sI,EAAKitI,eAAiB,GAKtBjtI,EAAK6sI,SAAU,EAEf7sI,EAAKktI,qBAAuBltI,EAAKktI,qBAAqB3kJ,KAA1B85C,IAAAriC,KAxBlBA,wPAN6B0a,wEAwCvC,IAAMyyH,EAAW/4F,YAAiB/7C,KAAKu0I,aACjCQ,EAAgBh5F,YAAiB/7C,KAAK40I,gBAExCE,EAxEoB,IAwEkBC,EAlEd,MAmExB/0I,KAAKilB,KAAKywB,oBAEV11C,KAAK00I,iBAAgB,IAIzB10I,KAAKqI,8CASK42E,EAAU+1D,GACpBh1I,KAAKu0I,YAAYrxI,KAAK+7E,GACtBj/E,KAAK40I,eAAe1xI,KAAK8xI,2CASb/3D,GACZj9E,KAAKw0I,QAAUv3D,EACfj9E,KAAKilB,KAAKwwB,wBAAuBz1C,KAAKw0I,iDAQ1B3+E,GAEZ71D,KAAK00I,iBAAiB7+E,GACtB71D,KAAKqI,2CASL,OAAOrI,KAAKw0I,wCASZx0I,KAAKs0I,aAAc,EACnBt0I,KAAKu0I,YAAc,GACnBv0I,KAAK40I,eAAiB,GACtBjnI,aAAa3N,KAAK20I,yDAaN11D,GACZ,GAAKj/E,KAAKw0I,QAKV,GAAIx0I,KAAKs0I,YAAT,CAEI,IAAMW,EAAiBh5F,YAAqBgjC,EAASI,SAErDr/E,KAAKk1I,cAAcj2D,EAASG,MAAOrjC,YAAiBk5F,SAOxD,GAAIh2D,EAASG,MAvJK,GAuJsB,CACpC,IAAM61D,EAAiBh5F,YAAqBgjC,EAASI,SAC/C21D,EAAcj5F,YAAiBk5F,GAEjCD,EArJkB,MAsJlBh1I,KAAKs0I,aAAc,EACnBt0I,KAAKk1I,cAAcj2D,EAASG,MAAO41D,GAGnCh1I,KAAK20I,gBAAkBlqI,WAAWzK,KAAK60I,qBApJpB,k3BCxBnC,IAQqB1nB,cAOjB,SAAAA,EAAY/jF,GAAY,IAAAzhC,MAAA,mGAAA83B,CAAAz/B,KAAAmtH,KACpBntH,MAAA2H,MAAAg4B,EAAAwtF,GAAAt+H,KAAAmR,sDAEKk/H,YAAc91F,EACnBzhC,EAAKwtI,gBAAkB,KACvBxtI,EAAKytI,eAAiB,KAEtBhsG,EAAW/hB,WAAWlD,sBAAsBxc,EAAKusI,YAAYhkJ,KAAjB85C,IAAAriC,MAC5CyhC,EAAW/kB,GAAGunB,cAAmCjkC,EAAKgpF,YAAYzgG,KAAjB85C,IAAAriC,MAR7BA,wPAPwB0a,0DAsB5C1U,aAAa3N,KAAKm1I,iBAClBn1I,KAAKm1I,gBAAkB,0DAUEtnG,GAGzB,IAAM59B,EAAwB,IAAf49B,EAIa,OAAxB7tC,KAAKo1I,gBAA2Bp1I,KAAKo1I,iBAAmBnlI,IACxDjQ,KAAKo1I,eAAiBnlI,EAEtBjQ,KAAKilB,KAAKynG,2BAA0C1sH,KAAKo1I,sEAUpCvnG,GAAY,IAAArlC,EAAAxI,KACjCA,KAAKo0I,cAIU,IAAfvmG,GAAqB7tC,KAAKm1I,gBAMJ,IAAftnG,GAAoB7tC,KAAKm1I,iBAChCn1I,KAAKq1I,uBANLr1I,KAAKm1I,gBAAkB1qI,WAAW,WAC9BjC,EAAK4rI,aAAc,EAEnB5rI,EAAKyc,KAAKynG,mBAtEA,0CAsFV9mG,EAAK4C,EAAMqlB,EAAY/jB,GAE/B,GAAKA,GAAY9pB,KAAKs1I,YAAtB,CAKA,IAAM7tD,EAAa7hE,EAAI6hE,WAAWl4F,IAAIyQ,KAAKs1I,YAAYxsG,OAKlD2+C,GAAeA,EAAW32D,MAAMiT,SAASvb,KAM9CxoB,KAAKu1I,6BAA6B1nG,GAClC7tC,KAAKw1I,6BAA6B3nG,yCAU1BnJ,GACJA,EAAM0sD,sBAENpxF,KAAKs1I,YAAc5wG,EACnB1kC,KAAKo0I,aAAc,EACnBp0I,KAAKq1I,wUC7HjB,IAAM9vF,EAAarkC,EAAQ,GACrB2jB,EAAY3jB,EAAQ,IACpBua,EAAcva,EAAQ,IAEtBL,EAASF,oBAAUQ,GAMnBs0H,EAAqB,QAKrBC,EAAoB,CACtB,CAAEh6G,MAAO,KACLlC,OAAQ,KACRm8G,OAAQ,EACRj8G,IAAK,IACLk8G,OAAQ,IACR36H,IAAK,KACT,CAAEygB,MAAO,KACLlC,OAAQ,IACRm8G,OAAQ,EACRj8G,IAAK,KACLk8G,OAAQ,KACR36H,IAAK,KACT,CAAEygB,MAAO,IACLlC,OAAQ,IACRm8G,OAAQ,EACRj8G,IAAK,IACLk8G,OAAQ,IACR36H,IAAK,KACT,CAAEygB,MAAO,IACLlC,OAAQ,IACRm8G,OAAQ,EACRj8G,IAAK,IACLk8G,OAAQ,IACR36H,IAAK,KACT,CAAEygB,MAAO,IACLlC,OAAQ,IACRm8G,OAAQ,EACRj8G,IAAK,IACLk8G,OAAQ,IACR36H,IAAK,KACT,CAAEygB,MAAO,IACLlC,OAAQ,IACRm8G,OAAQ,EACRj8G,IAAK,IACLk8G,OAAQ,IACR36H,IAAK,KAaTwsH,EAAe,IAQfoO,EAAkB,KAStB,SAASC,EAAUnvD,EAAWnrD,EAAYu6G,GAItC,GAAIA,EAAmB,KACnB,OAAO,EAGX,IAAIH,EAAS,EACTp8G,EAASluB,KAAK2P,IAAIugB,EAAWhC,OAAQgC,EAAWE,OAEpD,GAAIirD,EAAW,CAEX,IAAIqvD,EAAkBN,EAAkBnkH,KAAK,SAAAwyE,GAAC,OAAIA,EAAEvqE,QAAUA,IAE9D,GAAIw8G,EAAiB,KAAA7lG,EAAA,WAIb,IAAM8lG,EAAez8G,EAIrB,KAFAw8G,EACMN,EAAkBnkH,KAAK,SAAAwyE,GAAC,OAAIA,EAAEvqE,SAAWy8G,KAI3C,cAFAL,GAAUI,EAAgBJ,QANlC,IAAKp8G,EAASw8G,EAAgBx8G,OAAQA,GAAU,IAAKA,GAAU,EAAG,cAAA2W,IAQ1D,YAIT,CAGH,IAAM+lG,EAAS16G,EAAWE,MAAQF,EAAWhC,OAGzCo8G,EADAM,GAAU,MACD,IACFA,GAAU,OACR,KACFA,GAAU,OACR,IAEA,KAMjB,OAAO5qI,KAAK2P,IAAI26H,EASpB,SAAgBG,GACZ,GAAIA,EAAmB,IACnB,OAAOh8H,OAAO+hC,iBAMlB,OAAO2rF,EAAen8H,KAAK4P,IAAI,KAAM66H,EAAmB,KAjBhCI,CAAO7qI,KAAKouB,IAAI,EAAGq8G,EAAmB,WA0B7CpsB,aAOjB,SAAAA,EAAYvgF,EAAYhnB,EAAcjb,GAAS,IAAAQ,EAAA3H,kGAAAy/B,CAAAz/B,KAAA2pH,GAC3C3pH,KAAKoiB,aAAeA,EAKpBpiB,KAAKk/H,YAAc91F,EAKnBppC,KAAKo2I,YAAc,CACf1sB,kBAAmB,IACnB2sB,YAAQ91I,GAMZP,KAAKs2I,8BAAgC,EAMrCt2I,KAAKu2I,aAAe,GAMpBv2I,KAAKw2I,mBAAqB,EAM1Bx2I,KAAKy2I,mBAAqB,EAO1Bz2I,KAAK02I,uBAAyB,EAG1BvvI,EAAQusB,OAAO+zG,cAAgBtgI,EAAQusB,OAAO+zG,aAAe,IAC7DA,EAAetgI,EAAQusB,OAAO+zG,cAKlCr+F,EAAW/kB,GACPsyH,yBACA,WACIhvI,EAAKivI,8BAA8B,GACnCjvI,EAAKya,aAAa6C,KACd4xH,sBACAlvI,EAAKyuI,aACTzuI,EAAKmvI,yBAGb1tG,EAAWugB,KAAKxf,YACZob,EAAWzwD,6BACX,SAAC6gI,EAAe7gE,GACP6gE,EAAcprF,OAAsB,cAAbuqB,IACxBntD,EAAK6uI,kBAAoBloJ,OAAO82D,YAAY9wC,SAMxD80B,EAAW/kB,GACPsyH,4BACA,SAACljF,EAAa1gC,GACNA,EAAQ9rB,OAASwuI,GACjB9tI,EAAKovI,mBACDtjF,EAAYG,QAAS7gC,EAAQxN,UAa7C6jB,EAAW/hB,WAAW1C,2BAClB3kB,KAAKg3I,kBAAkB9mJ,KAAK8P,OAGhCopC,EAAW/kB,GACPsyH,qBACA,SAAAjyG,GACQA,EAAM2kC,iBACF3kC,EAAMmxB,UACNluD,EAAK8uI,mBAAqB,EAE1B9uI,EAAKsvI,4BAIrB7tG,EAAW/kB,GACPsyH,cACA,SAAAjyG,GACQA,EAAM2kC,iBAAmB3kC,EAAMmxB,WAC/BluD,EAAKsvI,2BAIjB7tG,EAAW/kB,GACPsyH,wBACA,SAAAtgB,GACI1uH,EAAKyuI,YAAY/f,aAAeA,IAGxCjtF,EAAW/kB,GACPsyH,qBACA,SAAA/pH,GACIjlB,EAAKyuI,YAAYc,YACXn9H,QAAQ6S,GAAc,IAAI,2FAUpC5sB,KAAKy2I,kBAAoB,IACzBz2I,KAAKy2I,kBAAoBnoJ,OAAO82D,YAAY9wC,2DAaxBswB,EAAWixB,EAASshF,GAI5C,IAGI7xC,EAHE9pE,EAAaC,EAAY07G,GAE3BC,EAAU,IA2Bd,GAtBIp3I,KAAKo2I,YAAY9wC,aACjBA,EAAatlG,KAAKo2I,YAAY9wC,WAAWH,OAgBrCtvC,IACAyvC,GAAc,KAIlBzvC,IAAYr6B,GAAcoJ,IAAcC,EAAUC,SAC/C9kC,KAAKw2I,kBAAoB,GACzBx2I,KAAKy2I,kBAAoB,OAGTl2I,IAAf+kG,GACAzkF,EAAO7b,MAAM,6DAEboyI,EAAU,KAEVA,EADO9xC,GAAc,EACX,IACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,EACX,GACHA,GAAc,GACX,GAEA,MAEX,CAIH,IAAM+xC,EAAYr3I,KAAKk/H,YAAY/N,0BAC7B3qC,EACAzoD,QAAQs5G,GAAaA,EAAU7wD,iBAE/B8wD,EACAD,GAAaA,EAAUE,kBACtBF,EAAUE,iBAAiBC,kBAAkB,UAK/CF,GAAsBzB,IACvB71I,KAAK02I,sBAAwBpoJ,OAAO82D,YAAY9wC,MAGhDmzH,EAAeoO,GAEnBA,EAAkByB,EAGlB,IAMI1B,EACEE,EAAUtvD,EAAehrD,EAPNltC,OAAO82D,YAAY9wC,MACtChJ,KAAKouB,IAAI15B,KAAKy2I,kBACZz2I,KAAKw2I,kBACLx2I,KAAK02I,wBAMbd,EAAStqI,KAAK2P,IAAI,GAAM26H,EAnVT,MAqVXC,IACAD,EAAStqI,KAAK2P,IAAI26H,EAAQC,IAG9BuB,EAAU,IAAMp3I,KAAKo2I,YAAYlxC,QAAQC,OAASywC,EAG9CtwC,GAAcA,GAAc,KAC5B8xC,EAAU9rI,KAAK2P,IAAIm8H,EAAS,KAKpC,GAAIp3I,KAAKs2I,6BAA+B,EAAG,CACvC,IACMmB,EAAwBz3I,KAAKo2I,YAAY1sB,kBACzCguB,GACCppJ,OAAO82D,YAAY9wC,MAAQtU,KAAKs2I,8BAC7B,IAEVc,EACM9rI,KAAK2P,IACHm8H,EACAK,EATqB,EAUdC,GAGnB,OAAOpsI,KAAK2P,IAAI,IAAKm8H,yDAOKznJ,GAC1BqQ,KAAKo2I,YAAY1sB,kBAAoB/5H,EACrCqQ,KAAKs2I,6BAA+BhoJ,OAAO82D,YAAY9wC,qDASvD,IAAMtb,EAAO,CACTksG,QAASllG,KAAKo2I,YAAYlxC,QAC1BI,WAAYtlG,KAAKo2I,YAAY9wC,WAC7BokB,kBAAmB1pH,KAAKo2I,YAAY1sB,kBACpC2sB,OAAQr2I,KAAKo2I,YAAYC,OACzBhgB,aAAcr2H,KAAKo2I,YAAY/f,aAC/B3qB,eAAgB1rG,KAAKo2I,YAAY3qC,qBAGrC,IACIzrG,KAAKk/H,YAAY9F,yBAAyB,CACtCnyH,KAAMwuI,EACNlwH,OAAQvsB,IACd,MAAON,+CAmBKktB,EAAK5sB,GAEnB,IAAK4sB,EAAI2kB,MAAO,CACZ,IAAM8rG,EACAr9I,EAAKwnB,WACAxnB,EAAKwnB,UAAU5qB,QAAUoD,EAAKwnB,UAAU,GAAG6V,IAEtDr2B,KAAKo2I,YAAYC,OAASA,QAAkB91I,EAKhD,GAAIqlB,IAAQ5lB,KAAKk/H,YAAY/N,0BAA7B,CAIA,IAAIlhI,EACE0nJ,GACC33I,KAAKk/H,YAAY1F,0BAClBxI,EACAhxH,KAAKk/H,YAAY3P,qBACjB3qF,EACAosF,EAAkBA,EAAgBpsF,eAAYrkC,EAC9Cs1D,GAAUm7D,GAAkBA,EAAgBn7D,UAC5Cr6B,EAAaw1F,EAAkBA,EAAgBx1F,WAAa,KAOlE,IAAKvrC,KALA4lE,GACD71D,KAAKi3I,yBAIGj+I,EACJA,EAAKzI,eAAeN,KACpB+P,KAAKo2I,YAAYnmJ,GAAO+I,EAAK/I,IAKjC0nJ,GACA33I,KAAK42I,8BACD52I,KAAK43I,4BACDhzG,EACAixB,EACAr6B,IAGZx7B,KAAKoiB,aAAa6C,KACd4xH,sBACA72I,KAAKo2I,aACTp2I,KAAK82I,mEAQU5vI,EAAIlO,GAEnBgH,KAAKu2I,aAAarvI,GAAM,CACpBg+F,QAASlsG,EAAKksG,QACdI,WAAYtsG,EAAKssG,WACjBokB,kBAAmB1wH,EAAK0wH,kBACxB2sB,OAAQr9I,EAAKq9I,OACbhgB,aAAcr9H,EAAKq9H,aACnB3qB,eAAgB1yG,EAAK0yG,gBAGzB1rG,KAAKoiB,aAAa6C,KACd4xH,uBACA3vI,EACAlH,KAAKu2I,aAAarvI,uCAQtB,OAAOlH,KAAKo2I,sWC9iBpB,IAAMv1H,EAASF,oBAAUQ,GAWJu4G,aAKjB,SAAAA,EAAYtwF,gGAAY3J,CAAAz/B,KAAA05H,GACpB15H,KAAKk/H,YAAc91F,uDAOjB3wB,GAAS,IAAA9Q,EAAA3H,KAIXA,KAAKk/H,YAAYj9G,KAAK+jC,KAAK,MAAO/lB,KAC9B,WACQt4B,EAAKkwI,YAILlwI,EAAKu3H,YAAYjV,2BACjBtiH,EAAKmwI,kBAAoBxpJ,OAAOmc,WAAW,WACvCoW,EAAO3b,KACH,yDAEJyC,EAAKmwI,uBAAoBv3I,EACzBkY,EAAQkhH,6BACT,KAEH94G,EAAO3b,KACH,sDAGZ,SAAAF,GACI6b,EAAO7b,MACH,8CAA+CA,sCAQ3DhF,KAAK63I,WAAY,EACb73I,KAAK83I,mBACLxpJ,OAAOqf,aAAa3N,KAAK83I,qiBCtDrC,IAAMj3H,EAASF,oBAAUQ,GAiBnB42H,aAOF,SAAAA,EAAYtkF,EAAam4D,GAASnsF,EAAAz/B,KAAA+3I,GAE9B/3I,KAAKyzD,YAAcA,EAGnBzzD,KAAK4rH,QAAUA,EAGf5rH,KAAKkH,GAAKusD,EAAYG,QAGtB5zD,KAAKg4I,SAAW,GAIhBh4I,KAAKi4I,cAAgB,EAErBj4I,KAAKk4I,eAAiBl4I,KAAKk4I,eAAehoJ,KAAK8P,MAC/CA,KAAKm4I,YAAcn4I,KAAKm4I,YAAYjoJ,KAAK8P,MACzCA,KAAKo4I,eAAiBp4I,KAAKo4I,eAAeloJ,KAAK8P,MAC/CA,KAAKq4I,mBAAqBr4I,KAAKq4I,mBAAmBnoJ,KAAK8P,MACvDA,KAAK6sB,cAAgB7sB,KAAK6sB,cAAc38B,KAAK8P,MAIzC4rH,EAAQ0sB,mBACRt4I,KAAKm4I,cAGTn4I,KAAKu4I,aAAejqJ,OAAOk0C,YACvBxiC,KAAKm4I,YAAavsB,EAAQ4sB,gBAC9Bx4I,KAAKy4I,kBAAoBnqJ,OAAOmc,WAC5BzK,KAAKq4I,mBAAoBr4I,KAAK4rH,QAAQ8sB,wEAQtC14I,KAAKu4I,cACLjqJ,OAAOuxC,cAAc7/B,KAAKu4I,cAE1Bv4I,KAAKy4I,mBACLnqJ,OAAOuxC,cAAc7/B,KAAKy4I,yDAS9B,IAAME,EAAY34I,KAAKi4I,gBACjBW,EAAiB,CACnB3xI,KAzEa,mBA0EbC,GAAIyxI,GAGR34I,KAAK4rH,QAAQ39E,YAAY2qG,EAAgB54I,KAAKkH,IAC9ClH,KAAKg4I,SAASW,GAAa,CACvBzxI,GAAIyxI,EACJE,SAAUvqJ,OAAO82D,YAAY9wC,8CAQtBzB,GACX,IAAMi5D,EAAU9rE,KAAKg4I,SAASnlI,EAAS3L,IAEnC4kE,IACAA,EAAQz1C,IAAM/nC,OAAO82D,YAAY9wC,MAAQw3D,EAAQ+sE,SACjD74I,KAAK4rH,QAAQxpG,aAAa6C,KACtB6zH,kBACA94I,KAAKyzD,YACLqY,EAAQz1C,MAGhBr2B,KAAKq4I,kEAUL,IAKIvsE,EAAS6sE,EALPrkI,EAAMhmB,OAAO82D,YAAY9wC,MAI3B+hB,EAAM0iH,IAIV,IAAKJ,KAAa34I,KAAKg4I,SACfh4I,KAAKg4I,SAASznJ,eAAeooJ,MAC7B7sE,EAAU9rE,KAAKg4I,SAASW,IAEZE,SAAWvkI,EAAMtU,KAAK4rH,QAAQ8sB,2BAE/B14I,KAAKg4I,SAASW,GACd7sE,EAAQz1C,MACfA,EAAM/qB,KAAK2P,IAAIob,EAAKy1C,EAAQz1C,OAKpCA,EAAM0iH,KACN/4I,KAAK6sB,cAAcwJ,yCAQbA,GACVrU,IAAW6K,cAAcqJ,YACrBl2B,KAAKkH,GACLlH,KAAKyzD,YAAY+mE,YAAY,UAC7BnkG,aAmBSw1F,aAMjB,SAAAA,EAAYziF,EAAYjiC,EAAS8mC,GAAaxO,EAAAz/B,KAAA6rH,GAC1C7rH,KAAKopC,WAAaA,EAClBppC,KAAKoiB,aAAegnB,EAAWhnB,aAC/BpiB,KAAKiuC,YAAcA,EAGnBjuC,KAAKw4I,eAAiB,IAGtBx4I,KAAK04I,oBAAsB,IAG3B14I,KAAKo0D,aAAe,GAGpBp0D,KAAKs4I,mBAAoB,EAErBnxI,GAAWA,EAAQykH,UACyB,iBAAjCzkH,EAAQykH,QAAQ2sB,eACvBv4I,KAAKw4I,eAAiBrxI,EAAQykH,QAAQ2sB,cAEO,iBAAtCpxI,EAAQykH,QAAQ6sB,oBACvBz4I,KAAK04I,oBAAsBvxI,EAAQykH,QAAQ6sB,mBAI3Cz4I,KAAK04I,oBAAsB,GAAK14I,KAAK04I,oBACnC14I,KAAKw4I,iBACPx4I,KAAK04I,oBAAsB14I,KAAKw4I,iBAGxC33H,EAAO3b,KAAP,uCAAA7L,OAEQ2G,KAAKw4I,eAFb,wBAAAn/I,OAGQ2G,KAAK04I,oBAHb,MAKA14I,KAAKg5I,kBAAoBh5I,KAAKg5I,kBAAkB9oJ,KAAK8P,MACrDopC,EAAW/kB,GACPunB,cACA5rC,KAAKg5I,mBAETh5I,KAAKi5I,gBAAkBj5I,KAAKi5I,gBAAgB/oJ,KAAK8P,MACjDopC,EAAW/kB,GACPunB,YACA5rC,KAAKi5I,iBAETj5I,KAAKk5I,gBAAkBl5I,KAAKk5I,gBAAgBhpJ,KAAK8P,MACjDopC,EAAW/kB,GACPunB,4BACA5rC,KAAKk5I,iBAETl5I,KAAKm5I,kBAAoBn5I,KAAKm5I,kBAAkBjpJ,KAAK8P,MACrDopC,EAAW/kB,GACPunB,sBACA5rC,KAAKm5I,yEAiBT,IAAK,IAAMjyI,KATXlH,KAAKs4I,mBAAoB,EASRt4I,KAAKo0D,aAClB,GAAIp0D,KAAKo0D,aAAa7jE,eAAe2W,GAAK,CACtC,IAAMkyI,EAAqBp5I,KAAKo0D,aAAaltD,GAE7C5Y,OAAOmc,WAAW2uI,EAAmBjB,YAAa,8CAW9C1kF,EAAa1gC,GA9PR,qBAiQbA,EAAQ9rB,KACRjH,KAAKq5I,cAAc5lF,EAAYG,QAAS7gC,GA5P1B,sBA6PPA,EAAQ9rB,MACfjH,KAAKo4I,eAAe3kF,EAAYG,QAAS7gC,6CAW/B7rB,EAAIusD,GACdzzD,KAAKw4I,gBAAkB,IAIvBx4I,KAAKo0D,aAAaltD,KAClB2Z,EAAO3b,KAAP,0CAAA7L,OAC8C6N,EAD9C,gBAEAlH,KAAKo0D,aAAaltD,GAAIgxI,wBACfl4I,KAAKo0D,aAAaltD,IAG7BlH,KAAKo0D,aAAaltD,GAAM,IAAI6wI,EAAmBtkF,EAAazzD,+CAQhDkH,GACRlH,KAAKw4I,gBAAkB,GAIvBx4I,KAAKo0D,aAAaltD,KAClBlH,KAAKo0D,aAAaltD,GAAIgxI,wBACfl4I,KAAKo0D,aAAaltD,0CAWnBivB,EAAe21C,GAEzB,GAAIA,GAAWA,EAAQ5kE,GAAI,CACvB,IAAM2L,EAAW,CACb5L,KAnTU,oBAoTVC,GAAI4kE,EAAQ5kE,IAGhBlH,KAAKiuC,YAAYp7B,EAAUsjB,QAE3BtV,EAAO3b,KAAP,6CAAA7L,OACiD88B,EADjD,6CAWOA,EAAetjB,GAC1B,IAAMumI,EAAqBp5I,KAAKo0D,aAAaj+B,GAEzCijH,GACAA,EAAmBhB,eAAevlI,kCAuBtC,IAAK,IAAM3L,KAfX2Z,EAAO3b,KAAK,oBAEZlF,KAAKopC,WAAWuQ,IACZ/N,cACA5rC,KAAKg5I,mBACTh5I,KAAKopC,WAAWuQ,IACZ/N,YACA5rC,KAAKi5I,iBACTj5I,KAAKopC,WAAWuQ,IACZ/N,4BACA5rC,KAAKk5I,iBACTl5I,KAAKopC,WAAWuQ,IACZ/N,sBACA5rC,KAAKm5I,mBAEQn5I,KAAKo0D,aACdp0D,KAAKo0D,aAAa7jE,eAAe2W,IACjClH,KAAKo0D,aAAaltD,GAAIgxI,iBAI9Bl4I,KAAKo0D,aAAe,yTCpX5B,IAAMvzC,EAASF,oBAAUQ,GAOJqsG,aAKjB,SAAAA,EAAYpkF,GAAY,IAAAzhC,EAAA3H,kGAAAy/B,CAAAz/B,KAAAwtH,GACpBxtH,KAAKk/H,YAAc91F,EASnBppC,KAAKs5I,SAAU,EAEft5I,KAAKk/H,YAAY38F,iBACbqJ,cAAmC,kBAAMjkC,EAAK4xI,mBAClDv5I,KAAKk/H,YAAY38F,iBACbqJ,YAAiC,kBAAMjkC,EAAK4xI,mBAChDv5I,KAAKk/H,YAAY38F,iBACbqJ,aAAkC,kBAAMjkC,EAAK4xI,mFAQjD,IAAMC,EAAYx5I,KAAKs5I,QACjB5lF,GACC1zD,KAAKk/H,YAAY1qE,eACbx0D,KAAKk/H,YAAY5L,uBAAyB,EAEjDkmB,IAAc9lF,IACd1zD,KAAKs5I,QAAU5lF,EACf7yC,EAAO5b,MAAP,iBAAA5L,OAA8BmgJ,EAA9B,QAAAngJ,OAA8Cq6D,IAC9C1zD,KAAKk/H,YAAY98G,aAAa6C,KAC1B2mB,gBAAqC4tG,EAAW9lF,kdC5ChE,IAAM7yC,EAASF,oBAAUQ,GAMnBypG,aAQF,SAAAA,EAAYyS,gGAAU59F,CAAAz/B,KAAA4qH,GAIlB5qH,KAAKy5I,UAAY,GAEjBz5I,KAAK05I,UAAYrc,EAEjBr9H,KAAKqgI,WAAargI,KAAKqgI,WAAWnwI,KAAK8P,MAEvCA,KAAK05I,UAAUt3H,aAAa+nB,YACxBob,IAAWjyD,kBAAmB0M,KAAKqgI,sEAShCpiE,GACP,OAAOj+D,KAAKy5I,UAAUx7E,yCAeiB,IAA9BmlE,EAA8B1iG,EAA9B0iG,iBAAkBvlE,EAAYn9B,EAAZm9B,SACvBw0B,IAAkB1zB,YAAYd,GAC9B79D,KAAK25I,qBAAqB97E,GACnBulE,GACPpjI,KAAK45I,qBAAqB/7E,0CAoBnB12D,GAAS,IAAAQ,EAAA3H,KACdyY,EAAU,IAAIg5E,sUAAJ97D,CAAA,GACTxuB,EADS,CAEZuN,WAAY1U,KAAK05I,UAAUhlI,cAG/B,OAAO+D,EAAQ8E,MAAM,CACjB00E,QAAS9qF,EAAQ8qF,QACjBC,YAAa/qF,EAAQ+qF,YACrBC,YAAanyF,KAAK05I,UAAUvnD,YAC5BtnD,SAAU1jC,EAAQ0jC,WAEjB5K,KAAK,WAUF,OALKt4B,EAAKkyI,WAAWphI,EAAQqhI,WACzBnyI,EAAKoyI,YAAYthI,GACjB9Q,EAAKqyI,mBAAmBvhI,IAGrBA,IAEV+qB,MAAM,SAAAx+B,GAGH,OAFA2C,EAAKqyI,mBAAmBvhI,GAEjB2qB,QAAQE,OAAOt+B,2CAYpBi5D,GACV,IAAMxlD,EAAUzY,KAAK65I,WAAW57E,GAEhC,OAAIxlD,EACOA,EAAQ+N,KAAK,CAAE2rE,YAAanyF,KAAK05I,UAAUvnD,cAG/C/uD,QAAQE,OAAO,IAAI5sC,MAAM,+DASxB+hB,GACRzY,KAAKy5I,UAAUhhI,EAAQqhI,SAAWrhI,yCAYvBwlD,EAAWhuD,EAAQpgB,GAC9B,IAAM4oB,EAAU,IAAIg5E,IAAa,CAC7B/8E,WAAY1U,KAAK05I,UAAUhlI,WAC3By9E,YAAanyF,KAAK05I,UAAUvnD,YAC5BtiG,OACAouE,YACAhuD,WAKJ,OAFAjQ,KAAK+5I,YAAYthI,GAEVA,6CASQA,EAASslD,GACxB/9D,KAAK05I,UAAUt3H,aAAa6C,KACxBsgC,IAAW7xD,uBAAwB+kB,EAASslD,gDAU/BF,GACjB,IAAMC,EAAcu0B,IAAkBz0B,wBAAwBC,GAE9D,GAAKC,EAAL,CAH2B,IAOnB94D,EAAuD84D,EAAvD94D,MAAO+4D,EAAgDD,EAAhDC,UAAWC,EAAqCF,EAArCE,cAAeC,EAAsBH,EAAtBG,UAAWhuD,EAAW6tD,EAAX7tD,OAIhDwI,EAAUzY,KAAK65I,WAAW57E,GAKzBxlD,GAAsB,QAAXxI,EAaZwI,GACGA,EAAQilH,cAAgBztH,GACxBwI,EAAQulH,aAAeh5H,EAC1B6b,EAAO1b,KAAK,uCACR2H,KAAK8L,UAAUklD,KAKlBrlD,IACDA,EAAUzY,KAAKi6I,eAAeh8E,EAAWhuD,EAAQ+tD,IAGrDvlD,EAAQm5E,UAAU3hF,GAEdjL,GACAyT,EAAQm6E,SAAS5tF,GAGrBhF,KAAKg6I,mBAAmBvhI,EAASslD,IA/B7Bl9C,EAAO1b,KACH,qCACA,yFAuCS04D,GAAU,IAAAq8E,EAErB7nD,IAAkBn0B,sBAAsBL,GADtCO,EADmB87E,EACnB97E,kBAAmBvuE,EADAqqJ,EACArqJ,KAAMouE,EADNi8E,EACMj8E,UAGjC,GAAKA,EAAL,CAOA,IAAIxlD,EAAUzY,KAAK65I,WAAW57E,GAEzBxlD,IACDA,EAAUzY,KAAKi6I,eAAeh8E,EAAW,GAAIpuE,IAGjD4oB,EAAQ0hI,qBAAqB/7E,GAE7Bp+D,KAAKg6I,mBAAmBvhI,QAdpBoI,EAAO1b,KACH,gGAiBDylH,g0BC/Pf,IAAM/pG,EAASF,oBAAUQ,GAMnBm0F,EAAe,CACjBC,oBAAqB,EACrBC,oBAAqB,GAcnB4kC,aAWF,SAAAA,EAAYhkH,EAAQsgC,EAAS2jF,EAAoBhwB,GAAO5qF,EAAAz/B,KAAAo6I,GAEpDp6I,KAAKo2B,OAASA,EACdp2B,KAAKq6I,mBAAqBA,EAC1Br6I,KAAKs6I,iBAAmB,KAGxBt6I,KAAKq2B,IAAM0iH,IAGX/4I,KAAKu6I,KAAO,GAEZ,IAAM7xF,EAAa,CAAE,CAAEvhB,IAAA,QAAA9tC,OAAeq9D,KAEtC12D,KAAK2+C,GAAK,IAAInf,IAASY,sBACnB,CACIsoB,WAAcA,IAOtB1oD,KAAKujE,WAAa,GAElBvjE,KAAK0nF,SAAU,EAEf1nF,KAAKud,MAAQvd,KAAKud,MAAMrtB,KAAK8P,MAC7BA,KAAKwmB,KAAOxmB,KAAKwmB,KAAKt2B,KAAK8P,MAC3BA,KAAKw6I,mBAAqBx6I,KAAKw6I,mBAAmBtqJ,KAAK8P,MACvDA,KAAKy6I,mBAAqBz6I,KAAKy6I,mBAAmBvqJ,KAAK8P,MAEvD1R,OAAOmc,WAAWzK,KAAKud,MAAO8sG,6CAQ1B,IAAA1iH,EAAA3H,KACAA,KAAK0nF,SAIT1nF,KAAK2+C,GAAGmmB,YAAYwwC,GAAcr1E,KAAK,SAAA+oC,GACnCrhE,EAAKg3C,GAAGqmB,oBACJgE,EACA,WACInoD,EAAO3b,KAAP,mCAAA7L,OACuCsO,EAAKyuB,SAC5CzuB,EAAK6yI,sBAET,SAAAx1I,GACI6b,EAAO1b,KAAP,kCAAA9L,OACsCsO,EAAKyuB,OAD3C,MAAA/8B,OAEQ2L,qDAUH,IAAAwD,EAAAxI,KACjBA,KAAKs6I,iBAAmBhsJ,OAAOk0C,YAC3B,WAGIh6B,EAAKm2C,GAAG2pD,SAAS,SAAA78E,GAGb,IAFA,IAAMkoE,EAAUloE,EAAMhmB,SAEb/W,EAAI,EAAGA,EAAIilG,EAAQ/9F,SAAUlH,EAAG,CACrC,IAAM01C,EAAMuvD,EAAQjlG,GACdgsJ,EACA3gI,OAAOqqB,EAAIwkE,KAAK,0BAKtB,GAAI8xC,EAAW,EAAG,CACd,IAAMC,EAAY,GAAAthJ,OACT+qC,EAAIwkE,KAAK,aADA,KAAAvvG,OAEV+qC,EAAIwkE,KAAK,cAFC,KAAAvvG,OAGV+qC,EAAIwkE,KAAK,aAEjBpgG,EAAKiyI,mBACDE,EACAD,EACA3gI,OACIqqB,EAAIwkE,KAAK,mCACb7uF,OACIqqB,EAAIwkE,KAAK,gCAMzB,IAAIvyE,EAAM0iH,IAEV,IAAK,IAAM9oJ,KAAOuY,EAAK+6D,WACf/6D,EAAK+6D,WAAWhzE,eAAeN,IAC5BuY,EAAK+6D,WAAWtzE,GAAKomC,IAAM,IAC9BA,EAAM/qB,KAAK2P,IAAIob,EAAK7tB,EAAK+6D,WAAWtzE,GAAKomC,MAOjD7tB,EAAK+xI,KAAKr3I,KAAKmzB,GACX7tB,EAAK+xI,KAAK3kJ,OAAS,IACnB4S,EAAK+xI,KAAO/xI,EAAK+xI,KAAKt2I,OAAO,EAAG,IAEpCuE,EAAK6tB,IAAM/qB,KAAK2P,IAAL0Y,MAAAroB,KAAI/V,EAAQiT,EAAK+xI,UAGpCv6I,KAAKq6I,+DAiBMpqJ,EAAKyqJ,EAAUE,EAAmBC,GAE5C76I,KAAKujE,WAAWtzE,KACjB+P,KAAKujE,WAAWtzE,GAAO,CACnByqJ,SAAU,EACVE,kBAAmB,EACnBC,aAAc,EACdxkH,IAAK1f,MAIb,IAAMmkI,EAAeJ,EAAW16I,KAAKujE,WAAWtzE,GAAKyqJ,SAC/CK,EACAH,EAAoB56I,KAAKujE,WAAWtzE,GAAK2qJ,kBAMzCI,EACCH,EAAeD,GACf56I,KAAKujE,WAAWtzE,GAAK4qJ,aAClB76I,KAAKujE,WAAWtzE,GAAK2qJ,mBAC3BvkH,EAAM1f,IAENokI,EAAwB,GAA+B,IAA1BC,IAC7B3kH,EAAMykH,EAAeC,GAGzB/6I,KAAKujE,WAAWtzE,GAAKyqJ,SAAWA,EAChC16I,KAAKujE,WAAWtzE,GAAK2qJ,kBAAoBA,EACzC56I,KAAKujE,WAAWtzE,GAAK4qJ,aAAeA,EACpC76I,KAAKujE,WAAWtzE,GAAKomC,IAAMA,iCASvBr2B,KAAKs6I,kBACLhsJ,OAAOuxC,cAAc7/B,KAAKs6I,kBAG9Bt6I,KAAK2+C,GAAG1hC,QAERjd,KAAK0nF,SAAU,WASFikC,aAKjB,SAAAA,EAAYj4F,GAAQ,IAAA3lB,EAAA/N,KAChB,GADgBy/B,EAAAz/B,KAAA2rH,GACXj4F,GAAWA,EAAOq7D,SACftsE,IAAQw4H,sCADhB,CAMAj7I,KAAKk7I,WAAa,GAElBl7I,KAAKm7I,gBAAkBn7I,KAAKm7I,gBAAgBjrJ,KAAK8P,MACjDA,KAAK6sB,cAAgB7sB,KAAK6sB,cAAc38B,KAAK8P,MAC7CA,KAAKwmB,KAAOxmB,KAAKwmB,KAAKt2B,KAAK8P,MAE3BA,KAAKy4I,kBAAoB,KACzBz4I,KAAK0nF,SAAU,EAEf,IAAM0zD,EAAe1nH,EAAO0nH,cAAgB,IAG5Cv6H,EAAO3b,KAAP,iDAAA7L,OACqD+hJ,IAGrD9sJ,OAAOmc,WACH,kBAAMsD,EAAKotI,gBAAgBznH,IAC3B0nH,sDAMQ1nH,GAAQ,IAAAnlB,EAAAvO,KACpB,GAAK0zB,EAAOk1B,aAMZ,IAAI5oD,KAAK0nF,QAAT,CAIA,IAAM2yD,EACA3mH,EAAO4mH,kBAjQW,IAkQlB5B,EACAhlH,EAAO+kH,mBAAqB4B,EAE5B5kE,EAAS4kE,EADDjrJ,OAAOmW,KAAKmuB,EAAOk1B,aAAahzD,OAK1ClH,EAAI,EAER,IAAK,IAAM0nC,KAAU1C,EAAOk1B,YACxB,GAAIl1B,EAAOk1B,YAAYr4D,eAAe6lC,GAAS,CAC3C,IAAMsgC,EAAUhjC,EAAOk1B,YAAYxyB,GAEnCp2B,KAAKk7I,WAAW9kH,GACV,IAAIgkH,EACFhkH,EACAsgC,EACA2jF,EACA5kE,EAAS/mF,GACjBA,IAIRJ,OAAOmc,WACH,WACS8D,EAAKm5E,UACNn5E,EAAKkqI,kBACCnqJ,OAAOk0C,YACTj0B,EAAKse,cAAe6rH,KAGhC,WA1CA73H,EAAO1b,KAAK,uEAkDhB,IAAMo1I,EAAO,GAEb,IAAK,IAAMnkH,KAAUp2B,KAAKk7I,WACtB,GAAIl7I,KAAKk7I,WAAW3qJ,eAAe6lC,GAAS,CACxC,IAAMC,EAAMr2B,KAAKk7I,WAAW9kH,GAAQC,IAE/Bnc,MAAMmc,IAAQA,IAAQ0iH,MACvBwB,EAAKnkH,EAAOx0B,QAAQ,IAAK,MAAQy0B,GAKzCkkH,GACAv4H,IAAW6K,cAAcoK,YAAuBsjH,mCAWpD,IAAK,IAAMnkH,KAFXvV,EAAO3b,KAAK,wBACZlF,KAAK0nF,SAAU,EACM1nF,KAAKk7I,WAClBl7I,KAAKk7I,WAAW3qJ,eAAe6lC,IAC/Bp2B,KAAKk7I,WAAW9kH,GAAQ5P,OAGhCxmB,KAAKk7I,WAAa,GAEdl7I,KAAKy4I,mBACLnqJ,OAAOuxC,cAAc7/B,KAAKy4I,miBChVtC,IAAM53H,EAASF,oBAAUQ,GAMnBk6H,aAMF,SAAAA,EAAYpsJ,GAAMwwC,EAAAz/B,KAAAq7I,GACdr7I,KAAK/Q,KAAOA,EACZ+Q,KAAKimI,MAAQ,EACbjmI,KAAK6rG,IAAM,EACX7rG,KAAK66E,QAAU,6CAQXh/B,GACqB,iBAAdA,EACPh7B,EAAO7b,MAAP,GAAA3L,OACO2G,KAAK/Q,KADZ,8BAAAoK,OAC6C2G,KAAKimI,OAC9CpqF,GACI3hC,MAAM2hC,KACd77C,KAAK6rG,KAAOhwD,EACZ77C,KAAK66E,QAAQ33E,KAAK24C,GAClB77C,KAAKimI,OAAS,uCAUlB,OAAOjmI,KAAK6rG,IAAM7rG,KAAKimI,2CAQdznF,GACTA,EAAM,GAAAnlD,OAAI2G,KAAK/Q,KAAT,SAAuB+Q,KAAKs7I,YAClC98F,EAAM,GAAAnlD,OAAI2G,KAAK/Q,KAAT,aAA2B6d,KAAK8L,UAAU5Y,KAAK66E,yCAQrD76E,KAAK66E,QAAU,GACf76E,KAAK6rG,IAAM,EACX7rG,KAAKimI,MAAQ,WASfsV,aAQF,SAAAA,EAAY3xB,EAAqBr/E,EAAOp6C,GAAG,IAAAwX,EAAA3H,KAAAy/B,EAAAz/B,KAAAu7I,GAKvCv7I,KAAKuqC,MAAQA,EAObvqC,KAAKw7I,GAAKrrJ,EAQV6P,KAAKy7I,WAAa,EAMlBz7I,KAAK07I,QAAU,IAAIL,EAAkB,OAYrCr7I,KAAK27I,iBAAmB,IAAIx5H,IAO5BniB,KAAK47I,qBAAuBhyB,EAU5B5pH,KAAK67I,oBAAiBt7I,EAEtBP,KAAK87I,mBAAqB,SAACl2H,EAAK6F,GACxB9jB,EAAK4iC,QAAU3kB,EAAI2kB,OACnB5iC,EAAKo0I,mBAAmBtwH,IAIhC,IAAM2d,EAAawgF,EAAoBsV,YAEvC91F,EAAW/hB,WAAW1C,2BAClB3kB,KAAK87I,oBAEJ97I,KAAKuqC,QACNvqC,KAAKoyD,YAAc,SAAAlrD,GAAE,OAAIS,EAAKg0I,iBAAiBr1H,OAAOpf,IACtDkiC,EAAW/kB,GAAGsyH,YAA4B32I,KAAKoyD,aAE/CpyD,KAAKg8I,sBACC,SAAC90I,EAAIlO,GAAL,OAAc2O,EAAKs0I,oBAAoB/0I,EAAIlO,IACjDowC,EAAW/kB,GACPwyH,uBACA72I,KAAKg8I,6EASEhjJ,GACf,GAAKA,GAcL,GARIypB,IAAQy5H,yBACJljJ,EAAKwnB,WAAaxnB,EAAKwnB,UAAU5qB,QACjCoK,KAAK07I,QAAQS,QAAQnjJ,EAAKwnB,UAAU,GAAG6V,KAI/Cr2B,KAAKy7I,YAAc,EAEfz7I,KAAKy7I,YAAcz7I,KAAKw7I,GAAI,CAC5B,GAAI/4H,IAAQy5H,wBAAyB,CACjC,IAAM9yG,EAAappC,KAAK47I,qBAAqB1c,YAEvCkd,EAAc,CAChB32F,IAAKzlD,KAAKuqC,MACV8xG,gBAAmBjzG,EAAWkqF,uBAelC,GAZIt6H,EAAKwnB,WAAaxnB,EAAKwnB,UAAU5qB,QACjCxG,OAAOggG,OAAOgtD,EAAa,CACvBE,qBACItjJ,EAAKwnB,UAAU,GAAGunF,mBACtBw0C,sBACIvjJ,EAAKwnB,UAAU,GAAGsnF,oBACtB00C,eAAkBxjJ,EAAKwnB,UAAU,GAAGvZ,OAI5CjH,KAAK07I,QAAQe,aAAaL,GAEtBp8I,KAAKuqC,MAAO,CAEZ,IAAMmyG,EAAgB18I,KACjB47I,qBAAqBe,gBAAgBd,eAErC3hI,MAAMwiI,KAEPN,EAAW,SACLp8I,KAAK07I,QAAQJ,YAAcoB,OAElC,CAEH,IAAME,EAAe58I,KAAK68I,yBACpBC,EAAc98I,KAAK07I,QAAQJ,YAEjCt7I,KAAK67I,eAAiBiB,EAAcF,EAE/B1iI,MAAM4iI,IAAiB5iI,MAAM0iI,KAE9BR,EAAW,gBAAsBp8I,KAAK67I,gBAI9C75H,IAAW6K,cAAcmK,YAAoBolH,IAGjDp8I,KAAK+8I,uBA5DLl8H,EAAO7b,MAAM,6DAuEjB,IAAIihI,EAAQ,EAAGp6B,EAAM,EADA3mF,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IAKrB,QAAA8kB,EAAAC,EAAwBtlB,KAAK27I,iBAAiBp2H,SAA9C91B,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAwD,KAA7C83H,EAA6C33H,EAAA11B,MAC9CstJ,EAAMD,EAAU1B,YAEjBphI,MAAM+iI,KACPpxC,GAAOoxC,EACPhX,GAAS,EACT+W,EAAU30I,UAXG,MAAAgI,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAerB,OAAOymF,EAAMo6B,8CAUG/+H,EAAIlO,GACpB,IAAMkkJ,EAAmC,iBAAhBlkJ,EAAKq9I,OAC1B8G,EAASn9I,KAAK27I,iBAAiBpsJ,IAAI2X,IAElCi2I,GAAUD,IACXC,EAAS,IAAI9B,EAAJ,GAAAhiJ,OAAyB6N,EAAzB,cACTlH,KAAK27I,iBAAiB73H,IAAI5c,EAAIi2I,IAG9BD,EACAC,EAAOhB,QAAQnjJ,EAAKq9I,QACb8G,GACPn9I,KAAK27I,iBAAiBr1H,OAAOpf,4CASjClH,KAAK07I,QAAQrzI,QACTrI,KAAK27I,kBACL37I,KAAK27I,iBAAiBrvE,QAE1BtsE,KAAKy7I,WAAa,oCAQlB,IAAMryG,EAAappC,KAAK47I,qBAAqB1c,YAE7C91F,EAAW/hB,WAAWzC,8BAClB5kB,KAAK87I,oBACJ97I,KAAKuqC,QACNnB,EAAWuQ,IACPk9F,uBACA72I,KAAKg8I,uBACT5yG,EAAWuQ,IACPg9F,YACA32I,KAAKoyD,uBAaAy3D,aAOjB,SAAAA,EAAYzgF,EAAYj5C,GAAG,IAAAqY,EAAAxI,KAAAy/B,EAAAz/B,KAAA6pH,GAOvB7pH,KAAKw7I,GAAKrrJ,EAENA,EAAI,GACJ0wB,EAAO3b,KAAP,0CAAA7L,OAAsDlJ,EAAtD,aAcJ6P,KAAKy7I,WAAa,EAOlBz7I,KAAKk/H,YAAc91F,EAQnBppC,KAAKo9I,mBACC,IAAI/B,EAAkB,wBAQ5Br7I,KAAKq9I,qBACC,IAAIhC,EAAkB,0BAQ5Br7I,KAAKs9I,mBACC,IAAIjC,EAAkB,wBAQ5Br7I,KAAKu9I,qBACC,IAAIlC,EAAkB,0BAQ5Br7I,KAAKw9I,gBACC,IAAInC,EAAkB,oBAQ5Br7I,KAAKy9I,kBACC,IAAIpC,EAAkB,sBAQ5Br7I,KAAK09I,oBACC,IAAIrC,EAAkB,qBAQ5Br7I,KAAK29I,iBACC,IAAItC,EAAkB,sBAQ5Br7I,KAAK49I,mBACC,IAAIvC,EAAkB,wBAO5Br7I,KAAK69I,cAAgB,IAAIxC,EAAkB,oBAQ3Cr7I,KAAK89I,oBACC,IAAIzC,EAAkB,2BAO5Br7I,KAAK+9I,aAAe,IAAI1C,EAAkB,mBAQ1Cr7I,KAAKg+I,mBACC,IAAI3C,EAAkB,0BAQ5Br7I,KAAKi+I,uBACC,IAAI5C,EAAkB,iBAQ5Br7I,KAAKk+I,uBACC,IAAI7C,EAAkB,wBAO5Br7I,KAAKm+I,sBACC,IAAI9C,EAAkB,gBAQ5Br7I,KAAKo+I,sBACC,IAAI/C,EAAkB,uBAQ5Br7I,KAAKq+I,OAAS,IAAIhD,EAAkB,sBAEpCr7I,KAAKs+I,2BAAwB/9I,EAE7BP,KAAKu+I,qBAAuB,SAAAvlJ,GACxBwP,EAAKuzI,mBAAmB/iJ,GACxBwP,EAAKg2I,kCAAkCxlJ,IAE3CowC,EAAW/kB,GACPwyH,sBACA72I,KAAKu+I,sBAETv+I,KAAKy+I,oBAAsB,WACvB59H,EAAO5b,MAAM,uCACbuD,EAAKu0I,iBACLv0I,EAAKm0I,gBAAgBI,iBACrBv0I,EAAKk2I,gBAAgB3B,kBAEzB3zG,EAAW/kB,GACPsyH,aACA32I,KAAKy+I,qBAETz+I,KAAK2+I,uBAAyB,SAACnF,EAAW9lF,IAIpB,IAAdA,IACA7yC,EAAO3b,KAAK,+BACZsD,EAAKo2I,sBAGbx1G,EAAW/kB,GACPsyH,gBACA32I,KAAK2+I,wBAET3+I,KAAK28I,gBACC,IAAIpB,EAAmBv7I,MAAM,EAAiB7P,GAEpD6P,KAAK0+I,gBACC,IAAInD,EAAmBv7I,MAAM,EAAgB7P,IAtN/C0wB,EAAO3b,KAAK,4FA+NDlM,GAEf,GAAKA,EAAL,CAMA,IAAMuxC,EAAQvqC,KAAKk/H,YAAY1qE,cACzBqqF,EAAW7+I,KAAKk/H,YAAY5L,sBAElC,GAAK/oF,KAASs0G,EAAW,GAAzB,CAeA,IAAM35C,EAAUlsG,EAAKksG,QACf5nE,EAAYtkC,EAAKskC,UACjBgoE,EAAatsG,EAAKssG,WAClBzoE,EAAY7jC,EAAKosG,UACjB5pE,EAAaxiC,EAAKwiC,WAExB,GAAK0pE,EAIE,GAAK5nE,EAIL,GAAKgoE,EAIL,GAAKzoE,EAIL,GAAKrB,GA2DZ,GArDAx7B,KAAKo9I,mBAAmBjB,QAAQj3C,EAAQ1qE,MAAM2qE,QAC9CnlG,KAAKq9I,qBAAqBlB,QAAQj3C,EAAQ1qE,MAAM28D,UAEhDn3F,KAAKs9I,mBAAmBnB,QAAQj3C,EAAQ3rE,MAAM4rE,QAC9CnlG,KAAKu9I,qBAAqBpB,QAAQj3C,EAAQ3rE,MAAM49D,UAE5C10E,IAAQq8H,gCACR9+I,KAAKw9I,gBAAgBrB,QAAQ7+G,EAAU6nE,QACvCnlG,KAAKy9I,kBAAkBtB,QAAQ7+G,EAAU65D,WAG7Cn3F,KAAK29I,iBAAiBxB,QAAQ72C,EAAWH,QACzCnlG,KAAK49I,mBAAmBzB,QAAQ72C,EAAWnO,UAC3Cn3F,KAAK09I,oBAAoBvB,QAAQ72C,EAAWrc,OAE5CjpF,KAAKq+I,OAAOlC,QAAQnjJ,EAAK0wH,mBAErB7sF,IACA78B,KAAK69I,cAAc1B,QACfn8I,KAAK++I,sBACDliH,GAAW,EAAoBgI,WACvC7kC,KAAK89I,oBAAoB3B,QACrBn8I,KAAK++I,sBACDliH,GAAW,EAAoBgI,YAEvC7kC,KAAK+9I,aAAa5B,QACdn8I,KAAK++I,sBACDliH,GAAW,EAAkBgI,WACrC7kC,KAAKg+I,mBAAmB7B,QACpBn8I,KAAK++I,sBACDliH,GAAW,EAAkBgI,aAGrCrJ,IACAx7B,KAAKi+I,uBAAuB9B,QACxBn8I,KAAKg/I,yBACDxjH,GAAY,EAAoBqJ,WAExC7kC,KAAKk+I,uBAAuB/B,QACxBn8I,KAAKg/I,yBACDxjH,GAAY,EAAoBqJ,YAExC7kC,KAAKm+I,sBAAsBhC,QACvBn8I,KAAKg/I,yBACDxjH,GAAY,EAAkBqJ,WAEtC7kC,KAAKo+I,sBAAsBjC,QACvBn8I,KAAKg/I,yBACDxjH,GAAY,EAAkBqJ,aAG1C7kC,KAAKy7I,YAAc,EAEfz7I,KAAKy7I,YAAcz7I,KAAKw7I,GAAI,CAE5B,IAAMY,EAAc,CAChB32F,IAAKlb,EACL8xG,gBAAmBwC,GAGnB7lJ,EAAKwnB,WAAaxnB,EAAKwnB,UAAU5qB,QACjCxG,OAAOggG,OAAOgtD,EAAa,CACvBE,qBACItjJ,EAAKwnB,UAAU,GAAGunF,mBACtBw0C,sBACIvjJ,EAAKwnB,UAAU,GAAGsnF,oBACtB00C,eAAkBxjJ,EAAKwnB,UAAU,GAAGvZ,OAI5CjH,KAAKo9I,mBAAmBX,aAAaL,GACrCp8I,KAAKq9I,qBAAqBZ,aAAaL,GAEvCp8I,KAAKs9I,mBAAmBb,aAAaL,GACrCp8I,KAAKu9I,qBAAqBd,aAAaL,GAEnC35H,IAAQq8H,gCACR9+I,KAAKw9I,gBAAgBf,aAAaL,GAClCp8I,KAAKy9I,kBAAkBhB,aAAaL,IAExCp8I,KAAK29I,iBAAiBlB,aAAaL,GACnCp8I,KAAK49I,mBAAmBnB,aAAaL,GACrCp8I,KAAK09I,oBAAoBjB,aAAaL,GAEtCp8I,KAAK69I,cAAcpB,aAAaL,GAC3BliI,MAAMla,KAAK89I,oBAAoBxC,cAChCt7I,KAAK89I,oBAAoBrB,aAAaL,GAE1Cp8I,KAAK+9I,aAAatB,aAAaL,GAC1BliI,MAAMla,KAAKg+I,mBAAmB1C,cAC/Bt7I,KAAKg+I,mBAAmBvB,aAAaL,GAGzCp8I,KAAKi+I,uBAAuBxB,aAAaL,GACpCliI,MAAMla,KAAKk+I,uBAAuB5C,cACnCt7I,KAAKk+I,uBAAuBzB,aAAaL,GAE7Cp8I,KAAKm+I,sBAAsB1B,aAAaL,GACnCliI,MAAMla,KAAKo+I,sBAAsB9C,cAClCt7I,KAAKo+I,sBAAsB3B,aAAaL,GAG5Cp8I,KAAKq+I,OAAO5B,aAAaL,GAEzBp6H,IAAW6K,cAAcmK,YAAoBolH,IAE7Cp8I,KAAK+8I,uBA/GLl8H,EAAO7b,MAAM,sBAJb6b,EAAO7b,MAAM,uBAJb6b,EAAO7b,MAAM,wBAJb6b,EAAO7b,MAAM,uBAJb6b,EAAO7b,MAAM,sBA9Bb6b,EAAO7b,MAAM,6DA4KIi6I,EAAiBn1H,EAAS8a,GAK/C,IAJA,IAAIs6G,EAAgB,EAChB/jB,EAAY,EACVgkB,EAAOn/I,KAAKk/H,YAAY3rE,WAH4BstE,EAKrCzxI,OAAOmW,KAAK05I,GAAjCx8I,EAAA,EAAAA,EAAAo+H,EAAAjrI,OAAA6M,IAAmD,CAA9C,IAAM28I,EAAMve,EAAAp+H,GACb,GAAIqnB,EAAUs1H,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,IAAM1rF,EACA3pC,EACI,KACA9pB,KAAKk/H,YAAY5qE,mBAAmB8qF,GACxCC,EAAmBJ,EAAgBG,GAGzC,IAAKt1H,GAAW2pC,IAAgB4rF,EAAkB,CAC9C,IAAMC,EAAgBt/I,KAAKu/I,6BACvBF,EAAkB5rF,EAAa7uB,GAE9B1qB,MAAMolI,KACPJ,GAAiBI,EACjBnkB,GAAa,KAM7B,OAAO+jB,EAAgB/jB,uDAcEqkB,EAAQ/rF,EAAa7uB,GAC9C,IAAI9T,EAAQ1hC,OAAOmW,KAAKi6I,GAAQh6I,IAAI,SAAAgjB,GAAI,OAAIzO,OAAOyO,KAC/C+Y,EAAc,KAIZ3b,EAAM5lB,KAAKk/H,YAAY/N,0BAEzB19D,GACAlyB,EAAckyB,EAAY8B,qBAAqB5wB,QAE3C7T,EACMA,EAAME,OACJ,SAAAxI,GAAI,OAAI+Y,EAAYhQ,KAChB,SAAAmT,GAAK,OACAA,EAAMmxB,WACAnxB,EAAM60E,YAAc/wF,GACpBkc,EAAME,YAAcA,QAG/CrD,EAAcvhC,KAAKk/H,YAAYtyF,eAAejI,KAC9C7T,EACMA,EAAME,OACJ,SAAAxI,GAAI,OAAI+Y,EAAYhQ,KAChB,SAAAmT,GAAK,OACAA,EAAMmxB,WACAjwC,EAAI2nF,aAAa7oE,KAAWlc,GAC5Bkc,EAAME,YAAcA,OAG/C,IAAIs6G,EAAgB,EAChBO,EAAgB,EA/BqC35H,GAAA,EAAAC,GAAA,EAAAC,OAAAzlB,EAAA,IAiCzD,QAAA0lB,EAAAC,EAAmB4K,EAAnBrhC,OAAA4F,cAAAywB,GAAAG,EAAAC,EAAAV,QAAAC,MAAAK,GAAA,EAA0B,KAAf0C,EAAevC,EAAAt2B,MAChB+vJ,EACA3lI,OAAOylI,EAAOh3H,GAAMgR,QAAUzf,OAAOylI,EAAOh3H,GAAMkT,QAGnDxhB,MAAMwlI,IAAmBA,EAAiB,IAC3CR,GAAiBQ,EACjBD,GAAiB,IAxCgC,MAAApvI,GAAA0V,GAAA,EAAAC,EAAA3V,EAAA,YAAAyV,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GA4CzD,OAAOk5H,EAAgBO,gDAaL5iH,EAAW/S,EAAS8a,GAKtC,IAJA,IAAI+6G,EAAa,EACbxkB,EAAY,EACVgkB,EAAOn/I,KAAKk/H,YAAY3rE,WAHmButE,EAK5B1xI,OAAOmW,KAAKs3B,GAAjCz5B,EAAA,EAAAA,EAAA09H,EAAAlrI,OAAAwN,IAA6C,CAAxC,IAAMg8I,EAAMte,EAAA19H,GACb,GAAI0mB,EAAUs1H,IAAWD,EAAOC,IAAWD,EAAM,CAC7C,IAAM1rF,EACA3pC,EACI,KAAO9pB,KAAKk/H,YAAY5qE,mBAAmB8qF,GAC/CQ,EAAY/iH,EAAUuiH,GAG5B,IAAKt1H,GAAW2pC,IAAgBmsF,EAAW,CACvC,IAAMC,EACA7/I,KAAK8/I,0BACHF,EAAWnsF,EAAa7uB,GAE3B1qB,MAAM2lI,KACPF,GAAcE,EACd1kB,GAAa,KAM7B,OAAOwkB,EAAaxkB,oDAcEqkB,EAAQ/rF,EAAa7uB,GAC3C,IAAI9T,EAAQ1hC,OAAOmW,KAAKi6I,GAAQh6I,IAAI,SAAAgjB,GAAI,OAAIzO,OAAOyO,KAC/C+Y,EAAc,KAIZ3b,EAAM5lB,KAAKk/H,YAAY/N,0BAEzB19D,GACAlyB,EAAckyB,EAAY8B,qBAAqB5wB,QAE3C7T,EACMA,EAAME,OACJ,SAAAxI,GAAI,OAAI+Y,EAAYhQ,KAChB,SAAAmT,GAAK,OAAKA,EAAMmxB,WACTnxB,EAAM60E,YAAc/wF,GACpBkc,EAAME,YAAcA,QAG3CrD,EAAcvhC,KAAKk/H,YAAYtyF,eAAejI,KAC9C7T,EACMA,EAAME,OACJ,SAAAxI,GAAI,OAAI+Y,EAAYhQ,KAChB,SAAAmT,GAAK,OAAKA,EAAMmxB,WACTjwC,EAAI2nF,aAAa7oE,KAAWlc,GAC5Bkc,EAAME,YAAcA,OAG3C,IAAI+6G,EAAa,EACbF,EAAgB,EA7BkCz4H,GAAA,EAAAC,GAAA,EAAAC,OAAA3mB,EAAA,IA+BtD,QAAA4mB,EAAAC,EAAmB0J,EAAnBrhC,OAAA4F,cAAA2xB,GAAAG,EAAAC,EAAA5B,QAAAC,MAAAuB,GAAA,EAA0B,KAAfwB,EAAerB,EAAAx3B,MAChBowJ,EAAchmI,OAAOylI,EAAOh3H,KAG7BtO,MAAM6lI,IAAgBA,EAAc,IACrCJ,GAAcI,EACdN,GAAiB,IArC6B,MAAApvI,GAAA4W,GAAA,EAAAC,EAAA7W,EAAA,YAAA2W,GAAA,MAAAI,EAAAvB,QAAAuB,EAAAvB,SAAA,WAAAoB,EAAA,MAAAC,GAyCtD,OAAOy4H,EAAaF,4DAUUzmJ,GAC9B,GAAKA,GAASA,EAAKwnB,WAAcxnB,EAAKwnB,UAAU5qB,OAAhD,CAGA,IAAMoqJ,EAAiB,CACnBv6F,IAAKzsD,EAAKwnB,UAAU,GAAGilC,IACvB62F,qBAAwBtjJ,EAAKwnB,UAAU,GAAGunF,mBAC1Cw0C,sBAAyBvjJ,EAAKwnB,UAAU,GAAGsnF,oBAC3C00C,eAAkBxjJ,EAAKwnB,UAAU,GAAGvZ,MAGnCjH,KAAKs+I,uBAA0B/jB,IAAQylB,EAAgBhgJ,KAAKs+I,yBAC7Dt+I,KAAKs+I,sBAAwB0B,EAC7Bh+H,IAAW6K,cAAcqK,YAA0B8oH,kDAYvDhgJ,KAAK+8I,iBACL/8I,KAAK28I,gBAAgBI,0DAQrB/8I,KAAKo9I,mBAAmB/0I,QACxBrI,KAAKq9I,qBAAqBh1I,QAE1BrI,KAAKs9I,mBAAmBj1I,QACxBrI,KAAKu9I,qBAAqBl1I,QAE1BrI,KAAKw9I,gBAAgBn1I,QACrBrI,KAAKy9I,kBAAkBp1I,QAEvBrI,KAAK29I,iBAAiBt1I,QACtBrI,KAAK49I,mBAAmBv1I,QACxBrI,KAAK09I,oBAAoBr1I,QAEzBrI,KAAK69I,cAAcx1I,QACnBrI,KAAK89I,oBAAoBz1I,QACzBrI,KAAK+9I,aAAa11I,QAClBrI,KAAKg+I,mBAAmB31I,QAExBrI,KAAKi+I,uBAAuB51I,QAC5BrI,KAAKk+I,uBAAuB71I,QAC5BrI,KAAKm+I,sBAAsB91I,QAC3BrI,KAAKo+I,sBAAsB/1I,QAE3BrI,KAAKq+I,OAAOh2I,QAEZrI,KAAKy7I,WAAa,oCAOlBz7I,KAAKk/H,YAAYvlF,IACbg9F,aACA32I,KAAKy+I,qBACTz+I,KAAKk/H,YAAYvlF,IACbk9F,sBACA72I,KAAKu+I,sBACTv+I,KAAKk/H,YAAYvlF,IACbg9F,gBACA32I,KAAK2+I,wBACT3+I,KAAK28I,gBAAgB53H,UACrB/kB,KAAK0+I,gBAAgB35H,4WC7+B7B,IAAMlE,EAASF,oBAAUQ,GAWJ6oG,aAOjB,SAAAA,EAAY5gF,gGAAY3J,CAAAz/B,KAAAgqH,GACpBhqH,KAAKk/H,YAAc91F,EACnBppC,KAAKigJ,sBAAwB,GAC7BjgJ,KAAKkgJ,sBAAwB,GAC7BlgJ,KAAKmgJ,wBAA0B,GAC/BngJ,KAAKogJ,mCAAqC,GAC1CpgJ,KAAKqgJ,0BAA4BrgJ,KAAKqgJ,0BAA0BnwJ,KAAK8P,MACrEA,KAAKsgJ,4BAA8BtgJ,KAAKsgJ,4BAA4BpwJ,KAAK8P,MACzEA,KAAKugJ,eAAiBvgJ,KAAKugJ,eAAerwJ,KAAK8P,MAC/CA,KAAKk/H,YAAY76G,GAAGwyH,uBAA8C72I,KAAKsgJ,6BACvEtgJ,KAAKk/H,YAAY73G,WAAW1C,2BAA2B3kB,KAAKqgJ,2BAC5DrgJ,KAAKk/H,YAAY76G,GAAGsyH,YAA4B32I,KAAKugJ,2FAU7BnpH,KAA4B,IAAlBs0E,EAAkBhrE,EAAlBgrE,eAC5B80C,EAAmBxgJ,KAAKogJ,mCAAmChpH,GAAU,GAAM,EAIjF,GAFAp3B,KAAKogJ,mCAAmChpH,GAAUopH,KAEE,IAAhDxgJ,KAAKkgJ,sBAAsBt8I,QAAQwzB,IAAmBA,KAAUp3B,KAAKmgJ,yBAC9Dz0C,GAAkB,GAAK80C,EAAkB,GADpD,CAKA,IAAM/sF,EAAczzD,KAAKk/H,YAAY5qE,mBAAmBl9B,GAExD,GAAIq8B,EAGA,GAFeA,EAAY8B,qBAAqB5wB,KAErC/uC,OAAS,GAAK69D,EAAYgtF,eAIjC,OAIR,IAAMppH,EAAmBr3B,KAAKigJ,sBAAsB7oH,GAE/C3hC,MAAMC,QAAQ2hC,KAAqBA,EAAiBu8D,MAAM,SAAA/lD,GAAU,OAAmB,IAAfA,MACzE7tC,KAAKmgJ,wBAAwB/oH,GAAU,CACnCE,kBAAmBo0E,EACnBr0E,iBAAkB,wDAYJzR,KAAyB,IAAAje,EAAA3H,KAAlB0rG,EAAkB9qE,EAAlB8qE,eACzB9lF,IAAQ5lB,KAAKk/H,YAAY/N,4BAI7B/hI,OAAOmW,KAAKmmG,GAAgBp8F,QAAQ,SAAA8nB,GAChC,IAAoD,IAAhDzvB,EAAKu4I,sBAAsBt8I,QAAQwzB,GAAvC,CAIA,IAAMC,EAAmB1vB,EAAKs4I,sBAAsB7oH,GAE/C3hC,MAAMC,QAAQ2hC,GAERA,EAAiBzhC,QAxFR,GAyFhByhC,EAAiBrJ,QAFjBrmB,EAAKs4I,sBAAsB7oH,GAAU,GAKzCzvB,EAAKs4I,sBAAsB7oH,GAAQl0B,KAAKwoG,EAAet0E,OAI3DhoC,OAAOmW,KAAKvF,KAAKmgJ,yBAAyB7wI,QAAQ,SAAA8nB,GAAU,IAAAspH,EACR/4I,EAAKw4I,wBAAwB/oH,GAArEC,EADgDqpH,EAChDrpH,iBAAkBC,EAD8BopH,EAC9BppH,kBAI1B,GAFAD,EAAiBn0B,KAAKwoG,EAAet0E,IAnGjB,IAqGhBC,EAAiBzhC,OAAoC,CACrD,GAAIyhC,EAAiBu8D,MAAM,SAAA/lD,GAAU,YAA0B,IAAfA,GAA6C,IAAfA,IAAmB,CAC7F,IAAM8yG,EAAyB7zI,KAAK8L,UAAUye,GAE9CrV,IAAW6K,cACPsK,YAA8BC,EAAQupH,EAAwBrpH,IAClEzW,EAAO1b,KAAP,yEAAA9L,OACI+9B,EADJ,0BAAA/9B,OACmCsnJ,EADnC,2BAAAtnJ,OAEIi+B,IACJ3vB,EAAKu4I,sBAAsBh9I,KAAKk0B,GAChCzvB,EAAK44I,eAAenpH,UAGjBzvB,EAAKw4I,wBAAwB/oH,8CAWjCA,UACJp3B,KAAKigJ,sBAAsB7oH,qCASlCp3B,KAAKk/H,YAAYvlF,IAAIk9F,uBAA8C72I,KAAKsgJ,6BACxEtgJ,KAAKk/H,YAAYvlF,IAAIg9F,YAA4B32I,KAAKugJ,gBACtDvgJ,KAAKk/H,YAAY73G,WAAWzC,8BAA8B5kB,KAAKqgJ,2BAC/DrgJ,KAAKigJ,2BAAwB1/I,EAC7BP,KAAKmgJ,6BAA0B5/I,EAC/BP,KAAKkgJ,2BAAwB3/I,EAC7BP,KAAKogJ,wCAAqC7/I,EAC1CP,KAAKk/H,iBAAc3+H,2XCpJN4pH,aAQjB,SAAAA,EAAY/gF,gGAAY3J,CAAAz/B,KAAAmqH,GACpBnqH,KAAKyrB,MAAQ,CACTw+B,MAAO,GAIP22F,kBAAmB,MAGvB,IAAM72H,EAASqf,EAAWmqB,WAE1BvzD,KAAKyrB,MAAMw+B,MAAMlgC,GAAU,IAAIo+D,IAAap+D,EAAQ,MAAM,GAC1D/pB,KAAKopC,WAAaA,EAElBA,EAAW7G,iBACPqJ,2BACA5rC,KAAK6gJ,mBAAmB3wJ,KAAK8P,OACjCopC,EAAW7G,iBACPqJ,cACA5rC,KAAK8gJ,YAAY5wJ,KAAK8P,OAC1BopC,EAAW7G,iBACPqJ,YACA5rC,KAAK+gJ,aAAa7wJ,KAAK8P,OAC3BopC,EAAW7G,iBACPqJ,uBACA5rC,KAAKghJ,qBAAqB9wJ,KAAK8P,OAC/BopC,EAAWnnB,MACXmnB,EAAWnnB,KAAKkoB,YACZob,IAAWlxD,uBACX2L,KAAKihJ,aAAa/wJ,KAAK8P,yEAahB4gJ,GACf,IAAMM,EACAlhJ,KAAKyrB,MAAMw+B,MAAMjqD,KAAKyrB,MAAMm1H,mBAC5BO,EAAqBnhJ,KAAKyrB,MAAMw+B,MAAM22F,GAE5CM,GAAsBA,EAAmBz4D,oBAAmB,GAC5D04D,GAAsBA,EAAmB14D,oBAAmB,GAC5DzoF,KAAKyrB,MAAMm1H,kBAAoBA,sCAWvB72H,EAAQ0pC,GACZA,EAAY++D,YAIXxyH,KAAKyrB,MAAMw+B,MAAMlgC,KAClB/pB,KAAKyrB,MAAMw+B,MAAMlgC,GAAU,IAAIo+D,IAAap+D,EAAQ0pC,EAAYyjC,wDAY3DntE,GACT,IAAMq3H,EAAYphJ,KAAKyrB,MAAMw+B,MAAMlgC,GAE/Bq3H,GACAA,EAAUC,6DAYGt3H,EAAQ8+D,GACzB,IAAMu4D,EAAYphJ,KAAKyrB,MAAMw+B,MAAMlgC,GAE/Bq3H,GACAA,EAAU74D,eAAeM,sCAY7B,OAAO7oF,KAAKyrB,MAAMw+B,2CASTq3F,GACT,IAAK,IAAMv3H,KAAUu3H,EAAU,CAC3B,IAAIC,OAAoB,EAClBC,EAAiBxhJ,KAAKopC,WAAWkrB,mBAAmBvqC,GAGrDy3H,GAAmBA,EAAehvB,aAC/BxyH,KAAKyrB,MAAMw+B,MAAMlgC,IACjBw3H,EAAuBvhJ,KAAKyrB,MAAMw+B,MAAMlgC,IAEdmtE,kBACtBqqD,EACKh5D,eAAe+4D,EAASv3H,GAAQq+D,cAGzCm5D,EAAuB,IAAIp5D,IACvBp+D,EAAQu3H,EAASv3H,GAAQq+D,aAC7BpoF,KAAKyrB,MAAMw+B,MAAMlgC,GAAUw3H,EAC3BA,EAAqBF,kBAI7BE,EAAqB74D,yBACf44D,EAASv3H,GAAQ2+D,gFC9JnC,IAAM2N,EAAgBn1E,EAAQ,IACxBugI,EAAgBvgI,EAClB,KAEEwgI,EAAe,SAerB,SAAS9wB,IAEL5wH,KAAK2hJ,cAAgB,IAAItrD,EAGzBr2F,KAAK4hJ,qBAAuB,IAAIH,EAGhCzhJ,KAAKiyI,QAAU,KAIfjyI,KAAK81F,UAAY,KAGjB91F,KAAK6hJ,cAAgB,KAIrB7hJ,KAAK0L,SAAW,KAIhB1L,KAAK2zF,QAAU,GAGf3zF,KAAKsgE,MAAQohF,EAIb1hJ,KAAK8hJ,WAAa,EAwNtB,SAASC,EAAmBC,GACxB,IAAK,IAAItzJ,EAAI,EAAGA,EAAIszJ,EAAoBpsJ,OAAQlH,IACN,IAAlCszJ,EAAoBtzJ,GAAGkH,QACvBosJ,EAAoB/9I,OAAOvV,EAAG,GAItC,OAAOszJ,EAAoBpsJ,OAAS,EAvNxCg7H,EAAYtgI,UAAUitB,MAAQ,WAC1B,GAAIvd,KAAKsgE,QAAUohF,EACf,MAAM,IAAIhrJ,MAAJ,uDAAA2C,OAEEqoJ,EAFF,qCAAAroJ,OAGE2G,KAAKsgE,MAHP,YAKVtgE,KAAKsgE,MA3De,YA4DpBtgE,KAAK2hJ,cAAcpkI,QACnBvd,KAAK81F,UAAY,IAAI3tF,MASzByoH,EAAYtgI,UAAUk2B,KAAO,SAAc9a,GAAU,IAAA/D,EAAA3H,KACjD,GAvEoB,cAuEhBA,KAAKsgE,MACL,MAAM,IAAI5pE,MAAJ,sDAAA2C,OAxEU,YAwEV,qCAAAA,OAGE2G,KAAKsgE,MAHP,YAOVv7D,QAAQH,IAAI,8CACZ5E,KAAK2hJ,cAAcn7H,OAGnB,IAAMy7H,EAwBV,SAAsBtxB,EAAa7nD,GAO/B,GANA/jE,QAAQH,IACJ,6FAAAvL,OAC2ByvE,EAAOo5E,UAAUtsJ,SAI5CkzE,EAAOo5E,UAAUtsJ,OAAS,EAAG,CAC7B,IAAI6/E,EAAS3M,EAAOgtB,UAAUqsD,qBACxBxxB,EAAY76B,UAAUqsD,qBAIxB1sE,EAAS,IACTA,EAAS,GAGb,IAAIvkD,EAAQ,IAEZ43C,EAAOo5E,UAAU5yI,QAAQ,SAAA8yI,GACrBA,EAAWC,OAAS5sE,EACpB2sE,EAAWvvC,KAAOp9B,EAClBvkD,GAAK,GAAA73B,OAAO+oJ,EAAWE,KAAlB,OAETpxH,GAAS,IACTnsB,QAAQH,IAAIssB,GAKZ43C,EAAOo5E,UAAUjzJ,KAAO65E,EAAO75E,KAInC0hI,EAAYh9B,QAAQzwF,KAAK4lE,EAAOo5E,WAChCvxB,EAAYshB,UACZltI,QAAQH,IAAR,oBAAAvL,OAAgCs3H,EAAYshB,UAG5CthB,EAAY4xB,cA/DkBryJ,KAAK,KAAM8P,MAEzCA,KAAK2hJ,cAAcpqD,sBAAsBjoF,QAAQ,SAAAkzI,GAC7C76I,EAAKi6I,qBAAqBr0I,KAAKi1I,EAAiBP,GAChDt6I,EAAKsqI,YAITjyI,KAAKsgE,MA1FkB,eA6FvBtgE,KAAK0L,SAAWA,GA2DpBklH,EAAYtgI,UAAUiyJ,WAAa,WAxJR,iBAyJnBviJ,KAAKsgE,OAAiD,IAAjBtgE,KAAKiyI,SAG1CjyI,KAAKyiJ,SAQb7xB,EAAYtgI,UAAUmyJ,MAAQ,WAAW,IAAAj6I,EAAAxI,KACrC+E,QAAQH,IAAR,sDAAAvL,OAEQ2G,KAAK2zF,QAAQ/9F,SACrBoK,KAAK6hJ,cAAgB,GAOrB,IAAMa,EAAS1iJ,KAAK2zF,QAGdgvD,EAAiB,GAGvBZ,EAAmBW,GAGnBA,EAAOpzI,QAAQ,SAAA4hB,GAAK,OA6FxB,SAA+BA,EAAOoxH,GAClC,GAAqB,IAAjBpxH,EAAMt7B,OACNs7B,EAAMhuB,KAAKo/I,OACR,CACH,GAAIpxH,EAAMA,EAAMt7B,OAAS,GAAGysJ,OAASC,EAAKD,MAGtC,YAFAnxH,EAAMhuB,KAAKo/I,GAKf,IAAK,IAAI5zJ,EAAI,EAAGA,EAAIwiC,EAAMt7B,OAAQlH,IAC9B,GAAI4zJ,EAAKD,MAAQnxH,EAAMxiC,GAAG2zJ,MAGtB,YAFAnxH,EAAMjtB,OAAOvV,EAAG,EAAG4zJ,GAK3BpxH,EAAMhuB,KAAKo/I,IA9GSM,CAAsBD,EAAgBzxH,KAG9D,IAvBqC,IAAAif,EAAA,WAyBjC,IAAI0yG,EAAkBH,EAAO,GAE7BA,EAAOpzI,QAAQ,SAAA4yI,GACPA,EAAU,GAAGG,MAAQQ,EAAgB,GAAGR,QACxCQ,EAAkBX,KAK1B,IAAIY,EAAYD,EAAgB70H,QAEhCxlB,EAAKu6I,oBAAoBD,EAAWD,EAAgB5zJ,MAIpD,IAxCiC,IAAAywD,EAAA,WAyC7B,IAAIsjG,GAAe,EACbC,EAAgBJ,EAAgB,GAAGR,MASzC,GAPAK,EAAOpzI,QAAQ,SAAA4yI,GACPA,EAAU,GAAGG,MAAQY,IACrBD,GAAe,KAKnBA,EACA,cAGJF,EAAYD,EAAgB70H,QAC5BxlB,EAAKu6I,oBAAoBD,EAAW,OAhBjCD,EAAgBjtJ,OAAS,GAAG,cAAA8pD,IAY3B,QA7BLqiG,EAAmBW,IAASvyG,IAuCnCnwC,KAAKsgE,MAjOc,WAkOftgE,KAAK0L,UACL1L,KAAK0L,SAAS1L,KAAK6hJ,gBAU3BjxB,EAAYtgI,UAAUyyJ,oBAAsB,SAAST,EAAMrzJ,GACnDA,UACA+Q,KAAK6hJ,eAAL,KAAAxoJ,OAA2BpK,EAA3B,KACA+Q,KAAK8hJ,WAAa7yJ,EAAK2G,OAAS,GAEhCoK,KAAK8hJ,WAAaQ,EAAKA,KAAK1sJ,OA/OJ,KAgPxBoK,KAAK6hJ,eAAiB,SACtB7hJ,KAAK8hJ,WAAa,GAEtB9hJ,KAAK6hJ,eAAL,IAAAxoJ,OAA0BipJ,EAAKA,MAC/BtiJ,KAAK8hJ,YAAcQ,EAAKA,KAAK1sJ,OAAS,GAwD1Cg7H,EAAYtgI,UAAUg0C,SAAW,SAASI,GACtC1kC,KAAK2hJ,cAAcr9G,SAASI,IAOhCksF,EAAYtgI,UAAUm+F,YAAc,SAAS/pD,GACzC1kC,KAAK2hJ,cAAclzD,YAAY/pD,IAQnCksF,EAAYtgI,UAAU4yJ,iBAAmB,WACrC,GAjUmB,aAiUfljJ,KAAKsgE,MACL,MAAM,IAAI5pE,MAAJ,8DAAA2C,OAlUS,WAkUT,qCAAAA,OAGE2G,KAAKsgE,MAHP,YAMV,OAAOtgE,KAAK6hJ,eAMhBjxB,EAAYtgI,UAAU6yJ,SAAW,WAC7B,OAAOnjJ,KAAKsgE,OAOhBswD,EAAYtgI,UAAU+X,MAAQ,WAC1BrI,KAAKsgE,MAAQohF,EACb1hJ,KAAKiyI,QAAU,KACfjyI,KAAK6hJ,cAAgB,KACrB7hJ,KAAK81F,UAAY,KACjB91F,KAAK0L,SAAW,KAChB1L,KAAK2zF,QAAU,GACf3zF,KAAK8hJ,WAAa,GAGtB3zJ,EAAOD,QAAU0iI,iCCvWjB,SAAAzvG,GAAA3yB,EAAAQ,EAAAyuB,EAAA,sBAAAqrG,IAAA,IAAAs6B,EAAA50J,EAAA,GAEMqyB,EAASK,EAAQ,GAAqBP,UAAUQ,GAUvC,SAAS2nG,EAAmB1/E,GAEvCppC,KAAKo5E,SAAW,GAEhBp5E,KAAKopC,WAAaA,EAClBppC,KAAKopC,WAAWqmF,mBACZ,WAAYzvH,KAAKqjJ,gBAAgBnzJ,KAAK8P,OAG9C8oH,EAAmBx4H,UAAU+yJ,gBACvB,SAASjqE,EAAUkqE,EAAatqB,GAAQ,IAAArxH,EAAA3H,KACtC,GAAKA,KAAKopC,WAAW2vF,SAASC,GAA9B,CAQA,IAAMp0H,EAAM,GAEZw0E,EAASyZ,SAASvjF,QAAQ,SAAA4f,GAEtB,IAAMjgC,EAAOigC,EAAU5yB,WAAWrN,KAC5BysB,EAAUwT,EAAUv/B,MAEtBgY,EAAKyxE,SAASnqF,KAAUysB,IACxB/T,EAAKyxE,SAASnqF,GAAQysB,EACtBmF,EAAO3b,KAAP,OAAA7L,OAAmBpK,EAAnB,cAAAoK,OAAoCqiB,IAEpC9W,EAAI1B,KAAK,CACLgE,GAAI,oBACJgoB,UAAWjgC,EACXysB,eAMR9W,EAAIhP,OAAS,GACbosB,IAAWkJ,QAAQpe,KAAK8L,UAAUhU,SA5BlCic,EAAO1b,KAAP,8CAAA9L,OACkD+/E,GAC9C4/C,IAqChBlQ,EAAmBx4H,UAAUizJ,oBAAsB,SAASC,GACxD,OAAOxjJ,KAAKo5E,SAASoqE,sVC/DzB,IAAM3iI,EAASF,oBAAUQ,GASJupG,aAOjB,SAAAA,EAAY2S,gGAAU59F,CAAAz/B,KAAA0qH,GAClB1qH,KAAKq9H,SAAWA,EAChBr9H,KAAKoiB,aAAei7G,EAASj7G,aAC7BvB,EAAO5b,MAAM,uBACbjF,KAAKmoD,SAAW,GAEhBnoD,KAAKyjJ,2BAA6BzjJ,KAAK0jJ,oBAAoBxzJ,KAAK8P,MAKhEq9H,EAAS1N,oBAAoB,uBACzB3vH,KAAK2jJ,oBAAoBzzJ,KAAK8P,0EASlBkB,GAChB,IAAM5E,EAAa4E,EAAK5E,WAExB,GAAKA,EAAL,CAIAukB,EAAO5b,MAAM,+BAAgC3I,GAE7C,IAAMw4D,EAAWx4D,EAAWgkE,MAE5B,GAAIxL,IAAa90D,KAAKsgE,MAItB,OAAQxL,GACR,KAAK8uF,WACL,KAAKA,YACL,KAAKA,gBACL,KAAKA,iBACL,KAAKA,eACD,IAAMltF,EAAUp6D,EAAWunJ,WAE3B,IAAKntF,EACD,OAIJ,IAAMj+C,EAAUzY,KAAKmoD,SAASuO,GAE1Bj+C,EACAA,EAAQqrI,SAAShvF,EAAUx4D,EAAWynJ,gBAEtCljI,EAAO1b,KAAK,kCAAmCuxD,qDAcnCslE,EAAY5zC,GAChC,GAAIpoF,KAAKmoD,SAAS6zE,GAId,OAHAn7G,EAAO1b,KAAK,uDACR62H,GAEG,IAAItlI,MAAMktJ,wBAGrB,IAAMnrI,EAAU,IAAIurI,IAChBhoB,EAAY5zC,EAAapoF,KAAKq9H,UAMlC,OAJA5kH,EAAQwrI,iBAAiBjkJ,KAAKyjJ,4BAE9BzjJ,KAAKmoD,SAAS6zE,GAAcvjH,EAErBA,8CASSiU,GAChB,IAAMgqC,EAAUhqC,EAAMgqC,QAEtB,GAAIhqC,EAAMooC,WAAa8uF,aAChBl3H,EAAMooC,WAAa8uF,eAAwB,CAC9C,IAAMnrI,EAAUzY,KAAKmoD,SAASuO,GAE9B,IAAKj+C,EAID,YAHAoI,EAAO7b,MAAM,6CACT0xD,GAKRj+C,EAAQyrI,oBAAoBlkJ,KAAKyjJ,mCAC1BzjJ,KAAKmoD,SAASuO,GAGzB12D,KAAKoiB,aAAa6C,KACdsgC,IAAW1wD,mCACX63B,4+BC1HZ,IAAM7L,EAASF,oBAAUQ,GAYJ6iI,cAWjB,SAAAA,EAAYhoB,EAAY5zC,EAAai1C,GAAU,IAAA11H,EAAA,mGAAA83B,CAAAz/B,KAAAgkJ,IAC3Cr8I,EAAA+3B,EAAA1/B,KAAA2/B,EAAAqkH,GAAAn1J,KAAAmR,QAEKg8H,WAAaA,EAClBr0H,EAAKygF,YAAcA,EACnBzgF,EAAK01H,SAAWA,EAShB11H,EAAK24D,WAAQ//D,EAd8BoH,wPAXCi4B,6CAgCxC5/B,KAAKsgE,QAAU27D,aACZj8H,KAAKsgE,QAAU27D,eAMtBj8H,KAAKmkJ,aAAa,QALdtjI,EAAO1b,KAAK,mFAcZnF,KAAKsgE,QAAU27D,YACZj8H,KAAKsgE,QAAU27D,aACfj8H,KAAKsgE,QAAU27D,iBACfj8H,KAAKsgE,QAAU27D,iBAMtBj8H,KAAKmkJ,aAAa,SALdtjI,EAAO1b,KAAK,0EAgBX2vD,EAAUsvF,GACf,GAAItvF,IAAa90D,KAAKsgE,MAAtB,CAIA,IAAM+jF,EAAWrkJ,KAAKsgE,MAEtBtgE,KAAKsgE,MAAQxL,EACb90D,KAAKoiB,aAAa6C,KAlFJ,gBAmFV,CACIyxC,QAAS12D,KAAKg8H,WACdooB,gBACAC,WACAvvF,SAAU90D,KAAKsgE,MACf8nB,YAAapoF,KAAKooF,wDAWbhkE,GACbpkB,KAAKmqC,YApGS,gBAoGkB/lB,+CAQhBA,GAChBpkB,KAAKwkB,eA7GS,gBA6GqBJ,wCAS1BiR,GAAQ,IAAA7sB,EAAAxI,KACX1D,EAAa,CACf2J,MAAS,kCACTovB,OAAUA,EACVwuH,WAAY7jJ,KAAKg8H,YAGrB1/H,EAAWgoJ,YAActkJ,KAAKooF,YAE9B,IAAMh1E,EAAKpY,cAAI,CACXmY,GAAInT,KAAKq9H,SAASlrC,YAClBlrF,KAAM,QACLlY,EAAE,QAASuN,GACX6J,KAEL0a,EAAO5b,MAAP,GAAA5L,OAAgBg8B,EAAhB,yBAA+CjiB,EAAGlN,UAClDlG,KAAKq9H,SAAS3oH,WAAWpG,OACrB8E,EACA,aACA,SAAApO,GACI6b,EAAO7b,MAAP,aAAA3L,OACiBg8B,EADjB,kCACyDrwB,GACzDwD,EAAKs7I,SAAS7nB,iJCzJfx+G,EAAA,GACXzY,MAAO,CACHu/I,KAAM,OACN7mJ,MAAO,QACP8mJ,oBAAqB,sBACrBC,oBAAqB,uBAEzB50J,KAAM,CACF60J,KAAM,OACN5oJ,OAAQ,UAEZmU,OAAQ,CACJ61E,IAAK,MACLD,GAAI,KACJzoC,QAAS,gnCCFjB,IAAMv8B,EAASF,oBAAUQ,GAOJwjI,aAmBjB,SAAAA,IAA0B,IAAdx9I,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,gGAAIs+B,CAAAz/B,KAAA2kJ,GAAA,IAElBC,EAEAz9I,EAFAy9I,gBACGC,EAHeC,EAIlB39I,EAJkB,qBAWtBnH,KAAKwqD,SAAL70B,EAAA,CACIqW,UAAW44G,GACJA,EAAgB3iI,KAAKvN,WAAWw+B,OAAOw2F,cAC3Cmb,GAQP7kJ,KAAK+kJ,gBAAkB,KAGvB/kJ,KAAKglJ,cAAgBhlJ,KAAKglJ,cAAc90J,KAAK8P,MAC7CA,KAAKilJ,eAAiBjlJ,KAAKilJ,eAAe/0J,KAAK8P,MAC/CA,KAAKklJ,gBAAkBllJ,KAAKklJ,gBAAgBh1J,KAAK8P,oEAiBtCyE,GACX,IAAMk3H,EAAUl3H,EAAQzO,KAExB,GAAK2lI,EAOL,GAAI37H,KAAK+kJ,iBACF/kJ,KAAK+kJ,gBAAgBI,eAAiBxpB,EACzC37H,KAAKglJ,cACDrpB,EACAz/E,IAAQrI,iBACR,gBALR,CAWA,IAAMzgC,EAAKpT,KAAKolJ,oBAAoB3gJ,EAAQzL,KAAKoa,IAC3CiyI,EAAUjyI,GAAMA,EAAGme,KAAK,UACxB8D,EAASgwH,GAAWA,EAAQ9jJ,KAAK,UAEnC8zB,IAAW6mB,IAAQE,WACnBp8C,KAAK+kJ,gBAAkB/kJ,KAAKslJ,sBAAsB3pB,EAAS,CACvD38D,aAAa,EACbumF,cAAc,KAMlBvlJ,KAAK+kJ,iBACL/kJ,KAAK+kJ,gBAAgBS,eAAeH,GAKpChwH,IAAW6mB,IAAQrI,kBAChBxe,IAAW6mB,IAAQI,aACnBjnB,IAAW6mB,IAAQG,WACtBr8C,KAAKylJ,sDAeP9pB,GAA2B,IAAlBryF,EAAkBnoC,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACzBnB,KAAK+kJ,gBAAkB/kJ,KAAKslJ,sBAAsB3pB,EAAS,CACvD38D,aAAa,EACbumF,cAAc,IAGlBvlJ,KAAK+kJ,gBAAgBxnI,MAAM+rB,kCASvBtpC,KAAK+kJ,iBACL/kJ,KAAK+kJ,gBAAgBv+H,OAGzBxmB,KAAK+kJ,gBAAkB,iDAWPW,GAChB,IACI,IAAMC,GAAS,IAAI1jJ,WAAYC,gBAAgBwjJ,EAAK,YAEpD,OAAO1yG,EAAE2yG,GACX,MAAOjtJ,GAGL,OAFAmoB,EAAO7b,MAAM,kDAEN,oDAeO22H,GAAuB,IAAdx0H,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACrC,IAAKw6H,EACD,MAAM,IAAIjlI,MAAM,mDAGpB,IAAMkqE,EAASjrC,EAAA,CACXqW,UAAWhsC,KAAKwqD,SAASxe,UACzBi5F,QAASjlI,KAAKglJ,cACdY,eAAgB5lJ,KAAKklJ,gBACrBW,cAAe7lJ,KAAKilJ,eACpBtpB,WACGx0H,GAGP,OAAO,IAAI2+I,IAAkBllF,yCAiBnB+6D,EAASnmG,GAAyB,IAAdE,EAAcv0B,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACxC0f,EAAO7b,MACH,oCAAqC22H,EAASnmG,EAAWE,GAE7D,IAAMtiB,EAAKpY,cAAI,CACXmY,GAAIwoH,EACJ10H,KAAM,QAELlY,EAAE,SAAU,CACTkX,MAAO,oBACPovB,OAAQG,IAEXzmC,EAAE,WACFa,EAAE8lC,GACFvvB,KAELnG,KAAKilJ,eAAetpB,EAASvoH,GAEzBpT,KAAK+kJ,iBACF/kJ,KAAK+kJ,gBAAgBI,eAAiBxpB,GACzC37H,KAAKylJ,+DAeGM,GACZ,IAAK/lJ,KAAKwqD,SAASo7F,eAIf,OAHA/kI,EAAO7b,MAAM,gDACb+gJ,EAAiBhhI,UAKrB,IACI6f,EADEohH,EAAUD,EAAiB18E,eAG7B28E,IACAphH,EAAY5kC,KAAKwqD,SAASy7F,sBACpBphH,IAAUC,QAAUD,IAAUE,QAKxC,IAAMkC,EAAc8+G,EAAiB/+D,oBAC/Bk/D,EAAmB/8G,IAAIg9G,qBACzB,CACI,CACIrrH,SAAQ,SAAAzhC,OACK2G,KAAK+kJ,gBAAgBI,cAClCvuH,UAAWovH,EAAUrhH,IAAkBA,IACvCF,WAAY,QACZxgB,OAAQgjB,EACRvC,MAAOuC,EAAY/I,iBAAiB,GACpC0G,eAIZ5kC,KAAKwqD,SAASo7F,eAAeM,EAAiB,2CAWnCvqB,EAASvoH,GACpB,GAAKpT,KAAKwqD,SAASq7F,cAInB,IACI,IAAMO,GACA,IAAIC,eAAgBC,kBAAkBlzI,EAAGlN,UAAYkN,GAE3DpT,KAAKwqD,SAASq7F,cAAclqB,EAAS,CAAEvoH,GAAIgzI,IAC7C,MAAO1tJ,GACLmoB,EAAO7b,MAAM,kGAWjBhF,KAAKwmB,OAELxmB,KAAKwqD,SAAS+7F,oBACPvmJ,KAAKwqD,SAAS+7F,m3BC5T7B,IAAM1lI,EAASF,oBAAUQ,GASJ2kI,aAoBjB,SAAAA,IAA0B,IAAd3+I,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,gGAAIs+B,CAAAz/B,KAAA8lJ,GACtB9lJ,KAAKwqD,SAAL70B,EAAA,CACIqW,UAAW,GACXgzB,aAAa,EACbwnF,cAAc,EACdjB,cAAc,GACXp+I,GASPnH,KAAKm1H,QAAU,GAOfn1H,KAAK+kJ,gBAAkB,KAGvB/kJ,KAAKoc,SAAWpc,KAAKoc,SAASlsB,KAAK8P,MACnCA,KAAKklJ,gBAAkBllJ,KAAKklJ,gBAAgBh1J,KAAK8P,MACjDA,KAAKilJ,eAAiBjlJ,KAAKilJ,eAAe/0J,KAAK8P,kEAU/C,OAAOA,KAAKwqD,SAASmxE,+CAUV0pB,GACX,OAAQA,EAAQ9jJ,KAAK,WACrB,KAAK26C,IAAQC,OACTn8C,KAAKymJ,iBAAiBpB,GACtB,MAEJ,KAAKnpG,IAAQE,SACTp8C,KAAK0mJ,mBAAmBrB,GACxB,MAEJ,KAAKnpG,IAAQG,UACTr8C,KAAK2mJ,oBAAoBtB,GACzB,MAEJ,KAAKnpG,IAAQvnD,eACTqL,KAAK4mJ,iBAAiBvB,oCAaN,IAAlB/7G,EAAkBnoC,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACZnB,KAAK+kJ,kBAIT/kJ,KAAKm1H,QAAUn1H,KAAKm1H,QAAQ97H,OAAOiwC,GAEnCtpC,KAAK+kJ,gBAAkB/kJ,KAAKslJ,wBAE5BtlJ,KAAK+kJ,gBAAgB/pB,OAAO1xF,mCAUxBtpC,KAAK+kJ,iBACL/kJ,KAAK+kJ,gBAAgB/9E,YAGzBhnE,KAAK2mJ,sEAUe,IAAAh/I,EAAA3H,KAkBd6mJ,EAAiB,CAGnB/8I,WAAW,EACXopC,OAAQ,CACJ8zB,UAAW,cAEf14D,OAAQtO,KAAKilJ,eAIb1iH,iBAAkB,kBAAM,eAWtBukH,EAAanxH,EAAA,CACf+yB,WAAYpF,KACTtjD,KAAKwqD,SAASxe,WAgCf+6G,EAAW,CACbp3B,oBAAqB,aACrB/rE,gBAAiB,GACjBxhC,aAAc,CAAE6C,KApBJ,SAAAyH,GACZ,OAAQA,GACR,KAAK64B,IAAWh0D,sBAChB,KAAKg0D,IAAWn0D,kBACZuW,EAAKyU,SAAS8/B,IAAQrI,iBAAkBnnB,MAiB5Cy+G,qBAAsB,WAGlB,MAAO,IAEXtb,uBAAwB,cAS5B7vH,KAAKgnJ,KAAO,IAAI79G,IAAInpC,KAAM,IAO1BA,KAAKgnJ,KAAK78G,YACN/L,IAAUjG,mBACVn4B,KAAKklJ,iBAGT,IAAM3kC,EAAiB,IAAI3hD,SACvBr+D,OACAA,EACAP,KAAKwqD,SAASmxE,QACdkrB,EACA,CACItxC,oBAAqBv1G,KAAKwqD,SAASg8F,aACnChxC,oBAAqBx1G,KAAKwqD,SAAS+6F,cAEvCuB,GACA,EACA9mJ,KAAKwqD,SAASwU,aASlB,OAFAuhD,EAAejgE,WAAWymG,EAAU/mJ,KAAKgnJ,KAnHtB,IAqHZzmC,mCAYF/qF,GAAyB,IAAdE,EAAcv0B,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GAC1BnB,KAAKwqD,SAASy6E,QAAQjlI,KAAKwqD,SAASmxE,QAASnmG,EAAWE,2CAY5CqwH,GACZ/lJ,KAAKm1H,QAAQjyH,KAAK6iJ,GAElB/lJ,KAAKwqD,SAASo7F,eAAeG,0CAWlB3yI,GACXpT,KAAKwqD,SAASq7F,cAAc7lJ,KAAKwqD,SAASmxE,QAASvoH,4CAYtCiyI,GACRrlJ,KAAK+kJ,gBAMV/kJ,KAAK+kJ,gBAAgB1vB,UAAUgwB,GAL3BxkI,EAAO7b,MAAM,iGAgBFqgJ,GAAS,IAAA78I,EAAAxI,KACpBA,KAAK+kJ,gBACLlkI,EAAO7b,MAAM,sDAKjBhF,KAAK+kJ,gBAAkB/kJ,KAAKslJ,wBAE5BtlJ,KAAK+kJ,gBAAgBxuB,YACjB8uB,EACA,aACA,kBAAM78I,EAAK4T,SACP5T,EAAKgiD,SAASmxE,QACdz/E,IAAQrI,iBACR,2EAaR7zC,KAAKm1H,QAAQ7lH,QAAQ,SAAAo1B,GAAK,OAAIA,EAAM3f,YACpC/kB,KAAKm1H,QAAU,GAEXn1H,KAAK+kJ,iBACL/kJ,KAAK+kJ,gBAAgBva,eAGrBxqI,KAAKgnJ,OACLhnJ,KAAKgnJ,KAAKxiI,eACN4Z,IAAUjG,mBACVn4B,KAAKklJ,iBAGTllJ,KAAKgnJ,KAAKx1D,oDAYD6zD,GACbrlJ,KAAK+kJ,gBAAgBvvB,iBAAiB6vB,wKCrS/B,IAAA7pG,EAAA,CACfxF,MAhFA,SAAAv9B,EAAA6kG,GAgCA,YA/BA,IAAA7kG,QAAA,IAAAA,EAAAsV,OAAAt4B,MAAAC,QAAA+iB,EAAAsV,QACAtV,EAAAsV,MAAAze,QAAAyiB,IACAA,EAAAk9B,SAAAl9B,EAAAk9B,QAAAr5D,SACAm8B,EAAAjB,MAAA,GACAiB,EAAAk9B,QAAA3/C,QAAAymB,IACA3mC,OAAAmW,KAAAwwB,GAAAzmB,QAAAhS,IACA,OAAAA,GAGAy0B,EAAAjB,MAAA5tB,KAAA,CACAgE,GAAA6uB,EAAA7uB,GACA5J,YACA3N,MAAAomC,EAAAz4B,gBAIAy0B,EAAAk9B,SAIAl9B,EAAAX,YAAAW,EAAAX,WAAAx7B,QACAm8B,EAAAX,WAAA9hB,QAAA6iB,SACA,IAAAA,EAAArB,OACAr7B,MAAAC,QAAAy8B,EAAArB,SACAqB,EAAArB,MAAAqB,EAAArB,MAAA3tB,KAAA,UAOW8jJ,EAAAlwJ,EAASi/C,MAAAv9B,EAAA6kG,IAiDpB5kG,MAvCA,SAAA4Z,GACA,MAAA7Z,EAAoBwuI,EAAAlwJ,EAAS2hB,MAAA4Z,GAiC7B,YA/BA,IAAA7Z,QAAA,IAAAA,EAAAsV,OAAAt4B,MAAAC,QAAA+iB,EAAAsV,QACAtV,EAAAsV,MAAAze,QAAAyiB,SAEA,IAAAA,EAAAjB,OAAAr7B,MAAAC,QAAAq8B,EAAAjB,SACAiB,EAAAk9B,QAAA,GACAl9B,EAAAjB,MAAAxhB,QAAAkZ,IACA,MAAA0+H,EAAAn1H,EAAAk9B,QAAAqZ,UAAAvyC,KAAA7uB,KAAAshB,EAAAthB,IAEA,GAAAggJ,GAAA,EACAn1H,EAAAk9B,QAAAi4F,GAAA1+H,EAAAlrB,WAAAkrB,EAAA74B,UACqB,CACrB,MAAAmxC,EAAA,CAAqC55B,GAAAshB,EAAAthB,IAErC45B,EAAAtY,EAAAlrB,WAAAkrB,EAAA74B,MACAoiC,EAAAk9B,QAAA/rD,KAAA49B,aAGA/O,EAAAjB,YAIA,IAAAiB,EAAAX,YAAA37B,MAAAC,QAAAq8B,EAAAX,aACAW,EAAAX,WAAA9hB,QAAA6iB,IACA,iBAAAA,EAAArB,QACAqB,EAAArB,MAAAqB,EAAArB,MAAA/tB,MAAA,UAOA0V,IClFA,MAAA0uI,EAAA,yBACAC,EAAAj1H,KAAAZ,KAAA81H,GAAA,QAAAA,EAAA51H,WACA61H,EAAAn1H,KAAAZ,KAAA81H,GAAA,QAAAA,EAAA51H,WAWA,SAAA81H,EAAAx1H,EAAAL,EAAA81H,EAAAC,GACA,IAAA11H,IAAAL,EACA,OAEA,MAAAg2H,EAAA5mH,GAAA2mH,EAAAl2H,KAAAwE,KAAA7uB,GAAAnR,aAAA+qC,GAEApP,EAAAZ,MAAAxhB,QAAAwxB,IACA/O,EAAAk9B,QAAA/rD,KAAAwkJ,EAAA5mH,IAGA,MAAA6mH,EAAAH,EAAA1uI,SAAAgoB,EAAA,KAAAvP,KAAA81H,GAAA,QAAAA,EAAA51H,WAEA,GAAAk2H,EAAA,CACA,MAAAC,EAAAD,EAAA72H,MAAAS,KAAA9gC,OAAAqwC,GAEA/O,EAAAk9B,QAAA/rD,KAAAwkJ,EAAAE,IACA71H,EAAAX,WAAAluB,KAAAykJ,MAKA51H,EAAAX,WAAAluB,KAAAwuB,GAgBA,SAAAm2H,EAAA91H,EAAAvJ,EAAAg/H,EAAAC,GACA,IAAA11H,IAAAvJ,EACA,OAMA,GAJAuJ,EAAAk9B,QAAA,GACAl9B,EAAAX,WAAA,IAGAo2H,EAAAh/H,EAAAthB,IAIA,OAHA6qB,EAAAk9B,QAAA/rD,KAAAslB,QACAuJ,EAAA2oB,KAAAlyB,EAAAkyB,MAIA,MAGAhpB,EAAA01H,EAAAI,EAAAh/H,EAAAthB,KACAoqB,EAAAg2H,EAAAE,EAAAh/H,EAAAthB,KAGA,GAAAwqB,EACA61H,EAAAx1H,EAAAL,EAAA81H,EAAAC,QACK,GAAAn2H,EAAA,CAEL,MAAAw2H,EAAAx2H,EAAAR,MAAAS,KAAA9gC,OAAA+3B,GACAu/H,EAAAX,EAAAI,EAAAM,IAEAC,EACAR,EAAAx1H,EAAAg2H,EAAAP,EAAAC,IAGAn2H,EAAAR,MAAAxhB,QAAAwxB,IACA/O,EAAAk9B,QAAA/rD,KAnBA49B,IAAA2mH,EAAAl2H,KAAAwE,KAAA7uB,GAAAnR,aAAA+qC,GAmBA4mH,CAAA5mH,MAEA/O,EAAAX,WAAAluB,KAAAouB,IAKAS,EAAA2oB,KAAA3oB,EAAAk9B,QAAA,GAAAvU,KAsBA,SAAAstG,EAAAx/H,EAAAg/H,EAAAS,GASA,IAAAA,EAAA12H,KARAnD,KACAA,EAAA6gC,SACA7gC,EAAA6gC,QAAAg1B,KAAAluD,KAAA7uB,KAAAshB,EAAAthB,KAMA,CAGA,IAAAsgJ,EAAAh/H,EAAAthB,IACA,SAEA,MAAAwqB,EAAA01H,EAAAI,EAAAh/H,EAAAthB,KACAoqB,EAAAg2H,EAAAE,EAAAh/H,EAAAthB,KAEA,GAAAwqB,EACA,OAAAu2H,EAAAhkE,KAAA71D,KAAA6gC,SACA7gC,EAAA6gC,QAAAg1B,KAAAnjD,KAAA55B,GAAAnR,aAAA27B,EAAAZ,MAAA,KACS,GAAAQ,GAAA9I,EAAAthB,GAAAnR,aAAAu7B,EAAAR,MAAA,IAGT,OAAAk3H,EAFA,CAA+B9gJ,GAAAoqB,EAAAR,MAAA,IAE/B02H,EAAAS,GAIA,SAGA,SAiCO,MAAMC,EAMbC,QAAAnuF,GACA,IAAAA,GAAA,iBAAAA,EAAA1nC,IAGA,OAFAvtB,QAAAI,KAAA,mDAEA60D,EAIA,MAAAvhD,EAAwB+iC,EAAS9iC,MAAAshD,EAAA1nC,KAGjC,IAAA7Z,EAAAsV,QAAAtV,EAAAsV,MAAAn4B,OAGA,OAFAmP,QAAAI,KAAA,iCAEA60D,EAIA,GAAAvhD,EAAAsV,MAAA6lE,MAAA9kG,IAAA,IAAAq4J,EAAAvjJ,QAAA9U,EAAAuhD,MAGA,OAFAtrC,QAAAI,KAAA,uDAEA60D,EAGA,MAAAjsC,EAAA,GACAq6H,EAAA3vI,EAAAsV,MAEAtV,EAAAsV,MAAA,GACAq6H,EAAA94I,QAAAyiB,IACA,MAAA9qB,EAAA8qB,EAAA9qB,KAEA,mBAAAA,EAIA,OAHA8qB,EAAAse,IAAA,YACAtiB,EAAAgE,EAAAse,KAAAte,GAIA,YAAAhE,EAAA9mB,GAAA,CACA,MAAAohJ,EAA8BC,IAASv2H,GAGvCs2H,EAAAp5F,SAAAx5D,MAAAC,QAAA2yJ,EAAAp5F,UACAo5F,EAAAp5F,QAAA3/C,QAAAymB,IACAhE,EAAA2oB,KAAA3kB,EAAA2kB,KAAA3oB,EAAA2oB,YAAA3kB,EAAA2kB,OAGA2tG,EAAAj3H,aACAi3H,EAAAj3H,WAAA,WAEAi3H,EAAA3tG,KACA2tG,EAAAh4G,IAAAppC,EACA8mB,EAAA9mB,GAAAohJ,OACat2H,EAAA2oB,OAEb3oB,EAAAk9B,SAAAx5D,MAAAC,QAAAq8B,EAAAk9B,WACAlhC,EAAA9mB,GAAAgoD,QAAAlhC,EAAA9mB,GAAAgoD,QAAA51D,OAAA04B,EAAAk9B,eAEA,IAAAl9B,EAAAX,YAAA37B,MAAAC,QAAAq8B,EAAAX,cACArD,EAAA9mB,GAAAmqB,WAAArD,EAAA9mB,GAAAmqB,WAAA/3B,OAAA04B,EAAAX,gBAIA3Y,EAAAsV,MAAA3+B,OAAAm2B,OAAAwI,GAGA,MAAAw6H,EAAA,GAEAn5J,OAAAm2B,OAAAwI,GAAAze,QAAA8e,IACA,aAAAA,EAAA6B,WACAs4H,EAAArlJ,KAAAkrB,EAAAiiB,OAKA53B,EAAA26B,OAAA9jC,QAAAkiB,IACA,WAAAA,EAAAvqB,OACAuqB,EAAAg3H,KAAAD,EAAAplJ,KAAA,QAKAsV,EAAAgwI,aAAA,CACAC,SAAA,MACAhlG,MAAA,KAEA,MAAA43D,EAAuB9/D,EAASxF,MAAAv9B,GAEhC,WAAA+vD,sBAAA,CACAvhE,KAAA+yD,EAAA/yD,KACAqrB,IAAAgpF,IAYA6sC,cAAAnuF,EAAA2uF,EAAA,MACA,IAAA3uF,GAAA,iBAAAA,EAAA1nC,IAGA,OAFAvtB,QAAAI,KAAA,mDAEA60D,EAIA,MAAAvhD,EAAwB+iC,EAAS9iC,MAAAshD,EAAA1nC,KAGjC,IAAA7Z,EAAAsV,QAAAtV,EAAAsV,MAAAn4B,OAGA,OAFAmP,QAAAI,KAAA,iCAEA60D,EAIA,GAAAvhD,EAAAsV,MAAAn4B,OAAA,GAAA6iB,EAAAsV,MAAA6lE,MAAA9kG,IAAA,IAAAq4J,EAAAvjJ,QAAA9U,EAAAuhD,MAGA,OAFAtrC,QAAAI,KAAA,6CAEA60D,EAEA,MAAA4uF,EAAAD,EAAsCntG,EAAS9iC,MAAAiwI,EAAAr2H,KAAA,KAC/CvE,EAAA,GAEAtV,EAAAsV,MAAAze,QAAAyiB,IACA,MAAA9qB,EAAA8qB,EAAA9qB,KAEA,mBAAAA,EAAA,CACA,IAAA2hJ,MAAA76H,MAAA,CACA,MAAA86H,EAAqCP,IAASv2H,GAK9C,OAHA82H,EAAAx4G,IAAAjhD,OAAAmW,KAAAwoB,GAAAn4B,OAAAG,gBACAg4B,EAAAgE,EAAAse,KAAAw4G,GAIA,MAAAC,EAAAF,EAAA76H,MAAAu6C,UAAAx5E,KAAAmY,UAMA,YAJA6hJ,IACAF,EAAA76H,MAAA+6H,GAAA/2H,IAOA,MAAAg3H,EAnLA,SAAAvB,GACA,MAAAuB,EAAA,GAEA,OAAAvB,GAAA/xJ,MAAAC,QAAA8xJ,IAGAA,EAAAl4I,QAAAkiB,IACAA,EAAAV,OAAAr7B,MAAAC,QAAA87B,EAAAV,QACAU,EAAAV,MAAAxhB,QAAAkZ,SACA,IAAAugI,EAAAvgI,KACAugI,EAAAvgI,GAAA,IAEAugI,EAAAvgI,GAAAtlB,KAAAsuB,OAKAu3H,GAbAA,EA+KAC,CAAAj3H,EAAAX,YAEAW,EAAAk9B,SAGAl9B,EAAAk9B,QAAA3/C,QAAA,CAAAkZ,EAAA+nB,KAGA,IAAA/nB,EAAAkyB,KACA,OAIA,IAAAkuG,MAAA76H,MAAA,CACA,GAAAi6H,EAAAx/H,EAAAugI,EAAA35J,OAAAm2B,OAAAwI,IACA,OAEA,MAAA86H,EAAqCP,IAASv2H,GAU9C,OARA82H,EAAAx4G,IAAAjhD,OAAAmW,KAAAwoB,GAAAn4B,OAAAG,WACA8yJ,EAAA54H,UAAAsgB,EACA,WACA,aAAAxe,EAAA9B,UAAA,sBACA44H,EAAAI,gBAAA1oJ,EACAsnJ,EAAAgB,EAAArgI,EAAAugI,EAAAh3H,EAAAk9B,cACAlhC,EAAA86H,EAAAx4G,KAAAw4G,GAMA,GAAAb,EAAAx/H,EAAAugI,EAAAH,EAAA76H,OACA,OAIA,MAAAm7H,EAAAN,EAAA76H,MACAu6C,UAAA6gF,KAAAl5H,WACA,aAAAk5H,EAAAl5H,WACAk5H,EAAAliJ,UAEA,GAAAiiJ,GAAA,EACAN,EAAA76H,MAAAm7H,GAAAj5H,UAAA,WACA43H,EAAAe,EAAA76H,MAAAm7H,GAAA1gI,EAAAugI,EAAAh3H,EAAAk9B,aACiB,CACjB,MAAA45F,EAAqCP,IAASv2H,GAE9C82H,EAAAx4G,IAAAu4G,EAAA76H,MAAAn4B,OAAAG,WACA8yJ,EAAA54H,UAAA,WACA43H,EAAAgB,EAAArgI,EAAAugI,EAAAh3H,EAAAk9B,SACA25F,EAAA76H,MAAA7qB,KAAA2lJ,QAIApwI,EAAAsV,MAAA66H,IAAA76H,MAAA3+B,OAAAm2B,OAAAwI,GACA,MAAAy6H,EAAA,GAEA/vI,EAAAsV,MAAAze,QAAAyiB,IACAy2H,EAAAtlJ,KAAA6uB,EAAAse,OAIA53B,EAAA26B,OAAA9jC,QAAAkiB,IACA,WAAAA,EAAAvqB,OACAuqB,EAAAg3H,OAAArlJ,KAAA,QAKAsV,EAAAgwI,aAAA,CACAC,SAAA,MACAhlG,MAAA,KAIAjrC,EAAAytH,OAAA1oE,iBACA,MAAAojD,EAA0BplE,EAASxF,MAAAv9B,GAEnC,WAAA+vD,sBAAA,CACAvhE,KAAA+yD,EAAA/yD,KACAqrB,IAAAsuF,KC7aApyH,EAAAQ,EAAAyuB,EAAA,sBAAAyqI,qBCEA/5J,EAAOD,QAAUgzB,EAAQ,KAAiB26E,2kBCoC1C,IAoFkC1tG,EApF5B0yB,EAASb,IAAOW,UAAUQ,GA+ChC,SAASioI,EAAkCjiJ,GACvC,IAAM7K,EAAa,CACf+sJ,gBACIliJ,EAAQ28B,QAAQC,SAAS,SAC7BulH,gBACIniJ,EAAQ28B,QAAQC,SAAS,SAC7BwlH,yBACIpiJ,EAAQ28B,QAAQC,SAAS,YAOjC,OAJIznC,EAAWgtJ,kBACXhtJ,EAAWk/B,WAAar0B,EAAQq0B,YAG7Bl/B,EAiCIktJ,WAVmBr7J,EAUM,CAEpCutB,QAAS,cAETksG,oBASA+8B,2BAEA8E,UAAW,CACPh0F,4BAA6B5E,IAC7B64F,UAAWC,IACXC,WAAY3tB,EACZlL,oBAAqB8Q,GAEzBgoB,OAAQ,CACJzgH,WAAYwC,EACZl3B,WAAY6xC,EACZujG,UAAWp9B,EACXhoF,MAAOsvB,EACPh0B,aAAckzD,EACdw2B,kBAAmBmtB,EACnBjrB,QAASktB,GAEblhI,OAAQ,CACJwxB,WAAYwpF,EACZl+G,WAAYgyC,EACZhiB,MAAO6K,GAEXw6G,WAAY,CACR5/H,qBAEJ6/H,UAAWhqI,IAAOK,OAClB2f,aAAc+yD,IACdxvE,UAAWvB,IAAWuB,UACtBzY,KAzCoC,WAyCjB,IAAd3D,EAAchG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAJ,GACX6gB,IAAWlX,KAAK3D,GAIX7Y,OAAOs1D,kBACRt1D,OAAOs1D,gBAAkB,KAGU,IAAnCz8C,EAAQ8iJ,yBACRppI,EAAO1b,KAAK,kCACZnF,KAAKujB,UAAUwB,WAGf5d,EAAQ+iJ,4BACRntH,IAAqB9uB,WACjBjO,KAAKmqJ,wBAAwBj6J,KAAK8P,OAK1C,IAAMoqJ,EAASjjJ,EAAQ+hD,eAEvB,GAAIkhG,GAAUh7J,OAAOmW,KAAK6kJ,GAAQx0J,OAAS,EAAG,CAC1C,IAAMmoI,EAAY,GAElB,IAAK,IAAMx8H,KAAQ6oJ,EACXA,EAAO75J,eAAegR,KACtBw8H,EAAUx8H,GAAQ6oJ,EAAO7oJ,IAIjCw8H,EAAU72H,GAAK,kBACf8a,IAAWkJ,QAAQpe,KAAK8L,UAAUmlH,IAGtC,GAAI/9H,KAAK0b,QAAS,CACd,IAAMqiH,EAAY,CACd72H,GAAI,oBACJgoB,UAAW,iBACXxT,QAAS1b,KAAK0b,SAGlBsG,IAAWkJ,QAAQpe,KAAK8L,UAAUmlH,IAGtC,OAAO50F,IAAIr+B,KAAK3D,IAQpB2jC,wBA/FoC,WAgGhC,OAAO3B,IAAI2B,2BAWfu/G,kBA3GoC,WA4GhC,OAAOlhH,IAAIkhH,qBAGfrpI,YA/GoC,SA+GxBnc,GACRmb,IAAOgB,YAAYnc,IAWvBic,gBA3HoC,SA2HpBjc,EAAOqC,GACnB8Y,IAAOc,gBAAgBjc,EAAOqC,IASlCojJ,sBArIoC,SAqIdC,GAClBvqI,IAAOO,mBAAmBgqI,IAS9BC,yBA/IoC,SA+IXD,GACrBvqI,IAAOS,sBAAsB8pI,IAUjCE,oBA1JoC,SA0JhBtjJ,GAChB6Y,IAAOU,iBAAiBvZ,IA4C5BohC,kBAvMoC,WAwMqC,IAAA5gC,EAAA3H,KAAjEmH,EAAiEhG,UAAAvL,OAAA,QAAA2K,IAAAY,UAAA,GAAAA,UAAA,GAAvD,GAAIupJ,EAAmDvpJ,UAAAvL,OAAA,EAAAuL,UAAA,QAAAZ,EAAjBoqJ,EAAiBxpJ,UAAAvL,OAAA,EAAAuL,UAAA,QAAAZ,EACjEqqJ,GAAmB,EAkBvB,OAhByC,IAArCF,GACAp8J,OAAOmc,WAAW,WACTmgJ,GACD73D,IAAkB83D,UACd33D,6BACAzwE,IAAQ29B,YAxSa,KA6ShC9xD,OAAOs1D,kBACRt1D,OAAOs1D,gBAAkB,IAE7Bt1D,OAAOs1D,gBAAgB,2BACjBt1D,OAAO82D,YAAY9wC,MAElB60B,IAAIkB,+BAA+BljC,GACrC84B,KAAK,SAAA6M,GAWF,GAVA89G,GAAmB,EAEnBt8J,OAAOs1D,gBAAgB,yBACjBt1D,OAAO82D,YAAY9wC,MAEzB0N,IAAW6K,cACP2J,YACI,UACA4yH,EAAkCjiJ,MAErCgiC,IAAIhiC,QAAQic,mBACb,IADiC,IAAA+sB,EAAA,SACxBzhD,GACL,IAAMg2C,EAAQoI,EAAOp+C,GACfo8J,EAAUpmH,EAAMsiD,oBAElBtiD,EAAMqI,YAAcpI,MACpB3iB,IAAWgC,gBAAgB8mI,EACvBpmH,EAAMsJ,cAAc99C,KAAKw0C,IAC7BA,EAAMnC,iBACFyxB,sBACA,WACIhyC,IAAWuE,eAAeukI,OAVjCp8J,EAAI,EAAGA,EAAIo+C,EAAOl3C,OAAQlH,IAAKyhD,EAA/BzhD,GAiBb,IAAMq8J,EACA5hH,IAAIsB,oCAEV,GAAIsgH,EACA,IAASr8J,EAAI,EAAGA,EAAIo+C,EAAOl3C,OAAQlH,IAAK,CACtBo+C,EAAOp+C,GAEf8+F,+BACFu9D,GArCA,IAAA7lI,GAAA,EAAAC,GAAA,EAAAC,OAAA7kB,EAAA,IA2CZ,QAAA8kB,EAAAC,EAAoBwnB,EAApBr9C,OAAA4F,cAAA6vB,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAA4B,KAAjBwf,EAAiBrf,EAAA11B,MACpB+0C,EAAMz9B,OAAS09B,KACQ,YAApBD,EAAME,WACTj9B,EAAKqjJ,0BAA0BtmH,EAAMA,MAAO,WA9CxC,MAAAr0B,GAAA8U,GAAA,EAAAC,EAAA/U,EAAA,YAAA6U,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAkDZ,OAAO0nB,IAEVtJ,MAAM,SAAAx+B,GAGH,GAFA4lJ,GAAmB,EAEf5lJ,EAAM/V,OAASsgD,2BACX9sB,IAAQ0d,iBAAkB,CAC9B,IAAM8qH,EAAgB9jJ,EAAQq0B,YAAc,MACtC0vH,EApW1B,SAA4B1vH,GACxB,IAAKC,IAAYD,GACb,OAAO,KAEX,IAAMghB,EAAQ/gB,IAAYD,GAAYghB,MAClCpY,EAAM,KACN+mH,EAAU,KAed,OAbA/7J,OAAOmW,KAAKk2B,KAAansB,QAAQ,SAAA9f,GAC7B,IAAMG,EAAQ8rC,IAAYjsC,KAErB40C,GAAQA,EAAIoY,MAAQ7sD,EAAM6sD,OAAS7sD,EAAM6sD,MAAQA,KAClD2uG,EAAU37J,EACV40C,EAAMz0C,KAIVw7J,IAAY3vH,IACZ2vH,EAAU,MAGPA,EA+U+BC,CAAmBH,GAEzC,GAAsB,OAAlBC,EAeA,OAdA/jJ,EAAQq0B,WAAa0vH,EAErBrqI,EAAO5b,MACH,0CACAimJ,GAEJlpI,IAAW6K,cAAc2J,YACrB,UACA,CACI60H,eAAkBJ,EAClBK,eAAkBJ,EAClBx7I,OAAQ,4BAGT/H,EAAK4gC,kBACRphC,OACA5G,EACAoqJ,GAAmBv7J,OAAOggG,OAAO,GAAIjoF,IAK7C,GAAIwjJ,GACG3lJ,EAAMolB,IAAIE,aACVtlB,EAAMolB,IAAIE,YAAYiP,OACtBv0B,EAAMolB,IAAIE,YAAYiP,MAAMoB,WAC5B31B,EAAMolB,IAAIE,YAAYiP,MAAMoB,UAAUI,SAGzC,OAFA4vH,EAAgB9vH,oBAAiBt6B,EAE1BoH,EAAK4gC,kBAAkBoiH,GAItC,GAAI3lJ,EAAM/V,OACEsgD,iCAAiD,CAIzD,IAAMwuF,EAAY,CACd72H,GAAI,iCACJzC,QAASO,EAAMP,SAGnBud,IAAWkJ,QAAQpe,KAAK8L,UAAUmlH,IAElC/7G,IAAW6K,cACP2J,YACI,UACA,CACI9mB,OAAQ,0CAEjB,GAAI1K,EAAM/V,OAASsgD,YAA4B,CAElD,IAAMwuF,EAAY,CACd72H,GAAI,2BACJ+I,OAAQjL,EAAMolB,IAAI0Z,SAGtB9hB,IAAWkJ,QAAQpe,KAAK8L,UAAUmlH,IAElC,IAAMzhI,EACA8sJ,EAAkCjiJ,GAExC7K,EAAWoT,OAAS,mBACpBpT,EAAWwnC,QAAU9+B,EAAMolB,IAAI0Z,QAAQ3gC,KAAK,KAC5C6e,IAAW6K,cACP2J,YAAwB,QAASl6B,QAClC,CAEH0lB,IAAWkI,uBAAuBllB,GAElC,IAAM1I,EACA8sJ,EAAkCjiJ,GAExC7K,EAAWoT,OAAS1K,EAAM/V,KAC1B+yB,IAAW6K,cACP2J,YAAwB,QAASl6B,IAMzC,OAHAhO,OAAOs1D,gBAAgB,yBACjBt1D,OAAO82D,YAAY9wC,MAElB8uB,QAAQE,OAAOt+B,MAoBlCumJ,sBA/XoC,SA+XdC,EAAoBvtE,EAAYR,GAClD,OAAOF,IAAgBvtF,OAAOw7J,EAAoBvtE,EAAYR,IASlEguE,iBAzYoC,WA0YhC,OAAO,IAAIvkC,KAQfzvB,qBAlZoC,WAmZhC,OAAOA,eAWX71D,sBA9ZoC,WAkahC,OAHA/gB,EAAO1b,KAAK,yFAGLnF,KAAKggC,aAAa4B,yBAY7ByF,wBA9aoC,SA8aZL,GAIpB,OAHAnmB,EAAO1b,KAAK,2FAGLnF,KAAKggC,aAAaqH,wBAAwBL,IAUrD0kH,8BA5boC,WA6bhC,OAAO1rJ,KAAKggC,aAAa0rH,iCAQ7BC,uBArcoC,WAschC,OAAO3pI,IAAWmB,oBACXy2D,IAAoBM,yBAS/Bp6C,iBAhdoC,SAgdnBp0B,GACbmV,EAAO1b,KAAK,oFAEZnF,KAAKggC,aAAaF,iBAAiBp0B,IAWvCy+I,wBA9doC,SA8dZ1lJ,EAASsxB,EAAQ61H,EAAQC,EAAO7mJ,GACpD6b,EAAO7b,MAAP,mBAAA3L,OACuBoL,GADvB,WAAApL,OAEe08B,GAFf,SAAA18B,OAGauyJ,GAHb,WAAAvyJ,OAIewyJ,GACX,eAAgB7mJ,GACpBgd,IAAWwK,kBAAkBxnB,IAUjCgmJ,0BA/eoC,SA+eVtmH,EAAOonH,GACzB,gBAAiBpnH,GACjBA,EAAMqnH,YAAcD,EAChBpnH,EAAMqnH,cAAgBD,GACtBjrI,EAAO5b,MAAM,oCAGjB4b,EAAO5b,MAAM,yDAUrB+mJ,KAAM,CACFC,aACAtpI,eACAF,cA3gB8B,WAA9BttB,EAAO7G,OAAO49J,aACR98J,OAAOggG,OAAO,GAAI9gG,OAAO49J,YAAa/9J,GACtCA,iDChHd,IAAA6xB,EAAaxxB,EAAQ,IAgDrB,SAAAyxB,EAAAksI,EAAAhlJ,GACAnH,KAAAmsJ,aACAnsJ,KAAAosJ,oBAAAjlJ,MAAAilJ,mBAAAjlJ,EAAAilJ,iBACApsJ,KAAAqsJ,cAAAllJ,KAAAklJ,cAAAllJ,EAAAklJ,cAAA,IACArsJ,KAAAssJ,eAAAnlJ,KAAAmlJ,eAAAnlJ,EAAAmlJ,eAAA,IAGAl9J,OAAAmW,KAAAya,EAAAK,QAAA/Q,QACA,SAAAi9I,GAEAvsJ,KADAggB,EAAAK,OAAAksI,IACA,WACAvsJ,KAAAwsJ,KAAA74H,MAAA3zB,KAAAmB,YACSjR,KAAA8P,KAAAusJ,IACJr8J,KAAA8P,OAMLA,KAAAysJ,oBAAA,KAMAzsJ,KAAAu4E,MAAA,GAKAv4E,KAAA0sJ,SAAA,EAMA1sJ,KAAA2sJ,YAAA,GAiBA1sI,EAAA3vB,UAAAsoB,UAAA,SAAAg0I,GACA,IACA,OAAA9/I,KAAA8L,UAAAg0I,GACK,MAAA5nJ,GACL,uCAmBAib,EAAA3vB,UAAAu8J,iBAAA,SACAN,GAEA,IADA,IAAAznJ,EAAA,GACApW,EAAA,EAAA8I,EAAA2J,UAAAvL,OAA2ClH,EAAA8I,EAAS9I,IAAA,CACpD,IAAA0S,EAAAD,UAAAzS,IAEAsR,KAAAosJ,kBAAAG,IAAAvsI,EAAAK,OAAA3iB,OACA,iBAAA0D,IACAA,EAAApB,KAAA4Y,UAAAxX,IAEA0D,GAAA1D,EACA1S,IAAA8I,EAAA,IACAsN,GAAA,KAGA,OAAAA,EAAAlP,OAAAkP,EAAA,MASAmb,EAAA3vB,UAAAk8J,KAAA,WAGA,IAAArtE,EAAAh+E,UAAA,GACA2D,EAAA9E,KAAA6sJ,iBAAAl5H,MAAA3zB,KAAAmB,WACA,GAAA2D,EAAA,CAEA,IAAAgoJ,EAAA9sJ,KAAAu4E,MAAAv4E,KAAAu4E,MAAA3iF,OAAA,IACAk3J,KAAAnrJ,QACAmD,EACAgoJ,EAAA7mB,OAAA,GAEAjmI,KAAAu4E,MAAAr1E,KAAA,CACAvB,KAAAmD,EACAq6E,YACA8mD,MAAA,IAEAjmI,KAAA0sJ,UAAA5nJ,EAAAlP,QAIAoK,KAAA0sJ,UAAA1sJ,KAAAssJ,gBACAtsJ,KAAA+sJ,QAAA,OAQA9sI,EAAA3vB,UAAAitB,MAAA,WACAvd,KAAAgtJ,8BAQA/sI,EAAA3vB,UAAA08J,2BAAA,WACAhtJ,KAAAysJ,sBACAn+J,OAAAqf,aAAA3N,KAAAysJ,qBACAzsJ,KAAAysJ,oBAAA,MAGAzsJ,KAAAysJ,oBAAAn+J,OAAAmc,WACAzK,KAAA+sJ,OAAA78J,KACA8P,MAAA,MACAA,KAAAqsJ,gBAOApsI,EAAA3vB,UAAAod,MAAA,WACA1N,KAAA+sJ,QACA,GACA,IAcA9sI,EAAA3vB,UAAAy8J,OAAA,SAAAE,EAAAC,GAEAltJ,KAAA0sJ,SAAA,IAAA1sJ,KAAAmsJ,WAAAgB,WAAAF,KAGAjtJ,KAAAmsJ,WAAAgB,WAEAntJ,KAAA2sJ,YAAA/2J,SACAoK,KAAA2sJ,YAAAr9I,QACA,SAAA89I,GACAptJ,KAAAmsJ,WAAAkB,UAAAD,IACqBl9J,KAAA8P,OAGrBA,KAAA2sJ,YAAA,IAGA3sJ,KAAAmsJ,WAAAkB,UAAArtJ,KAAAu4E,QAEAv4E,KAAA2sJ,YAAAzpJ,KAAAlD,KAAAu4E,OAGAv4E,KAAAu4E,MAAA,GACAv4E,KAAA0sJ,SAAA,GAGAQ,GACAltJ,KAAAgtJ,8BAQA/sI,EAAA3vB,UAAAk2B,KAAA,WAEAxmB,KAAA+sJ,QAAA,OAGA5+J,EAAAD,QAAA+xB,kBClRA,SAAAqtI,GACAn/J,EAAAD,QAAAo/J,mCCDA,IAAAC,EAAAC,EAAArkE;;;;;;;;GAsBAnpF,MAAA1R,OAXIk/J,EAAO,QAAWjtJ,KAAA4oF,EAAA,mBAATokE,EAcb,WAEA,IAAAE,EAAA,kCAGAC,EAAAp/J,OAAAitB,SAAAjtB,OAAAitB,SAAA87E,KAAA,KACAs2D,EAAAD,KAAA9rJ,QAAA,WAAAA,QAAA,kBAGAgsJ,EAAAlzJ,SAAAsW,qBAAA,UAGA68I,EAAA,eAAAD,EAAA,IAAAlzJ,SAAAmG,cAAA,WAGAitJ,GAAAx/J,OAAA0xG,OAAA,mBAAA1xG,OAAA0xG,MAAAjqG,WAGAg4J,EAAA,kBAAArzJ,SAIA,oBAAAhE,aAAAs3J,kBAAAjV,MACAriJ,MAAAs3J,gBACAt3J,MAAAs3J,gBAAAjV,KAOA,IAAAkV,GAAA,EACAC,GAAA,EA+OA,SAAAC,IAIA,OAAAP,EAAAh4J,OACA,YAGA,IAAAlH,EAAAgK,EAAA0L,EAAA+iC,EAAAm0C,EACA8yE,EAAA,GACAC,EAAAF,EAAAE,gBAAA,EAQA,IAAA3/J,EAAA,EAAaA,EAAAk/J,EAAAh4J,OAAoBlH,IACjCo/J,GAAAD,EACAJ,EAAAr7I,KAAAw7I,EAAAl/J,GAAA8qB,aACA40I,EAAAlrJ,KAAA0qJ,EAAAl/J,IAIA0/J,EAAAlrJ,KAAA0qJ,EAAAl/J,IAQA,GAJAgK,EAAA,IAAAhC,MACAu3J,IACA7pJ,EAAA1L,EAAA0L,QAEAA,GAAA8pJ,EACA,IACA,MAAAx1J,EAEA,MAAA2X,GAEAjM,EAAAiM,EAAAjM,MAiEA,GA7DAA,IACA+iC,EAvMA,SAAAmnH,EAAAlqJ,EAAAiqJ,GACA,IAAA76I,EAAA+6I,EACApnH,EAAA,KACAqnH,EAAA,iBAAAH,EA+BA,OA9BAA,EAAAG,EAAAljJ,KAAAy5F,MAAAspD,GAAA,EACA,iBAAAjqJ,OACAoqJ,EACAh7I,EAAApP,EAAAqP,MAAA,+GAGAD,EAAApP,EAAAqP,MAAA,kNAEAD,EAAA,KACAA,EAAApP,EAAAqP,MAAA,kHAIAD,KAAA,KACA66I,EAAA,GACAE,EAAAnqJ,EAAAi+B,MAAAj+B,EAAAR,QAAA4P,EAAA,IAAAA,EAAA,GAAA5d,QACAuxC,EAAAmnH,EAAAC,EAAAF,EAAA,IAGAlnH,EAAA3zB,EAAA,KAWA2zB,EAqKAmnH,CAAAlqJ,EAAAiqJ,KACA/yE,EAzQA,SAAAn0C,EAAAinH,GACA,IAAA1/J,EACA4sF,EAAA,KAIA,GAFA8yE,KAAAR,EAEA,iBAAAzmH,KACA,IAAAz4C,EAAA0/J,EAAAx4J,OAAoClH,KACpC,GAAA0/J,EAAA1/J,GAAAoyC,MAAAqG,EAAA,CAGAm0C,EAAA8yE,EAAA1/J,GACA,MAIA,OAAA4sF,EAyPAmzE,CAAAtnH,EAAAinH,KAEAT,GAAAxmH,IAAAwmH,IAiBAryE,EA5OA,SAAA8yE,GACA,IAAA1/J,EAAA8I,EACA8jF,EAAA,KAEA,IAAA5sF,EAAA,EAAA8I,GADA42J,KAAAR,GACAh4J,OAA2ClH,EAAA8I,EAAS9I,IACpD,IAAA0/J,EAAA1/J,GAAAggK,aAAA,QACA,GAAApzE,EAAA,CACAA,EAAA,KACA,MAEAA,EAAA8yE,EAAA1/J,GAGA,OAAA4sF,EA+NAqzE,CAAAP,KAUA9yE,GAKA,IAAA8yE,EAAAx4J,SACA0lF,EAAA8yE,EAAA,IAIA9yE,GAeAyyE,IACAzyE,EAAA5gF,SAAAk0J,gBAIAtzE,GAeAwyE,GAAAD,EACA,IAAAn/J,EAAA0/J,EAAAx4J,OAAsClH,KACtC,mBAAA0/J,EAAA1/J,GAAA8qB,WAAA,CACA8hE,EAAA8yE,EAAA1/J,GACA,MAkCA,OA5BA4sF,IAyBAA,EAAA8yE,IAAAx4J,OAAA,UAGA0lF,GA3YA,WACA,IACA,IAAAjrE,EAAA,IAAA3Z,MAEA,MADAu3J,EAAA,iBAAA59I,EAAAjM,SAAAiM,EAAAjM,MACAiM,EAEA,MAAAw+I,GACAX,EAAA,iBAAAW,EAAAzqJ,SAAAyqJ,EAAAzqJ,QAPA,GA+YA+pJ,EAAAE,eAAA,EAOA,IAAAnzE,EAAAizE,EASA,OARAjzE,EAAA4zE,KAAAX,EACAjzE,EAAA6zE,IA1RA,WAMA,aAqRA7zE,EAAAgrD,OArLA,WAIA,aAuLAhrD,IA9csBqyE,EAAA55H,MAAAzlC,EAAAs/J,GAAAD,KAAAp/J,EAAAD,QAAAi7F,kBCPtBh7F,EAAOD,QAJW,CACdq+B,UAAW,0BCDf,IAAAyiI,EAAA,SAAAh9G,GACA,OAAA75C,OAAA4hB,OAAAi4B,QAAAj4B,OAAAi4B,MAgBAi9G,EAAA,SAAA75J,EAAAmmB,EAAApD,GACA,IAAA+2I,EAAA95J,EAAAnG,MAAAmG,EAAAkQ,MACAlQ,EAAA8N,OAAAqY,EAAAnmB,EAAA8N,MACAqY,EAAAnmB,EAAA8N,MAAA,GAEAgsJ,IAAA3zI,EAAAnmB,EAAAnG,QACAssB,EAAAnmB,EAAAnG,MAAA,IAEA,IAAAkgK,EAAA/5J,EAAA8N,KACA,GACAgsJ,EAAA3zI,EAAAnmB,EAAAnG,MAAAssB,GAvBA,SAAA9H,EAAA8H,EAAAjW,EAAA8pJ,GACA,GAAAA,IAAA9pJ,EACAiW,EAAA6zI,GAAAJ,EAAAv7I,EAAA,SAGA,QAAA/kB,EAAA,EAAmBA,EAAA4W,EAAA1P,OAAkBlH,GAAA,EACrC,MAAA+kB,EAAA/kB,EAAA,KACA6sB,EAAAjW,EAAA5W,IAAAsgK,EAAAv7I,EAAA/kB,EAAA,KAkBA2gK,CAAAl3I,EAAA1E,MAAAre,EAAA6/F,KAAAk6D,EAAA/5J,EAAAkQ,MAAAlQ,EAAAnG,MAEAmG,EAAA8N,MACAqY,EAAAnmB,EAAA8N,WAAAisJ,IAIAn6D,EAAcxmG,EAAQ,IACtB8gK,EAAAh/E,OAAAhgF,UAAA8hB,KAAAliB,KAAA,iBAEAhC,EAAAwqB,MAAA,SAAA4Z,GACA,IAAA7Z,EAAA,GACAsV,EAAA,GACAxS,EAAA9C,EAoBA,OAjBA6Z,EAAAvvB,MAAA,gBAAAiuB,OAAAs+H,GAAAhgJ,QAAA,SAAA3gB,GACA,IAAAsY,EAAAtY,EAAA,GACAwpB,EAAAxpB,EAAA0zC,MAAA,GACA,MAAAp7B,IACA8mB,EAAA7qB,KAAA,CAAkB2vB,IAAA,GAAAY,KAAA,KAClBlY,EAAAwS,IAAAn4B,OAAA,IAGA,QAAA2C,EAAA,EAAmBA,GAAAy8F,EAAA/tF,IAAA,IAAArR,OAAkC2C,GAAA,GACrD,IAAAnD,EAAA4/F,EAAA/tF,GAAA1O,GACA,GAAAnD,EAAA6/F,IAAA7iF,KAAA+F,GACA,OAAA82I,EAAA75J,EAAAmmB,EAAApD,MAKAM,EAAAsV,QACAtV,GAGA,IAAA82I,EAAA,SAAAC,EAAAC,GACA,IAAAh/J,EAAAg/J,EAAA1sJ,MAAA,WAIA,OAHA,IAAAtS,EAAAmF,SACA45J,EAAA/+J,EAAA,IAAAu+J,EAAAv+J,EAAA,KAEA++J,GAGAthK,EAAAgoD,YAAA,SAAAz/C,GACA,OAAAA,EAAAsM,MAAA,SAAsB2C,OAAA6pJ,EAAA,KAItBrhK,EAAA+nD,gBAAA/nD,EAAAgoD,YAEAhoD,EAAAioD,cAAA,SAAA1/C,GACA,OAAAA,EAAAsM,MAAA,KAAAyC,IAAAuU,SAGA7rB,EAAAkoD,sBAAA,SAAA3/C,GAGA,IAFA,IAAA8sE,EAAA,GACAv/D,EAAAvN,EAAAsM,MAAA,KAAAyC,IAAAwpJ,GACAtgK,EAAA,EAAiBA,EAAAsV,EAAApO,OAAkBlH,GAAA,EACnC60E,EAAArgE,KAAA,CACAgsB,UAAAlrB,EAAAtV,GACAygC,GAAAnrB,EAAAtV,EAAA,GACAu/B,KAAAjqB,EAAAtV,EAAA,KAGA,OAAA60E,GAGAr1E,EAAAmoD,qBAAA,SAAA5/C,GACA,OAAAA,EAAAsM,MAAA,KAAAyC,IAAA,SAAA+tB,GACA,OAAAA,EAAA9F,UAAA,EAAA8F,EAAA39B,OAAA,GAAAmN,MAAA,KAAA2C,OAAA6pJ,EAAA,OAIArhK,EAAAooD,yBAAA,SAAA7/C,GACA,OAAAA,EAAAsM,MAAA,KAAqByC,IAAA,SAAAye,GACrB,OAAAA,EAAAlhB,MAAA,KAAAyC,IAAA,SAAA0vF,GACA,IAAAw6D,EAAAzlJ,GAAA,EASA,MAPA,MAAAirF,EAAA,GACAw6D,EAAAV,EAAA95D,IAEAw6D,EAAAV,EAAA95D,EAAAznE,UAAA,EAAAynE,EAAAt/F,SACAqU,GAAA,GAGA,CACAylJ,OACAzlJ,gCCrHA,IAAA+qF,EAAcxmG,EAAQ,IAGtBmhK,EAAA,WAyBAC,EAAA,SAAA3oJ,EAAA7R,EAAAmmB,GACA,IAIA2sB,EAAA,CAAAjhC,EAAA,KAJA7R,EAAA8/F,kBAAAxkC,SACAt7D,EAAA8/F,OAAA9/F,EAAA8N,KAAAqY,IAAAnmB,EAAAnG,OACAmG,EAAA8/F,SAGA,GAAA9/F,EAAAkQ,MACA,QAAA5W,EAAA,EAAmBA,EAAA0G,EAAAkQ,MAAA1P,OAAsBlH,GAAA,GACzC,IAAAyB,EAAAiF,EAAAkQ,MAAA5W,GACA0G,EAAAnG,KACAi5C,EAAAhlC,KAAAqY,EAAAnmB,EAAAnG,MAAAkB,IAGA+3C,EAAAhlC,KAAAqY,EAAAnmB,EAAAkQ,MAAA5W,UAKAw5C,EAAAhlC,KAAAqY,EAAAnmB,EAAAnG,OAEA,OA5CA,SAAA4gK,GACA,IAAAnhK,EAAA,EACAw5C,EAAA/mC,UACA3J,EAAA0wC,EAAAtyC,OACA,OAAAi6J,EAAAjuJ,QAAA+tJ,EAAA,SAAAt5J,GACA,GAAA3H,GAAA8I,EACA,OAAAnB,EAEA,IAAA+K,EAAA8mC,EAAAx5C,GAEA,OADAA,GAAA,EACA2H,GACA,SACA,UACA,SACA,OAAA8B,OAAAiJ,GACA,SACA,OAAA2Y,OAAA3Y,GACA,SACA,aA0BAuyB,MAAA,KAAAuU,IAKA4nH,EAAA,CACA,gBACA,gBACA,qBAEAC,EAAA,kBAGA5hK,EAAAD,QAAA,SAAAuqB,EAAA6kG,GACAA,KAAA,GAEA,MAAA7kG,EAAAiD,UACAjD,EAAAiD,QAAA,GAEA,MAAAjD,EAAAxpB,OACAwpB,EAAAxpB,KAAA,KAEAwpB,EAAAsV,MAAAze,QAAA,SAAAyiB,GACA,MAAAA,EAAAkB,WACAlB,EAAAkB,SAAA,MAIA,IAAA+8H,EAAA1yC,EAAA0yC,YAAAF,EACAG,EAAA3yC,EAAA2yC,YAAAF,EACAz9H,EAAA,GAkCA,OA/BA09H,EAAA1gJ,QAAA,SAAArI,GACA+tF,EAAA/tF,GAAAqI,QAAA,SAAAla,GACAA,EAAAnG,QAAAwpB,GAAA,MAAAA,EAAArjB,EAAAnG,MACAqjC,EAAApvB,KAAA0sJ,EAAA3oJ,EAAA7R,EAAAqjB,IAEArjB,EAAA8N,QAAAuV,GAAA,MAAAA,EAAArjB,EAAA8N,OACAuV,EAAArjB,EAAA8N,MAAAoM,QAAA,SAAApP,GACAoyB,EAAApvB,KAAA0sJ,EAAA3oJ,EAAA7R,EAAA8K,UAOAuY,EAAAsV,MAAAze,QAAA,SAAAyiB,GACAO,EAAApvB,KAAA0sJ,EAAA,IAAA56D,EAAAlmG,EAAA,GAAAijC,IAEAk+H,EAAA3gJ,QAAA,SAAArI,GACA+tF,EAAA/tF,GAAAqI,QAAA,SAAAla,GACAA,EAAAnG,QAAA8iC,GAAA,MAAAA,EAAA38B,EAAAnG,MACAqjC,EAAApvB,KAAA0sJ,EAAA3oJ,EAAA7R,EAAA28B,IAEA38B,EAAA8N,QAAA6uB,GAAA,MAAAA,EAAA38B,EAAA8N,OACA6uB,EAAA38B,EAAA8N,MAAAoM,QAAA,SAAApP,GACAoyB,EAAApvB,KAAA0sJ,EAAA3oJ,EAAA7R,EAAA8K,YAOAoyB,EAAAnvB,KAAA,iCCjGA,IAAAq4C,EAAgBhtD,EAAQ,IACxB0hK,EAAqB1hK,EAAQ,KAC7B2hK,EAAAD,EAAAC,WACAC,EAAAF,EAAAE,WAIAC,EAAA,EAIA,SAAAv+H,EAAAC,EAAAvJ,EAAAwJ,GACA,OAAAD,EACAjB,MACAE,OAAA,SAAAD,GAAoC,OAAAA,EAAA7pB,KAAAshB,IACpCwI,OAAA,SAAAD,GAAoC,OAAAA,EAAAzzB,YAAA00B,IACpCxsB,IAAA,SAAAurB,GAAiC,OAAAA,EAAAphC,QAAyB,GAK1D,SAAA+nH,EAAAvwG,GAEAnH,KAAAmH,WAAA,GAEAnH,KAAAmH,QAAAwwG,cACA33G,KAAAmH,QAAAwwG,YAAA04C,GAEAtrJ,QAAAH,IAAA,uBAAA5E,KAAAmH,QAAAwwG,YAAA,WAMA33G,KAAA6kH,UAAA,GAiBA,SAAAyrC,EAAA73I,EAAA4c,GACA,MAAA5c,GAAAhjB,MAAAC,QAAA+iB,EAAAsV,QAIAtV,EAAAsV,MAAAze,QAAA,SAAAyiB,GACA,UAAAA,EAAA9qB,MACAouB,EAAAtD,KAKA,SAAAw+H,EAAA5gI,GAEA,OAAAA,GAAA,MAAAA,GACAA,EAAA1oB,MAAA,IAAA0oB,EAAA1oB,MACA0oB,EAAA2C,KAAA,IAAA3C,EAAA2C,IAuJAolF,EAAApnH,UAAAkgK,eAAA,WACAxwJ,KAAA6kH,UAAA,IAWAnN,EAAApnH,UAAAmsH,aAAA,SAAA3rF,GACA9wB,KAAA6kH,UAAA/zF,GAYA4mF,EAAApnH,UAAAmgK,gBAAA,SAAA1+H,GACA,IAAAL,EAAAK,EAAAX,YACAW,EAAAX,WAAAG,KAAA,SAAAC,GAA+C,cAAAA,EAAAC,YAC/C,OAAAC,EACAA,EAAAZ,MACA/tB,MAAA,KACAyC,IAAA,SAAA4sB,GAAoC,OAAAtZ,SAAAsZ,KAEpC,CAAAL,EAAAjB,MAAA,GAAA5pB,KAIAwwG,EAAApnH,UAAAogK,sBAAA,SAAAC,EAAAC,GAEA,IADA,IAAAn/G,EAAA,GACA/iD,EAAA,EAAmBA,EAAAiiK,EAAA/6J,SAAwBlH,EAAA,CAC3C,IAAAmiK,EAAAF,EAAAjiK,GACAoiK,EAAAF,EAAAliK,IAAA,KACA+iD,EAAAo/G,GAAAC,EAEA,OAAAr/G,GAGAimE,EAAApnH,UAAAygK,2BAAA,SAAAh/H,GACAhtB,QAAAH,IAAA,sCAAA5E,KAAA6kH,WACA,IAAAmsC,EAAAhxJ,KAAAywJ,gBAAA1+H,GACAhtB,QAAAH,IAAA,sCAAAosJ,GACA,IAAAC,EAAAn/H,EAAAC,EAAAi/H,EAAA,WACAE,EAAAp/H,EAAAC,EAAAi/H,EAAA,YACAG,EAAAnxJ,KAAA0wJ,sBAAAM,EAAAhxJ,KAAA6kH,WACA9/G,QAAAH,IAAA,uCAAAusJ,GAGA,IAAAC,EAAApxJ,KAAA6kH,UACA7zF,OAAA,SAAAxI,GAAgC,WAAAp5B,OAAAm2B,OAAA4rI,GAAAvtJ,QAAA4kB,KA2BhC,OA1BAzjB,QAAAH,IAAA,oCAAAwsJ,GAGAr/H,EAAAjB,MAAAxhB,QAAA,SAAAkZ,GACA2oI,EAAA3oI,EAAAthB,MACAshB,EAAAthB,GAAAiqJ,EAAA3oI,EAAAthB,OAIAkqJ,EAAA9hJ,QAAA,SAAAkZ,GACAuJ,EAAAjB,MAAA5tB,KAAA,CACAgE,GAAAshB,EACAlrB,UAAA,OACA3N,MAAAshK,IAEAl/H,EAAAjB,MAAA5tB,KAAA,CACAgE,GAAAshB,EACAlrB,UAAA,QACA3N,MAAAuhK,MAGAn/H,EAAAX,WAAAW,EAAAX,YAAA,GACAW,EAAAX,WAAAluB,KAAA,CACAuuB,UAAA,MACAX,MAAA9wB,KAAA6kH,UAAA1hH,KAAA,OAEA4uB,GAGA2lF,EAAApnH,UAAA+gK,oBAAA,SAAAt/H,EAAAV,GACA,IAAAigI,EAAA,SAAAv/H,EAAAvJ,GACAuJ,EAAAjB,MAAA5tB,KAAA,CACAgE,GAAAshB,EACAlrB,UAAA,QACA3N,MAAAk2H,IAEA9zF,EAAAjB,MAAA5tB,KAAA,CACAgE,GAAAshB,EACAlrB,UAAA,OACA3N,MAAAi2H,KAGAA,EAAA9zF,EAAAC,EAAAV,EAAA,QACAw0F,EAAA/zF,EAAAC,EAAAV,EAAA,SAKArxB,KAAAmH,QAAAm7D,kBAAAsjD,IACAA,EAAA7zF,EAAA2oB,KACA3oB,EAAAjB,MACAxhB,QAAAkZ,IACAuJ,EAAAjB,MAAA5tB,KAAA,CACAgE,GAAAshB,EAAAthB,GACA5J,UAAA,OACA3N,MAAAi2H,OAOA,IADA,IAAA2rC,EAAA,GACA7iK,EAAA,EAAmBA,EAAAsR,KAAAmH,QAAAwwG,YAAA,IAAkCjpH,EAAA,CACrD,IAAA8iK,EApSAlmJ,KAAAqM,MAAA,WAAArM,KAAAC,UADA,EAsSA+lJ,EAAAv/H,EAAAy/H,GACAD,EAAAruJ,KAAAsuJ,GAOA,OALAz/H,EAAAX,WAAAW,EAAAX,YAAA,GACAW,EAAAX,WAAAluB,KAAA,CACAuuB,UAAA,MACAX,MAAAO,EAAA,IAAAkgI,EAAApuJ,KAAA,OAEA4uB,GAoBA2lF,EAAApnH,UAAAmhK,kBAAA,SAAA1/H,GAGA,IAAAV,EACAR,EAAAkB,EAAAjB,OAAAiB,EAAAjB,MACAtrB,IAAA,SAAAurB,GAAiC,OAAAA,EAAA7pB,KACjC8pB,OAAA,SAAAxI,EAAAyI,EAAAC,GACA,OAAAA,EAAAttB,QAAA4kB,KAAAyI,IAEAr7B,QAAA,EACAu7B,EAAAY,EAAAX,YAAAW,EAAAX,WAAAx7B,QAAA,EAEA,OAAAi7B,KAAA,EAEA,OAAAkB,EAEA,MAAAlB,GAAA,IAAAM,EAEA,OAAAY,EAGA,OAAAlB,EACAQ,EAAAU,EAAAjB,MAAA,GAAA5pB,OACK,CAGL,IAAAoqB,EAAAS,EAAAX,WAAAJ,OAAA,SAAAQ,GAAgE,cAAAA,EAAAC,YAAoC,GACpG,IAAAH,EAIA,OAAAS,EAHAV,EAAAvY,SAAAwY,EAAAR,MAAA/tB,MAAA,SAsBA,OAhBAgC,QAAAH,IAAA,qCAAA5E,KAAA6kH,WACA9/G,QAAAH,IAAA,qCAAAysB,IAEA,IAAArxB,KAAA6kH,UAAAjhH,QAAAytB,IAGAtsB,QAAAH,IAAA,2EAEAmtB,EAAA/xB,KAAA+wJ,2BAAAh/H,KAEAhtB,QAAAH,IAAA,2EAEAmtB,EAAA/xB,KAAAqxJ,oBAAAt/H,EAAAV,IAGArxB,KAAA6kH,UAAA7kH,KAAAywJ,gBAAA1+H,GACAA,GAYA2lF,EAAApnH,UAAAkuH,uBAAA,SAAA7uF,GAEA,IAAA4gI,EAAA5gI,GACA,OAAAA,EAGA,IAAAlX,EAAA+iC,EAAA9iC,MAAAiX,EAAA2C,KAEAp9B,EAAA8K,KAqCA,OApCAswJ,EAAA73I,EAAA,SAAAsZ,GAGA78B,EAAAiS,QAAAywG,uBArXA,SAAA7lF,GAEA,GAAAA,GAAAt8B,MAAAC,QAAAq8B,EAAAX,YASA,IALA,IAAA69B,EAAAkhG,EAAAp+H,GACAyqB,EAAA,GAGAjkD,EAAAw5B,EAAAX,WAAAx7B,OACA2C,KAEA,WAAAw5B,EAAAX,WAAA74B,GAAAk5B,UAAA,CAMA,IAFA,IAAAigI,EAAA3/H,EAAAX,WAAA74B,GAAAu4B,MAAA/tB,MAAA,KAEArU,EAAA,EAAuBA,EAAAgjK,EAAA97J,OAA2BlH,IAAA,CAElD,IAAA85B,EAAAkpI,EAAAhjK,GACA8tD,EAAAt5C,KAAAslB,GAEA,IAAAxkB,EAAAirD,EAAAzmC,GAAAkyB,KAAA33C,MAAA,KACAksD,EAAAzmC,GAAAkyB,KAAA,CAAA12C,EAAA,OAAAtV,EAAA,IAAAsV,EAAA,OAAAtV,GAAAyU,KAAA,IACA8rD,EAAAzmC,GAAAgzC,MAAA,CAAAvM,EAAAzmC,GAAAgzC,MAAA,IAAA9sE,GAAAyU,KAAA,IAGA4uB,EAAAX,WAAA9hB,QAAA,SAAAqiJ,GACA,WAAAA,EAAAlgI,UAAA,CAIA,IAAAmgI,EAAAD,EAAA7gI,MAAA/tB,MAAA,MACA,IAAA6uJ,EAAAhuJ,QAAA4kB,IAKAopI,EAAAtiJ,QAAA,SAAAuiJ,GACA5iG,EAAA4iG,GAAAn3G,KAAAuU,EAAAzmC,GAAAkyB,KACAuU,EAAA4iG,GAAAr2F,MAAAvM,EAAAzmC,GAAAgzC,MACAq2F,IAAArpI,GACAg0B,EAAAt5C,KAAA2uJ,QAQA9/H,EAAAjB,MAAAs/H,EAAAnhG,EAAAzS,GACAzqB,EAAAX,WAAAntB,OAAA1L,EAAA,IAiUAq/G,CAAA7lF,GA7TA,SAAAA,GAEA,GAAAA,GAAAt8B,MAAAC,QAAAq8B,EAAAX,YAAA,CAMA,IAAA69B,EAAAkhG,EAAAp+H,GAGAA,EAAAX,WAAA9hB,QAAA,SAAAwiJ,GACA,WAAAA,EAAArgI,UAAA,CAIA1sB,QAAAG,KAAA,wBAAA4sJ,EAAAhhI,OAEAghI,EAAAC,MAAA,EAKA,IAHA,IAAAL,EAAAI,EAAAhhI,MAAA/tB,MAAA,KAGArU,EAAA,EAAuBA,EAAAgjK,EAAA97J,OAA2BlH,IAAA,CAElD,IAAA85B,EAAAkpI,EAAAhjK,UACAugE,EAAAzmC,GAGAuJ,EAAAX,WAAA9hB,QAAA,SAAAqiJ,GACA,WAAAA,EAAAlgI,UAAA,CAIA,IAAAmgI,EAAAD,EAAA7gI,MAAA/tB,MAAA,MACA,IAAA6uJ,EAAAhuJ,QAAA4kB,KAKAopI,EAAAtiJ,QAAA,SAAAuiJ,UACA5iG,EAAA4iG,KAIAF,EAAAI,MAAA,UAOAhgI,EAAAjB,MAAAs/H,EAAAnhG,GAIA,IADA,IAAAvgE,EAAAqjC,EAAAX,WAAAx7B,OACAlH,KACAqjC,EAAAX,WAAA1iC,GAAAqjK,MACAhgI,EAAAX,WAAAntB,OAAAvV,EAAA,QAvDAqW,QAAAG,KAAA,6DA4TA8sJ,CAAAjgI,GAyBA78B,EAAAiS,QAAAm7D,iBA5QA,SAAAvwC,GACAA,IAIAt8B,MAAAC,QAAAq8B,EAAAkgI,WACAlgI,EAAAkgI,QAAA,IAGAlgI,EAAAkgI,QAAAhuE,KACA,SAAAv1F,GAA0B,mCAAAA,EAAAiB,SAC1BoiC,EAAAkgI,QAAA/uJ,KAAA,CAA4BvT,MAAA,8BAkQ5BuiK,CAAAngI,KAIA,IAAAy2C,sBAAA,CACAvhE,KAAA0oB,EAAA1oB,KACAqrB,IAAAkpB,EAAAxF,MAAAv9B,MAWAi/F,EAAApnH,UAAA2wH,sBAAA,SAAAtxF,GAEA,IAAA4gI,EAAA5gI,GACA,OAAAA,EAGA,IAAAlX,EAAA+iC,EAAA9iC,MAAAiX,EAAA2C,KAEAp9B,EAAA8K,KASA,OARAswJ,EAAA73I,EAAA,SAAAsZ,GACA,YAAAA,EAAA9B,WAAA,YAAA8B,EAAA9B,WAIA/6B,EAAAu8J,kBAAA1/H,KAGA,IAAAy2C,sBAAA,CACAvhE,KAAA0oB,EAAA1oB,KACAqrB,IAAAkpB,EAAAxF,MAAAv9B,MAMAtqB,EAAAD,QAAAwpH,iBCzfAxpH,EAAAkiK,WAAA,SAAAnhG,EAAAzS,GACA,IAAA1rB,EAAA,GAGA,YAAAm+B,GACA,IAAA7/D,OAAAmW,KAAA0pD,GAAAr5D,OAAA,CAEAH,MAAAC,QAAA8mD,KACAA,EAAA,IAIA,QAAA9tD,EAAA,EAAmBA,EAAA8tD,EAAA5mD,OAAkBlH,IAAA,CACrC,IAAA85B,EAAAg0B,EAAA9tD,GACAqnC,EAAAk5B,EAAAzmC,GACAp5B,OAAAmW,KAAAwwB,GAAAzmB,QAAA,SAAAhS,GACAwzB,EAAA5tB,KAAA,CACAgE,GAAAshB,EACAlrB,YACA3N,MAAAomC,EAAAz4B,OAMAlO,OAAAmW,KAAA0pD,GAAA3/C,QAAA,SAAAkZ,GAEA,GADAA,EAAA1P,SAAA0P,KACAg0B,EAAA54C,QAAA4kB,IAAA,IAKA,IAAAuN,EAAAk5B,EAAAzmC,GACAp5B,OAAAmW,KAAAwwB,GAAAzmB,QAAA,SAAAhS,GACAwzB,EAAA5tB,KAAA,CACAgE,GAAAshB,EACAlrB,YACA3N,MAAAomC,EAAAz4B,UAMA,OAAAwzB,GAGA5iC,EAAAiiK,WAAA,SAAAp+H,GACA,IAAAk9B,EAAA,GASA,YAPA,IAAAl9B,EAAAjB,OAAAr7B,MAAAC,QAAAq8B,EAAAjB,QACAiB,EAAAjB,MAAAxhB,QAAA,SAAAkZ,GACAymC,EAAAzmC,EAAAthB,MACA+nD,EAAAzmC,EAAAthB,IAAA,IACA+nD,EAAAzmC,EAAAthB,IAAAshB,EAAAlrB,WAAAkrB,EAAA74B,QAGAs/D,qBC5EC,SAAAkjG,GAA+B,aAEhCA,EAAAr3J,QAAAiL,oBAAA,QACA,CACA4O,YAAA,KACA8wE,YAAA,GACAC,UAAA,GACA0sE,OAAA,GAOAtnJ,KAAA,SAAAunJ,GAEAryJ,KAAA2U,YAAA09I,EACAryJ,KAAAylF,YAAA,GACAzlF,KAAA0lF,UAAA,GACA1lF,KAAAoyJ,OAAA,GAEAC,EAAApkJ,WAAAjO,KAAAsyJ,aAAApiK,KAAA8P,MAAAmyJ,EAAAr3J,QAAAK,GAAAO,WAAA,sBAEA22J,EAAApkJ,WAAAjO,KAAAuyJ,cAAAriK,KAAA8P,MAAAmyJ,EAAAr3J,QAAAK,GAAAQ,YAAA,uBAaA62J,YAAA,SAAAltE,EAAAr+E,EAAAhY,EAAAwjK,GAEA,QAAA/jK,EAAA,EAAqBA,EAAAsR,KAAAylF,YAAA7vF,OAA2BlH,IAEhD,GAAAsR,KAAAylF,YAAA/2F,GAAA42F,aACAtlF,KAAAylF,YAAA/2F,GAAAuY,SACAjH,KAAAylF,YAAA/2F,GAAAO,SACA+Q,KAAAylF,YAAA/2F,GAAA+jK,QAEA,SAIA,OADAzyJ,KAAAylF,YAAAviF,KAAA,CAA+BoiF,WAAAr+E,OAAAhY,OAAAwjK,UAC/B,GAUA5tG,WAAA,SAAA6tG,GAEA,QAAAhkK,EAAA,EAAqBA,EAAAsR,KAAA0lF,UAAA9vF,OAAyBlH,IAE9C,GAAAsR,KAAA0lF,UAAAh3F,IAAAgkK,EACA,SAGA,OADA1yJ,KAAA0lF,UAAAxiF,KAAAwvJ,IACA,GAUAxtE,cAAA,SAAAwtE,GAEA,QAAAhkK,EAAA,EAAqBA,EAAAsR,KAAA0lF,UAAA9vF,OAAyBlH,IAE9C,GAAAsR,KAAA0lF,UAAAh3F,KAAAgkK,EAEA,OADA1yJ,KAAA0lF,UAAAzhF,OAAAvV,EAAA,IACA,EAGA,UAaAikK,QAAA,SAAAhvJ,EAAA1U,EAAAiS,EAAA0xJ,GAEA,QAAA1xJ,IAAA0xJ,IAEA5yJ,KAAAoyJ,OAAAlvJ,KAAA,CAA0BS,MAAA1U,OAAAiS,OAAA0xJ,cAC1B,KAUA1tJ,KAAA,SAAAvB,EAAAzC,EAAAqgD,EAAAv8C,EAAA8I,GAEA,IAAAjT,EAAA,CAAqBoL,MAAAksJ,EAAAr3J,QAAAK,GAAAO,YACrBwF,IACArG,EAAAqG,QAEA,IAAAgE,EAAAitJ,EAAAn3J,IAAA,CAAmChF,KAAAgK,KAAA2U,YAAAhR,IACnCwP,GAAAxP,EAAAsD,KAAA,QAA4ClY,EAAA,QAAA8L,GAC5CmF,KAAA2U,YAAArG,OAAApJ,EAAAq8C,EAAAv8C,EAAA8I,IAUA+kJ,MAAA,SAAAlvJ,EAAAzC,EAAAqgD,EAAAv8C,EAAA8I,GAEA,IAAAjT,EAAA,CAAqBoL,MAAAksJ,EAAAr3J,QAAAK,GAAAQ,aACrBuF,IACArG,EAAAqG,QAEA,IAAA2xJ,EAAAV,EAAAn3J,IAAA,CAAoChF,KAAAgK,KAAA2U,YAAAhR,IACpCwP,GAAAxP,EAAAsD,KAAA,QAA4ClY,EAAA,QAAA8L,GAC5CmF,KAAA2U,YAAArG,OAAAukJ,EAAAtxG,EAAAv8C,EAAA8I,IAKAglJ,eAAA,SAAA5kJ,EAAA6kJ,GAEA,IAAA7rJ,EAAAgH,EAAAtL,aAAA,MACA5M,EAAAkY,EAAAtL,aAAA,QACAowJ,EAAAb,EAAAn3J,IAAA,CAAuCiM,KAAA,SAAAC,OAMvC,OAJA,OAAAlR,GACAg9J,EAAAn4J,MAAA,CAA4BsY,GAAAnd,IAG5Bg9J,EAAAjkK,EAAA,QAAAgkK,IAMAT,aAAA,SAAApkJ,GAEA,IAEAxf,EAFAwS,EAAAgN,EAAA8C,qBAAA,YAAApO,aAAA,QACA/H,EAAA,CAAqBoL,MAAAksJ,EAAAr3J,QAAAK,GAAAO,YAErBwF,IAEArG,EAAAqG,QAEA,IAAA8xJ,EAAAhzJ,KAAA8yJ,eAAA5kJ,EAAArT,GACA,IAAAnM,EAAA,EAAiBA,EAAAsR,KAAAylF,YAAA7vF,OAA2BlH,IAE5CmM,EAAA,CAAqByqF,SAAAtlF,KAAAylF,YAAA/2F,GAAA42F,SACrBr+E,KAAAjH,KAAAylF,YAAA/2F,GAAAuY,MACAjH,KAAAylF,YAAA/2F,GAAAO,OACA4L,EAAA5L,KAAA+Q,KAAAylF,YAAA/2F,GAAAO,MACA+Q,KAAAylF,YAAA/2F,GAAA+jK,OACA53J,EAAA,YAAAmF,KAAAylF,YAAA/2F,GAAA+jK,MACAO,EAAAjkK,EAAA,WAAA8L,GAAAsL,KAEA,IAAAzX,EAAA,EAAiBA,EAAAsR,KAAA0lF,UAAA9vF,OAAyBlH,IAE1CskK,EAAAjkK,EAAA,WAAmC2zI,IAAA1iI,KAAA0lF,UAAAh3F,KAAwByX,KAG3D,OADAnG,KAAA2U,YAAApH,KAAAylJ,EAAA3tJ,SACA,GAKAktJ,cAAA,SAAArkJ,GAEA,IAEA2kJ,EAAAnkK,EAFAqkK,EAAA,CAA2B9sJ,MAAAksJ,EAAAr3J,QAAAK,GAAAQ,aAC3BuF,EAAAgN,EAAA8C,qBAAA,YAAApO,aAAA,QAEA,GAAA1B,GAIA,IAFA6xJ,EAAA7xJ,OACA2xJ,EAAA,GACAnkK,EAAA,EAAuBA,EAAAsR,KAAAoyJ,OAAAx8J,OAAwBlH,IAE/C,GAAAsR,KAAAoyJ,OAAA1jK,GAAAwS,QACA,CACA2xJ,EAAA7yJ,KAAAoyJ,OAAA1jK,GAAAkkK,UAAA1kJ,GACA,YAMA2kJ,EAAA7yJ,KAAAoyJ,OAEA,IAAAY,EAAAhzJ,KAAA8yJ,eAAA5kJ,EAAA6kJ,GACA,IAAArkK,EAAA,EAAmBA,EAAAmkK,EAAAj9J,OAAkBlH,IACrC,CACA,IAAAmM,EAAA,CAAyB8I,IAAAkvJ,EAAAnkK,GAAAiV,KACzBkvJ,EAAAnkK,GAAAO,OACA4L,EAAA5L,KAAA4jK,EAAAnkK,GAAAO,MACA4jK,EAAAnkK,GAAAwS,OACArG,EAAAqG,KAAA2xJ,EAAAnkK,GAAAwS,MACA8xJ,EAAAjkK,EAAA,OAAA8L,GAAAsL,KAGA,OADAnG,KAAA2U,YAAApH,KAAAylJ,EAAA3tJ,SACA,KAnO6DpX,CAAWO,EAAQ,sBCG/E,SAAA2jK,GAA+B,aAYhCA,EAAAr3J,QAAAiL,oBAAA,oBAKAktJ,SAAA,EAOAC,oCAAA,EAQAC,wBAAA,EAMAC,GAAA,KAMAC,IAAA,gBAMAC,4BAAA,EAQAC,gCAAA,KAQAC,+BAAA,KAMAC,0BAAA,KAQAC,mBAAA,KAMAC,gBAAA,KAMAC,iBAAA,KAKAC,8BAAA,EAMAC,cAAA,EAKAC,uBAAA,GAOAC,6BAAA,GAEAC,8BAAA,SAAA7vI,GACApkB,KAAAg0J,6BAAA9wJ,KAAAkhB,IAGAmjB,OAAA,SAAAr8B,GACA,IAAAlL,KAAA8zJ,aACA,UAAAp9J,MAAA,sDAEAsJ,KAAAozJ,GAAA7lJ,KAAA4kJ,EAAAv3J,OAAA,UAA6CqL,MAAAjG,KAAAqzJ,IAAAnoJ,YAC7ClL,KAAAozJ,GAAA1lJ,QACA1N,KAAAozJ,GAAAnoJ,SAGA+gD,eAAA,WACA,OAAAhsD,KAAAk0J,cAGA/L,cACA,OAAAnoJ,KAAA8zJ,cAGA5oJ,OAAA,WACA,IAAAlL,KAAAgsD,iBACA,UAAAt1D,MAAA,mBAIAsJ,KAAAozJ,GAAAjsJ,QAAA2M,yBAAA,EACA9T,KAAAm0J,WAAA,EAEAn0J,KAAAo0J,iBAAAzgI,MAAA3zB,KAAAozJ,GAAApzJ,KAAAq0J,eAGAC,uBAAA,WACAt0J,KAAA6zJ,8BAAA,EACA7zJ,KAAAozJ,GAAA7lJ,KAAA4kJ,EAAAv3J,OAAA,KAAwCqL,MAAAjG,KAAAqzJ,QAGxCkB,mBAAA,WACA,OAAAv0J,KAAAyzJ,2BAGAe,mBAAA,WACA,OAAAx0J,KAAAwzJ,gCAGA1oJ,KAAA,SAAAunJ,GACAryJ,KAAAozJ,GAAAf,EACAF,EAAAr3J,QAAA0E,aAAA,KAAAQ,KAAAqzJ,KAGArzJ,KAAA0zJ,mBAAA1zJ,KAAAozJ,GAAAjmJ,UACAnN,KAAAozJ,GAAAjmJ,UAAAnN,KAAAmN,UAAAjd,KAAA8P,MAEAA,KAAAo0J,iBAAAp0J,KAAAozJ,GAAAznJ,QACA3L,KAAAozJ,GAAAznJ,QAAA3L,KAAAy0J,sBAAAvkK,KAAA8P,MAEAA,KAAA00J,mCAAA10J,KAAAozJ,GAAAv/I,2BACA7T,KAAAozJ,GAAAv/I,2BAAA7T,KAAA6T,2BAAA3jB,KAAA8P,MAEAA,KAAA20J,sBAAA30J,KAAAozJ,GAAApjJ,cACAhQ,KAAAozJ,GAAApjJ,cAAAhQ,KAAA40J,uBAAA1kK,KAAA8P,MAEAA,KAAA60J,oBAAA70J,KAAAozJ,GAAA3jJ,WACAzP,KAAAozJ,GAAA3jJ,WAAAzP,KAAA80J,qBAAA5kK,KAAA8P,OAGA80J,qBAAA,WACA90J,KAAAk0J,kBAAA3zJ,EACAP,KAAA60J,oBAAAlhI,MAAA3zB,KAAAozJ,GAAAjyJ,YAGAyzJ,uBAAA,WACA50J,KAAAgsD,mBACAhsD,KAAAm0J,WACAn0J,KAAAozJ,GAAAtpJ,YAAA9J,KAAAozJ,GAAArpJ,gBACA/J,KAAA+0J,aAAA,CACA5rJ,SAAAnJ,KAAAozJ,GAAAjqJ,SACAD,cAAAlJ,KAAAozJ,GAAAlqJ,cACAE,aAAApJ,KAAAozJ,GAAAhqJ,aACAC,eAAArJ,KAAAozJ,GAAA/pJ,eACAC,UAAAtJ,KAAAozJ,GAAA9pJ,UACAC,YAAAvJ,KAAAozJ,GAAA7pJ,aAEAvJ,KAAAg1J,WAAAh1J,KAAAozJ,GAAAzvJ,IAEA3D,KAAAizJ,SAAAd,EAAAr3J,QAAAmK,MAAA,0CAAAjF,KAAA+0J,aAAA5rJ,SAAAvT,SAGAoK,KAAA20J,sBAAAhhI,MAAA3zB,KAAAozJ,GAAAjyJ,YAGAszJ,sBAAA,WACAz0J,KAAAq0J,aAAAlzJ,UAEAnB,KAAAo0J,iBAAAzgI,MAAA3zB,KAAAozJ,GAAAjyJ,YAGA0S,2BAAA,SAAAnU,GAGA,OAFAM,KAAA8zJ,aAAAp0J,EAAA8R,uBAAAxR,KAAAqzJ,IAAA,MAAAz9J,OAAA,EAEAoK,KAAA00J,mCAAA/gI,MAAA3zB,KAAAozJ,GAAAjyJ,YAGAiP,cAAA,SAAAH,GACA,GAAAjQ,KAAAgsD,kBACA/7C,IAAAkiJ,EAAAr3J,QAAA2C,OAAAM,WAAAkS,IAAAkiJ,EAAAr3J,QAAA2C,OAAAO,aAqCI,GAAAiS,IAAAkiJ,EAAAr3J,QAAA2C,OAAAY,aAAA,CACJ2B,KAAAozJ,GAAAzvJ,IAAA3D,KAAAg1J,WAGA,UAAA3kK,KAAA2P,KAAA+0J,aACA/0J,KAAAozJ,GAAA/iK,GAAA2P,KAAA+0J,aAAA1kK,GAIA2P,KAAAozJ,GAAA7lJ,KAAA4kJ,EAAAv3J,OAAA,UACAqL,MAAAjG,KAAAqzJ,IACAzsJ,EAAA5G,KAAAwzJ,+BACAyB,OAAAj1J,KAAAk0J,gBAEAl0J,KAAAozJ,GAAA1lJ,aACIuC,IAAAkiJ,EAAAr3J,QAAA2C,OAAAC,QACJsC,KAAAizJ,SAAAd,EAAAr3J,QAAAmK,MAAA,oCACAjF,KAAAk0J,kBAAA3zJ,QArDAP,KAAAizJ,SAAAd,EAAAr3J,QAAAmK,MAAA,kBAEAjF,KAAAuzJ,gCAAA,EACAvzJ,KAAAwzJ,+BAAA,EAEAxzJ,KAAAyzJ,0BAAA,EAEAzzJ,KAAAszJ,4BAAA,EACAtzJ,KAAA6zJ,8BAAA,EAGA7zJ,KAAAm0J,WAAA,EAEAlkJ,IAAAkiJ,EAAAr3J,QAAA2C,OAAAO,eACAgC,KAAA8zJ,cAAA,GAGA9zJ,KAAA+zJ,uBAAA,GAEA/zJ,KAAA2zJ,iBACA3zJ,KAAAozJ,GAAA/kJ,cAAArO,KAAA2zJ,iBAGA3zJ,KAAA4zJ,kBACA5zJ,KAAAozJ,GAAA/kJ,cAAArO,KAAA4zJ,kBAGA5zJ,KAAA2zJ,gBAAA3zJ,KAAAozJ,GAAAnlJ,WAAAjO,KAAAk1J,4BAAAhlK,KAAA8P,WAAAqzJ,IAAA,KACArzJ,KAAAm1J,YAAAn1J,KAAAozJ,GAAAnlJ,WAAAjO,KAAAo1J,iBAAAllK,KAAA8P,WAAAqzJ,IAAA,KACArzJ,KAAA4zJ,iBAAA5zJ,KAAAozJ,GAAAnlJ,WAAAjO,KAAAq1J,uBAAAnlK,KAAA8P,OAGAA,KAAAs1J,gBAAAt1J,KAAAozJ,GAAA/gJ,eAAArS,KAAAu1J,eAAArlK,KAAA8P,WAAAqzJ,IAAA,WACArzJ,KAAAw1J,qBAAAx1J,KAAAozJ,GAAA/gJ,eAAArS,KAAAy1J,oBAAAvlK,KAAA8P,WAAAqzJ,IAAA,UACArzJ,KAAA01J,gBAAA11J,KAAAozJ,GAAA/gJ,eAAArS,KAAA21J,eAAAzlK,KAAA8P,WAAAqzJ,IAAA,YA8BAlmJ,UAAA,SAAAzN,GAOA,OANAyyJ,EAAAr3J,QAAAmF,WAAAP,EAAA,OACAyyJ,EAAAr3J,QAAAmF,WAAAP,EAAA,aACAyyJ,EAAAr3J,QAAAmF,WAAAP,EAAA,aACAM,KAAA41J,4BAAAl2J,GAGAM,KAAA0zJ,mBAAA7kK,KAAAmR,KAAAozJ,GAAA1zJ,IAGA61J,eAAA,SAAA71J,GAOA,OANAM,KAAAszJ,4BAAA,EAEAtzJ,KAAAk0J,aAAA,SAAAx0J,EAAAkD,aAAA,WAAAlD,EAAAkD,aAAA,MAEA5C,KAAAozJ,GAAAloJ,UAEA,GAGAuqJ,oBAAA,SAAA/1J,GACA,MAAAsF,EAAAtF,KAAAm2J,mBAAAn2J,EAAAm2J,kBAAA11J,QAKA,OAHAH,KAAAozJ,GAAAhnJ,qBAAA+lJ,EAAAr3J,QAAA2C,OAAAC,MAAAsH,EAAAtF,GACAM,KAAAozJ,GAAApjJ,iBAEA,GAGA2lJ,eAAA,SAAAj2J,GAEA,IAAAo2J,EAAAh9I,SAAApZ,EAAAkD,aAAA,MAQA,GAPA5C,KAAA+1J,2BAAAD,EAAA91J,KAAAuzJ,iCAEAvzJ,KAAAm0J,WAAA,EACAn0J,KAAAozJ,GAAAnqJ,SAAA,EACAjJ,KAAAozJ,GAAAvpJ,eAAA,EACA7J,KAAAozJ,GAAAlpJ,UAAA,EAEAlK,KAAA+zJ,uBAAAn+J,OAAA,GACAoK,KAAAizJ,SAAAd,EAAAr3J,QAAAmK,MAAA,oCAAAjF,KAAA+zJ,wBACA,UAAA7lJ,KAAAlO,KAAA+zJ,uBACA/zJ,KAAAozJ,GAAA7lJ,KAAAW,QAGAlO,KAAAizJ,SAAAd,EAAAr3J,QAAAmK,MAAA,+BAAAjF,KAAA+zJ,wBAKA,OAFA/zJ,KAAAozJ,GAAAhnJ,qBAAA+lJ,EAAAr3J,QAAA2C,OAAAM,UAAA,OAEA,GAGAs3J,uBAAA,SAAA31J,GASA,OARAyyJ,EAAAr3J,QAAAmF,WAAAP,EAAA,OAAAyyJ,EAAAr3J,QAAAmF,WAAAP,EAAA,aAAAyyJ,EAAAr3J,QAAAmF,WAAAP,EAAA,cACAM,KAAAg2J,kCAEAh2J,KAAAkzJ,oCACAlzJ,KAAAi2J,4BAIA,GAGAF,2BAAA,SAAAG,EAAAC,GACA,IAAAC,EAAAF,EAAAC,EAEAC,EAAA,GACAp2J,KAAAq2J,YAAA,uDAAAH,EAAA,gBAAAC,GAGAC,EAAAp2J,KAAA+zJ,uBAAAn+J,QACAoK,KAAAq2J,YAAA,8FAAAD,EAAA,kCAAAp2J,KAAA+zJ,uBAAAn+J,OAAA,WAAAsgK,EAAA,gBAAAC,GAGA,QAAAznK,EAAA,EAAiBA,EAAA0nK,EAAW1nK,IAE5B,IADA,IAAAwf,EAAAlO,KAAA+zJ,uBAAA/lI,QACAz1B,EAAA,EAAmBA,EAAAyH,KAAAg0J,6BAAAp+J,OAA8C2C,IACjEyH,KAAAg0J,6BAAAz7J,GAAA2V,GAIAlO,KAAAizJ,SAAAjzJ,KAAA+zJ,uBAAAn+J,OAAA,GACAu8J,EAAAr3J,QAAAqK,KAAA,4BAAAnF,KAAA+zJ,wBAGA/zJ,KAAAuzJ,gCAAA2C,EAEAl2J,KAAAmzJ,wBAAA,IACAnzJ,KAAA6zJ,8BAAA,IAIAqB,4BAAA,WAGA,OAFAl1J,KAAAi2J,2BAEA,GAGAb,iBAAA,SAAA11J,GACA,IAAAo2J,EAAAh9I,SAAApZ,EAAAkD,aAAA,MAGA,OAFA5C,KAAA+1J,2BAAAD,EAAA91J,KAAAuzJ,kCAEA,GAGA0C,wBAAA,WACAj2J,KAAAszJ,4BACAtzJ,KAAAozJ,GAAA7lJ,KAAA4kJ,EAAAv3J,OAAA,KAAyCqL,MAAAjG,KAAAqzJ,IAAAzsJ,EAAA5G,KAAAwzJ,mCAIzCoC,4BAAA,SAAAl2J,GACA,GAAAM,KAAAszJ,2BAAA,CACA,QAAAtzJ,KAAA+zJ,uBAAAnwJ,QAAAlE,GAEA,OAGAM,KAAA+zJ,uBAAA7wJ,KAAAxD,GACAM,KAAAyzJ,4BAEAzzJ,KAAAmzJ,wBAAA,IACAnzJ,KAAA6zJ,gCAEA7zJ,KAAA6zJ,gCAAA7zJ,KAAAmzJ,yBAEA1oJ,WAAA,KACAzK,KAAAs0J,0BACO,MAMP0B,gCAAA,WACAh2J,KAAAszJ,4BACAtzJ,KAAAwzJ,kCAIA6C,YAAA,SAAAvxJ,GAEA,MADAqtJ,EAAAr3J,QAAAkK,MAAAF,GACA,IAAApO,MAAAoO,MAnb6D7W,CAAWO,EAAQ,sBCDhF,SAAAwG,GAAA,IAAAshK,OAAA,IAAAthK,MACA,oBAAAE,YACA5G,OACAqlC,EAAA+8B,SAAApgE,UAAAqjC,MAiBA,SAAA4iI,EAAArvJ,EAAAsvJ,GACAx2J,KAAAi/H,IAAA/3H,EACAlH,KAAAy2J,SAAAD,EAfAtoK,EAAAuc,WAAA,WACA,WAAA8rJ,EAAA5iI,EAAA9kC,KAAA4b,WAAA6rJ,EAAAn1J,WAAAwM,eAEAzf,EAAAs0C,YAAA,WACA,WAAA+zH,EAAA5iI,EAAA9kC,KAAA2zC,YAAA8zH,EAAAn1J,WAAA0+B,gBAEA3xC,EAAAyf,aACAzf,EAAA2xC,cAAA,SAAA/xB,GACAA,GACAA,EAAAmP,SAQAs5I,EAAAjmK,UAAAomK,MAAAH,EAAAjmK,UAAAqmK,IAAA,aACAJ,EAAAjmK,UAAA2sB,MAAA,WACAjd,KAAAy2J,SAAA5nK,KAAAynK,EAAAt2J,KAAAi/H,MAIA/wI,EAAA0oK,OAAA,SAAArjI,EAAAsjI,GACAlpJ,aAAA4lB,EAAAujI,gBACAvjI,EAAA5pB,aAAAktJ,GAGA3oK,EAAA6oK,SAAA,SAAAxjI,GACA5lB,aAAA4lB,EAAAujI,gBACAvjI,EAAA5pB,cAAA,GAGAzb,EAAA8oK,aAAA9oK,EAAA+uF,OAAA,SAAA1pD,GACA5lB,aAAA4lB,EAAAujI,gBAEA,IAAAD,EAAAtjI,EAAA5pB,aACAktJ,GAAA,IACAtjI,EAAAujI,eAAArsJ,WAAA,WACA8oB,EAAA0jI,YACA1jI,EAAA0jI,cACKJ,KAKLroK,EAAQ,KAIRN,EAAAu9I,aAAA,oBAAAv2I,WAAAu2I,mBACA,IAAAz2I,KAAAy2I,cACAzrI,WAAAyrI,aACAv9I,EAAAgpK,eAAA,oBAAAhiK,WAAAgiK,qBACA,IAAAliK,KAAAkiK,gBACAl3J,WAAAk3J,oDC9DA,SAAAliK,EAAAijF,IAAA,SAAAjjF,EAAAuL,GACA,aAEA,IAAAvL,EAAAy2I,aAAA,CAIA,IAIA0rB,EA6HAn1J,EAZAi4F,EArBAm9D,EACAC,EAjGAC,EAAA,EACAC,EAAA,GACAC,GAAA,EACAl3J,EAAAtL,EAAA0F,SAoJA+8J,EAAAroK,OAAAshF,gBAAAthF,OAAAshF,eAAA17E,GACAyiK,OAAAhtJ,WAAAgtJ,EAAAziK,EAGU,qBAAV,GAAUe,SAAAlH,KAAAmG,EAAAijF,SApFVk/E,EAAA,SAAAO,GACAz/E,EAAAe,SAAA,WAA0C2+E,EAAAD,OAI1C,WAGA,GAAA1iK,EAAA4iK,cAAA5iK,EAAA6iK,cAAA,CACA,IAAAC,GAAA,EACAC,EAAA/iK,EAAAunB,UAMA,OALAvnB,EAAAunB,UAAA,WACAu7I,GAAA,GAEA9iK,EAAA4iK,YAAA,QACA5iK,EAAAunB,UAAAw7I,EACAD,GAwEKE,GAIAhjK,EAAAijK,iBA9CLh+D,EAAA,IAAAg+D,gBACAC,MAAA37I,UAAA,SAAAmQ,GAEAirI,EADAjrI,EAAA1zB,OAIAm+J,EAAA,SAAAO,GACAz9D,EAAAk+D,MAAAP,YAAAF,KA2CKp3J,GAAA,uBAAAA,EAAAO,cAAA,WAtCLmB,EAAA1B,EAAA8W,gBACA+/I,EAAA,SAAAO,GAGA,IAAAp8E,EAAAh7E,EAAAO,cAAA,UACAy6E,EAAA7jE,mBAAA,WACAkgJ,EAAAD,GACAp8E,EAAA7jE,mBAAA,KACAzV,EAAAo2J,YAAA98E,GACAA,EAAA,MAEAt5E,EAAApB,YAAA06E,KAKA67E,EAAA,SAAAO,GACAjtJ,WAAAktJ,EAAA,EAAAD,KAlDAN,EAAA,gBAAA9rJ,KAAAC,SAAA,IACA8rJ,EAAA,SAAA3qI,GACAA,EAAAqJ,SAAA/gC,GACA,iBAAA03B,EAAA1zB,MACA,IAAA0zB,EAAA1zB,KAAA4K,QAAAwzJ,IACAO,GAAAjrI,EAAA1zB,KAAAqpC,MAAA+0H,EAAAxhK,UAIAZ,EAAAutC,iBACAvtC,EAAAutC,iBAAA,UAAA80H,GAAA,GAEAriK,EAAAyxI,YAAA,YAAA4wB,GAGAF,EAAA,SAAAO,GACA1iK,EAAA4iK,YAAAR,EAAAM,EAAA,OAgEAD,EAAAhsB,aA1KA,SAAA//H,GAEA,mBAAAA,IACAA,EAAA,IAAAglD,SAAA,GAAAhlD,IAIA,IADA,IAAAw8B,EAAA,IAAAzyC,MAAA0L,UAAAvL,OAAA,GACAlH,EAAA,EAAqBA,EAAAw5C,EAAAtyC,OAAiBlH,IACtCw5C,EAAAx5C,GAAAyS,UAAAzS,EAAA,GAGA,IAAA88I,EAAA,CAAkB9/H,WAAAw8B,QAGlB,OAFAqvH,EAAAD,GAAA9rB,EACA2rB,EAAAG,GACAA,KA6JAG,EAAAP,iBA1JA,SAAAA,EAAAQ,UACAH,EAAAG,GAyBA,SAAAC,EAAAD,GAGA,GAAAF,EAGA/sJ,WAAAktJ,EAAA,EAAAD,OACS,CACT,IAAAlsB,EAAA+rB,EAAAG,GACA,GAAAlsB,EAAA,CACAgsB,GAAA,EACA,KAjCA,SAAAhsB,GACA,IAAA9/H,EAAA8/H,EAAA9/H,SACAw8B,EAAAsjG,EAAAtjG,KACA,OAAAA,EAAAtyC,QACA,OACA8V,IACA,MACA,OACAA,EAAAw8B,EAAA,IACA,MACA,OACAx8B,EAAAw8B,EAAA,GAAAA,EAAA,IACA,MACA,OACAx8B,EAAAw8B,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,MACA,QACAx8B,EAAAioB,MAAApzB,EAAA2nC,IAiBAngC,CAAAyjI,GACiB,QACjB0rB,EAAAQ,GACAF,GAAA,MAvEA,CAyLC,oBAAAtiK,UAAA,IAAAF,EAAAgL,KAAAhL,EAAAE,8CCpKD/G,EAAOD,QATiB,SAASgoE,EAAMjnE,EAAM6mG,EAAWosD,GACpDliJ,KAAKk2D,KAAOA,EACZl2D,KAAK/Q,KAAOA,EACZ+Q,KAAK81F,UAAYA,EACjB91F,KAAKkiJ,UAAYA,oBCdrB,IAAMmW,EAAuBn3I,EAAQ,KAC/Bo3I,EAAOp3I,EAAQ,KACfygI,EAAgBzgI,EAAQ,IAKxBugI,EAAgB,WAElBzhJ,KAAKmnC,IAiHT,WACI,IAAM1iC,EAAU,2DAEhB,QAAyBlE,IAArBmzB,OAAO6kI,UACPxzJ,QAAQH,IAAIH,OACT,CACH,IAAM+zJ,EAAW9kI,OAAO6kI,UAExB,QAA0Bh4J,IAAtBi4J,EAASz0H,UAA0By0H,EAASz0H,SAAS,YACrD,OAAOy0H,EAEXzzJ,QAAQH,IAAIH,IA5HLg0J,IAMfhX,EAAcnxJ,UAAYlB,OAAOY,OAAOqoK,EAAqB/nK,WAK7DmxJ,EAAcnsJ,YAAcmsJ,EAS5BA,EAAcnxJ,UAAU6nJ,YAAc,SAASugB,EAAehtJ,GAC1D3G,QAAQH,IAAR,6BAAAvL,OAAyC2G,KAAKmnC,MAC9CpiC,QAAQH,IAAR,8BAAAvL,OAA0Cq/J,IAC1C,IAAM5sF,EAAU,IAAIv0D,eAEpBu0D,EAAQr0D,mBAAqB,WACzB,GAAIq0D,EAAQtyD,aAAejC,eAAeohJ,MAChB,MAAnB7sF,EAAQ77D,OACXvE,EAASogE,EAAQ12D,mBACd,GAAI02D,EAAQtyD,aAAejC,eAAeohJ,KAC7C,MAAM,IAAIjiK,MAAJ,yDAAA2C,OAEEyyE,EAAQ77D,UAKxB67D,EAAQvxD,KAAK,OAAQva,KAAKmnC,KAC1B2kC,EAAQrxD,iBAAiB,eACrBknI,EAAczrD,4BAClBpqB,EAAQv+D,KAAKmrJ,GACb3zJ,QAAQH,IAAR,QAAAvL,OAAoBq/J,KASxBjX,EAAcnxJ,UAAUsoK,eAAiB,SAAS/lJ,GAC9C,IAAMpN,EAASqH,KAAK4L,MAAM7F,GAAUgmJ,QAKpCpzJ,EAAOuoB,QACP,IAAMkD,EAAQ,GAOd,OALAzrB,EAAO6J,QACH,SAAAgzI,GAAI,OACAA,EAAKwW,QACE5nI,EAAMhuB,KAAK,IAAIo1J,EAAKhW,EAAKA,KAAMA,EAAK/kI,MAAO+kI,EAAKzvC,QAExD3hF,GAQXuwH,EAAcnxJ,UAAUyoK,OAAS,SAASlmJ,GAItC,GAHA9N,QAAQH,IAAR,wBAAAvL,OAAoCwZ,EAAS9c,aAGrB,iBAAb8c,EACP,OAAO,EAIX,IAAIg3C,EAEJ,IACIA,EAAO/8C,KAAK4L,MAAM7F,GACpB,MAAO7N,GAGL,OAFAD,QAAQH,IAAII,IAEL,EAIX,QAAqBzE,IAAjBspD,EAAKgvG,QACL,OAAO,EAIX,IAAM3nI,EAAQ24B,EAAKgvG,QAEnB,SAAM3nI,EAAM,KAAMA,EAAM,GAAG,gBA8B/B/iC,EAAOD,QAAUuzJ,iBCxIjB,IAAM4W,EAAuB,WACzB,MAAM,IAAI3hK,MAAM,0DAapB2hK,EAAqB/nK,UAAUid,KAAO,SAAci1I,EAAiB92I,GAAU,IAAA/D,EAAA3H,KAC3EA,KAAKm4I,YAAYqK,EAAgBtsF,KAAM,SAAArjD,GAC/BlL,EAAKoxJ,OAAOlmJ,GACZ2vI,EAAgBN,UAAYv6I,EAAKixJ,eAAe/lJ,IAEhD9N,QAAQH,IAAI,wDACZ49I,EAAgBN,UAAY,IAEhCx2I,EAAS82I,MAcjB6V,EAAqB/nK,UAAU6nJ,YAAc,SAAS6gB,EAAWttJ,GAC7D,MAAM,IAAIhV,MAAM,iDAmBpB2hK,EAAqB/nK,UAAUsoK,eAAiB,SAAS/lJ,GACrD,MAAM,IAAInc,MAAM,4CAUpB2hK,EAAqB/nK,UAAUyoK,OAAS,SAASlmJ,GAC7C,MAAM,IAAInc,MAAM,4CAGpBvI,EAAOD,QAAUmqK,iBCrEjB,IAAMC,EAAO,SAAShW,EAAMD,EAAOxvC,GAC/B7yG,KAAKsiJ,KAAOA,EACZtiJ,KAAKqiJ,MAAQA,EACbriJ,KAAK6yG,IAAMA,GAOfylD,EAAKhoK,UAAU2oK,QAAU,WACrB,OAAOj5J,KAAKsiJ,MAOhBgW,EAAKhoK,UAAU4oK,aAAe,WAC1B,OAAOl5J,KAAKqiJ,OAOhBiW,EAAKhoK,UAAU6oK,WAAa,WACxB,OAAOn5J,KAAK6yG,KAGhB1kH,EAAOD,QAAUoqK,ygEC1BjB,IAAAc,GAAA,EACAC,GAAA,EAUO,SAAAC,EAAAC,EAAA9J,EAAAjiH,GACP,MAAA/5B,EAAA8lJ,EAAA9lJ,MAAAg8I,GACA,OAAAh8I,KAAA7d,QAAA43C,GAAA10B,SAAArF,EAAA+5B,GAAA,IAMO,SAAAgsH,EAAAlrK,EAAAmrK,EAAA7lJ,GACP,IAAAtlB,EAAA+xC,kBACA,OAEA,MAAA53B,EAAAna,EAAA+xC,kBAAA/vC,UACAopK,EAAAjxJ,EAAA85B,iBACA95B,EAAA85B,iBAAA,SAAAo3H,EAAAxpB,GACA,GAAAwpB,IAAAF,EACA,OAAAC,EAAA/lI,MAAA3zB,KAAAmB,WAEA,MAAAmuI,EAAA52I,IACA,MAAAkhK,EAAAhmJ,EAAAlb,GACAkhK,GACAzpB,EAAAypB,IAKA,OAFA55J,KAAA65J,UAAA75J,KAAA65J,WAAA,GACA75J,KAAA65J,UAAA1pB,GAAAb,EACAoqB,EAAA/lI,MAAA3zB,KAAA,CAAA25J,EACArqB,KAGA,MAAAwqB,EAAArxJ,EAAAixC,oBACAjxC,EAAAixC,oBAAA,SAAAigH,EAAAxpB,GACA,GAAAwpB,IAAAF,IAAAz5J,KAAA65J,YACA75J,KAAA65J,UAAA1pB,GACA,OAAA2pB,EAAAnmI,MAAA3zB,KAAAmB,WAEA,MAAA44J,EAAA/5J,KAAA65J,UAAA1pB,GAEA,cADAnwI,KAAA65J,UAAA1pB,GACA2pB,EAAAnmI,MAAA3zB,KAAA,CAAA25J,EACAI,KAGA3qK,OAAAC,eAAAoZ,EAAA,KAAAgxJ,EAAA,CACAtR,MACA,OAAAnoJ,KAAA,MAAAy5J,IAEAtR,IAAAhY,GACAnwI,KAAA,MAAAy5J,KACAz5J,KAAA05C,oBAAA+/G,EACAz5J,KAAA,MAAAy5J,WACAz5J,KAAA,MAAAy5J,IAEAtpB,GACAnwI,KAAAuiC,iBAAAk3H,EACAz5J,KAAA,MAAAy5J,GAAAtpB,IAGA7gJ,YAAA,EACAgzG,cAAA,IAIO,SAAA03D,EAAAC,GACP,wBAAAA,EACA,IAAAvjK,MAAA,yBAAAujK,EACA,4BAEAb,EAAAa,EACA,gCACA,8BAOO,SAAAC,EAAAD,GACP,wBAAAA,EACA,IAAAvjK,MAAA,yBAAAujK,EACA,4BAEAZ,GAAAY,EACA,oCAAAA,EAAA,uBAGO,SAAAr1J,IACP,oBAAAtW,OAAA,CACA,GAAA8qK,EACA,OAEA,oBAAAr0J,SAAA,mBAAAA,QAAAH,KACAG,QAAAH,IAAA+uB,MAAA5uB,QAAA5D,YAQO,SAAAg5J,EAAAC,EAAAC,GACPhB,GAGAt0J,QAAAI,KAAAi1J,EAAA,8BAAAC,EACA,aASO,SAAAC,EAAAhsK,GACP,MAAAyxC,UAASA,GAAUzxC,EAGnBmX,EAAA,CAAkBgd,QAAA,KAAA/G,QAAA,MAGlB,YAAAptB,MAAAyxC,UAEA,OADAt6B,EAAAgd,QAAA,iBACAhd,EAGA,GAAAs6B,EAAAw6H,gBACA90J,EAAAgd,QAAA,UACAhd,EAAAiW,QAAA49I,EAAAv5H,EAAAmY,UACA,2BACG,GAAAnY,EAAAy6H,qBACH,IAAAlsK,EAAAmsK,iBAAAnsK,EAAAosK,0BACApsK,EAAAqiH,eAKAlrG,EAAAgd,QAAA,SACAhd,EAAAiW,QAAA49I,EAAAv5H,EAAAmY,UACA,gCACG,GAAAnY,EAAAC,cACHD,EAAAmY,UAAAzkC,MAAA,sBACAhO,EAAAgd,QAAA,OACAhd,EAAAiW,QAAA49I,EAAAv5H,EAAAmY,UACA,4BACG,KAAA5pD,EAAA+xC,oBACHN,EAAAmY,UAAAzkC,MAAA,wBAQA,OADAhO,EAAAgd,QAAA,2BACAhd,EAPAA,EAAAgd,QAAA,SACAhd,EAAAiW,QAAA49I,EAAAv5H,EAAAmY,UACA,0BACAzyC,EAAAk1J,oBAAArsK,EAAAmtG,mBACA,qBAAAntG,EAAAmtG,kBAAAnrG,UAMA,OAAAmV,EASA,SAAA8uC,EAAAqmH,GACA,0BAAAxrK,OAAAkB,UAAAyF,SAAAlH,KAAA+rK,GAQO,SAAAC,EAAA7hK,GACP,OAAAu7C,EAAAv7C,GAIA5J,OAAAmW,KAAAvM,GAAA0M,OAAA,SAAA2pE,EAAAp/E,GACA,MAAAqK,EAAAi6C,EAAAv7C,EAAA/I,IACAN,EAAA2K,EAAAugK,EAAA7hK,EAAA/I,IAAA+I,EAAA/I,GACA6qK,EAAAxgK,IAAAlL,OAAAmW,KAAA5V,GAAAiG,OACA,YAAA2K,IAAA5Q,GAAAmrK,EACAzrF,EAEAjgF,OAAAggG,OAAA/f,EAAA,CAAuC84E,CAAAl4J,GAAAN,KACpC,IAXHqJ,EAgCO,SAAA+hK,EAAAt1J,EAAAi/B,EAAAs2H,GACP,MAAAC,EAAAD,EAAA,6BACAE,EAAA,IAAA/4I,IACA,UAAAuiB,EACA,OAAAw2H,EAEA,MAAAC,EAAA,GAcA,OAbA11J,EAAA6J,QAAA3f,IACA,UAAAA,EAAAsX,MACAtX,EAAA09G,kBAAA3oE,EAAAx9B,IACAi0J,EAAAj4J,KAAAvT,KAGAwrK,EAAA7rJ,QAAA8rJ,IACA31J,EAAA6J,QAAAmc,IACAA,EAAAxkB,OAAAg0J,GAAAxvI,EAAA0xD,UAAAi+E,EAAAl0J,IAhCO,SAAAm0J,EAAA5vI,EAAAs3B,EAAAu4G,GACPv4G,IAAAu4G,EAAA30I,IAAAo8B,EAAA77C,MAGAo0J,EAAAx3I,IAAAi/B,EAAA77C,GAAA67C,GACA3zD,OAAAmW,KAAAw9C,GAAAzzC,QAAArgB,IACAA,EAAAssK,SAAA,MACAF,EAAA5vI,IAAAl8B,IAAAwzD,EAAA9zD,IAAAqsK,GACKrsK,EAAAssK,SAAA,QACLx4G,EAAA9zD,GAAAqgB,QAAApI,IACAm0J,EAAA5vI,IAAAl8B,IAAA2X,GAAAo0J,QAuBAD,CAAA51J,EAAAgmB,EAAAyvI,OAIAA,EC/OA,MAAMM,EAAU52J,EAET,SAAA62J,EAAAntK,GACP,MAAAyxC,EAAAzxC,KAAAyxC,UAEA,IAAAA,EAAAC,aACA,OAGA,MAAA07H,EAAyBpB,EAAmBhsK,GAE5CqtK,EAAA,SAAA5sK,GACA,oBAAAA,KAAA4rC,WAAA5rC,EAAA6rC,SACA,OAAA7rC,EAEA,MAAA6sK,EAAA,GA4CA,OA3CAxsK,OAAAmW,KAAAxW,GAAAugB,QAAArf,IACA,eAAAA,GAAA,aAAAA,GAAA,gBAAAA,EACA,OAEA,MAAAT,EAAA,iBAAAT,EAAAkB,GAAAlB,EAAAkB,GAAA,CAAyDwpC,MAAA1qC,EAAAkB,SACzDsQ,IAAA/Q,EAAAqsK,OAAA,iBAAArsK,EAAAqsK,QACArsK,EAAAyrB,IAAAzrB,EAAAkqC,IAAAlqC,EAAAqsK,OAEA,MAAAC,EAAA,SAAAhrH,EAAA7hD,GACA,OAAA6hD,EACAA,EAAA7hD,EAAA+I,OAAA,GAAAg/D,cAAA/nE,EAAAozC,MAAA,GAEA,aAAApzC,EAAA,WAAAA,GAEA,QAAAsR,IAAA/Q,EAAAiqC,MAAA,CACAmiI,EAAAhhI,SAAAghI,EAAAhhI,UAAA,GACA,IAAAmhI,EAAA,GACA,iBAAAvsK,EAAAiqC,OACAsiI,EAAAD,EAAA,MAAA7rK,IAAAT,EAAAiqC,MACAmiI,EAAAhhI,SAAA13B,KAAA64J,IACAA,EAAA,IACAD,EAAA,MAAA7rK,IAAAT,EAAAiqC,MACAmiI,EAAAhhI,SAAA13B,KAAA64J,KAEAA,EAAAD,EAAA,GAAA7rK,IAAAT,EAAAiqC,MACAmiI,EAAAhhI,SAAA13B,KAAA64J,SAGAx7J,IAAA/Q,EAAAqsK,OAAA,iBAAArsK,EAAAqsK,OACAD,EAAAjhI,UAAAihI,EAAAjhI,WAAA,GACAihI,EAAAjhI,UAAAmhI,EAAA,GAAA7rK,IAAAT,EAAAqsK,OAEA,cAAAvsJ,QAAA0sJ,SACAz7J,IAAA/Q,EAAAwsK,KACAJ,EAAAjhI,UAAAihI,EAAAjhI,WAAA,GACAihI,EAAAjhI,UAAAmhI,EAAAE,EAAA/rK,IAAAT,EAAAwsK,QAKAjtK,EAAAktK,WACAL,EAAAhhI,UAAAghI,EAAAhhI,UAAA,IAAAvhC,OAAAtK,EAAAktK,WAEAL,GAGAM,EAAA,SAAA5xI,EAAA1qB,GACA,GAAA87J,EAAAhgJ,SAAA,GACA,OAAA9b,EAAA0qB,GAGA,IADAA,EAAAxd,KAAA4L,MAAA5L,KAAA8L,UAAA0R,MACA,iBAAAA,EAAAkQ,MAAA,CACA,MAAA2hI,EAAA,SAAA/mK,EAAA2B,EAAAC,GACAD,KAAA3B,KAAA4B,KAAA5B,KACAA,EAAA4B,GAAA5B,EAAA2B,UACA3B,EAAA2B,KAIAolK,GADA7xI,EAAAxd,KAAA4L,MAAA5L,KAAA8L,UAAA0R,KACAkQ,MAAA,yCACA2hI,EAAA7xI,EAAAkQ,MAAA,2CACAlQ,EAAAkQ,MAAAmhI,EAAArxI,EAAAkQ,OAEA,GAAAlQ,GAAA,iBAAAA,EAAAiP,MAAA,CAEA,IAAA6iI,EAAA9xI,EAAAiP,MAAAyB,WACAohI,MAAA,iBAAAA,IAAA,CAA2D3iI,MAAA2iI,IAC3D,MAAAC,EAAAX,EAAAhgJ,QAAA,GAEA,GAAA0gJ,IAAA,SAAAA,EAAAP,OAAA,gBAAAO,EAAAP,OACA,SAAAO,EAAA3iI,OAAA,gBAAA2iI,EAAA3iI,UACAsG,EAAAC,aAAAs8H,0BACAv8H,EAAAC,aAAAs8H,0BAAAthI,YACAqhI,GAAA,CAEA,IAAA7oJ,EAMA,UAPA8W,EAAAiP,MAAAyB,WAEA,gBAAAohI,EAAAP,OAAA,gBAAAO,EAAA3iI,MACAjmB,EAAA,gBACS,SAAA4oJ,EAAAP,OAAA,SAAAO,EAAA3iI,QACTjmB,EAAA,WAEAA,EAEA,OAAAusB,EAAAC,aAAAF,mBACAG,KAAA6D,IAEA,IAAAy4H,GADAz4H,IAAA9S,OAAAhiC,GAAA,eAAAA,EAAAwvC,OACAjN,KAAAviC,GAAAwkB,EAAAywE,KAAAxwE,GACAzkB,EAAAswC,MAAA38B,cAAAohC,SAAAtwB,KAUA,OATA8oJ,GAAAz4H,EAAAluC,QAAA4d,EAAAuwB,SAAA,UACAw4H,EAAAz4H,IAAAluC,OAAA,IAEA2mK,IACAjyI,EAAAiP,MAAAuB,SAAAshI,EAAAP,MAAA,CAAyDA,MAAAU,EAAAzhI,UACzD,CAAyDrB,MAAA8iI,EAAAzhI,WAEzDxQ,EAAAiP,MAAAoiI,EAAArxI,EAAAiP,OACYiiI,EAAO,WAAA1uJ,KAAA8L,UAAA0R,IACnB1qB,EAAA0qB,KAIAA,EAAAiP,MAAAoiI,EAAArxI,EAAAiP,OAGA,OADIiiI,EAAO,WAAA1uJ,KAAA8L,UAAA0R,IACX1qB,EAAA0qB,IAGAkyI,EAAA,SAAA9jK,GACA,OAAAgjK,EAAAhgJ,SAAA,GACAhjB,EAEA,CACAzJ,KAAA,CACAwtK,sBAAA,kBACAC,yBAAA,kBACAztD,kBAAA,kBACA0tD,qBAAA,gBACAC,4BAAA,uBACAC,gBAAA,mBACAC,+BAAA,kBACAC,wBAAA,kBACAC,gBAAA,aACAC,mBAAA,aACAC,mBAAA,cACOxkK,EAAAzJ,OAAAyJ,EAAAzJ,KACPwV,QAAA/L,EAAA+L,QACA+qC,WAAA92C,EAAA82C,YAAA92C,EAAA2xB,eACA89H,WACA,OAAAnoJ,KAAA/Q,MAAA+Q,KAAAyE,SAAA,MAAAzE,KAAAyE,WAmBA,GALAs7B,EAAAwD,aATA,SAAAjZ,EAAA5W,EAAAuxH,GACAi3B,EAAA5xI,EAAAv7B,IACAgxC,EAAAy6H,mBAAAzrK,EAAA2kB,EAAAhb,IACAusI,GACAA,EAAAu3B,EAAA9jK,SAKAxI,KAAA6vC,GAKAA,EAAAC,aAAAuD,aAAA,CACA,MAAA45H,EAAAp9H,EAAAC,aAAAuD,aACArzC,KAAA6vC,EAAAC,cACAD,EAAAC,aAAAuD,aAAA,SAAA5b,GACA,OAAAu0I,EAAAv0I,EAAA54B,GAAAouK,EAAApuK,GAAAkxC,KAAAhc,IACA,GAAAl1B,EAAAyrC,QAAAvW,EAAA+Z,iBAAApoC,QACA7G,EAAAwqC,QAAAtV,EAAAia,iBAAAtoC,OAIA,MAHAquB,EAAAmiB,YAAA92B,QAAAo1B,IACAA,EAAAle,SAEA,IAAA42I,aAAA,oBAEA,OAAAn5I,GACOvrB,GAAA0qC,QAAAE,OAAAk5H,EAAA9jK,QCjLA,SAAA2kK,EAAA/uK,EAAAgvK,GACPhvK,EAAAyxC,UAAAC,cACA,oBAAA1xC,EAAAyxC,UAAAC,cAGA1xC,EAAAyxC,UAAA,eAKA,mBAAAu9H,EAKAhvK,EAAAyxC,UAAAC,aAAA8vB,gBACA,SAAAxlC,GACA,OAAAgzI,EAAAhzI,GACA2V,KAAAlF,IACA,MAAAwiI,EAAAjzI,EAAAiP,OAAAjP,EAAAiP,MAAAmC,MACA8hI,EAAAlzI,EAAAiP,OACAjP,EAAAiP,MAAAC,OACAikI,EAAAnzI,EAAAiP,OACAjP,EAAAiP,MAAAsD,UAcA,OAbAvS,EAAAiP,MAAA,CACAoB,UAAA,CACAyC,kBAAA,UACAC,oBAAAtC,EACAQ,aAAAkiI,GAAA,IAGAF,IACAjzI,EAAAiP,MAAAoB,UAAAkB,SAAA0hI,GAEAC,IACAlzI,EAAAiP,MAAAoB,UAAAmB,UAAA0hI,GAEAlvK,EAAAyxC,UAAAC,aAAAuD,aAAAjZ,MA1BAvlB,QAAAC,MAAA,gECLO,SAAA04J,EAAApvK,GACPA,EAAAgzC,YAAAhzC,EAAAgzC,aAAAhzC,EAAAqvK,kBAGO,SAAAC,EAAAtvK,GACP,oBAAAA,MAAA+xC,mBAAA,YACA/xC,EAAA+xC,kBAAA/vC,UA8DIkpK,EAA6BlrK,EAAA,QAAAoK,IACjCA,EAAAmkE,aACAztE,OAAAC,eAAAqJ,EAAA,cACA,CAAW/I,MAAA,CAAQ03F,SAAA3uF,EAAA2uF,YAEnB3uF,QAnEA,CACAtJ,OAAAC,eAAAf,EAAA+xC,kBAAA/vC,UAAA,WACA63J,MACA,OAAAnoJ,KAAA69J,UAEA1V,IAAApkD,GACA/jG,KAAA69J,UACA79J,KAAA05C,oBAAA,QAAA15C,KAAA69J,UAEA79J,KAAAuiC,iBAAA,QAAAviC,KAAA69J,SAAA95D,IAEAz0G,YAAA,EACAgzG,cAAA,IAEA,MAAAw7D,EACAxvK,EAAA+xC,kBAAA/vC,UAAAs4E,qBACAt6E,EAAA+xC,kBAAA/vC,UAAAs4E,qBACA,WAuCA,OAtCA5oE,KAAA+9J,eACA/9J,KAAA+9J,aAAA,CAAArlK,IAGAA,EAAAurB,OAAAse,iBAAA,WAAAy7H,IACA,IAAA32E,EAEAA,EADA/4F,EAAA+xC,kBAAA/vC,UAAAmiH,aACAzyG,KAAAyyG,eACAlhF,KAAA/hC,KAAAk1C,OAAAl1C,EAAAk1C,MAAAx9B,KAAA82J,EAAAt5H,MAAAx9B,IAEA,CAA4Bw9B,MAAAs5H,EAAAt5H,OAG5B,MAAAhY,EAAA,IAAAgjF,MAAA,SACAhjF,EAAAgY,MAAAs5H,EAAAt5H,MACAhY,EAAA26D,WACA36D,EAAAmwC,YAAA,CAAmCwqB,YACnC36D,EAAAuX,QAAA,CAAAvrC,EAAAurB,QACAjkB,KAAAsvG,cAAA5iF,KAEAh0B,EAAAurB,OAAAmiB,YAAA92B,QAAAo1B,IACA,IAAA2iD,EAEAA,EADA/4F,EAAA+xC,kBAAA/vC,UAAAmiH,aACAzyG,KAAAyyG,eACAlhF,KAAA/hC,KAAAk1C,OAAAl1C,EAAAk1C,MAAAx9B,KAAAw9B,EAAAx9B,IAEA,CAA4Bw9B,SAE5B,MAAAhY,EAAA,IAAAgjF,MAAA,SACAhjF,EAAAgY,QACAhY,EAAA26D,WACA36D,EAAAmwC,YAAA,CAAmCwqB,YACnC36D,EAAAuX,QAAA,CAAAvrC,EAAAurB,QACAjkB,KAAAsvG,cAAA5iF,OAGA1sB,KAAAuiC,iBAAA,YAAAviC,KAAA+9J,eAEAD,EAAAnqI,MAAA3zB,KAAAmB,aAgBO,SAAA88J,EAAA3vK,GAEP,oBAAAA,KAAA+xC,qBACA,eAAA/xC,EAAA+xC,kBAAA/vC,YACA,qBAAAhC,EAAA+xC,kBAAA/vC,UAAA,CACA,MAAA4tK,EAAA,SAAAv/G,EAAAja,GACA,OACAA,QACAs6E,WAQA,YAPAz+G,IAAAP,KAAAm+J,QACA,UAAAz5H,EAAAlG,KACAx+B,KAAAm+J,MAAAx/G,EAAAugE,iBAAAx6E,GAEA1kC,KAAAm+J,MAAA,MAGAn+J,KAAAm+J,OAEAC,IAAAz/G,IAKA,IAAArwD,EAAA+xC,kBAAA/vC,UAAAkiH,WAAA,CACAlkH,EAAA+xC,kBAAA/vC,UAAAkiH,WAAA,WAEA,OADAxyG,KAAAq+J,SAAAr+J,KAAAq+J,UAAA,GACAr+J,KAAAq+J,SAAAh8H,SAEA,MAAAi8H,EAAAhwK,EAAA+xC,kBAAA/vC,UAAAg0C,SACAh2C,EAAA+xC,kBAAA/vC,UAAAg0C,SACA,SAAAI,EAAAzgB,GACA,IAAAujE,EAAA82E,EAAA3qI,MAAA3zB,KAAAmB,WAKA,OAJAqmF,IACAA,EAAA02E,EAAAl+J,KAAA0kC,GACA1kC,KAAAq+J,SAAAn7J,KAAAskF,IAEAA,GAGA,MAAA+2E,EAAAjwK,EAAA+xC,kBAAA/vC,UAAAm+F,YACAngG,EAAA+xC,kBAAA/vC,UAAAm+F,YACA,SAAAjH,GACA+2E,EAAA5qI,MAAA3zB,KAAAmB,WACA,MAAAovC,EAAAvwC,KAAAq+J,SAAAz6J,QAAA4jF,IACA,IAAAj3C,GACAvwC,KAAAq+J,SAAAp6J,OAAAssC,EAAA,IAIA,MAAAiuH,EAAAlwK,EAAA+xC,kBAAA/vC,UAAAg3F,UACAh5F,EAAA+xC,kBAAA/vC,UAAAg3F,UAAA,SAAArjE,GACAjkB,KAAAq+J,SAAAr+J,KAAAq+J,UAAA,GACAG,EAAA7qI,MAAA3zB,KAAA,CAAAikB,IACAA,EAAAmiB,YAAA92B,QAAAo1B,IACA1kC,KAAAq+J,SAAAn7J,KAAAg7J,EAAAl+J,KAAA0kC,OAIA,MAAA+5H,EAAAnwK,EAAA+xC,kBAAA/vC,UAAAiiH,aACAjkH,EAAA+xC,kBAAA/vC,UAAAiiH,aACA,SAAAtuF,GACAjkB,KAAAq+J,SAAAr+J,KAAAq+J,UAAA,GACAI,EAAA9qI,MAAA3zB,KAAA,CAAAikB,IAEAA,EAAAmiB,YAAA92B,QAAAo1B,IACA,MAAA8iD,EAAAxnF,KAAAq+J,SAAA9sI,KAAA9gC,KAAAi0C,WACA8iD,GACAxnF,KAAAq+J,SAAAp6J,OAAAjE,KAAAq+J,SAAAz6J,QAAA4jF,GAAA,WAIG,oBAAAl5F,KAAA+xC,mBACH,eAAA/xC,EAAA+xC,kBAAA/vC,WACA,qBAAAhC,EAAA+xC,kBAAA/vC,WACAhC,EAAA8jH,gBACA,SAAA9jH,EAAA8jH,aAAA9hH,WAAA,CACA,MAAAouK,EAAApwK,EAAA+xC,kBAAA/vC,UAAAkiH,WACAlkH,EAAA+xC,kBAAA/vC,UAAAkiH,WAAA,WACA,MAAAlgE,EAAAosH,EAAA/qI,MAAA3zB,KAAA,IAEA,OADAsyC,EAAAhjC,QAAAk4E,KAAA42E,IAAAp+J,MACAsyC,GAGAljD,OAAAC,eAAAf,EAAA8jH,aAAA9hH,UAAA,QACA63J,MAQA,YAPA5nJ,IAAAP,KAAAm+J,QACA,UAAAn+J,KAAA0kC,MAAAlG,KACAx+B,KAAAm+J,MAAAn+J,KAAAo+J,IAAAl/C,iBAAAl/G,KAAA0kC,OAEA1kC,KAAAm+J,MAAA,MAGAn+J,KAAAm+J,UAMO,SAAAQ,EAAArwK,GACP,IAAAA,EAAA+xC,kBACA,OAGA,MAAAu+H,EAAAtwK,EAAA+xC,kBAAA/vC,UAAAg4G,SACAh6G,EAAA+xC,kBAAA/vC,UAAAg4G,SAAA,WACA,MAAAyN,EAAA8oD,EAAAC,GAAA39J,UAIA,GAAAA,UAAAvL,OAAA,sBAAAmgH,EACA,OAAA6oD,EAAAjrI,MAAA3zB,KAAAmB,WAKA,OAAAy9J,EAAAhpK,SAAA,IAAAuL,UAAAvL,QACA,mBAAAmgH,GACA,OAAA6oD,EAAAjrI,MAAA3zB,KAAA,IAGA,MAAA++J,EAAA,SAAAlsJ,GACA,MAAAmsJ,EAAA,GAiBA,OAhBAnsJ,EAAApN,SACA6J,QAAAkvC,IACA,MAAAygH,EAAA,CACA/3J,GAAAs3C,EAAAt3C,GACAi4E,UAAA3gC,EAAA2gC,UACAl4E,KAAA,CACAyvG,eAAA,kBACAC,gBAAA,oBACWn4D,EAAAv3C,OAAAu3C,EAAAv3C,MAEXu3C,EAAAl5C,QAAAgK,QAAArgB,IACAgwK,EAAAhwK,GAAAuvD,EAAAoqD,KAAA35G,KAEA+vK,EAAAC,EAAA/3J,IAAA+3J,IAGAD,GAIAE,EAAA,SAAAzzI,GACA,WAAAtJ,IAAA/yB,OAAAmW,KAAAkmB,GAAAjmB,IAAAvV,GAAA,CAAAA,EAAAw7B,EAAAx7B,OAGA,GAAAkR,UAAAvL,QAAA,GACA,MAAAupK,EAAA,SAAAtsJ,GACAgsJ,EAAAK,EAAAH,EAAAlsJ,MAGA,OAAA+rJ,EAAAjrI,MAAA3zB,KAAA,CAAAm/J,EACAppD,IAIA,WAAA3yE,QAAA,CAAAC,EAAAC,KACAs7H,EAAAjrI,MAAA3zB,KAAA,CACA,SAAA6S,GACAwwB,EAAA67H,EAAAH,EAAAlsJ,MACSywB,MACJrD,KAAA4+H,EAAAC,IAIE,SAAAM,EAAA9wK,GACP,sBAAAA,KAAA+xC,mBACA/xC,EAAA8jH,cAAA9jH,EAAAmmH,gBACA,OAIA,kBAAAnmH,EAAA8jH,aAAA9hH,WAAA,CACA,MAAAouK,EAAApwK,EAAA+xC,kBAAA/vC,UAAAkiH,WACAksD,IACApwK,EAAA+xC,kBAAA/vC,UAAAkiH,WAAA,WACA,MAAAlgE,EAAAosH,EAAA/qI,MAAA3zB,KAAA,IAEA,OADAsyC,EAAAhjC,QAAAk4E,KAAA42E,IAAAp+J,MACAsyC,IAIA,MAAAgsH,EAAAhwK,EAAA+xC,kBAAA/vC,UAAAg0C,SACAg6H,IACAhwK,EAAA+xC,kBAAA/vC,UAAAg0C,SAAA,WACA,MAAAkjD,EAAA82E,EAAA3qI,MAAA3zB,KAAAmB,WAEA,OADAqmF,EAAA42E,IAAAp+J,KACAwnF,IAGAl5F,EAAA8jH,aAAA9hH,UAAAg4G,SAAA,WACA,MAAA9gB,EAAAxnF,KACA,OAAAA,KAAAo+J,IAAA91D,WAAAroE,KAAAx6B,GAKQs1J,EAAiBt1J,EAAA+hF,EAAA9iD,OAAA,KAKzB,kBAAAp2C,EAAAmmH,eAAAnkH,WAAA,CACA,MAAA+uK,EAAA/wK,EAAA+xC,kBAAA/vC,UAAAmiH,aACA4sD,IACA/wK,EAAA+xC,kBAAA/vC,UAAAmiH,aACA,WACA,MAAA6sD,EAAAD,EAAA1rI,MAAA3zB,KAAA,IAEA,OADAs/J,EAAAhwJ,QAAA+3E,KAAA+2E,IAAAp+J,MACAs/J,IAGI9F,EAA6BlrK,EAAA,QAAAoK,IACjCA,EAAA2uF,SAAA+2E,IAAA1lK,EAAA6mK,WACA7mK,IAEApK,EAAAmmH,eAAAnkH,UAAAg4G,SAAA,WACA,MAAAjhB,EAAArnF,KACA,OAAAA,KAAAo+J,IAAA91D,WAAAroE,KAAAx6B,GACQs1J,EAAiBt1J,EAAA4hF,EAAA3iD,OAAA,KAIzB,kBAAAp2C,EAAA8jH,aAAA9hH,WACA,aAAAhC,EAAAmmH,eAAAnkH,WACA,OAIA,MAAAsuK,EAAAtwK,EAAA+xC,kBAAA/vC,UAAAg4G,SACAh6G,EAAA+xC,kBAAA/vC,UAAAg4G,SAAA,WACA,GAAAnnG,UAAAvL,OAAA,GACAuL,UAAA,aAAA7S,EAAA0nH,iBAAA,CACA,MAAAtxE,EAAAvjC,UAAA,GACA,IAAAqmF,EACAH,EACAh3E,EAoBA,OAnBArQ,KAAAwyG,aAAAljG,QAAA7e,IACAA,EAAAi0C,YACA8iD,EACAn3E,GAAA,EAEAm3E,EAAA/2F,KAIAuP,KAAAyyG,eAAAnjG,QAAA9f,IACAA,EAAAk1C,YACA2iD,EACAh3E,GAAA,EAEAg3E,EAAA73F,GAGAA,EAAAk1C,YAEAr0B,GAAAm3E,GAAAH,EACAjkD,QAAAE,OAAA,IAAA85H,aACA,4DACA,uBACO51E,EACPA,EAAA8gB,WACOjhB,EACPA,EAAAihB,WAEAllE,QAAAE,OAAA,IAAA85H,aACA,gDACA,uBAEA,OAAAwB,EAAAjrI,MAAA3zB,KAAAmB,YAIO,SAAAq+J,EAAAlxK,GAIPA,EAAA+xC,kBAAA/vC,UAAAohH,gBACA,WAEA,OADA1xG,KAAAy/J,qBAAAz/J,KAAAy/J,sBAAA,GACArwK,OAAAmW,KAAAvF,KAAAy/J,sBACAj6J,IAAAqlC,GAAA7qC,KAAAy/J,qBAAA50H,GAAA,KAGA,MAAAyzH,EAAAhwK,EAAA+xC,kBAAA/vC,UAAAg0C,SACAh2C,EAAA+xC,kBAAA/vC,UAAAg0C,SACA,SAAAI,EAAAzgB,GACA,IAAAA,EACA,OAAAq6I,EAAA3qI,MAAA3zB,KAAAmB,WAEAnB,KAAAy/J,qBAAAz/J,KAAAy/J,sBAAA,GAEA,MAAAj4E,EAAA82E,EAAA3qI,MAAA3zB,KAAAmB,WAMA,OALAnB,KAAAy/J,qBAAAx7I,EAAA/c,KAEO,IAAAlH,KAAAy/J,qBAAAx7I,EAAA/c,IAAAtD,QAAA4jF,IACPxnF,KAAAy/J,qBAAAx7I,EAAA/c,IAAAhE,KAAAskF,GAFAxnF,KAAAy/J,qBAAAx7I,EAAA/c,IAAA,CAAA+c,EAAAujE,GAIAA,GAGA,MAAAg3E,EAAAlwK,EAAA+xC,kBAAA/vC,UAAAg3F,UACAh5F,EAAA+xC,kBAAA/vC,UAAAg3F,UAAA,SAAArjE,GACAjkB,KAAAy/J,qBAAAz/J,KAAAy/J,sBAAA,GAEAx7I,EAAAmiB,YAAA92B,QAAAo1B,IAEA,GADA1kC,KAAAwyG,aAAAjhF,KAAA9gC,KAAAi0C,WAEA,UAAA04H,aAAA,wBACA,wBAGA,MAAAsC,EAAA1/J,KAAAwyG,aACAgsD,EAAA7qI,MAAA3zB,KAAAmB,WACA,MAAAw+J,EAAA3/J,KAAAwyG,aACAxhF,OAAA4uI,IAAA,IAAAF,EAAA97J,QAAAg8J,IACA5/J,KAAAy/J,qBAAAx7I,EAAA/c,IAAA,CAAA+c,GAAA5qB,OAAAsmK,IAGA,MAAAlB,EAAAnwK,EAAA+xC,kBAAA/vC,UAAAiiH,aACAjkH,EAAA+xC,kBAAA/vC,UAAAiiH,aACA,SAAAtuF,GAGA,OAFAjkB,KAAAy/J,qBAAAz/J,KAAAy/J,sBAAA,UACAz/J,KAAAy/J,qBAAAx7I,EAAA/c,IACAu3J,EAAA9qI,MAAA3zB,KAAAmB,YAGA,MAAAo9J,EAAAjwK,EAAA+xC,kBAAA/vC,UAAAm+F,YACAngG,EAAA+xC,kBAAA/vC,UAAAm+F,YACA,SAAAjH,GAaA,OAZAxnF,KAAAy/J,qBAAAz/J,KAAAy/J,sBAAA,GACAj4E,GACAp4F,OAAAmW,KAAAvF,KAAAy/J,sBAAAnwJ,QAAAu7B,IACA,MAAA0F,EAAAvwC,KAAAy/J,qBAAA50H,GAAAjnC,QAAA4jF,IACA,IAAAj3C,GACAvwC,KAAAy/J,qBAAA50H,GAAA5mC,OAAAssC,EAAA,GAEA,IAAAvwC,KAAAy/J,qBAAA50H,GAAAj1C,eACAoK,KAAAy/J,qBAAA50H,KAIA0zH,EAAA5qI,MAAA3zB,KAAAmB,YAIO,SAAA0+J,EAAAvxK,GACP,IAAAA,EAAA+xC,kBACA,OAEA,MAAAq7H,EAAyBpB,EAAmBhsK,GAE5C,GAAAA,EAAA+xC,kBAAA/vC,UAAAg0C,UACAo3H,EAAAhgJ,SAAA,GACA,OAAA8jJ,EAAAlxK,GAKA,MAAAwxK,EAAAxxK,EAAA+xC,kBAAA/vC,UACAohH,gBACApjH,EAAA+xC,kBAAA/vC,UAAAohH,gBACA,WACA,MAAAquD,EAAAD,EAAAnsI,MAAA3zB,MAEA,OADAA,KAAAggK,gBAAAhgK,KAAAggK,iBAAA,GACAD,EAAAv6J,IAAAye,GAAAjkB,KAAAggK,gBAAA/7I,EAAA/c,MAGA,MAAAs3J,EAAAlwK,EAAA+xC,kBAAA/vC,UAAAg3F,UACAh5F,EAAA+xC,kBAAA/vC,UAAAg3F,UAAA,SAAArjE,GAaA,GAZAjkB,KAAAigK,SAAAjgK,KAAAigK,UAAA,GACAjgK,KAAAggK,gBAAAhgK,KAAAggK,iBAAA,GAEA/7I,EAAAmiB,YAAA92B,QAAAo1B,IAEA,GADA1kC,KAAAwyG,aAAAjhF,KAAA9gC,KAAAi0C,WAEA,UAAA04H,aAAA,wBACA,yBAKAp9J,KAAAggK,gBAAA/7I,EAAA/c,IAAA,CACA,MAAAg5J,EAAA,IAAA5xK,EAAAgzC,YAAArd,EAAAmiB,aACApmC,KAAAigK,SAAAh8I,EAAA/c,IAAAg5J,EACAlgK,KAAAggK,gBAAAE,EAAAh5J,IAAA+c,EACAA,EAAAi8I,EAEA1B,EAAA7qI,MAAA3zB,KAAA,CAAAikB,KAGA,MAAAw6I,EAAAnwK,EAAA+xC,kBAAA/vC,UAAAiiH,aA6DA,SAAA4tD,EAAAxhH,EAAAqb,GACA,IAAA1nC,EAAA0nC,EAAA1nC,IAOA,OANAljC,OAAAmW,KAAAo5C,EAAAqhH,iBAAA,IAAA1wJ,QAAA8wJ,IACA,MAAAC,EAAA1hH,EAAAqhH,gBAAAI,GACAE,EAAA3hH,EAAAshH,SAAAI,EAAAn5J,IACAorB,IAAA1wB,QAAA,IAAA0uE,OAAAgwF,EAAAp5J,GAAA,KACAm5J,EAAAn5J,MAEA,IAAAshE,sBAAA,CACAvhE,KAAA+yD,EAAA/yD,KACAqrB,QAtEAhkC,EAAA+xC,kBAAA/vC,UAAAiiH,aACA,SAAAtuF,GACAjkB,KAAAigK,SAAAjgK,KAAAigK,UAAA,GACAjgK,KAAAggK,gBAAAhgK,KAAAggK,iBAAA,GAEAvB,EAAA9qI,MAAA3zB,KAAA,CAAAA,KAAAigK,SAAAh8I,EAAA/c,KAAA+c,WACAjkB,KAAAggK,gBAAAhgK,KAAAigK,SAAAh8I,EAAA/c,IACAlH,KAAAigK,SAAAh8I,EAAA/c,OAAA+c,EAAA/c,WACAlH,KAAAigK,SAAAh8I,EAAA/c,KAGA5Y,EAAA+xC,kBAAA/vC,UAAAg0C,SACA,SAAAI,EAAAzgB,GACA,cAAAjkB,KAAA6hE,eACA,UAAAu7F,aACA,sDACA,qBAEA,MAAAn5H,EAAA,GAAA5B,MAAAxzC,KAAAsS,UAAA,GACA,OAAA8iC,EAAAruC,SACAquC,EAAA,GAAAmC,YAAA7U,KAAA3hC,OAAA80C,GAGA,UAAA04H,aACA,gHAEA,qBAIA,GADAp9J,KAAAwyG,aAAAjhF,KAAA9gC,KAAAi0C,WAEA,UAAA04H,aAAA,wBACA,sBAGAp9J,KAAAigK,SAAAjgK,KAAAigK,UAAA,GACAjgK,KAAAggK,gBAAAhgK,KAAAggK,iBAAA,GACA,MAAAO,EAAAvgK,KAAAigK,SAAAh8I,EAAA/c,IACA,GAAAq5J,EAKAA,EAAAj8H,SAAAI,GAGAtB,QAAAC,UAAApD,KAAA,KACAjgC,KAAAsvG,cAAA,IAAAI,MAAA,4BAEO,CACP,MAAAwwD,EAAA,IAAA5xK,EAAAgzC,YAAA,CAAAoD,IACA1kC,KAAAigK,SAAAh8I,EAAA/c,IAAAg5J,EACAlgK,KAAAggK,gBAAAE,EAAAh5J,IAAA+c,EACAjkB,KAAAsnF,UAAA44E,GAEA,OAAAlgK,KAAAwyG,aAAAjhF,KAAA9gC,KAAAi0C,YA+BA,+BAAAp1B,QAAA,SAAAu7E,GACA,MAAA+rB,EAAAtoH,EAAA+xC,kBAAA/vC,UAAAu6F,GACA21E,EAAA,CAAuBrY,CAAAt9D,KACvB,MAAA3iD,EAAA/mC,UAGA,OAFAA,UAAAvL,QACA,mBAAAuL,UAAA,GAEAy1G,EAAAjjF,MAAA3zB,KAAA,CACAg6D,IACA,MAAArqC,EAAAwwI,EAAAngK,KAAAg6D,GACA9xB,EAAA,GAAAvU,MAAA,MAAAhE,KAEAtf,IACA63B,EAAA,IACAA,EAAA,GAAAvU,MAAA,KAAAtjB,IAEWlP,UAAA,KAGXy1G,EAAAjjF,MAAA3zB,KAAAmB,WACA8+B,KAAA+5B,GAAAmmG,EAAAngK,KAAAg6D,MAEA1rE,EAAA+xC,kBAAA/vC,UAAAu6F,GAAA21E,EAAA31E,KAGA,MAAA41E,EACAnyK,EAAA+xC,kBAAA/vC,UAAA00E,oBACA12E,EAAA+xC,kBAAA/vC,UAAA00E,oBACA,WACA,OAAA7jE,UAAAvL,QAAAuL,UAAA,GAAA8F,MAGA9F,UAAA,GA7CA,SAAAw9C,EAAAqb,GACA,IAAA1nC,EAAA0nC,EAAA1nC,IAOA,OANAljC,OAAAmW,KAAAo5C,EAAAqhH,iBAAA,IAAA1wJ,QAAA8wJ,IACA,MAAAC,EAAA1hH,EAAAqhH,gBAAAI,GACAE,EAAA3hH,EAAAshH,SAAAI,EAAAn5J,IACAorB,IAAA1wB,QAAA,IAAA0uE,OAAA+vF,EAAAn5J,GAAA,KACAo5J,EAAAp5J,MAEA,IAAAshE,sBAAA,CACAvhE,KAAA+yD,EAAA/yD,KACAqrB,QAmCAouI,CAAA1gK,KAAAmB,UAAA,IACAs/J,EAAA9sI,MAAA3zB,KAAAmB,YAHAs/J,EAAA9sI,MAAA3zB,KAAAmB,YAQA,MAAAw/J,EAAAvxK,OAAAwxK,yBACAtyK,EAAA+xC,kBAAA/vC,UAAA,oBACAlB,OAAAC,eAAAf,EAAA+xC,kBAAA/vC,UACA,oBACA63J,MACA,MAAAnuF,EAAA2mG,EAAApxK,IAAAokC,MAAA3zB,MACA,WAAAg6D,EAAA/yD,KACA+yD,EAEAmmG,EAAAngK,KAAAg6D,MAIA1rE,EAAA+xC,kBAAA/vC,UAAAm+F,YACA,SAAAjH,GACA,cAAAxnF,KAAA6hE,eACA,UAAAu7F,aACA,sDACA,qBAIA,IAAA51E,EAAA42E,IACA,UAAAhB,aAAA,yFACA,aAGA,KADA51E,EAAA42E,MAAAp+J,MAEA,UAAAo9J,aAAA,6CACA,sBAKA,IAAAn5I,EADAjkB,KAAAigK,SAAAjgK,KAAAigK,UAAA,GAEA7wK,OAAAmW,KAAAvF,KAAAigK,UAAA3wJ,QAAAmjF,IACAzyF,KAAAigK,SAAAxtE,GAAArsD,YACA7U,KAAAmT,GAAA8iD,EAAA9iD,aAEAzgB,EAAAjkB,KAAAigK,SAAAxtE,MAIAxuE,IACA,IAAAA,EAAAmiB,YAAAxwC,OAGAoK,KAAAuyG,aAAAvyG,KAAAggK,gBAAA/7I,EAAA/c,KAGA+c,EAAAwqE,YAAAjH,EAAA9iD,OAEA1kC,KAAAsvG,cAAA,IAAAI,MAAA,wBAKO,SAAAmxD,EAAAvyK,GACP,MAAAotK,EAAyBpB,EAAmBhsK,GAM5C,IAJAA,EAAA+xC,mBAAA/xC,EAAAosK,0BAEApsK,EAAA+xC,kBAAA/xC,EAAAosK,0BAEApsK,EAAA+xC,kBACA,OAGA,MAAAygI,EACA,IAAAxyK,EAAA+xC,kBAAA/vC,UAAA6zE,gBAAAvuE,OAGA8lK,EAAAhgJ,QAAA,IACA,iEACApM,QAAA,SAAAu7E,GACA,MAAA+rB,EAAAtoH,EAAA+xC,kBAAA/vC,UAAAu6F,GACA21E,EAAA,CAA6BrY,CAAAt9D,KAI7B,OAHA1pF,UAAA,2BAAA0pF,EACAv8F,EAAA21E,gBACA31E,EAAAk6E,uBAAArnE,UAAA,IACAy1G,EAAAjjF,MAAA3zB,KAAAmB,aAEA7S,EAAA+xC,kBAAA/vC,UAAAu6F,GAAA21E,EAAA31E,KAKA,MAAAk2E,EACAzyK,EAAA+xC,kBAAA/vC,UAAA6zE,gBACA71E,EAAA+xC,kBAAA/vC,UAAA6zE,gBACA,WACA,OAAA28F,GAAA3/J,UAAA,GAQAu6J,EAAAhgJ,QAAA,IACAva,UAAA,SAAAA,UAAA,GAAA4tB,UACAqU,QAAAC,UAEA09H,EAAAptI,MAAA3zB,KAAAmB,YAXAA,UAAA,IACAA,UAAA,GAAAwyB,MAAA,MAEAyP,QAAAC,YAYO,SAAA29H,EAAA1yK,GACLkrK,EAA6BlrK,EAAA,oBAAAoK,IAE/B,cADAA,EAAAk9I,OACA/zE,eAGA,OAAAnpE,yBCxsBO,SAASuoK,EAAgB3yK,GAChC,MAAAyxC,EAAAzxC,KAAAyxC,UAcAo9H,EAAAp9H,EAAAC,aAAAuD,aACArzC,KAAA6vC,EAAAC,cACAD,EAAAC,aAAAuD,aAAA,SAAAx0C,GACA,OAAAouK,EAAApuK,GAAAy0C,MAAA9qC,GAAA0qC,QAAAE,OAfA,SAAA5qC,GACA,OACAzJ,KAAA,CAAawtK,sBAAA,mBAAyC/jK,EAAAzJ,OAAAyJ,EAAAzJ,KACtDwV,QAAA/L,EAAA+L,QACA+qC,WAAA92C,EAAA82C,WACA24G,WACA,OAAAnoJ,KAAA/Q,OASAutK,CAAA9jK,MClBO,SAASwoK,EAAmB5yK,GACnC,oBAAAA,EAAAyxC,WAGAzxC,EAAAyxC,UAAA,eAGAzxC,EAAAyxC,UAAAC,cACA,oBAAA1xC,EAAAyxC,UAAAC,eAGA1xC,EAAAyxC,UAAAC,aAAA8vB,gBACAxhE,EAAAyxC,UAAA+vB,gBAAA5/D,KAAA5B,EAAAyxC,aCLO,SAASohI,EAAkB7yK,GAClC,MAAAotK,EAAyBpB,EAAmBhsK,GAE5C,GAAAA,EAAAqiH,iBACAriH,EAAA21E,kBACA31E,EAAA21E,gBAAA,SAAA/7B,GACA,OAAAA,IAGA55C,EAAAk6E,wBACAl6E,EAAAk6E,sBAAA,SAAAtgC,GACA,OAAAA,IAMAwzH,EAAAhgJ,QAAA,QACA,MAAA0lJ,EAAAhyK,OAAAwxK,yBACAtyK,EAAA0nH,iBAAA1lH,UAAA,WACAlB,OAAAC,eAAAf,EAAA0nH,iBAAA1lH,UAAA,WACA63J,IAAAx4J,GACAyxK,EAAAt9I,IAAAj1B,KAAAmR,KAAArQ,GACA,MAAAi1D,EAAA,IAAA8qD,MAAA,WACA9qD,EAAAmqC,QAAAp/F,EACAqQ,KAAAsvG,cAAA1qD,OAQAt2D,EAAA8jH,cAAA,SAAA9jH,EAAA8jH,aAAA9hH,WACAlB,OAAAC,eAAAf,EAAA8jH,aAAA9hH,UAAA,QACA63J,MAQA,YAPA5nJ,IAAAP,KAAAm+J,QACA,UAAAn+J,KAAA0kC,MAAAlG,KACAx+B,KAAAm+J,MAAA,IAAA7vK,EAAA+yK,cAAArhK,MACW,UAAAA,KAAA0kC,MAAAlG,OACXx+B,KAAAm+J,MAAA,OAGAn+J,KAAAm+J,SAMA7vK,EAAA+yK,gBAAA/yK,EAAAgzK,gBACAhzK,EAAAgzK,cAAAhzK,EAAA+yK,eAGA,MAAAE,EAAgCC,IAAqBlzK,EACrDotK,EAAAhgJ,SACAptB,EAAA+xC,kBAAA,SAAA3M,GAMA,OALAA,KAAAg1B,aACAh1B,EAAAg1B,WC1DO,SAAAA,EAAA0mD,GACP,IAAAkB,GAAA,EAEA,OADA5nD,EAAA57C,KAAA4L,MAAA5L,KAAA8L,UAAA8vC,KACA13B,OAAAiwB,IACA,GAAAA,MAAAsC,MAAAtC,EAAA9Z,KAAA,CACA,IAAAoc,EAAAtC,EAAAsC,MAAAtC,EAAA9Z,IACA8Z,EAAA9Z,MAAA8Z,EAAAsC,MACQ42G,EAAgB,wCAExB,MAAA5pD,EAAA,iBAAAhtD,EAsBA,OArBAgtD,IACAhtD,EAAA,CAAAA,IAEAA,IAAAvyB,OAAAmW,IAEA,OAAAA,EAAAvjC,QAAA,SACA,SAGA,MAAA69J,EAAAt6H,EAAA1U,WAAA,UACA0U,EAAA1U,WAAA,WACA0U,EAAApD,SAAA,iBACA,OAAA09H,IAAAnxD,GACAA,GAAA,GACA,GAEAmxD,IAAAnxD,WAGArvD,EAAA9Z,IACA8Z,EAAAsC,KAAAgtD,EAAAhtD,EAAA,GAAAA,IACAA,EAAA3tD,UD2B0B46G,CAAgB98E,EAAAg1B,WAC1CgzG,EAAAhgJ,SACM9W,EAAS,+BAAA8uB,EAAAg1B,aAEf,IAAA64G,EAAA7tI,IAEAplC,EAAA+xC,kBAAA/vC,UAAAixK,EAAAjxK,UAGO,SAAAoxK,EAAApzK,IAEPA,EAAA8jH,cACA,iBAAA9jH,EAAA8jH,aAAA9hH,YACAhC,EAAA8jH,aAAA9hH,UAAAi5E,aACAj7E,EAAA8jH,aAAA9hH,UAAAqxK,UE5EO,SAASC,EAAgBtzK,GAChC,MAAAotK,EAAyBpB,EAAmBhsK,GAC5CyxC,EAAAzxC,KAAAyxC,UACAi2E,EAAA1nH,KAAA0nH,iBASA,GAPAj2E,EAAAwD,aAAA,SAAAjZ,EAAA5W,EAAAuxH,GAEIk1B,EAAgB,yBACpB,uCACAp6H,EAAAC,aAAAuD,aAAAjZ,GAAA2V,KAAAvsB,EAAAuxH,MAGAy2B,EAAAhgJ,QAAA,IACA,oBAAAqkB,EAAAC,aAAAs8H,2BAAA,CACA,MAAAH,EAAA,SAAA/mK,EAAA2B,EAAAC,GACAD,KAAA3B,KAAA4B,KAAA5B,KACAA,EAAA4B,GAAA5B,EAAA2B,UACA3B,EAAA2B,KAIA8qK,EAAA9hI,EAAAC,aAAAuD,aACArzC,KAAA6vC,EAAAC,cAUA,GATAD,EAAAC,aAAAuD,aAAA,SAAAx0C,GAMA,MALA,iBAAAA,GAAA,iBAAAA,EAAAyrC,QACAzrC,EAAA+d,KAAA4L,MAAA5L,KAAA8L,UAAA7pB,IACAotK,EAAAptK,EAAAyrC,MAAA,wCACA2hI,EAAAptK,EAAAyrC,MAAA,2CAEAqnI,EAAA9yK,IAGAinH,KAAA1lH,UAAA44C,YAAA,CACA,MAAA44H,EAAA9rD,EAAA1lH,UAAA44C,YACA8sE,EAAA1lH,UAAA44C,YAAA,WACA,MAAA9zC,EAAA0sK,EAAAnuI,MAAA3zB,KAAAmB,WAGA,OAFAg7J,EAAA/mK,EAAA,wCACA+mK,EAAA/mK,EAAA,0CACAA,GAIA,GAAA4gH,KAAA1lH,UAAA+1C,iBAAA,CACA,MAAA07H,EACA/rD,EAAA1lH,UAAA+1C,iBACA2vE,EAAA1lH,UAAA+1C,iBAAA,SAAAt3C,GAMA,MALA,UAAAiR,KAAAw+B,MAAA,iBAAAzvC,IACAA,EAAA+d,KAAA4L,MAAA5L,KAAA8L,UAAA7pB,IACAotK,EAAAptK,EAAA,wCACAotK,EAAAptK,EAAA,2CAEAgzK,EAAApuI,MAAA3zB,KAAA,CAAAjR,OCrDO,SAASizK,EAAmB1zK,EAAA2zK,GACnC3zK,EAAAyxC,UAAAC,cACA,oBAAA1xC,EAAAyxC,UAAAC,cAGA1xC,EAAAyxC,UAAA,eAGAzxC,EAAAyxC,UAAAC,aAAA8vB,gBACA,SAAAxlC,GACA,IAAAA,MAAAiP,MAAA,CACA,MAAAlpB,EAAA,IAAA+sJ,aAAA,0DAKA,OAHA/sJ,EAAAphB,KAAA,gBAEAohB,EAAA8M,KAAA,EACAimB,QAAAE,OAAAjzB,GAOA,OALA,IAAAia,EAAAiP,MACAjP,EAAAiP,MAAA,CAA6BqD,YAAAqlI,GAE7B33I,EAAAiP,MAAAqD,YAAAqlI,EAEA3zK,EAAAyxC,UAAAC,aAAAuD,aAAAjZ,KCnBO,SAAS43I,EAAW5zK,GAC3B,iBAAAA,KAAA6zK,eACA,aAAA7zK,EAAA6zK,cAAA7xK,aACA,gBAAAhC,EAAA6zK,cAAA7xK,YACAlB,OAAAC,eAAAf,EAAA6zK,cAAA7xK,UAAA,eACA63J,MACA,OAAgB9gE,SAAArnF,KAAAqnF,aAMT,SAAS+6E,EAAkB9zK,GAClC,MAAAotK,EAAyBpB,EAAmBhsK,GAE5C,oBAAAA,IACAA,EAAA+xC,oBAAA/xC,EAAA+zK,qBACA,OAwBA,IAtBA/zK,EAAA+xC,mBAAA/xC,EAAA+zK,uBAEA/zK,EAAA+xC,kBAAA/xC,EAAA+zK,sBAGA3G,EAAAhgJ,QAAA,IAEA,iEACApM,QAAA,SAAAu7E,GACA,MAAA+rB,EAAAtoH,EAAA+xC,kBAAA/vC,UAAAu6F,GACA21E,EAAA,CAA6BrY,CAAAt9D,KAI7B,OAHA1pF,UAAA,2BAAA0pF,EACAv8F,EAAA21E,gBACA31E,EAAAk6E,uBAAArnE,UAAA,IACAy1G,EAAAjjF,MAAA3zB,KAAAmB,aAEA7S,EAAA+xC,kBAAA/vC,UAAAu6F,GAAA21E,EAAA31E,KAMA6wE,EAAAhgJ,QAAA,IACA,MAAAqlJ,EACAzyK,EAAA+xC,kBAAA/vC,UAAA6zE,gBACA71E,EAAA+xC,kBAAA/vC,UAAA6zE,gBACA,WACA,OAAAhjE,UAAA,GAQAA,UAAA,SAAAA,UAAA,GAAA4tB,UACAqU,QAAAC,UAEA09H,EAAAptI,MAAA3zB,KAAAmB,YAVAA,UAAA,IACAA,UAAA,GAAAwyB,MAAA,MAEAyP,QAAAC,YAWA,MAAAi/H,EAAA,CACA/rD,WAAA,cACAC,YAAA,eACAC,cAAA,iBACAC,eAAA,kBACAC,gBAAA,oBAGA4rD,EAAAj0K,EAAA+xC,kBAAA/vC,UAAAg4G,SACAh6G,EAAA+xC,kBAAA/vC,UAAAg4G,SAAA,WACA,MAAAyN,EAAA8oD,EAAAC,GAAA39J,UACA,OAAAohK,EAAA5uI,MAAA3zB,KAAA,CAAA+1G,GAAA,OACA91E,KAAAxU,IACA,GAAAiwI,EAAAhgJ,QAAA,KAAAmjJ,EAGA,IACApzI,EAAAnc,QAAAs5F,IACAA,EAAA3hG,KAAAq7J,EAAA15D,EAAA3hG,OAAA2hG,EAAA3hG,OAEW,MAAAvO,GACX,iBAAAA,EAAAzJ,KACA,MAAAyJ,EAGA+yB,EAAAnc,QAAA,CAAAs5F,EAAAl6G,KACA+8B,EAAA3H,IAAAp1B,EAAAU,OAAAggG,OAAA,GAA2CwZ,EAAA,CAC3C3hG,KAAAq7J,EAAA15D,EAAA3hG,OAAA2hG,EAAA3hG,UAKA,OAAAwkB,IAEAwU,KAAA4+H,EAAAC,IAIO,SAAA0D,EAAAl0K,GACP,oBAAAA,MAAA+xC,oBACA/xC,EAAA8jH,aACA,OAEA,GAAA9jH,EAAA8jH,cAAA,aAAA9jH,EAAA8jH,aAAA9hH,UACA,OAEA,MAAAouK,EAAApwK,EAAA+xC,kBAAA/vC,UAAAkiH,WACAksD,IACApwK,EAAA+xC,kBAAA/vC,UAAAkiH,WAAA,WACA,MAAAlgE,EAAAosH,EAAA/qI,MAAA3zB,KAAA,IAEA,OADAsyC,EAAAhjC,QAAAk4E,KAAA42E,IAAAp+J,MACAsyC,IAIA,MAAAgsH,EAAAhwK,EAAA+xC,kBAAA/vC,UAAAg0C,SACAg6H,IACAhwK,EAAA+xC,kBAAA/vC,UAAAg0C,SAAA,WACA,MAAAkjD,EAAA82E,EAAA3qI,MAAA3zB,KAAAmB,WAEA,OADAqmF,EAAA42E,IAAAp+J,KACAwnF,IAGAl5F,EAAA8jH,aAAA9hH,UAAAg4G,SAAA,WACA,OAAAtoG,KAAA0kC,MAAA1kC,KAAAo+J,IAAA91D,SAAAtoG,KAAA0kC,OACAtB,QAAAC,QAAA,IAAAlhB,MAIO,SAAAsgJ,EAAAn0K,GACP,oBAAAA,MAAA+xC,oBACA/xC,EAAA8jH,aACA,OAEA,GAAA9jH,EAAA8jH,cAAA,aAAA9jH,EAAAmmH,eAAAnkH,UACA,OAEA,MAAA+uK,EAAA/wK,EAAA+xC,kBAAA/vC,UAAAmiH,aACA4sD,IACA/wK,EAAA+xC,kBAAA/vC,UAAAmiH,aAAA,WACA,MAAA6sD,EAAAD,EAAA1rI,MAAA3zB,KAAA,IAEA,OADAs/J,EAAAhwJ,QAAA+3E,KAAA+2E,IAAAp+J,MACAs/J,IAGE9F,EAA6BlrK,EAAA,QAAAoK,IAC/BA,EAAA2uF,SAAA+2E,IAAA1lK,EAAA6mK,WACA7mK,IAEApK,EAAAmmH,eAAAnkH,UAAAg4G,SAAA,WACA,OAAAtoG,KAAAo+J,IAAA91D,SAAAtoG,KAAA0kC,QAIO,SAAAg+H,EAAAp0K,IACPA,EAAA+xC,mBACA,iBAAA/xC,EAAA+xC,kBAAA/vC,YAGAhC,EAAA+xC,kBAAA/vC,UAAAiiH,aACA,SAAAtuF,GACMk2I,EAAgB,8BACtBn6J,KAAAwyG,aAAAljG,QAAAk4E,IACAA,EAAA9iD,OAAAzgB,EAAAmiB,YAAArC,SAAAyjD,EAAA9iD,QACA1kC,KAAAyuF,YAAAjH,OAMO,SAAAm7E,EAAAr0K,GAGPA,EAAAs0K,cAAAt0K,EAAAu0K,iBACAv0K,EAAAu0K,eAAAv0K,EAAAs0K,aAIO,SAAAE,EAAAx0K,GAIP,oBAAAA,MAAA+xC,kBACA,OAEA,MAAA0iI,EAAAz0K,EAAA+xC,kBAAA/vC,UAAA62F,eACA47E,IACAz0K,EAAA+xC,kBAAA/vC,UAAA62F,eACA,WACAnnF,KAAAgjK,sBAAA,GACA,MAAAC,EAAA9hK,UAAA,GACA+hK,EAAAD,GACA,kBAAAA,EACAC,GAEAD,EAAAh8E,cAAA33E,QAAA6zJ,IACA,WAAAA,EAAA,CAEA,IADA,oBACA/wJ,KAAA+wJ,EAAA32J,KACA,UAAAtW,UAAA,+BAGA,6BAAAitK,KACApoF,WAAAooF,EAAA98E,wBAAA,GACA,UAAA+sC,WAAA,2CAGA,oBAAA+vC,KACApoF,WAAAooF,EAAAC,eAAA,GACA,UAAAhwC,WAAA,kCAKA,MAAAv2D,EAAAkmG,EAAApvI,MAAA3zB,KAAAmB,WACA,GAAA+hK,EAAA,CAQA,MAAA17E,OAAiBA,GAAO3qB,EACxB9sC,EAAAy3D,EAAAM,gBACA,cAAA/3D,IACAA,EAAAg4D,UAAAk7E,EAAAh8E,cACAjnF,KAAAgjK,sBAAA9/J,KACAskF,EAAAQ,cAAAj4D,GACAyT,MAAA,UAIA,OAAAq5B,IAKO,SAAAwmG,EAAA/0K,GAIP,oBAAAA,MAAA+xC,kBACA,OAEA,MAAAijI,EAAAh1K,EAAA+xC,kBAAA/vC,UAAAw0E,YACAx2E,EAAA+xC,kBAAA/vC,UAAAw0E,YAAA,WACA,OAAA9kE,KAAAgjK,uBAAAhjK,KAAAgjK,sBAAAptK,OACAwtC,QAAAmK,IAAAvtC,KAAAgjK,uBACA/iI,KAAA,IACAqjI,EAAA3vI,MAAA3zB,KAAAmB,YAEAoiK,QAAA,KACAvjK,KAAAgjK,sBAAA,KAGAM,EAAA3vI,MAAA3zB,KAAAmB,YAIO,SAAAqiK,EAAAl1K,GAIP,oBAAAA,MAAA+xC,kBACA,OAEA,MAAAojI,EAAAn1K,EAAA+xC,kBAAA/vC,UAAAu4E,aACAv6E,EAAA+xC,kBAAA/vC,UAAAu4E,aAAA,WACA,OAAA7oE,KAAAgjK,uBAAAhjK,KAAAgjK,sBAAAptK,OACAwtC,QAAAmK,IAAAvtC,KAAAgjK,uBACA/iI,KAAA,IACAwjI,EAAA9vI,MAAA3zB,KAAAmB,YAEAoiK,QAAA,KACAvjK,KAAAgjK,sBAAA,KAGAS,EAAA9vI,MAAA3zB,KAAAmB,YC3RO,SAAAuiK,EAAAp1K,GACP,oBAAAA,KAAA+xC,kBAAA,CAYA,GATA,oBAAA/xC,EAAA+xC,kBAAA/vC,YACAhC,EAAA+xC,kBAAA/vC,UAAAohH,gBACA,WAIA,OAHA1xG,KAAA2jK,gBACA3jK,KAAA2jK,cAAA,IAEA3jK,KAAA2jK,kBAGA,cAAAr1K,EAAA+xC,kBAAA/vC,WAAA,CACA,MAAAszK,EAAAt1K,EAAA+xC,kBAAA/vC,UAAAg0C,SACAh2C,EAAA+xC,kBAAA/vC,UAAAg3F,UAAA,SAAArjE,GACAjkB,KAAA2jK,gBACA3jK,KAAA2jK,cAAA,IAEA3jK,KAAA2jK,cAAA5/H,SAAA9f,IACAjkB,KAAA2jK,cAAAzgK,KAAA+gB,GAIAA,EAAA+Z,iBAAA1uB,QAAAo1B,GAAAk/H,EAAA/0K,KAAAmR,KAAA0kC,EACAzgB,IACAA,EAAAia,iBAAA5uB,QAAAo1B,GAAAk/H,EAAA/0K,KAAAmR,KAAA0kC,EACAzgB,KAGA31B,EAAA+xC,kBAAA/vC,UAAAg0C,SACA,SAAAI,GACA,MAAAzgB,EAAA9iB,UAAA,GAQA,OAPA8iB,IACAjkB,KAAA2jK,cAEW3jK,KAAA2jK,cAAA5/H,SAAA9f,IACXjkB,KAAA2jK,cAAAzgK,KAAA+gB,GAFAjkB,KAAA2jK,cAAA,CAAA1/I,IAKA2/I,EAAAjwI,MAAA3zB,KAAAmB,YAGA,iBAAA7S,EAAA+xC,kBAAA/vC,YACAhC,EAAA+xC,kBAAA/vC,UAAAiiH,aACA,SAAAtuF,GACAjkB,KAAA2jK,gBACA3jK,KAAA2jK,cAAA,IAEA,MAAA1yI,EAAAjxB,KAAA2jK,cAAA//J,QAAAqgB,GACA,QAAAgN,EACA,OAEAjxB,KAAA2jK,cAAA1/J,OAAAgtB,EAAA,GACA,MAAA6b,EAAA7oB,EAAAmiB,YACApmC,KAAAwyG,aAAAljG,QAAAk4E,IACA16C,EAAA/I,SAAAyjD,EAAA9iD,QACA1kC,KAAAyuF,YAAAjH,QAOO,SAAAq8E,EAAAv1K,GACP,oBAAAA,KAAA+xC,oBAGA,qBAAA/xC,EAAA+xC,kBAAA/vC,YACAhC,EAAA+xC,kBAAA/vC,UAAAqhH,iBACA,WACA,OAAA3xG,KAAA8jK,eAAA9jK,KAAA8jK,eAAA,OAGA,gBAAAx1K,EAAA+xC,kBAAA/vC,YAAA,CACAlB,OAAAC,eAAAf,EAAA+xC,kBAAA/vC,UAAA,eACA63J,MACA,OAAAnoJ,KAAA+jK,cAEA5b,IAAApkD,GACA/jG,KAAA+jK,eACA/jK,KAAA05C,oBAAA,YAAA15C,KAAA+jK,cACA/jK,KAAA05C,oBAAA,QAAA15C,KAAAgkK,mBAEAhkK,KAAAuiC,iBAAA,YAAAviC,KAAA+jK,aAAAhgE,GACA/jG,KAAAuiC,iBAAA,QAAAviC,KAAAgkK,iBAAA,CAAAtrK,IACAA,EAAAurC,QAAA30B,QAAA2U,IAIA,GAHAjkB,KAAA8jK,iBACA9jK,KAAA8jK,eAAA,IAEA9jK,KAAA8jK,eAAA//H,SAAA9f,GACA,OAEAjkB,KAAA8jK,eAAA5gK,KAAA+gB,GACA,MAAAyI,EAAA,IAAAgjF,MAAA,aACAhjF,EAAAzI,SACAjkB,KAAAsvG,cAAA5iF,WAKA,MAAAoxI,EACAxvK,EAAA+xC,kBAAA/vC,UAAAs4E,qBACAt6E,EAAA+xC,kBAAA/vC,UAAAs4E,qBACA,WACA,MAAAjqB,EAAA3+C,KAiBA,OAhBAA,KAAAgkK,kBACAhkK,KAAAuiC,iBAAA,QAAAviC,KAAAgkK,iBAAA,SAAAtrK,GACAA,EAAAurC,QAAA30B,QAAA2U,IAIA,GAHA06B,EAAAmlH,iBACAnlH,EAAAmlH,eAAA,IAEAnlH,EAAAmlH,eAAAlgK,QAAAqgB,IAAA,EACA,OAEA06B,EAAAmlH,eAAA5gK,KAAA+gB,GACA,MAAAyI,EAAA,IAAAgjF,MAAA,aACAhjF,EAAAzI,SACA06B,EAAA2wD,cAAA5iF,OAIAoxI,EAAAnqI,MAAAgrB,EAAAx9C,aAKO,SAAA8iK,EAAA31K,GACP,oBAAAA,MAAA+xC,kBACA,OAEA,MAAA/vC,EAAAhC,EAAA+xC,kBAAA/vC,UACAgzK,EAAAhzK,EAAAw0E,YACA2+F,EAAAnzK,EAAAu4E,aACA7D,EAAA10E,EAAA00E,oBACA4D,EAAAt4E,EAAAs4E,qBACAzE,EAAA7zE,EAAA6zE,gBAEA7zE,EAAAw0E,YACA,SAAA4qB,EAAAk5C,GACA,MAAAzhI,EAAAhG,UAAAvL,QAAA,EAAAuL,UAAA,GAAAA,UAAA,GACA0mC,EAAAy7H,EAAA3vI,MAAA3zB,KAAA,CAAAmH,IACA,OAAAyhI,GAGA/gG,EAAA5H,KAAAyvD,EAAAk5C,GACAxlG,QAAAC,WAHAwE,GAMAv3C,EAAAu4E,aACA,SAAA6mB,EAAAk5C,GACA,MAAAzhI,EAAAhG,UAAAvL,QAAA,EAAAuL,UAAA,GAAAA,UAAA,GACA0mC,EAAA47H,EAAA9vI,MAAA3zB,KAAA,CAAAmH,IACA,OAAAyhI,GAGA/gG,EAAA5H,KAAAyvD,EAAAk5C,GACAxlG,QAAAC,WAHAwE,GAMA,IAAAq8H,EAAA,SAAAlqG,EAAA01B,EAAAk5C,GACA,MAAA/gG,EAAAm9B,EAAArxC,MAAA3zB,KAAA,CAAAg6D,IACA,OAAA4uE,GAGA/gG,EAAA5H,KAAAyvD,EAAAk5C,GACAxlG,QAAAC,WAHAwE,GAKAv3C,EAAA00E,oBAAAk/F,EAEAA,EAAA,SAAAlqG,EAAA01B,EAAAk5C,GACA,MAAA/gG,EAAA+gC,EAAAj1C,MAAA3zB,KAAA,CAAAg6D,IACA,OAAA4uE,GAGA/gG,EAAA5H,KAAAyvD,EAAAk5C,GACAxlG,QAAAC,WAHAwE,GAKAv3C,EAAAs4E,qBAAAs7F,EAEAA,EAAA,SAAAn1I,EAAA2gE,EAAAk5C,GACA,MAAA/gG,EAAAs8B,EAAAxwC,MAAA3zB,KAAA,CAAA+uB,IACA,OAAA65G,GAGA/gG,EAAA5H,KAAAyvD,EAAAk5C,GACAxlG,QAAAC,WAHAwE,GAKAv3C,EAAA6zE,gBAAA+/F,EAGO,SAASC,EAAgB71K,GAChC,MAAAyxC,EAAAzxC,KAAAyxC,UAEA,GAAAA,EAAAC,cAAAD,EAAAC,aAAAuD,aAAA,CAEA,MAAAvD,EAAAD,EAAAC,aACAokI,EAAApkI,EAAAuD,aAAArzC,KAAA8vC,GACAD,EAAAC,aAAAuD,aAAA,CAAAjZ,GACA85I,EAAAC,EAAA/5I,MAIAyV,EAAAwD,cAAAxD,EAAAC,cACAD,EAAAC,aAAAuD,eACAxD,EAAAwD,aAAA,SAAAjZ,EAAA6lH,EAAAm0B,GACAvkI,EAAAC,aAAAuD,aAAAjZ,GACA2V,KAAAkwG,EAAAm0B,IACKp0K,KAAA6vC,IAIE,SAAAskI,EAAA/5I,GACP,OAAAA,QAAA/pB,IAAA+pB,EAAAiP,MACAnqC,OAAAggG,OAAA,GACA9kE,EACA,CAAOiP,MAAOshI,EAAmBvwI,EAAAiP,SAIjCjP,EAGO,SAAAi6I,GAAAj2K,GAEP,MAAAk2K,EAAAl2K,EAAA+xC,kBACA/xC,EAAA+xC,kBACA,SAAAokI,EAAAhiI,GACA,GAAAgiI,KAAA/7G,WAAA,CACA,MAAAg8G,EAAA,GACA,QAAAh2K,EAAA,EAAuBA,EAAA+1K,EAAA/7G,WAAA9yD,OAAgClH,IAAA,CACvD,IAAAuyD,EAAAwjH,EAAA/7G,WAAAh6D,IACAuyD,EAAA1wD,eAAA,SACA0wD,EAAA1wD,eAAA,QACY4pK,EAAgB,yCAC5Bl5G,EAAAn0C,KAAA4L,MAAA5L,KAAA8L,UAAAqoC,KACAsC,KAAAtC,EAAA9Z,WACA8Z,EAAA9Z,IACAu9H,EAAAxhK,KAAA+9C,IAEAyjH,EAAAxhK,KAAAuhK,EAAA/7G,WAAAh6D,IAGA+1K,EAAA/7G,WAAAg8G,EAEA,WAAAF,EAAAC,EAAAhiI,IAEAn0C,EAAA+xC,kBAAA/vC,UAAAk0K,EAAAl0K,UAEA,wBAAAhC,EAAA+xC,mBACAjxC,OAAAC,eAAAf,EAAA+xC,kBAAA,uBACA9wC,IAAA,IACAi1K,EAAAG,sBAMO,SAAAC,GAAAt2K,GAEP,iBAAAA,KAAA6zK,eACA,aAAA7zK,EAAA6zK,cAAA7xK,aACA,gBAAAhC,EAAA6zK,cAAA7xK,YACAlB,OAAAC,eAAAf,EAAA6zK,cAAA7xK,UAAA,eACA63J,MACA,OAAgB9gE,SAAArnF,KAAAqnF,aAMT,SAAAw9E,GAAAv2K,GACP,MAAAg1K,EAAAh1K,EAAA+xC,kBAAA/vC,UAAAw0E,YACAx2E,EAAA+xC,kBAAA/vC,UAAAw0E,YACA,SAAAwwC,GACA,GAAAA,EAAA,MACA,IAAAA,EAAAC,sBAEAD,EAAAC,sBACAD,EAAAC,qBAEA,MAAAuvD,EAAA9kK,KAAAonF,kBAAA71D,KAAAsrC,GACA,UAAAA,EAAAwqB,SAAA3iD,MAAAlG,OACA,IAAA82E,EAAAC,qBAAAuvD,EACA,aAAAA,EAAA70I,UACA60I,EAAAC,aACAD,EAAAC,aAAA,YAEAD,EAAA70I,UAAA,WAEW,aAAA60I,EAAA70I,YACX60I,EAAAC,aACAD,EAAAC,aAAA,YAEAD,EAAA70I,UAAA,aAGS,IAAAqlF,EAAAC,qBACTuvD,GACA9kK,KAAAmnF,eAAA,cAGA,IAAAmuB,EAAAE,sBAEAF,EAAAE,sBACAF,EAAAE,qBAEA,MAAAwvD,EAAAhlK,KAAAonF,kBAAA71D,KAAAsrC,GACA,UAAAA,EAAAwqB,SAAA3iD,MAAAlG,OACA,IAAA82E,EAAAE,qBAAAwvD,EACA,aAAAA,EAAA/0I,UACA+0I,EAAAD,aACAC,EAAAD,aAAA,YAEAC,EAAA/0I,UAAA,WAEW,aAAA+0I,EAAA/0I,YACX+0I,EAAAD,aACAC,EAAAD,aAAA,YAEAC,EAAA/0I,UAAA,aAGS,IAAAqlF,EAAAE,qBACTwvD,GACAhlK,KAAAmnF,eAAA,SAGA,OAAAm8E,EAAA3vI,MAAA3zB,KAAAmB,oCCrUO,SAAA8jK,GAAA32K,GAGP,IAAAA,EAAA21E,iBAAA31E,EAAA21E,iBAAA,eACA31E,EAAA21E,gBAAA3zE,UACA,OAGA,MAAA40K,EAAA52K,EAAA21E,gBACA31E,EAAA21E,gBAAA,SAAA/7B,GAQA,GANA,iBAAAA,KAAAnZ,WACA,IAAAmZ,EAAAnZ,UAAAnrB,QAAA,SACAskC,EAAAp7B,KAAA4L,MAAA5L,KAAA8L,UAAAsvB,KACAnZ,UAAAmZ,EAAAnZ,UAAAxZ,OAAA,IAGA2yB,EAAAnZ,WAAAmZ,EAAAnZ,UAAAn5B,OAAA,CAEA,MAAAuvK,EAAA,IAAAD,EAAAh9H,GACAk9H,EAA8BC,GAAAtuK,EAAQ0/D,eAAAvuB,EAAAnZ,WACtCu2I,EAAAl2K,OAAAggG,OAAA+1E,EACAC,GAWA,OARAE,EAAApyD,OAAA,WACA,OACAnkF,UAAAu2I,EAAAv2I,UACA40C,OAAA2hG,EAAA3hG,OACAT,cAAAoiG,EAAApiG,cACApM,iBAAAwuG,EAAAxuG,mBAGAwuG,EAEA,WAAAJ,EAAAh9H,IAEA55C,EAAA21E,gBAAA3zE,UAAA40K,EAAA50K,UAIEkpK,EAA6BlrK,EAAA,eAAAoK,IAC/BA,EAAAq2B,WACA3/B,OAAAC,eAAAqJ,EAAA,aACA/I,MAAA,IAAArB,EAAA21E,gBAAAvrE,EAAAq2B,WACAwzE,SAAA,UAGA7pG,IAIO,SAAA6sK,GAAAj3K,GACP,IAAAA,EAAA+xC,kBACA,OAEA,MAAAq7H,EAAyBpB,EAAmBhsK,GAE5C,SAAAA,EAAA+xC,kBAAA/vC,WACAlB,OAAAC,eAAAf,EAAA+xC,kBAAA/vC,UAAA,QACA63J,MACA,gBAAAnoJ,KAAAwlK,MAAA,KAAAxlK,KAAAwlK,SAKA,MAmFA1H,EACAxvK,EAAA+xC,kBAAA/vC,UAAAs4E,qBACAt6E,EAAA+xC,kBAAA/vC,UAAAs4E,qBACA,WAKA,GAJA5oE,KAAAwlK,MAAA,KAIA,WAAA9J,EAAAj5I,SAAAi5I,EAAAhgJ,SAAA,IACA,MAAA4wB,aAAeA,GAAatsC,KAAAyxG,mBAC5B,WAAAnlE,GACAl9C,OAAAC,eAAA2Q,KAAA,QACAmoJ,MACA,gBAAAnoJ,KAAAwlK,MAAA,KAAAxlK,KAAAwlK,OAEAl2K,YAAA,EACAgzG,cAAA,IAKA,GAxGA,SAAAtoC,GACA,IAAAA,MAAA1nC,IACA,SAEA,MAAAgkC,EAAqB+uG,GAAAtuK,EAAQo/D,cAAA6D,EAAA1nC,KAE7B,OADAgkC,EAAAtoC,QACAsoC,EAAA2tB,KAAAzrB,IACA,MAAAzmC,EAAoBszI,GAAAtuK,EAAQ+2B,WAAA0qC,GAC5B,OAAAzmC,GAAA,gBAAAA,EAAAyM,OACA,IAAAzM,EAAArpB,SAAA9E,QAAA,UA+FA6hK,CAAAtkK,UAAA,KAEA,MAAAuvB,EA7FA,SAAAspC,GAEA,MAAAvmD,EAAAumD,EAAA1nC,IAAA7e,MAAA,mCACA,UAAAA,KAAA7d,OAAA,EACA,SAEA,MAAA8lB,EAAA5C,SAAArF,EAAA,OAEA,OAAAiI,MAAA,EAAAA,EAqFAgqJ,CAAAvkK,UAAA,IAGAwkK,EArFA,SAAAC,GAKA,IAAAC,EAAA,MAwBA,MAvBA,YAAAnK,EAAAj5I,UAKAojJ,EAJAnK,EAAAhgJ,QAAA,IACA,IAAAkqJ,EAGA,MAIA,WAEOlK,EAAAhgJ,QAAA,GAMP,KAAAggJ,EAAAhgJ,QAAA,YAGA,YAGAmqJ,EAwDAC,CAAAp1I,GAGAq1I,EAxDA,SAAA/rG,EAAA4rG,GAGA,IAAA1pG,EAAA,MAKA,YAAAw/F,EAAAj5I,SACA,KAAAi5I,EAAAhgJ,UACAwgD,EAAA,OAGA,MAAAzoD,EAAkB4xJ,GAAAtuK,EAAQy/D,YAAAwD,EAAA1nC,IAC1B,uBAUA,OATA7e,EAAA7d,OAAA,EACAsmE,EAAApjD,SAAArF,EAAA,GAAA8B,OAAA,QACK,YAAAmmJ,EAAAj5I,UACL,IAAAmjJ,IAIA1pG,EAAA,YAEAA,EAgCA8pG,CAAA7kK,UAAA,GAAAuvB,GAGA,IAAAwrC,EAEAA,EADA,IAAAypG,GAAA,IAAAI,EACAhsJ,OAAAksJ,kBACS,IAAAN,GAAA,IAAAI,EACTz6J,KAAAouB,IAAAisI,EAAAI,GAEAz6J,KAAA2P,IAAA0qJ,EAAAI,GAKA,MAAAvyH,EAAA,GACApkD,OAAAC,eAAAmkD,EAAA,kBACAjkD,IAAA,IACA2sE,IAGAl8D,KAAAwlK,MAAAhyH,EAGA,OAAAsqH,EAAAnqI,MAAA3zB,KAAAmB,YAIO,SAAA+kK,GAAA53K,GACP,KAAAA,EAAA+xC,mBACA,sBAAA/xC,EAAA+xC,kBAAA/vC,WACA,OAOA,SAAA61K,EAAAC,EAAAznH,GACA,MAAA0nH,EAAAD,EAAA74J,KACA64J,EAAA74J,KAAA,WACA,MAAAvU,EAAAmI,UAAA,GACAvL,EAAAoD,EAAApD,QAAAoD,EAAAgsB,MAAAhsB,EAAA27E,WACA,YAAAyxF,EAAA5sJ,YACAmlC,EAAAnL,MAAA59C,EAAA+oD,EAAAnL,KAAA0oB,eACA,UAAAhmE,UAAA,4CACAyoD,EAAAnL,KAAA0oB,eAAA,WAEA,OAAAmqG,EAAA1yI,MAAAyyI,EAAAjlK,YAGA,MAAAmlK,EACAh4K,EAAA+xC,kBAAA/vC,UAAAsoG,kBACAtqG,EAAA+xC,kBAAA/vC,UAAAsoG,kBACA,WACA,MAAA2tE,EAAAD,EAAA3yI,MAAA3zB,KAAAmB,WAEA,OADAglK,EAAAI,EAAAvmK,MACAumK,GAEE/M,EAA6BlrK,EAAA,cAAAoK,IAC/BytK,EAAAztK,EAAAuhG,QAAAvhG,EAAAk9I,QACAl9I,IAYO,SAAA8tK,GAAAl4K,GACP,IAAAA,EAAA+xC,mBACA,oBAAA/xC,EAAA+xC,kBAAA/vC,UACA,OAEA,MAAAmY,EAAAna,EAAA+xC,kBAAA/vC,UACAlB,OAAAC,eAAAoZ,EAAA,mBACA0/I,MACA,OACAnzC,UAAA,YACAD,SAAA,cACO/0G,KAAAgiE,qBAAAhiE,KAAAgiE,oBAEP1yE,YAAA,EACAgzG,cAAA,IAEAlzG,OAAAC,eAAAoZ,EAAA,2BACA0/I,MACA,OAAAnoJ,KAAAymK,0BAAA,MAEAte,IAAAhY,GACAnwI,KAAAymK,2BACAzmK,KAAA05C,oBAAA,wBACA15C,KAAAymK,iCACAzmK,KAAAymK,0BAEAt2B,GACAnwI,KAAAuiC,iBAAA,wBACAviC,KAAAymK,yBAAAt2B,IAGA7gJ,YAAA,EACAgzG,cAAA,IAGA,+CAAAhzF,QAAAu7E,IACA,MAAA67E,EAAAj+J,EAAAoiF,GACApiF,EAAAoiF,GAAA,WAcA,OAbA7qF,KAAA2mK,6BACA3mK,KAAA2mK,2BAAAjuK,KACA,MAAAimD,EAAAjmD,EAAAk9I,OACA,GAAAj3F,EAAAioH,uBAAAjoH,EAAAmjB,gBAAA,CACAnjB,EAAAioH,qBAAAjoH,EAAAmjB,gBACA,MAAA+kG,EAAA,IAAAn3D,MAAA,wBAAAh3G,GACAimD,EAAA2wD,cAAAu3D,GAEA,OAAAnuK,IAEAsH,KAAAuiC,iBAAA,2BACAviC,KAAA2mK,6BAEAD,EAAA/yI,MAAA3zB,KAAAmB,cAKO,SAAA2lK,GAAAx4K,GAEP,IAAAA,EAAA+xC,kBACA,OAEA,MAAAq7H,EAAyBpB,EAAmBhsK,GAC5C,cAAAotK,EAAAj5I,SAAAi5I,EAAAhgJ,SAAA,GACA,OAEA,MAAAqrJ,EAAAz4K,EAAA+xC,kBAAA/vC,UAAAs4E,qBACAt6E,EAAA+xC,kBAAA/vC,UAAAs4E,qBACA,SAAAj5C,GAMA,OALAA,KAAA2C,MAAA,IAAA3C,EAAA2C,IAAA1uB,QAAA,4BACA+rB,EAAA2C,IAAA3C,EAAA2C,IAAAvvB,MAAA,MAAAiuB,OAAAxsB,GACA,yBAAAA,EAAA6kD,QACOlmD,KAAA,OAEP4jK,EAAApzI,MAAA3zB,KAAAmB,YCnUA,MAAM6lK,GCIC,UAAA14K,OAAyBA,GAAO,GAAK6Y,EAAA,CAC5C8/J,YAAA,EACAC,aAAA,EACAC,UAAA,EACAC,YAAA,IAGA,MAAAnU,EAAkBruJ,EAClB82J,EAAyBpB,EAAmBhsK,GAE5C+4K,EAAA,CACA3L,iBACI4L,WAAAC,EACJjO,eAAoBA,EACpBU,WAAgBA,EAChBE,gBAAqBA,GAIrB,OAAAwB,EAAAj5I,SACA,aACA,IAAW+kJ,IAAe3G,IAC1B15J,EAAA8/J,WAEA,OADAhU,EAAA,wDACAoU,EAEApU,EAAA,+BAEAoU,EAAAI,YAA4BD,EAEtB/L,EAA2BntK,GAC3BovK,EAA0BpvK,GAC1BuyK,EAA6BvyK,GAC7BsvK,EAAsBtvK,GACtBuxK,EAAkCvxK,GAClC2vK,EAAiC3vK,GACjCqwK,EAAuBrwK,GACvB8wK,EAAqC9wK,GACrC0yK,EAA+B1yK,GAE/B22K,GAA8B32K,GAC9Bk4K,GAA8Bl4K,GAC9Bi3K,GAA6Bj3K,GAC7B43K,GAAiC53K,GACjCw4K,GAAiCx4K,GACvC,MACA,cACA,IAAWo5K,IAAgBtF,IAC3Bj7J,EAAA+/J,YAEA,OADAjU,EAAA,yDACAoU,EAEApU,EAAA,gCAEAoU,EAAAI,YAA4BC,EAEtB9F,EAA4BtzK,GAC5B8zK,EAA8B9zK,GAC9B4zK,EAAuB5zK,GACvBo0K,EAA4Bp0K,GAC5Bk0K,EAA8Bl0K,GAC9Bm0K,EAAgCn0K,GAChCq0K,EAA8Br0K,GAC9Bw0K,EAA8Bx0K,GAC9B+0K,EAA2B/0K,GAC3Bk1K,EAA4Bl1K,GAE5B22K,GAA8B32K,GAC9Bk4K,GAA8Bl4K,GAC9Bi3K,GAA6Bj3K,GAC7B43K,GAAiC53K,GACvC,MACA,WACA,IAAWq5K,IAAaxG,IAA2Bh6J,EAAAggK,SAEnD,OADAlU,EAAA,yDACAoU,EAEApU,EAAA,6BAEAoU,EAAAI,YAA4BE,EAEtB1G,EAAyB3yK,GACzB4yK,EAA4B5yK,GAC5B6yK,EAA2B7yK,GAC3BozK,EAAyBpzK,GAIzBi3K,GAA6Bj3K,GAC7B43K,GAAiC53K,GACvC,MACA,aACA,IAAWs5K,IAAUzgK,EAAAigK,WAErB,OADAnU,EAAA,wDACAoU,EAEApU,EAAA,+BAEAoU,EAAAI,YAA4BG,EAEtBrD,GAA+Bj2K,GAC/Bu2K,GAAgCv2K,GAChC21K,EAA2B31K,GAC3Bo1K,EAA8Bp1K,GAC9Bu1K,EAA+Bv1K,GAC/Bs2K,GAAoCt2K,GACpC61K,EAA2B71K,GAE3B22K,GAA8B32K,GAC9Bi3K,GAA6Bj3K,GAC7B43K,GAAiC53K,GACjCw4K,GAAiCx4K,GACvC,MACA,QACA2kK,EAAA,wBAIA,OAAAoU,ED1HgBQ,CAAc,CAAEv5K,gBACjBmvB,EAAA","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 132);\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    /**\n     * Event fired when the unique meeting id is set.\n     */\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n    PEERCONNECTION_READY: 'xmpp.peerconnection_ready',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    /**\n     * Event fired when conference creation timestamp is received.\n     */\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","(function (global, factory) {\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n            typeof define === 'function' && define.amd ? define(factory) :\n            (global = global || self, global.strophe = factory());\n}(this, function () { 'use strict';\n\n            var global$1 = (typeof global !== \"undefined\" ? global :\n                        typeof self !== \"undefined\" ? self :\n                        typeof window !== \"undefined\" ? window : {});\n\n            function _typeof(obj) {\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                _typeof = function (obj) {\n                  return typeof obj;\n                };\n              } else {\n                _typeof = function (obj) {\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                };\n              }\n\n              return _typeof(obj);\n            }\n\n            function _toConsumableArray(arr) {\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n            }\n\n            function _arrayWithoutHoles(arr) {\n              if (Array.isArray(arr)) {\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n                return arr2;\n              }\n            }\n\n            function _iterableToArray(iter) {\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n            }\n\n            function _nonIterableSpread() {\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n            }\n\n            /*\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n             * Digest Algorithm, as defined in RFC 1321.\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for more info.\n             */\n\n            /*\n             * Everything that isn't used by Strophe has been stripped here!\n             */\n\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n            var safe_add = function safe_add(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            };\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            var bit_rol = function bit_rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            };\n            /*\n             * Convert a string to an array of little-endian words\n             */\n\n\n            var str2binl = function str2binl(str) {\n              if (typeof str !== \"string\") {\n                throw new Error(\"str2binl was passed a non-string\");\n              }\n\n              var bin = [];\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n              }\n\n              return bin;\n            };\n            /*\n             * Convert an array of little-endian words to a string\n             */\n\n\n            var binl2str = function binl2str(bin) {\n              var str = \"\";\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n              }\n\n              return str;\n            };\n            /*\n             * Convert an array of little-endian words to a hex string.\n             */\n\n\n            var binl2hex = function binl2hex(binarray) {\n              var hex_tab = \"0123456789abcdef\";\n              var str = \"\";\n\n              for (var i = 0; i < binarray.length * 4; i++) {\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n              }\n\n              return str;\n            };\n            /*\n             * These functions implement the four basic operations the algorithm uses.\n             */\n\n\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n            };\n\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n            };\n\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n            };\n\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n            };\n\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n            };\n            /*\n             * Calculate the MD5 of an array of little-endian words, and a bit length\n             */\n\n\n            var core_md5 = function core_md5(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << len % 32;\n              x[(len + 64 >>> 9 << 4) + 14] = len;\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var olda, oldb, oldc, oldd;\n\n              for (var i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n                a = safe_add(a, olda);\n                b = safe_add(b, oldb);\n                c = safe_add(c, oldc);\n                d = safe_add(d, oldd);\n              }\n\n              return [a, b, c, d];\n            };\n            /*\n             * These are the functions you'll usually want to call.\n             * They take string arguments and return either hex or base-64 encoded\n             * strings.\n             */\n\n\n            var MD5 = {\n              hexdigest: function hexdigest(s) {\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\n              },\n              hash: function hash(s) {\n                return binl2str(core_md5(str2binl(s), s.length * 8));\n              }\n            };\n\n            /*\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n             * in FIPS PUB 180-1\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n             * Distributed under the BSD License\n             * See http://pajhome.org.uk/crypt/md5 for details.\n             */\n\n            /* global define */\n\n            /* Some functions and variables have been stripped for use with Strophe */\n\n            /*\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\n             */\n            function core_sha1(x, len) {\n              /* append padding */\n              x[len >> 5] |= 0x80 << 24 - len % 32;\n              x[(len + 64 >> 9 << 4) + 15] = len;\n              var w = new Array(80);\n              var a = 1732584193;\n              var b = -271733879;\n              var c = -1732584194;\n              var d = 271733878;\n              var e = -1009589776;\n              var i, j, t, olda, oldb, oldc, oldd, olde;\n\n              for (i = 0; i < x.length; i += 16) {\n                olda = a;\n                oldb = b;\n                oldc = c;\n                oldd = d;\n                olde = e;\n\n                for (j = 0; j < 80; j++) {\n                  if (j < 16) {\n                    w[j] = x[i + j];\n                  } else {\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n                  }\n\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\n                  e = d;\n                  d = c;\n                  c = rol(b, 30);\n                  b = a;\n                  a = t;\n                }\n\n                a = safe_add$1(a, olda);\n                b = safe_add$1(b, oldb);\n                c = safe_add$1(c, oldc);\n                d = safe_add$1(d, oldd);\n                e = safe_add$1(e, olde);\n              }\n\n              return [a, b, c, d, e];\n            }\n            /*\n             * Perform the appropriate triplet combination function for the current\n             * iteration\n             */\n\n\n            function sha1_ft(t, b, c, d) {\n              if (t < 20) {\n                return b & c | ~b & d;\n              }\n\n              if (t < 40) {\n                return b ^ c ^ d;\n              }\n\n              if (t < 60) {\n                return b & c | b & d | c & d;\n              }\n\n              return b ^ c ^ d;\n            }\n            /*\n             * Determine the appropriate additive constant for the current iteration\n             */\n\n\n            function sha1_kt(t) {\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n            }\n            /*\n             * Calculate the HMAC-SHA1 of a key and some data\n             */\n\n\n            function core_hmac_sha1(key, data) {\n              var bkey = str2binb(key);\n\n              if (bkey.length > 16) {\n                bkey = core_sha1(bkey, key.length * 8);\n              }\n\n              var ipad = new Array(16),\n                  opad = new Array(16);\n\n              for (var i = 0; i < 16; i++) {\n                ipad[i] = bkey[i] ^ 0x36363636;\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\n              }\n\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n              return core_sha1(opad.concat(hash), 512 + 160);\n            }\n            /*\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n             * to work around bugs in some JS interpreters.\n             */\n\n\n            function safe_add$1(x, y) {\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n              return msw << 16 | lsw & 0xFFFF;\n            }\n            /*\n             * Bitwise rotate a 32-bit number to the left.\n             */\n\n\n            function rol(num, cnt) {\n              return num << cnt | num >>> 32 - cnt;\n            }\n            /*\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\n             */\n\n\n            function str2binb(str) {\n              var bin = [];\n              var mask = 255;\n\n              for (var i = 0; i < str.length * 8; i += 8) {\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n              }\n\n              return bin;\n            }\n            /*\n             * Convert an array of big-endian words to a base-64 string\n             */\n\n\n            function binb2b64(binarray) {\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n              var str = \"\";\n              var triplet, j;\n\n              for (var i = 0; i < binarray.length * 4; i += 3) {\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n\n                for (j = 0; j < 4; j++) {\n                  if (i * 8 + j * 6 > binarray.length * 32) {\n                    str += \"=\";\n                  } else {\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n                  }\n                }\n              }\n\n              return str;\n            }\n            /*\n             * Convert an array of big-endian words to a string\n             */\n\n\n            function binb2str(bin) {\n              var str = \"\";\n              var mask = 255;\n\n              for (var i = 0; i < bin.length * 32; i += 8) {\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n              }\n\n              return str;\n            }\n            /*\n             * These are the functions you'll usually want to call\n             * They take string arguments and return either hex or base-64 encoded strings\n             */\n\n\n            var SHA1 = {\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n                return binb2b64(core_hmac_sha1(key, data));\n              },\n              b64_sha1: function b64_sha1(s) {\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\n              },\n              binb2str: binb2str,\n              core_hmac_sha1: core_hmac_sha1,\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\n                return binb2str(core_hmac_sha1(key, data));\n              },\n              str_sha1: function str_sha1(s) {\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\n              }\n            };\n\n            var utils = {\n              utf16to8: function utf16to8(str) {\n                var i, c;\n                var out = \"\";\n                var len = str.length;\n\n                for (i = 0; i < len; i++) {\n                  c = str.charCodeAt(i);\n\n                  if (c >= 0x0000 && c <= 0x007F) {\n                    out += str.charAt(i);\n                  } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  } else {\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n                  }\n                }\n\n                return out;\n              },\n              addCookies: function addCookies(cookies) {\n                /* Parameters:\n                 *  (Object) cookies - either a map of cookie names\n                 *    to string values or to maps of cookie values.\n                 *\n                 * For example:\n                 * { \"myCookie\": \"1234\" }\n                 *\n                 * or:\n                 * { \"myCookie\": {\n                 *      \"value\": \"1234\",\n                 *      \"domain\": \".example.org\",\n                 *      \"path\": \"/\",\n                 *      \"expires\": expirationDate\n                 *      }\n                 *  }\n                 *\n                 *  These values get passed to Strophe.Connection via\n                 *   options.cookies\n                 */\n                cookies = cookies || {};\n\n                for (var cookieName in cookies) {\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\n                    var expires = '';\n                    var domain = '';\n                    var path = '';\n                    var cookieObj = cookies[cookieName];\n                    var isObj = _typeof(cookieObj) === \"object\";\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n\n                    if (isObj) {\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n                    }\n\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\n                  }\n                }\n              }\n            };\n\n            /** Function: $build\n             *  Create a Strophe.Builder.\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n             *\n             *  Parameters:\n             *    (String) name - The root element name.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n            function $build(name, attrs) {\n              return new Strophe.Builder(name, attrs);\n            }\n            /** Function: $msg\n             *  Create a Strophe.Builder with a <message/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <message/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $msg(attrs) {\n              return new Strophe.Builder(\"message\", attrs);\n            }\n            /** Function: $iq\n             *  Create a Strophe.Builder with an <iq/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <iq/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $iq(attrs) {\n              return new Strophe.Builder(\"iq\", attrs);\n            }\n            /** Function: $pres\n             *  Create a Strophe.Builder with a <presence/> element as the root.\n             *\n             *  Parameters:\n             *    (Object) attrs - The <presence/> element attributes in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder object.\n             */\n\n\n            function $pres(attrs) {\n              return new Strophe.Builder(\"presence\", attrs);\n            }\n            /** Class: Strophe\n             *  An object container for all Strophe library functions.\n             *\n             *  This class is just a container for all the objects and constants\n             *  used in the library.  It is not meant to be instantiated, but to\n             *  provide a namespace for library objects, constants, and functions.\n             */\n\n\n            var Strophe = {\n              /** Constant: VERSION */\n              VERSION: \"@VERSION@\",\n\n              /** Constants: XMPP Namespace Constants\n               *  Common namespace constants from the XMPP RFCs and XEPs.\n               *\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n               *  NS.BOSH - BOSH namespace from XEP 206.\n               *  NS.CLIENT - Main XMPP client namespace.\n               *  NS.AUTH - Legacy authentication namespace.\n               *  NS.ROSTER - Roster operations namespace.\n               *  NS.PROFILE - Profile namespace.\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n               *  NS.XHTML - XHTML body namespace from XEP 71.\n               */\n              NS: {\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n                BOSH: \"urn:xmpp:xbosh\",\n                CLIENT: \"jabber:client\",\n                AUTH: \"jabber:iq:auth\",\n                ROSTER: \"jabber:iq:roster\",\n                PROFILE: \"jabber:iq:profile\",\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n                MUC: \"http://jabber.org/protocol/muc\",\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n                STREAM: \"http://etherx.jabber.org/streams\",\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n                VERSION: \"jabber:iq:version\",\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n                XHTML: \"http://www.w3.org/1999/xhtml\"\n              },\n\n              /** Constants: XHTML_IM Namespace\n               *  contains allowed tags, tag attributes, and css properties.\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n               *  allowed tags and their attributes.\n               */\n              XHTML: {\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n                attributes: {\n                  'a': ['href'],\n                  'blockquote': ['style'],\n                  'br': [],\n                  'cite': ['style'],\n                  'em': [],\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\n                  'li': ['style'],\n                  'ol': ['style'],\n                  'p': ['style'],\n                  'span': ['style'],\n                  'strong': [],\n                  'ul': ['style'],\n                  'body': []\n                },\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n\n                /** Function: XHTML.validTag\n                 *\n                 * Utility method to determine whether a tag is allowed\n                 * in the XHTML_IM namespace.\n                 *\n                 * XHTML tag names are case sensitive and must be lower case.\n                 */\n                validTag: function validTag(tag) {\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                    if (tag === Strophe.XHTML.tags[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                },\n\n                /** Function: XHTML.validAttribute\n                 *\n                 * Utility method to determine whether an attribute is allowed\n                 * as recommended per XEP-0071\n                 *\n                 * XHTML attribute names are case sensitive and must be lower case.\n                 */\n                validAttribute: function validAttribute(tag, attribute) {\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                },\n                validCSS: function validCSS(style) {\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                    if (style === Strophe.XHTML.css[i]) {\n                      return true;\n                    }\n                  }\n\n                  return false;\n                }\n              },\n\n              /** Constants: Connection Status Constants\n               *  Connection status constants for use by the connection handler\n               *  callback.\n               *\n               *  Status.ERROR - An error has occurred\n               *  Status.CONNECTING - The connection is currently being made\n               *  Status.CONNFAIL - The connection attempt failed\n               *  Status.AUTHENTICATING - The connection is authenticating\n               *  Status.AUTHFAIL - The authentication attempt failed\n               *  Status.CONNECTED - The connection has succeeded\n               *  Status.DISCONNECTED - The connection has been terminated\n               *  Status.DISCONNECTING - The connection is currently being terminated\n               *  Status.ATTACHED - The connection has been attached\n               *  Status.REDIRECT - The connection has been redirected\n               *  Status.CONNTIMEOUT - The connection has timed out\n               */\n              Status: {\n                ERROR: 0,\n                CONNECTING: 1,\n                CONNFAIL: 2,\n                AUTHENTICATING: 3,\n                AUTHFAIL: 4,\n                CONNECTED: 5,\n                DISCONNECTED: 6,\n                DISCONNECTING: 7,\n                ATTACHED: 8,\n                REDIRECT: 9,\n                CONNTIMEOUT: 10,\n                BINDREQUIRED: 11\n              },\n              ErrorCondition: {\n                BAD_FORMAT: \"bad-format\",\n                CONFLICT: \"conflict\",\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n                NO_AUTH_MECH: \"no-auth-mech\",\n                UNKNOWN_REASON: \"unknown\"\n              },\n\n              /** Constants: Log Level Constants\n               *  Logging level indicators.\n               *\n               *  LogLevel.DEBUG - Debug output\n               *  LogLevel.INFO - Informational output\n               *  LogLevel.WARN - Warnings\n               *  LogLevel.ERROR - Errors\n               *  LogLevel.FATAL - Fatal errors\n               */\n              LogLevel: {\n                DEBUG: 0,\n                INFO: 1,\n                WARN: 2,\n                ERROR: 3,\n                FATAL: 4\n              },\n\n              /** PrivateConstants: DOM Element Type Constants\n               *  DOM element types.\n               *\n               *  ElementType.NORMAL - Normal element.\n               *  ElementType.TEXT - Text data element.\n               *  ElementType.FRAGMENT - XHTML fragment element.\n               */\n              ElementType: {\n                NORMAL: 1,\n                TEXT: 3,\n                CDATA: 4,\n                FRAGMENT: 11\n              },\n\n              /** PrivateConstants: Timeout Values\n               *  Timeout values for error states.  These values are in seconds.\n               *  These should not be changed unless you know exactly what you are\n               *  doing.\n               *\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 1.1, and with default wait, 66 seconds.\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n               *      Strophe can detect early failure, it will consider the request\n               *      failed if it doesn't return after\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n               *      This defaults to 0.1, and with default wait, 6 seconds.\n               */\n              TIMEOUT: 1.1,\n              SECONDARY_TIMEOUT: 0.1,\n\n              /** Function: addNamespace\n               *  This function is used to extend the current namespaces in\n               *  Strophe.NS.  It takes a key and a value with the key being the\n               *  name of the new namespace, with its actual value.\n               *  For example:\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n               *\n               *  Parameters:\n               *    (String) name - The name under which the namespace will be\n               *      referenced under Strophe.NS\n               *    (String) value - The actual namespace.\n               */\n              addNamespace: function addNamespace(name, value) {\n                Strophe.NS[name] = value;\n              },\n\n              /** Function: forEachChild\n               *  Map a function over some or all child elements of a given element.\n               *\n               *  This is a small convenience function for mapping a function over\n               *  some or all of the children of an element.  If elemName is null, all\n               *  children will be passed to the function, otherwise only children\n               *  whose tag names match elemName will be passed.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The element to operate on.\n               *    (String) elemName - The child element tag name filter.\n               *    (Function) func - The function to apply to each child.  This\n               *      function should take a single argument, a DOM element.\n               */\n              forEachChild: function forEachChild(elem, elemName, func) {\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var childNode = elem.childNodes[i];\n\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\n                    func(childNode);\n                  }\n                }\n              },\n\n              /** Function: isTagEqual\n               *  Compare an element's tag name with a string.\n               *\n               *  This function is case sensitive.\n               *\n               *  Parameters:\n               *    (XMLElement) el - A DOM element.\n               *    (String) name - The element name.\n               *\n               *  Returns:\n               *    true if the element's tag name matches _el_, and false\n               *    otherwise.\n               */\n              isTagEqual: function isTagEqual(el, name) {\n                return el.tagName === name;\n              },\n\n              /** PrivateVariable: _xmlGenerator\n               *  _Private_ variable that caches a DOM document to\n               *  generate elements.\n               */\n              _xmlGenerator: null,\n\n              /** PrivateFunction: _makeGenerator\n               *  _Private_ function that creates a dummy XML DOM document to serve as\n               *  an element and text node generator.\n               */\n              _makeGenerator: function _makeGenerator() {\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n                  doc = this._getIEXmlDom();\n                  doc.appendChild(doc.createElement('strophe'));\n                } else {\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlGenerator\n               *  Get the DOM document to generate elements.\n               *\n               *  Returns:\n               *    The currently used DOM document.\n               */\n              xmlGenerator: function xmlGenerator() {\n                if (!Strophe._xmlGenerator) {\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\n                }\n\n                return Strophe._xmlGenerator;\n              },\n\n              /** PrivateFunction: _getIEXmlDom\n               *  Gets IE xml doc object\n               *\n               *  Returns:\n               *    A Microsoft XML DOM Object\n               *  See Also:\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n               */\n              _getIEXmlDom: function _getIEXmlDom() {\n                var doc = null;\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\n\n                for (var d = 0; d < docStrings.length; d++) {\n                  if (doc === null) {\n                    try {\n                      doc = new ActiveXObject(docStrings[d]);\n                    } catch (e) {\n                      doc = null;\n                    }\n                  } else {\n                    break;\n                  }\n                }\n\n                return doc;\n              },\n\n              /** Function: xmlElement\n               *  Create an XML DOM element.\n               *\n               *  This function creates an XML DOM element correctly across all\n               *  implementations. Note that these are not HTML DOM elements, which\n               *  aren't appropriate for XMPP stanzas.\n               *\n               *  Parameters:\n               *    (String) name - The name for the element.\n               *    (Array|Object) attrs - An optional array or object containing\n               *      key/value pairs to use as element attributes. The object should\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n               *    (String) text - The text child data for the element.\n               *\n               *  Returns:\n               *    A new XML DOM element.\n               */\n              xmlElement: function xmlElement(name) {\n                if (!name) {\n                  return null;\n                }\n\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\n                // there are more than two optional args\n\n                for (var a = 1; a < arguments.length; a++) {\n                  var arg = arguments[a];\n\n                  if (!arg) {\n                    continue;\n                  }\n\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\n                    node.appendChild(Strophe.xmlTextNode(arg));\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\n                    for (var i = 0; i < arg.length; i++) {\n                      var attr = arg[i];\n\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                      }\n                    }\n                  } else if (_typeof(arg) === \"object\") {\n                    for (var k in arg) {\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\n                        node.setAttribute(k, arg[k]);\n                      }\n                    }\n                  }\n                }\n\n                return node;\n              },\n\n              /*  Function: xmlescape\n               *  Excapes invalid xml characters.\n               *\n               *  Parameters:\n               *     (String) text - text to escape.\n               *\n               *  Returns:\n               *      Escaped text.\n               */\n              xmlescape: function xmlescape(text) {\n                text = text.replace(/\\&/g, \"&amp;\");\n                text = text.replace(/</g, \"&lt;\");\n                text = text.replace(/>/g, \"&gt;\");\n                text = text.replace(/'/g, \"&apos;\");\n                text = text.replace(/\"/g, \"&quot;\");\n                return text;\n              },\n\n              /*  Function: xmlunescape\n              *  Unexcapes invalid xml characters.\n              *\n              *  Parameters:\n              *     (String) text - text to unescape.\n              *\n              *  Returns:\n              *      Unescaped text.\n              */\n              xmlunescape: function xmlunescape(text) {\n                text = text.replace(/\\&amp;/g, \"&\");\n                text = text.replace(/&lt;/g, \"<\");\n                text = text.replace(/&gt;/g, \">\");\n                text = text.replace(/&apos;/g, \"'\");\n                text = text.replace(/&quot;/g, \"\\\"\");\n                return text;\n              },\n\n              /** Function: xmlTextNode\n               *  Creates an XML DOM text node.\n               *\n               *  Provides a cross implementation version of document.createTextNode.\n               *\n               *  Parameters:\n               *    (String) text - The content of the text node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlTextNode: function xmlTextNode(text) {\n                return Strophe.xmlGenerator().createTextNode(text);\n              },\n\n              /** Function: xmlHtmlNode\n               *  Creates an XML DOM html node.\n               *\n               *  Parameters:\n               *    (String) html - The content of the html node.\n               *\n               *  Returns:\n               *    A new XML DOM text node.\n               */\n              xmlHtmlNode: function xmlHtmlNode(html) {\n                var node; //ensure text is escaped\n\n                if (DOMParser) {\n                  var parser = new DOMParser();\n                  node = parser.parseFromString(html, \"text/xml\");\n                } else {\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\n                  node.async = \"false\";\n                  node.loadXML(html);\n                }\n\n                return node;\n              },\n\n              /** Function: getText\n               *  Get the concatenation of all text children of an element.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A String with the concatenated text of all text element children.\n               */\n              getText: function getText(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                var str = \"\";\n\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n                  str += elem.nodeValue;\n                }\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                    str += elem.childNodes[i].nodeValue;\n                  }\n                }\n\n                return Strophe.xmlescape(str);\n              },\n\n              /** Function: copyElement\n               *  Copy an XML DOM element.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              copyElement: function copyElement(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  el = Strophe.xmlElement(elem.tagName);\n\n                  for (var i = 0; i < elem.attributes.length; i++) {\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\n                  }\n\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: createHtml\n               *  Copy an HTML DOM element into an XML DOM.\n               *\n               *  This function copies a DOM element and all its descendants and returns\n               *  the new copy.\n               *\n               *  Parameters:\n               *    (HTMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    A new, copied DOM element tree.\n               */\n              createHtml: function createHtml(elem) {\n                var el;\n\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n\n                  if (Strophe.XHTML.validTag(tag)) {\n                    try {\n                      el = Strophe.xmlElement(tag);\n\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        var attribute = Strophe.XHTML.attributes[tag][i];\n                        var value = elem.getAttribute(attribute);\n\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                          continue;\n                        }\n\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\n                        } // filter out invalid css styles\n\n\n                        if (attribute === 'style') {\n                          var css = [];\n                          var cssAttrs = value.split(';');\n\n                          for (var j = 0; j < cssAttrs.length; j++) {\n                            var attr = cssAttrs[j].split(':');\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n\n                            if (Strophe.XHTML.validCSS(cssName)) {\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                              css.push(cssName + ': ' + cssValue);\n                            }\n                          }\n\n                          if (css.length > 0) {\n                            value = css.join('; ');\n                            el.setAttribute(attribute, value);\n                          }\n                        } else {\n                          el.setAttribute(attribute, value);\n                        }\n                      }\n\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\n                      }\n                    } catch (e) {\n                      // invalid elements\n                      el = Strophe.xmlTextNode('');\n                    }\n                  } else {\n                    el = Strophe.xmlGenerator().createDocumentFragment();\n\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\n                    }\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n                  el = Strophe.xmlGenerator().createDocumentFragment();\n\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\n                  }\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n                  el = Strophe.xmlTextNode(elem.nodeValue);\n                }\n\n                return el;\n              },\n\n              /** Function: escapeNode\n               *  Escape the node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An escaped node (or local part).\n               */\n              escapeNode: function escapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\n              },\n\n              /** Function: unescapeNode\n               *  Unescape a node part (also called local part) of a JID.\n               *\n               *  Parameters:\n               *    (String) node - A node (or local part).\n               *\n               *  Returns:\n               *    An unescaped node (or local part).\n               */\n              unescapeNode: function unescapeNode(node) {\n                if (typeof node !== \"string\") {\n                  return node;\n                }\n\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\n              },\n\n              /** Function: getNodeFromJid\n               *  Get the node portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the node.\n               */\n              getNodeFromJid: function getNodeFromJid(jid) {\n                if (jid.indexOf(\"@\") < 0) {\n                  return null;\n                }\n\n                return jid.split(\"@\")[0];\n              },\n\n              /** Function: getDomainFromJid\n               *  Get the domain portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the domain.\n               */\n              getDomainFromJid: function getDomainFromJid(jid) {\n                var bare = Strophe.getBareJidFromJid(jid);\n\n                if (bare.indexOf(\"@\") < 0) {\n                  return bare;\n                } else {\n                  var parts = bare.split(\"@\");\n                  parts.splice(0, 1);\n                  return parts.join('@');\n                }\n              },\n\n              /** Function: getResourceFromJid\n               *  Get the resource portion of a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the resource.\n               */\n              getResourceFromJid: function getResourceFromJid(jid) {\n                if (!jid) {\n                  return null;\n                }\n\n                var s = jid.split(\"/\");\n\n                if (s.length < 2) {\n                  return null;\n                }\n\n                s.splice(0, 1);\n                return s.join('/');\n              },\n\n              /** Function: getBareJidFromJid\n               *  Get the bare JID from a JID String.\n               *\n               *  Parameters:\n               *    (String) jid - A JID.\n               *\n               *  Returns:\n               *    A String containing the bare JID.\n               */\n              getBareJidFromJid: function getBareJidFromJid(jid) {\n                return jid ? jid.split(\"/\")[0] : null;\n              },\n\n              /** PrivateFunction: _handleError\n               *  _Private_ function that properly logs an error to the console\n               */\n              _handleError: function _handleError(e) {\n                if (typeof e.stack !== \"undefined\") {\n                  Strophe.fatal(e.stack);\n                }\n\n                if (e.sourceURL) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\n                } else if (e.fileName) {\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\n                } else {\n                  Strophe.fatal(\"error: \" + e.message);\n                }\n              },\n\n              /** Function: log\n               *  User overrideable logging function.\n               *\n               *  This function is called whenever the Strophe library calls any\n               *  of the logging functions.  The default implementation of this\n               *  function logs only fatal errors.  If client code wishes to handle the logging\n               *  messages, it should override this with\n               *  > Strophe.log = function (level, msg) {\n               *  >   (user code here)\n               *  > };\n               *\n               *  Please note that data sent and received over the wire is logged\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n               *\n               *  The different levels and their meanings are\n               *\n               *    DEBUG - Messages useful for debugging purposes.\n               *    INFO - Informational messages.  This is mostly information like\n               *      'disconnect was called' or 'SASL auth succeeded'.\n               *    WARN - Warnings about potential problems.  This is mostly used\n               *      to report transient connection errors like request timeouts.\n               *    ERROR - Some error occurred.\n               *    FATAL - A non-recoverable fatal error occurred.\n               *\n               *  Parameters:\n               *    (Integer) level - The log level of the log message.  This will\n               *      be one of the values in Strophe.LogLevel.\n               *    (String) msg - The log message.\n               */\n              log: function log(level, msg) {\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\n                  window.console.error(msg);\n                }\n              },\n\n              /** Function: debug\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              debug: function debug(msg) {\n                this.log(this.LogLevel.DEBUG, msg);\n              },\n\n              /** Function: info\n               *  Log a message at the Strophe.LogLevel.INFO level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              info: function info(msg) {\n                this.log(this.LogLevel.INFO, msg);\n              },\n\n              /** Function: warn\n               *  Log a message at the Strophe.LogLevel.WARN level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              warn: function warn(msg) {\n                this.log(this.LogLevel.WARN, msg);\n              },\n\n              /** Function: error\n               *  Log a message at the Strophe.LogLevel.ERROR level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              error: function error(msg) {\n                this.log(this.LogLevel.ERROR, msg);\n              },\n\n              /** Function: fatal\n               *  Log a message at the Strophe.LogLevel.FATAL level.\n               *\n               *  Parameters:\n               *    (String) msg - The log message.\n               */\n              fatal: function fatal(msg) {\n                this.log(this.LogLevel.FATAL, msg);\n              },\n\n              /** Function: serialize\n               *  Render a DOM element and all descendants to a String.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The serialized element tree as a String.\n               */\n              serialize: function serialize(elem) {\n                if (!elem) {\n                  return null;\n                }\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\n                  return elem.attributes[i].nodeName;\n                });\n\n                names.sort();\n                var result = names.reduce(function (a, n) {\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\n                }, \"<\".concat(elem.nodeName));\n\n                if (elem.childNodes.length > 0) {\n                  result += \">\";\n\n                  for (var i = 0; i < elem.childNodes.length; i++) {\n                    var child = elem.childNodes[i];\n\n                    switch (child.nodeType) {\n                      case Strophe.ElementType.NORMAL:\n                        // normal element, so recurse\n                        result += Strophe.serialize(child);\n                        break;\n\n                      case Strophe.ElementType.TEXT:\n                        // text element to escape values\n                        result += Strophe.xmlescape(child.nodeValue);\n                        break;\n\n                      case Strophe.ElementType.CDATA:\n                        // cdata section so don't escape values\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\n                    }\n                  }\n\n                  result += \"</\" + elem.nodeName + \">\";\n                } else {\n                  result += \"/>\";\n                }\n\n                return result;\n              },\n\n              /** PrivateVariable: _requestId\n               *  _Private_ variable that keeps track of the request ids for\n               *  connections.\n               */\n              _requestId: 0,\n\n              /** PrivateVariable: Strophe.connectionPlugins\n               *  _Private_ variable Used to store plugin names that need\n               *  initialization on Strophe.Connection construction.\n               */\n              _connectionPlugins: {},\n\n              /** Function: addConnectionPlugin\n               *  Extends the Strophe.Connection object with the given plugin.\n               *\n               *  Parameters:\n               *    (String) name - The name of the extension.\n               *    (Object) ptype - The plugin's prototype.\n               */\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n                Strophe._connectionPlugins[name] = ptype;\n              }\n            };\n            /** Class: Strophe.Builder\n             *  XML DOM builder.\n             *\n             *  This object provides an interface similar to JQuery but for building\n             *  DOM elements easily and rapidly.  All the functions except for toString()\n             *  and tree() return the object, so calls can be chained.  Here's an\n             *  example using the $iq() builder helper.\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n             *  >     .c('query', {xmlns: 'strophe:example'})\n             *  >     .c('example')\n             *  >     .toString()\n             *\n             *  The above generates this XML fragment\n             *  > <iq to='you' from='me' type='get' id='1'>\n             *  >   <query xmlns='strophe:example'>\n             *  >     <example/>\n             *  >   </query>\n             *  > </iq>\n             *  The corresponding DOM manipulations to get a similar fragment would be\n             *  a lot more tedious and probably involve several helper variables.\n             *\n             *  Since adding children makes new operations operate on the child, up()\n             *  is provided to traverse up the tree.  To add two children, do\n             *  > builder.c('child1', ...).up().c('child2', ...)\n             *  The next operation on the Builder will be relative to the second child.\n             */\n\n            /** Constructor: Strophe.Builder\n             *  Create a Strophe.Builder object.\n             *\n             *  The attributes should be passed in object notation.  For example\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\n             *  or\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\n             *\n             *  Parameters:\n             *    (String) name - The name of the root element.\n             *    (Object) attrs - The attributes for the root element in object notation.\n             *\n             *  Returns:\n             *    A new Strophe.Builder.\n             */\n\n            Strophe.Builder = function (name, attrs) {\n              // Set correct namespace for jabber:client elements\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n                if (attrs && !attrs.xmlns) {\n                  attrs.xmlns = Strophe.NS.CLIENT;\n                } else if (!attrs) {\n                  attrs = {\n                    xmlns: Strophe.NS.CLIENT\n                  };\n                }\n              } // Holds the tree being built.\n\n\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\n\n              this.node = this.nodeTree;\n            };\n\n            Strophe.Builder.prototype = {\n              /** Function: tree\n               *  Return the DOM tree.\n               *\n               *  This function returns the current DOM tree as an element object.  This\n               *  is suitable for passing to functions like Strophe.Connection.send().\n               *\n               *  Returns:\n               *    The DOM tree as a element object.\n               */\n              tree: function tree() {\n                return this.nodeTree;\n              },\n\n              /** Function: toString\n               *  Serialize the DOM tree to a String.\n               *\n               *  This function returns a string serialization of the current DOM\n               *  tree.  It is often used internally to pass data to a\n               *  Strophe.Request object.\n               *\n               *  Returns:\n               *    The serialized DOM tree in a String.\n               */\n              toString: function toString() {\n                return Strophe.serialize(this.nodeTree);\n              },\n\n              /** Function: up\n               *  Make the current parent element the new current element.\n               *\n               *  This function is often used after c() to traverse back up the tree.\n               *  For example, to add two children to the same element\n               *  > builder.c('child1', {}).up().c('child2', {});\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              up: function up() {\n                this.node = this.node.parentNode;\n                return this;\n              },\n\n              /** Function: root\n               *  Make the root element the new current element.\n               *\n               *  When at a deeply nested element in the tree, this function can be used\n               *  to jump back to the root of the tree, instead of having to repeatedly\n               *  call up().\n               *\n               *  Returns:\n               *    The Stophe.Builder object.\n               */\n              root: function root() {\n                this.node = this.nodeTree;\n                return this;\n              },\n\n              /** Function: attrs\n               *  Add or modify attributes of the current element.\n               *\n               *  The attributes should be passed in object notation.  This function\n               *  does not move the current element pointer.\n               *\n               *  Parameters:\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              attrs: function attrs(moreattrs) {\n                for (var k in moreattrs) {\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\n                    if (moreattrs[k] === undefined) {\n                      this.node.removeAttribute(k);\n                    } else {\n                      this.node.setAttribute(k, moreattrs[k]);\n                    }\n                  }\n                }\n\n                return this;\n              },\n\n              /** Function: c\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function moves the current element pointer to the child,\n               *  unless text is provided.  If you need to add another child, it\n               *  is necessary to use up() to go back to the parent in the tree.\n               *\n               *  Parameters:\n               *    (String) name - The name of the child.\n               *    (Object) attrs - The attributes of the child in object notation.\n               *    (String) text - The text to add to the child.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              c: function c(name, attrs, text) {\n                var child = Strophe.xmlElement(name, attrs, text);\n                this.node.appendChild(child);\n\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\n                  this.node = child;\n                }\n\n                return this;\n              },\n\n              /** Function: cnode\n               *  Add a child to the current element and make it the new current\n               *  element.\n               *\n               *  This function is the same as c() except that instead of using a\n               *  name and an attributes object to create the child it uses an\n               *  existing DOM element object.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - A DOM element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              cnode: function cnode(elem) {\n                var impNode;\n                var xmlGen = Strophe.xmlGenerator();\n\n                try {\n                  impNode = xmlGen.importNode !== undefined;\n                } catch (e) {\n                  impNode = false;\n                }\n\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\n                this.node.appendChild(newElem);\n                this.node = newElem;\n                return this;\n              },\n\n              /** Function: t\n               *  Add a child text element.\n               *\n               *  This *does not* make the child the new current element since there\n               *  are no children of text elements.\n               *\n               *  Parameters:\n               *    (String) text - The text data to append to the current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              t: function t(text) {\n                var child = Strophe.xmlTextNode(text);\n                this.node.appendChild(child);\n                return this;\n              },\n\n              /** Function: h\n               *  Replace current element contents with the HTML passed in.\n               *\n               *  This *does not* make the child the new current element\n               *\n               *  Parameters:\n               *    (String) html - The html to insert as contents of current element.\n               *\n               *  Returns:\n               *    The Strophe.Builder object.\n               */\n              h: function h(html) {\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\n\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\n\n                var xhtml = Strophe.createHtml(fragment);\n\n                while (xhtml.childNodes.length > 0) {\n                  this.node.appendChild(xhtml.childNodes[0]);\n                }\n\n                return this;\n              }\n            };\n            /** PrivateClass: Strophe.Handler\n             *  _Private_ helper class for managing stanza handlers.\n             *\n             *  A Strophe.Handler encapsulates a user provided callback function to be\n             *  executed when matching stanzas are received by the connection.\n             *  Handlers can be either one-off or persistant depending on their\n             *  return value. Returning true will cause a Handler to remain active, and\n             *  returning false will remove the Handler.\n             *\n             *  Users will not use Strophe.Handler objects directly, but instead they\n             *  will use Strophe.Connection.addHandler() and\n             *  Strophe.Connection.deleteHandler().\n             */\n\n            /** PrivateConstructor: Strophe.Handler\n             *  Create and initialize a new Strophe.Handler.\n             *\n             *  Parameters:\n             *    (Function) handler - A function to be executed when the handler is run.\n             *    (String) ns - The namespace to match.\n             *    (String) name - The element name to match.\n             *    (String) type - The element type to match.\n             *    (String) id - The element id attribute to match.\n             *    (String) from - The element from attribute to match.\n             *    (Object) options - Handler options\n             *\n             *  Returns:\n             *    A new Strophe.Handler object.\n             */\n\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n              this.handler = handler;\n              this.ns = ns;\n              this.name = name;\n              this.type = type;\n              this.id = id;\n              this.options = options || {\n                'matchBareFromJid': false,\n                'ignoreNamespaceFragment': false\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\n\n              if (this.options.matchBare) {\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n                this.options.matchBareFromJid = this.options.matchBare;\n                delete this.options.matchBare;\n              }\n\n              if (this.options.matchBareFromJid) {\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\n              } else {\n                this.from = from;\n              } // whether the handler is a user handler or a system handler\n\n\n              this.user = true;\n            };\n\n            Strophe.Handler.prototype = {\n              /** PrivateFunction: getNamespace\n               *  Returns the XML namespace attribute on an element.\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n               *  URL fragment will be stripped.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element with the namespace.\n               *\n               *  Returns:\n               *    The namespace, with optionally the fragment stripped.\n               */\n              getNamespace: function getNamespace(elem) {\n                var elNamespace = elem.getAttribute(\"xmlns\");\n\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\n                  elNamespace = elNamespace.split('#')[0];\n                }\n\n                return elNamespace;\n              },\n\n              /** PrivateFunction: namespaceMatch\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              namespaceMatch: function namespaceMatch(elem) {\n                var _this = this;\n\n                var nsMatch = false;\n\n                if (!this.ns) {\n                  return true;\n                } else {\n                  Strophe.forEachChild(elem, null, function (elem) {\n                    if (_this.getNamespace(elem) === _this.ns) {\n                      nsMatch = true;\n                    }\n                  });\n                  return nsMatch || this.getNamespace(elem) === this.ns;\n                }\n              },\n\n              /** PrivateFunction: isMatch\n               *  Tests if a stanza matches the Strophe.Handler.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML element to test.\n               *\n               *  Returns:\n               *    true if the stanza matches and false otherwise.\n               */\n              isMatch: function isMatch(elem) {\n                var from = elem.getAttribute('from');\n\n                if (this.options.matchBareFromJid) {\n                  from = Strophe.getBareJidFromJid(from);\n                }\n\n                var elem_type = elem.getAttribute(\"type\");\n\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: run\n               *  Run the callback on a matching stanza.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The DOM element that triggered the\n               *      Strophe.Handler.\n               *\n               *  Returns:\n               *    A boolean indicating if the handler should remain active.\n               */\n              run: function run(elem) {\n                var result = null;\n\n                try {\n                  result = this.handler(elem);\n                } catch (e) {\n                  Strophe._handleError(e);\n\n                  throw e;\n                }\n\n                return result;\n              },\n\n              /** PrivateFunction: toString\n               *  Get a String representation of the Strophe.Handler object.\n               *\n               *  Returns:\n               *    A String.\n               */\n              toString: function toString() {\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\n              }\n            };\n            /** PrivateClass: Strophe.TimedHandler\n             *  _Private_ helper class for managing timed handlers.\n             *\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\n             *  should be called after a certain period of time or at regular\n             *  intervals.  The return value of the callback determines whether the\n             *  Strophe.TimedHandler will continue to fire.\n             *\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\n             *  they will use Strophe.Connection.addTimedHandler() and\n             *  Strophe.Connection.deleteTimedHandler().\n             */\n\n            /** PrivateConstructor: Strophe.TimedHandler\n             *  Create and initialize a new Strophe.TimedHandler object.\n             *\n             *  Parameters:\n             *    (Integer) period - The number of milliseconds to wait before the\n             *      handler is called.\n             *    (Function) handler - The callback to run when the handler fires.  This\n             *      function should take no arguments.\n             *\n             *  Returns:\n             *    A new Strophe.TimedHandler object.\n             */\n\n            Strophe.TimedHandler = function (period, handler) {\n              this.period = period;\n              this.handler = handler;\n              this.lastCalled = new Date().getTime();\n              this.user = true;\n            };\n\n            Strophe.TimedHandler.prototype = {\n              /** PrivateFunction: run\n               *  Run the callback for the Strophe.TimedHandler.\n               *\n               *  Returns:\n               *    true if the Strophe.TimedHandler should be called again, and false\n               *      otherwise.\n               */\n              run: function run() {\n                this.lastCalled = new Date().getTime();\n                return this.handler();\n              },\n\n              /** PrivateFunction: reset\n               *  Reset the last called time for the Strophe.TimedHandler.\n               */\n              reset: function reset() {\n                this.lastCalled = new Date().getTime();\n              },\n\n              /** PrivateFunction: toString\n               *  Get a string representation of the Strophe.TimedHandler object.\n               *\n               *  Returns:\n               *    The string representation.\n               */\n              toString: function toString() {\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n              }\n            };\n            /** Class: Strophe.Connection\n             *  XMPP Connection manager.\n             *\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\n             *  connection to an XMPP server and dispatches events to the user callbacks\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n             *  and legacy authentication.\n             *\n             *  After creating a Strophe.Connection object, the user will typically\n             *  call connect() with a user supplied callback to handle connection level\n             *  events like authentication failure, disconnection, or connection\n             *  complete.\n             *\n             *  The user will also have several event handlers defined by using\n             *  addHandler() and addTimedHandler().  These will allow the user code to\n             *  respond to interesting stanzas or do something periodically with the\n             *  connection. These handlers will be active once authentication is\n             *  finished.\n             *\n             *  To send data to the connection, use send().\n             */\n\n            /** Constructor: Strophe.Connection\n             *  Create and initialize a Strophe.Connection object.\n             *\n             *  The transport-protocol for this connection will be chosen automatically\n             *  based on the given service parameter. URLs starting with \"ws://\" or\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n             *  or without a protocol will use BOSH.\n             *\n             *  To make Strophe connect to the current host you can leave out the protocol\n             *  and host part and just pass the path, e.g.\n             *\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\n             *\n             *  Options common to both Websocket and BOSH:\n             *  ------------------------------------------\n             *\n             *  cookies:\n             *\n             *  The *cookies* option allows you to pass in cookies to be added to the\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\n             *  or in the websocket connection.\n             *\n             *  The passed in value must be a map of cookie names and string values.\n             *\n             *  > { \"myCookie\": {\n             *  >     \"value\": \"1234\",\n             *  >     \"domain\": \".example.org\",\n             *  >     \"path\": \"/\",\n             *  >     \"expires\": expirationDate\n             *  >     }\n             *  > }\n             *\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n             *  Those cookies need to be set under those domains, for example they can be\n             *  set server-side by making a XHR call to that domain to ask it to set any\n             *  necessary cookies.\n             *\n             *  mechanisms:\n             *\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\n             *  support.\n             *\n             *  The value must be an array of objects with Strophe.SASLMechanism\n             *  prototypes.\n             *\n             *  If nothing is specified, then the following mechanisms (and their\n             *  priorities) are registered:\n             *\n             *      SCRAM-SHA1 - 70\n             *      DIGEST-MD5 - 60\n             *      PLAIN - 50\n             *      OAUTH-BEARER - 40\n             *      OAUTH-2 - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  explicitResourceBinding:\n             *\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\n             *\n             *  Making this step explicit allows client authors to first finish other\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\n             *  session, before binding the JID resource for this session.\n             *\n             *  WebSocket options:\n             *  ------------------\n             *\n             *  If you want to connect to the current host with a WebSocket connection you\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n             *  for Secure WebSocket.\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n             *\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n             *\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n             *  of the current site.\n             *\n             *  Also because downgrading security is not permitted by browsers, when using\n             *  relative URLs both BOSH and WebSocket connections will use their secure\n             *  variants if the current connection to the site is also secure (https).\n             *\n             *  BOSH options:\n             *  -------------\n             *\n             *  By adding \"sync\" to the options, you can control if requests will\n             *  be made synchronously or not. The default behaviour is asynchronous.\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n             *\n             *  You can also toggle this on an already established connection.\n             *  > conn.options.sync = true;\n             *\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\n             *  included in the XMLHttpRequests made.\n             *\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\n             *  current BOSH session across interruptions such as webpage reloads.\n             *\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\n             *  \"restore\" is called it will check whether there are cached tokens with\n             *  which it can resume an existing session.\n             *\n             *  The *withCredentials* option should receive a Boolean value and is used to\n             *  indicate wether cookies should be included in ajax requests (by default\n             *  they're not).\n             *  Set this value to true if you are connecting to a BOSH service\n             *  and for some reason need to send cookies to it.\n             *  In order for this to work cross-domain, the server must also enable\n             *  credentials by setting the Access-Control-Allow-Credentials response header\n             *  to \"true\". For most usecases however this setting should be false (which\n             *  is the default).\n             *  Additionally, when using Access-Control-Allow-Credentials, the\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n             *  instead must be restricted to actual domains.\n             *\n             *  The *contentType* option can be set to change the default Content-Type\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n             *  CORS preflight requests that are sent to the server.\n             *\n             *  Parameters:\n             *    (String) service - The BOSH or WebSocket service URL.\n             *    (Object) options - A hash of configuration options\n             *\n             *  Returns:\n             *    A new Strophe.Connection object.\n             */\n\n            Strophe.Connection = function (service, options) {\n              var _this2 = this;\n\n              // The service URL\n              this.service = service; // Configuration options\n\n              this.options = options || {};\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\n\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\n                this._proto = new Strophe.Websocket(this);\n              } else {\n                this._proto = new Strophe.Bosh(this);\n              }\n              /* The connected JID. */\n\n\n              this.jid = \"\";\n              /* the JIDs domain */\n\n              this.domain = null;\n              /* stream:features */\n\n              this.features = null; // SASL\n\n              this._sasl_data = {};\n              this.do_session = false;\n              this.do_bind = false; // handler lists\n\n              this.timedHandlers = [];\n              this.handlers = [];\n              this.removeTimeds = [];\n              this.removeHandlers = [];\n              this.addTimeds = [];\n              this.addHandlers = [];\n              this.protocolErrorHandlers = {\n                'HTTP': {},\n                'websocket': {}\n              };\n              this._idleTimeout = null;\n              this._disconnectTimeout = null;\n              this.authenticated = false;\n              this.connected = false;\n              this.disconnecting = false;\n              this.do_authentication = true;\n              this.paused = false;\n              this.restored = false;\n              this._data = [];\n              this._uniqueId = 0;\n              this._sasl_success_handler = null;\n              this._sasl_failure_handler = null;\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\n\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\n\n              this._idleTimeout = setTimeout(function () {\n                return _this2._onIdle();\n              }, 100);\n              utils.addCookies(this.options.cookies);\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\n\n              for (var k in Strophe._connectionPlugins) {\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                  var F = function F() {};\n\n                  F.prototype = Strophe._connectionPlugins[k];\n                  this[k] = new F();\n                  this[k].init(this);\n                }\n              }\n            };\n\n            Strophe.Connection.prototype = {\n              /** Function: reset\n               *  Reset the connection.\n               *\n               *  This function should be called after a connection is disconnected\n               *  before that connection is reused.\n               */\n              reset: function reset() {\n                this._proto._reset(); // SASL\n\n\n                this.do_session = false;\n                this.do_bind = false; // handler lists\n\n                this.timedHandlers = [];\n                this.handlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = [];\n                this.authenticated = false;\n                this.connected = false;\n                this.disconnecting = false;\n                this.restored = false;\n                this._data = [];\n                this._requests = [];\n                this._uniqueId = 0;\n              },\n\n              /** Function: pause\n               *  Pause the request manager.\n               *\n               *  This will prevent Strophe from sending any more requests to the\n               *  server.  This is very useful for temporarily pausing\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\n               *  This causes Strophe to send the data in a single request, saving\n               *  many request trips.\n               */\n              pause: function pause() {\n                this.paused = true;\n              },\n\n              /** Function: resume\n               *  Resume the request manager.\n               *\n               *  This resumes after pause() has been called.\n               */\n              resume: function resume() {\n                this.paused = false;\n              },\n\n              /** Function: getUniqueId\n               *  Generate a unique ID for use in <iq/> elements.\n               *\n               *  All <iq/> stanzas are required to have unique id attributes.  This\n               *  function makes creating these easy.  Each connection instance has\n               *  a counter which starts from zero, and the value of this counter\n               *  plus a colon followed by the suffix becomes the unique id. If no\n               *  suffix is supplied, the counter is used as the unique id.\n               *\n               *  Suffixes are used to make debugging easier when reading the stream\n               *  data, and their use is recommended.  The counter resets to 0 for\n               *  every new connection for the same reason.  For connections to the\n               *  same server that authenticate the same way, all the ids should be\n               *  the same, which makes it easy to see changes.  This is useful for\n               *  automated testing as well.\n               *\n               *  Parameters:\n               *    (String) suffix - A optional suffix to append to the id.\n               *\n               *  Returns:\n               *    A unique string to be used for the id attribute.\n               */\n              getUniqueId: function getUniqueId(suffix) {\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                  var r = Math.random() * 16 | 0,\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\n                  return v.toString(16);\n                });\n\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\n                  return uuid + \":\" + suffix;\n                } else {\n                  return uuid + \"\";\n                }\n              },\n\n              /** Function: addProtocolErrorHandler\n               *  Register a handler function for when a protocol (websocker or HTTP)\n               *  error occurs.\n               *\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n               *  Patches that handle websocket errors would be very welcome.\n               *\n               *  Parameters:\n               *    (String) protocol - 'HTTP' or 'websocket'\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n               *    (Function) callback - Function that will fire on Http error\n               *\n               *  Example:\n               *  function onError(err_code){\n               *    //do stuff\n               *  }\n               *\n               *  let conn = Strophe.connect('http://example.com/http-bind');\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n               *  // Triggers HTTP 500 error and onError handler will be called\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n               */\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n                this.protocolErrorHandlers[protocol][status_code] = callback;\n              },\n\n              /** Function: connect\n               *  Starts the connection process.\n               *\n               *  As the connection process proceeds, the user supplied callback will\n               *  be triggered multiple times with status updates.  The callback\n               *  should take two arguments - the status code and the error condition.\n               *\n               *  The status code will be one of the values in the Strophe.Status\n               *  constants.  The error condition will be one of the conditions\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n               *\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n               *  of the optional parameters.\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID,\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n               *      process the provided password value as an access token).\n               *    (String) pass - The user's password.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (String) route - The optional route value.\n               *    (String) authcid - The optional alternative authentication identity\n               *      (username) if intending to impersonate another user.\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\n               *      with client certificates, then the authcid value is used to\n               *      determine whether an authorization JID (authzid) should be sent to\n               *      the server. The authzid should not be sent to the server if the\n               *      authzid and authcid are the same. So to prevent it from being sent\n               *      (for example when the JID is already contained in the client\n               *      certificate), set authcid to that same JID. See XEP-178 for more\n               *      details.\n               */\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n                this.jid = jid;\n                /** Variable: authzid\n                 *  Authorization identity.\n                 */\n\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\n                /** Variable: authcid\n                 *  Authentication identity (User name).\n                 */\n\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n                /** Variable: pass\n                 *  Authentication identity (User password).\n                 */\n\n                this.pass = pass;\n                /** Variable: servtype\n                 *  Digest MD5 compatibility.\n                 */\n\n                this.servtype = \"xmpp\";\n                this.connect_callback = callback;\n                this.disconnecting = false;\n                this.connected = false;\n                this.authenticated = false;\n                this.restored = false; // parse jid for domain\n\n                this.domain = Strophe.getDomainFromJid(this.jid);\n\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n                this._proto._connect(wait, hold, route);\n              },\n\n              /** Function: attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n                if (this._proto instanceof Strophe.Bosh) {\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** Function: restore\n               *  Attempt to restore a cached BOSH session.\n               *\n               *  This function is only useful in conjunction with providing the\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n               *\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n               *  RID (Request ID) and SID (Session ID) and then when this function is\n               *  called, it will attempt to restore the session from those cached\n               *  tokens.\n               *\n               *  This function must therefore be called instead of connect or attach.\n               *\n               *  For an example on how to use it, please see examples/restore.js\n               *\n               *  Parameters:\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n               *    (Function) callback - The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              restore: function restore(jid, callback, wait, hold, wind) {\n                if (this._sessionCachingSupported()) {\n                  this._proto._restore(jid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\n                  error.name = 'StropheSessionError';\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _sessionCachingSupported\n               * Checks whether sessionStorage and JSON are supported and whether we're\n               * using BOSH.\n               */\n              _sessionCachingSupported: function _sessionCachingSupported() {\n                if (this._proto instanceof Strophe.Bosh) {\n                  if (!JSON) {\n                    return false;\n                  }\n\n                  try {\n                    sessionStorage.setItem('_strophe_', '_strophe_');\n                    sessionStorage.removeItem('_strophe_');\n                  } catch (e) {\n                    return false;\n                  }\n\n                  return true;\n                }\n\n                return false;\n              },\n\n              /** Function: xmlInput\n               *  User overrideable function that receives XML data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlInput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XML data received by the connection.\n               */\n              xmlInput: function xmlInput(elem) {\n                return;\n              },\n\n              /** Function: xmlOutput\n               *  User overrideable function that receives XML data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.xmlOutput = function (elem) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The XMLdata sent by the connection.\n               */\n              xmlOutput: function xmlOutput(elem) {\n                return;\n              },\n\n              /** Function: rawInput\n               *  User overrideable function that receives raw data coming into the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawInput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data received by the connection.\n               */\n              rawInput: function rawInput(data) {\n                return;\n              },\n\n              /** Function: rawOutput\n               *  User overrideable function that receives raw data sent to the\n               *  connection.\n               *\n               *  The default function does nothing.  User code can override this with\n               *  > Strophe.Connection.rawOutput = function (data) {\n               *  >   (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (String) data - The data sent by the connection.\n               */\n              rawOutput: function rawOutput(data) {\n                return;\n              },\n\n              /** Function: nextValidRid\n               *  User overrideable function that receives the new valid rid.\n               *\n               *  The default function does nothing. User code can override this with\n               *  > Strophe.Connection.nextValidRid = function (rid) {\n               *  >    (user code)\n               *  > };\n               *\n               *  Parameters:\n               *    (Number) rid - The next valid rid\n               */\n              nextValidRid: function nextValidRid(rid) {\n                return;\n              },\n\n              /** Function: send\n               *  Send a stanza.\n               *\n               *  This function is called to push data onto the send queue to\n               *  go out over the wire.  Whenever a request is sent to the BOSH\n               *  server, all pending data is sent and the queue is flushed.\n               *\n               *  Parameters:\n               *    (XMLElement |\n               *     [XMLElement] |\n               *     Strophe.Builder) elem - The stanza to send.\n               */\n              send: function send(elem) {\n                if (elem === null) {\n                  return;\n                }\n\n                if (typeof elem.sort === \"function\") {\n                  for (var i = 0; i < elem.length; i++) {\n                    this._queueData(elem[i]);\n                  }\n                } else if (typeof elem.tree === \"function\") {\n                  this._queueData(elem.tree());\n                } else {\n                  this._queueData(elem);\n                }\n\n                this._proto._send();\n              },\n\n              /** Function: flush\n               *  Immediately send any pending outgoing data.\n               *\n               *  Normally send() queues outgoing data until the next idle period\n               *  (100ms), which optimizes network use in the common cases when\n               *  several send()s are called in succession. flush() can be used to\n               *  immediately send all pending data.\n               */\n              flush: function flush() {\n                // cancel the pending idle period and run the idle function\n                // immediately\n                clearTimeout(this._idleTimeout);\n\n                this._onIdle();\n              },\n\n              /** Function: sendPresence\n               *  Helper function to send presence stanzas. The main benefit is for\n               *  sending presence stanzas for which you expect a responding presence\n               *  stanza with the same id (for example when leaving a chat room).\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the presence.\n               */\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\n                var _this3 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendPresence\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this3.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    if (stanza.getAttribute('type') === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else if (callback) {\n                      callback(stanza);\n                    }\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** Function: sendIQ\n               *  Helper function to send IQ stanzas.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza to send.\n               *    (Function) callback - The callback function for a successful request.\n               *    (Function) errback - The callback function for a failed or timed\n               *      out request.  On timeout, the stanza will be null.\n               *    (Integer) timeout - The time specified in milliseconds for a\n               *      timeout to occur.\n               *\n               *  Returns:\n               *    The id used to send the IQ.\n              */\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\n                var _this4 = this;\n\n                var timeoutHandler = null;\n\n                if (typeof elem.tree === \"function\") {\n                  elem = elem.tree();\n                }\n\n                var id = elem.getAttribute('id');\n\n                if (!id) {\n                  // inject id if not found\n                  id = this.getUniqueId(\"sendIQ\");\n                  elem.setAttribute(\"id\", id);\n                }\n\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\n                  var handler = this.addHandler(function (stanza) {\n                    // remove timeout handler if there is one\n                    if (timeoutHandler) {\n                      _this4.deleteTimedHandler(timeoutHandler);\n                    }\n\n                    var iqtype = stanza.getAttribute('type');\n\n                    if (iqtype === 'result') {\n                      if (callback) {\n                        callback(stanza);\n                      }\n                    } else if (iqtype === 'error') {\n                      if (errback) {\n                        errback(stanza);\n                      }\n                    } else {\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\n                      error.name = \"StropheError\";\n                      throw error;\n                    }\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\n\n                  if (timeout) {\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\n                      // get rid of normal handler\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\n\n\n                      if (errback) {\n                        errback(null);\n                      }\n\n                      return false;\n                    });\n                  }\n                }\n\n                this.send(elem);\n                return id;\n              },\n\n              /** PrivateFunction: _queueData\n               *  Queue outgoing data for later sending.  Also ensures that the data\n               *  is a DOMElement.\n               */\n              _queueData: function _queueData(element) {\n                if (element === null || !element.tagName || !element.childNodes) {\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\n                  error.name = \"StropheError\";\n                  throw error;\n                }\n\n                this._data.push(element);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                var _this5 = this;\n\n                this._data.push(\"restart\");\n\n                this._proto._sendRestart();\n\n                this._idleTimeout = setTimeout(function () {\n                  return _this5._onIdle();\n                }, 100);\n              },\n\n              /** Function: addTimedHandler\n               *  Add a timed handler to the connection.\n               *\n               *  This function adds a timed handler.  The provided handler will\n               *  be called every period milliseconds until it returns false,\n               *  the connection is terminated, or the handler is removed.  Handlers\n               *  that wish to continue being invoked should return true.\n               *\n               *  Because of method binding it is necessary to save the result of\n               *  this function if you wish to remove a handler with\n               *  deleteTimedHandler().\n               *\n               *  Note that user handlers are not active until authentication is\n               *  successful.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addTimedHandler: function addTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** Function: deleteTimedHandler\n               *  Delete a timed handler for a connection.\n               *\n               *  This function removes a timed handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\n               *  but is the reference returned from addTimedHandler().\n               *\n               *  Parameters:\n               *    (Strophe.TimedHandler) handRef - The handler reference.\n               */\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeTimeds.push(handRef);\n              },\n\n              /** Function: addHandler\n               *  Add a stanza handler for the connection.\n               *\n               *  This function adds a stanza handler to the connection.  The\n               *  handler callback will be called for any stanza that matches\n               *  the parameters.  Note that if multiple parameters are supplied,\n               *  they must all match for the handler to be invoked.\n               *\n               *  The handler will receive the stanza that triggered it as its argument.\n               *  *The handler should return true if it is to be invoked again;\n               *  returning false will remove the handler after it returns.*\n               *\n               *  As a convenience, the ns parameters applies to the top level element\n               *  and also any of its immediate children.  This is primarily to make\n               *  matching /iq/query elements easy.\n               *\n               *  Options\n               *  ~~~~~~~\n               *  With the options argument, you can specify boolean flags that affect how\n               *  matches are being done.\n               *\n               *  Currently two flags exist:\n               *\n               *  - matchBareFromJid:\n               *      When set to true, the from parameter and the\n               *      from attribute on the stanza will be matched as bare JIDs instead\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n               *      value of options. The default value for matchBareFromJid is false.\n               *\n               *  - ignoreNamespaceFragment:\n               *      When set to true, a fragment specified on the stanza's namespace\n               *      URL will be ignored when it's matched with the one configured for\n               *      the handler.\n               *\n               *      This means that if you register like this:\n               *      >   connection.addHandler(\n               *      >       handler,\n               *      >       'http://jabber.org/protocol/muc',\n               *      >       null, null, null, null,\n               *      >       {'ignoreNamespaceFragment': true}\n               *      >   );\n               *\n               *      Then a stanza with XML namespace of\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\n               *      'http://jabber.org/protocol/muc' will be matched.\n               *\n               *  Deleting the handler\n               *  ~~~~~~~~~~~~~~~~~~~~\n               *  The return value should be saved if you wish to remove the handler\n               *  with deleteHandler().\n               *\n               *  Parameters:\n               *    (Function) handler - The user callback.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String|Array) type - The stanza type (or types if an array) to match.\n               *    (String) id - The stanza id attribute to match.\n               *    (String) from - The stanza from attribute to match.\n               *    (String) options - The handler options\n               *\n               *  Returns:\n               *    A reference to the handler that can be used to remove it.\n               */\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** Function: deleteHandler\n               *  Delete a stanza handler for a connection.\n               *\n               *  This function removes a stanza handler from the connection.  The\n               *  handRef parameter is *not* the function passed to addHandler(),\n               *  but is the reference returned from addHandler().\n               *\n               *  Parameters:\n               *    (Strophe.Handler) handRef - The handler reference.\n               */\n              deleteHandler: function deleteHandler(handRef) {\n                // this must be done in the Idle loop so that we don't change\n                // the handlers during iteration\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\n                // prevent it from getting added\n\n                var i = this.addHandlers.indexOf(handRef);\n\n                if (i >= 0) {\n                  this.addHandlers.splice(i, 1);\n                }\n              },\n\n              /** Function: registerSASLMechanisms\n               *\n               * Register the SASL mechanisms which will be supported by this instance of\n               * Strophe.Connection (i.e. which this XMPP client will support).\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n               *\n               */\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n                this.mechanisms = {};\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\n              },\n\n              /** Function: registerSASLMechanism\n               *\n               * Register a single SASL mechanism, to be supported by this client.\n               *\n               *  Parameters:\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n               *\n               */\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\n                this.mechanisms[mechanism.prototype.name] = mechanism;\n              },\n\n              /** Function: disconnect\n               *  Start the graceful disconnection process.\n               *\n               *  This function starts the disconnection process.  This process starts\n               *  by sending unavailable presence and sending BOSH body of type\n               *  terminate.  A timeout handler makes sure that disconnection happens\n               *  even if the BOSH server does not respond.\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\n               *  so the connection object won't generate successful requests (which were already opened).\n               *\n               *  The user supplied connection callback will be notified of the\n               *  progress as this process happens.\n               *\n               *  Parameters:\n               *    (String) reason - The reason the disconnect is occuring.\n               */\n              disconnect: function disconnect(reason) {\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n                Strophe.warn(\"Disconnect was called because: \" + reason);\n\n                if (this.connected) {\n                  var pres = false;\n                  this.disconnecting = true;\n\n                  if (this.authenticated) {\n                    pres = $pres({\n                      'xmlns': Strophe.NS.CLIENT,\n                      'type': 'unavailable'\n                    });\n                  } // setup timeout handler\n\n\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\n\n                  this._proto._disconnect(pres);\n                } else {\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\n\n                  this._proto._abortAllRequests();\n\n                  this._doDisconnect();\n                }\n              },\n\n              /** PrivateFunction: _changeConnectStatus\n               *  _Private_ helper function that makes sure plugins and the user's\n               *  callback are notified of connection status changes.\n               *\n               *  Parameters:\n               *    (Integer) status - the new connection status, one of the values\n               *      in Strophe.Status\n               *    (String) condition - the error condition or null\n               *    (XMLElement) elem - The triggering stanza.\n               */\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\n                // notify all plugins listening for status changes\n                for (var k in Strophe._connectionPlugins) {\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\n                    var plugin = this[k];\n\n                    if (plugin.statusChanged) {\n                      try {\n                        plugin.statusChanged(status, condition);\n                      } catch (err) {\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\n                      }\n                    }\n                  }\n                } // notify the user's callback\n\n\n                if (this.connect_callback) {\n                  try {\n                    this.connect_callback(status, condition, elem);\n                  } catch (e) {\n                    Strophe._handleError(e);\n\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\n                  }\n                }\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  This is the last piece of the disconnection logic.  This resets the\n               *  connection and alerts the user's connection callback.\n               */\n              _doDisconnect: function _doDisconnect(condition) {\n                if (typeof this._idleTimeout === \"number\") {\n                  clearTimeout(this._idleTimeout);\n                } // Cancel Disconnect Timeout\n\n\n                if (this._disconnectTimeout !== null) {\n                  this.deleteTimedHandler(this._disconnectTimeout);\n                  this._disconnectTimeout = null;\n                }\n\n                Strophe.debug(\"_doDisconnect was called\");\n\n                this._proto._doDisconnect();\n\n                this.authenticated = false;\n                this.disconnecting = false;\n                this.restored = false; // delete handlers\n\n                this.handlers = [];\n                this.timedHandlers = [];\n                this.removeTimeds = [];\n                this.removeHandlers = [];\n                this.addTimeds = [];\n                this.addHandlers = []; // tell the parent we disconnected\n\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n\n                this.connected = false;\n              },\n\n              /** PrivateFunction: _dataRecv\n               *  _Private_ handler to processes incoming data from the the connection.\n               *\n               *  Except for _connect_cb handling the initial connection request,\n               *  this function handles the incoming data for all requests.  This\n               *  function also fires stanza handlers that match each incoming\n               *  stanza.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that has data ready.\n               *    (string) req - The stanza a raw string (optiona).\n               */\n              _dataRecv: function _dataRecv(req, raw) {\n                var _this6 = this;\n\n                Strophe.debug(\"_dataRecv called\");\n\n                var elem = this._proto._reqToData(req);\n\n                if (elem === null) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                    this.xmlInput(elem.childNodes[0]);\n                  } else {\n                    this.xmlInput(elem);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(elem));\n                  }\n                } // remove handlers scheduled for deletion\n\n\n                while (this.removeHandlers.length > 0) {\n                  var hand = this.removeHandlers.pop();\n                  var i = this.handlers.indexOf(hand);\n\n                  if (i >= 0) {\n                    this.handlers.splice(i, 1);\n                  }\n                } // add handlers scheduled for addition\n\n\n                while (this.addHandlers.length > 0) {\n                  this.handlers.push(this.addHandlers.pop());\n                } // handle graceful disconnect\n\n\n                if (this.disconnecting && this._proto._emptyQueue()) {\n                  this._doDisconnect();\n\n                  return;\n                }\n\n                var type = elem.getAttribute(\"type\");\n\n                if (type !== null && type === \"terminate\") {\n                  // Don't process stanzas that come in after disconnect\n                  if (this.disconnecting) {\n                    return;\n                  } // an error occurred\n\n\n                  var cond = elem.getAttribute(\"condition\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n                  } else {\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\n                  }\n\n                  this._doDisconnect(cond);\n\n                  return;\n                } // send each incoming stanza through the handler chain\n\n\n                Strophe.forEachChild(elem, null, function (child) {\n                  // process handlers\n                  var newList = _this6.handlers;\n                  _this6.handlers = [];\n\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\n                    // one of the handlers throws an exception\n\n                    try {\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\n                        if (_hand.run(child)) {\n                          _this6.handlers.push(_hand);\n                        }\n                      } else {\n                        _this6.handlers.push(_hand);\n                      }\n                    } catch (e) {\n                      // if the handler throws an exception, we consider it as false\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n                    }\n                  }\n                });\n              },\n\n              /** Attribute: mechanisms\n               *  SASL Mechanisms available for Connection.\n               */\n              mechanisms: {},\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the initial connection request\n               *  response from the BOSH server. It is used to set up authentication\n               *  handlers and start the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The current request.\n               *    (Function) _callback - low level (xmpp) connect callback function.\n               *      Useful for plugins with their own xmpp connect callback (when they\n               *      want to do something special).\n               */\n              _connect_cb: function _connect_cb(req, _callback, raw) {\n                Strophe.debug(\"_connect_cb was called\");\n                this.connected = true;\n                var bodyWrap;\n\n                try {\n                  bodyWrap = this._proto._reqToData(req);\n                } catch (e) {\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\n                    throw e;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\n\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n                }\n\n                if (!bodyWrap) {\n                  return;\n                }\n\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                    this.xmlInput(bodyWrap.childNodes[0]);\n                  } else {\n                    this.xmlInput(bodyWrap);\n                  }\n                }\n\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n                  if (raw) {\n                    this.rawInput(raw);\n                  } else {\n                    this.rawInput(Strophe.serialize(bodyWrap));\n                  }\n                }\n\n                var conncheck = this._proto._connect_cb(bodyWrap);\n\n                if (conncheck === Strophe.Status.CONNFAIL) {\n                  return;\n                } // Check for the stream:features tag\n\n\n                var hasFeatures;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n                } else {\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\n                }\n\n                if (!hasFeatures) {\n                  this._proto._no_auth_received(_callback);\n\n                  return;\n                }\n\n                var matched = [];\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n\n                if (mechanisms.length > 0) {\n                  for (var i = 0; i < mechanisms.length; i++) {\n                    var mech = Strophe.getText(mechanisms[i]);\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n                  }\n                }\n\n                if (matched.length === 0) {\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                    // There are no matching SASL mechanisms and also no legacy\n                    // auth available.\n                    this._proto._no_auth_received(_callback);\n\n                    return;\n                  }\n                }\n\n                if (this.do_authentication !== false) {\n                  this.authenticate(matched);\n                }\n              },\n\n              /** Function: sortMechanismsByPriority\n               *\n               *  Sorts an array of objects with prototype SASLMechanism according to\n               *  their priorities.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               */\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n                // Sorting mechanisms according to priority.\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\n                  var higher = i;\n\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                      higher = j;\n                    }\n                  }\n\n                  if (higher !== i) {\n                    var swap = mechanisms[i];\n                    mechanisms[i] = mechanisms[higher];\n                    mechanisms[higher] = swap;\n                  }\n                }\n\n                return mechanisms;\n              },\n\n              /** Function: authenticate\n               * Set up authentication\n               *\n               *  Continues the initial connection request by setting up authentication\n               *  handlers and starting the authentication process.\n               *\n               *  SASL authentication will be attempted if available, otherwise\n               *  the code will fall back to legacy authentication.\n               *\n               *  Parameters:\n               *    (Array) matched - Array of SASL mechanisms supported.\n               *\n               */\n              authenticate: function authenticate(matched) {\n                if (!this._attemptSASLAuth(matched)) {\n                  this._attemptLegacyAuth();\n                }\n              },\n\n              /** PrivateFunction: _attemptSASLAuth\n               *\n               *  Iterate through an array of SASL mechanisms and attempt authentication\n               *  with the highest priority (enabled) mechanism.\n               *\n               *  Parameters:\n               *    (Array) mechanisms - Array of SASL mechanisms.\n               *\n               *  Returns:\n               *    (Boolean) mechanism_found - true or false, depending on whether a\n               *          valid SASL mechanism was found with which authentication could be\n               *          started.\n               */\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n                var mechanism_found = false;\n\n                for (var i = 0; i < mechanisms.length; ++i) {\n                  if (!mechanisms[i].prototype.test(this)) {\n                    continue;\n                  }\n\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\n                  this._sasl_mechanism = new mechanisms[i]();\n\n                  this._sasl_mechanism.onStart(this);\n\n                  var request_auth_exchange = $build(\"auth\", {\n                    'xmlns': Strophe.NS.SASL,\n                    'mechanism': this._sasl_mechanism.name\n                  });\n\n                  if (this._sasl_mechanism.isClientFirst) {\n                    var response = this._sasl_mechanism.onChallenge(this, null);\n\n                    request_auth_exchange.t(btoa(response));\n                  }\n\n                  this.send(request_auth_exchange.tree());\n                  mechanism_found = true;\n                  break;\n                }\n\n                return mechanism_found;\n              },\n\n              /** PrivateFunction: _sasl_challenge_cb\n               *  _Private_ handler for the SASL challenge\n               *\n               */\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n                var challenge = atob(Strophe.getText(elem));\n\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\n\n                var stanza = $build('response', {\n                  'xmlns': Strophe.NS.SASL\n                });\n\n                if (response !== \"\") {\n                  stanza.t(btoa(response));\n                }\n\n                this.send(stanza.tree());\n                return true;\n              },\n\n              /** PrivateFunction: _attemptLegacyAuth\n               *\n               *  Attempt legacy (i.e. non-SASL) authentication.\n               */\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\n                if (Strophe.getNodeFromJid(this.jid) === null) {\n                  // we don't have a node, which is required for non-anonymous\n                  // client connections\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\n\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n                } else {\n                  // Fall back to legacy authentication\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\n\n                  this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                  }).c(\"query\", {\n                    xmlns: Strophe.NS.AUTH\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\n                }\n              },\n\n              /** PrivateFunction: _onLegacyAuthIQResult\n               *  _Private_ handler for legacy authentication.\n               *\n               *  This handler is called in response to the initial <iq type='get'/>\n               *  for legacy authentication.  It builds an authentication <iq/> and\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\n               *  handle the result\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\n                // build plaintext auth iq\n                var iq = $iq({\n                  type: \"set\",\n                  id: \"_auth_2\"\n                }).c('query', {\n                  xmlns: Strophe.NS.AUTH\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\n\n                if (!Strophe.getResourceFromJid(this.jid)) {\n                  // since the user has not supplied a resource, we pick\n                  // a default one here.  unlike other auth methods, the server\n                  // cannot do this for us.\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n                }\n\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\n\n                this.send(iq.tree());\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_success_cb\n               *  _Private_ handler for succesful SASL authentication.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_success_cb: function _sasl_success_cb(elem) {\n                var _this7 = this;\n\n                if (this._sasl_data[\"server-signature\"]) {\n                  var serverSignature;\n                  var success = atob(Strophe.getText(elem));\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n                  var matches = success.match(attribMatch);\n\n                  if (matches[1] === \"v\") {\n                    serverSignature = matches[2];\n                  }\n\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n                    // remove old handlers\n                    this.deleteHandler(this._sasl_failure_handler);\n                    this._sasl_failure_handler = null;\n\n                    if (this._sasl_challenge_handler) {\n                      this.deleteHandler(this._sasl_challenge_handler);\n                      this._sasl_challenge_handler = null;\n                    }\n\n                    this._sasl_data = {};\n                    return this._sasl_failure_cb(null);\n                  }\n                }\n\n                Strophe.info(\"SASL authentication succeeded.\");\n\n                if (this._sasl_mechanism) {\n                  this._sasl_mechanism.onSuccess();\n                } // remove old handlers\n\n\n                this.deleteHandler(this._sasl_failure_handler);\n                this._sasl_failure_handler = null;\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                var streamfeature_handlers = [];\n\n                var wrapper = function wrapper(handlers, elem) {\n                  while (handlers.length) {\n                    _this7.deleteHandler(handlers.pop());\n                  }\n\n                  _this7._onStreamFeaturesAfterSASL(elem);\n\n                  return false;\n                };\n\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, null, \"stream:features\", null, null));\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\n                  return wrapper(streamfeature_handlers, elem);\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\n\n                this._sendRestart();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\n                // save stream:features for future usage\n                this.features = elem;\n\n                for (var i = 0; i < elem.childNodes.length; i++) {\n                  var child = elem.childNodes[i];\n\n                  if (child.nodeName === 'bind') {\n                    this.do_bind = true;\n                  }\n\n                  if (child.nodeName === 'session') {\n                    this.do_session = true;\n                  }\n                }\n\n                if (!this.do_bind) {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n\n                  return false;\n                } else if (!this.options.explicitResourceBinding) {\n                  this.bind();\n                } else {\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\n                }\n\n                return false;\n              },\n\n              /** Function: bind\n               *\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\n               *\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\n               *\n               *  If `explicitResourceBinding` was set to a truthy value in the options\n               *  passed to the Strophe.Connection constructor, then this function needs\n               *  to be called explicitly by the client author.\n               *\n               *  Otherwise it'll be called automatically as soon as the XMPP server\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\n               */\n              bind: function bind() {\n                if (!this.do_bind) {\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\n                  return;\n                }\n\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\n\n                var resource = Strophe.getResourceFromJid(this.jid);\n\n                if (resource) {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).c('resource', {}).t(resource).tree());\n                } else {\n                  this.send($iq({\n                    type: \"set\",\n                    id: \"_bind_auth_2\"\n                  }).c('bind', {\n                    xmlns: Strophe.NS.BIND\n                  }).tree());\n                }\n              },\n\n              /** PrivateFunction: _onResourceBindIQ\n               *  _Private_ handler for binding result and session start.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Resource binding failed.\");\n                  var conflict = elem.getElementsByTagName(\"conflict\");\n                  var condition;\n\n                  if (conflict.length > 0) {\n                    condition = Strophe.ErrorCondition.CONFLICT;\n                  }\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n\n                  return false;\n                } // TODO - need to grab errors\n\n\n                var bind = elem.getElementsByTagName(\"bind\");\n\n                if (bind.length > 0) {\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\n\n                  if (jidNode.length > 0) {\n                    this.jid = Strophe.getText(jidNode[0]);\n\n                    if (this.do_session) {\n                      this._establishSession();\n                    } else {\n                      this.authenticated = true;\n\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                    }\n                  }\n                } else {\n                  Strophe.warn(\"Resource binding failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n              },\n\n              /** PrivateFunction: _establishSession\n               *  Send IQ request to establish a session with the XMPP server.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               */\n              _establishSession: function _establishSession() {\n                if (!this.do_session) {\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\n                }\n\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\n\n                this.send($iq({\n                  type: \"set\",\n                  id: \"_session_auth_2\"\n                }).c('session', {\n                  xmlns: Strophe.NS.SESSION\n                }).tree());\n              },\n\n              /** PrivateFunction: _onSessionResultIQ\n               *  _Private_ handler for the server's IQ response to a client's session\n               *  request.\n               *\n               *  This sets Connection.authenticated to true on success, which\n               *  starts the processing of user handlers.\n               *\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\n               *\n               *  Note: The protocol for session establishment has been determined as\n               *  unnecessary and removed in RFC-6121.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  Strophe.warn(\"Session creation failed.\");\n\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  return false;\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _sasl_failure_cb\n               *  _Private_ handler for SASL authentication failure.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The matching stanza.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\n                // delete unneeded handlers\n                if (this._sasl_success_handler) {\n                  this.deleteHandler(this._sasl_success_handler);\n                  this._sasl_success_handler = null;\n                }\n\n                if (this._sasl_challenge_handler) {\n                  this.deleteHandler(this._sasl_challenge_handler);\n                  this._sasl_challenge_handler = null;\n                }\n\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\n\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                return false;\n              },\n\n              /** PrivateFunction: _auth2_cb\n               *  _Private_ handler to finish legacy authentication.\n               *\n               *  This handler is called when the result from the jabber:iq:auth\n               *  <iq/> stanza is returned.\n               *\n               *  Parameters:\n               *    (XMLElement) elem - The stanza that triggered the callback.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _auth2_cb: function _auth2_cb(elem) {\n                if (elem.getAttribute(\"type\") === \"result\") {\n                  this.authenticated = true;\n\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                } else if (elem.getAttribute(\"type\") === \"error\") {\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n\n                  this.disconnect('authentication failed');\n                }\n\n                return false;\n              },\n\n              /** PrivateFunction: _addSysTimedHandler\n               *  _Private_ function to add a system level timed handler.\n               *\n               *  This function is used to add a Strophe.TimedHandler for the\n               *  library code.  System timed handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Integer) period - The period of the handler.\n               *    (Function) handler - The callback function.\n               */\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n                var thand = new Strophe.TimedHandler(period, handler);\n                thand.user = false;\n                this.addTimeds.push(thand);\n                return thand;\n              },\n\n              /** PrivateFunction: _addSysHandler\n               *  _Private_ function to add a system level stanza handler.\n               *\n               *  This function is used to add a Strophe.Handler for the\n               *  library code.  System stanza handlers are allowed to run before\n               *  authentication is complete.\n               *\n               *  Parameters:\n               *    (Function) handler - The callback function.\n               *    (String) ns - The namespace to match.\n               *    (String) name - The stanza name to match.\n               *    (String) type - The stanza type attribute to match.\n               *    (String) id - The stanza id attribute to match.\n               */\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\n                hand.user = false;\n                this.addHandlers.push(hand);\n                return hand;\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  If the graceful disconnect process does not complete within the\n               *  time allotted, this handler finishes the disconnect anyway.\n               *\n               *  Returns:\n               *    false to remove the handler.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                Strophe.debug(\"_onDisconnectTimeout was called\");\n\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n\n                this._proto._onDisconnectTimeout(); // actually disconnect\n\n\n                this._doDisconnect();\n\n                return false;\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler to process events during idle cycle.\n               *\n               *  This handler is called every 100ms to fire timed handlers that\n               *  are ready and keep poll requests going.\n               */\n              _onIdle: function _onIdle() {\n                var _this8 = this;\n\n                // add timed handlers scheduled for addition\n                // NOTE: we add before remove in the case a timed handler is\n                // added and then deleted before the next _onIdle() call.\n                while (this.addTimeds.length > 0) {\n                  this.timedHandlers.push(this.addTimeds.pop());\n                } // remove timed handlers that have been scheduled for deletion\n\n\n                while (this.removeTimeds.length > 0) {\n                  var thand = this.removeTimeds.pop();\n                  var i = this.timedHandlers.indexOf(thand);\n\n                  if (i >= 0) {\n                    this.timedHandlers.splice(i, 1);\n                  }\n                } // call ready timed handlers\n\n\n                var now = new Date().getTime();\n                var newList = [];\n\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\n                  var _thand = this.timedHandlers[_i6];\n\n                  if (this.authenticated || !_thand.user) {\n                    var since = _thand.lastCalled + _thand.period;\n\n                    if (since - now <= 0) {\n                      if (_thand.run()) {\n                        newList.push(_thand);\n                      }\n                    } else {\n                      newList.push(_thand);\n                    }\n                  }\n                }\n\n                this.timedHandlers = newList;\n                clearTimeout(this._idleTimeout);\n\n                this._proto._onIdle(); // reactivate the timer only if connected\n\n\n                if (this.connected) {\n                  this._idleTimeout = setTimeout(function () {\n                    return _this8._onIdle();\n                  }, 100);\n                }\n              }\n            };\n            /** Class: Strophe.SASLMechanism\n             *\n             *  encapsulates SASL authentication mechanisms.\n             *\n             *  User code may override the priority for each mechanism or disable it completely.\n             *  See <priority> for information about changing priority and <test> for informatian on\n             *  how to disable a mechanism.\n             *\n             *  By default, all mechanisms are enabled and the priorities are\n             *\n             *      OAUTHBEARER - 60\n             *      SCRAM-SHA1 - 50\n             *      DIGEST-MD5 - 40\n             *      PLAIN - 30\n             *      ANONYMOUS - 20\n             *      EXTERNAL - 10\n             *\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\n             */\n\n            /**\n             * PrivateConstructor: Strophe.SASLMechanism\n             * SASL auth mechanism abstraction.\n             *\n             *  Parameters:\n             *    (String) name - SASL Mechanism name.\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\n             *    (Number) priority - Priority.\n             *\n             *  Returns:\n             *    A new Strophe.SASLMechanism object.\n             */\n\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n              /** PrivateVariable: name\n               *  Mechanism name.\n               */\n              this.name = name;\n              /** PrivateVariable: isClientFirst\n               *  If client sends response without initial server challenge.\n               */\n\n              this.isClientFirst = isClientFirst;\n              /** Variable: priority\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n               *  Users may override this to prioritize mechanisms differently.\n               *\n               *  In the default configuration the priorities are\n               *\n               *  SCRAM-SHA1 - 40\n               *  DIGEST-MD5 - 30\n               *  Plain - 20\n               *\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n               *\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               */\n\n              this.priority = priority;\n            };\n\n            Strophe.SASLMechanism.prototype = {\n              /**\n               *  Function: test\n               *  Checks if mechanism able to run.\n               *  To disable a mechanism, make this return false;\n               *\n               *  To disable plain authentication run\n               *  > Strophe.SASLPlain.test = function() {\n               *  >   return false;\n               *  > }\n               *\n               *  See <SASL mechanisms> for a list of available mechanisms.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *\n               *  Returns:\n               *    (Boolean) If mechanism was able to run.\n               */\n              test: function test(connection) {\n                return true;\n              },\n\n              /** PrivateFunction: onStart\n               *  Called before starting mechanism on some connection.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               */\n              onStart: function onStart(connection) {\n                this._connection = connection;\n              },\n\n              /** PrivateFunction: onChallenge\n               *  Called by protocol implementation on incoming challenge. If client is\n               *  first (isClientFirst === true) challenge will be null on the first call.\n               *\n               *  Parameters:\n               *    (Strophe.Connection) connection - Target Connection.\n               *    (String) challenge - current challenge to handle.\n               *\n               *  Returns:\n               *    (String) Mechanism response.\n               */\n              onChallenge: function onChallenge(connection, challenge) {\n                throw new Error(\"You should implement challenge handling!\");\n              },\n\n              /** PrivateFunction: onFailure\n               *  Protocol informs mechanism implementation about SASL failure.\n               */\n              onFailure: function onFailure() {\n                this._connection = null;\n              },\n\n              /** PrivateFunction: onSuccess\n               *  Protocol informs mechanism implementation about SASL success.\n               */\n              onSuccess: function onSuccess() {\n                this._connection = null;\n              }\n            };\n            /** Constants: SASL mechanisms\n             *  Available authentication mechanisms\n             *\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n             */\n            // Building SASL callbacks\n\n            /** PrivateConstructor: SASLAnonymous\n             *  SASL ANONYMOUS authentication.\n             */\n\n            Strophe.SASLAnonymous = function () {};\n\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\n              return connection.authcid === null;\n            };\n            /** PrivateConstructor: SASLPlain\n             *  SASL PLAIN authentication.\n             */\n\n\n            Strophe.SASLPlain = function () {};\n\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\n            Strophe.SASLPlain.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n              var auth_str = connection.authzid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.authcid;\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLSHA1\n             *  SASL SCRAM SHA 1 authentication.\n             */\n\n\n            Strophe.SASLSHA1 = function () {};\n\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\n            Strophe.SASLSHA1.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n              auth_str += \",r=\";\n              auth_str += cnonce;\n              connection._sasl_data.cnonce = cnonce;\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n              auth_str = \"n,,\" + auth_str;\n\n              this.onChallenge = function (connection, challenge) {\n                var nonce, salt, iter, Hi, U, U_old, i, k;\n                var responseText = \"c=biws,\";\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\n                var cnonce = connection._sasl_data.cnonce;\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n                while (challenge.match(attribMatch)) {\n                  var matches = challenge.match(attribMatch);\n                  challenge = challenge.replace(matches[0], \"\");\n\n                  switch (matches[1]) {\n                    case \"r\":\n                      nonce = matches[2];\n                      break;\n\n                    case \"s\":\n                      salt = matches[2];\n                      break;\n\n                    case \"i\":\n                      iter = matches[2];\n                      break;\n                  }\n                }\n\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\n                  connection._sasl_data = {};\n                  return connection._sasl_failure_cb();\n                }\n\n                responseText += \"r=\" + nonce;\n                authMessage += responseText;\n                salt = atob(salt);\n                salt += \"\\x00\\x00\\x00\\x01\";\n                var pass = utils.utf16to8(connection.pass);\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n\n                for (i = 1; i < iter; i++) {\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n\n                  for (k = 0; k < 5; k++) {\n                    Hi[k] ^= U[k];\n                  }\n\n                  U_old = U;\n                }\n\n                Hi = SHA1.binb2str(Hi);\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n                for (k = 0; k < 5; k++) {\n                  clientKey[k] ^= clientSignature[k];\n                }\n\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n                return responseText;\n              };\n\n              return auth_str;\n            };\n            /** PrivateConstructor: SASLMD5\n             *  SASL DIGEST MD5 authentication.\n             */\n\n\n            Strophe.SASLMD5 = function () {};\n\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\n            Strophe.SASLMD5.prototype.test = function (connection) {\n              return connection.authcid !== null;\n            };\n            /** PrivateFunction: _quote\n             *  _Private_ utility function to backslash escape and quote strings.\n             *\n             *  Parameters:\n             *    (String) str - The string to be quoted.\n             *\n             *  Returns:\n             *    quoted string\n             */\n\n\n            Strophe.SASLMD5.prototype._quote = function (str) {\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\n            };\n\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n              var realm = \"\";\n              var host = null;\n              var nonce = \"\";\n              var qop = \"\";\n\n              while (challenge.match(attribMatch)) {\n                var matches = challenge.match(attribMatch);\n                challenge = challenge.replace(matches[0], \"\");\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n\n                switch (matches[1]) {\n                  case \"realm\":\n                    realm = matches[2];\n                    break;\n\n                  case \"nonce\":\n                    nonce = matches[2];\n                    break;\n\n                  case \"qop\":\n                    qop = matches[2];\n                    break;\n\n                  case \"host\":\n                    host = matches[2];\n                    break;\n                }\n              }\n\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\n\n              if (host !== null) {\n                digest_uri = digest_uri + \"/\" + host;\n              }\n\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n              var A2 = 'AUTHENTICATE:' + digest_uri;\n              var responseText = \"\";\n              responseText += 'charset=utf-8,';\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n              responseText += 'realm=' + this._quote(realm) + ',';\n              responseText += 'nonce=' + this._quote(nonce) + ',';\n              responseText += 'nc=00000001,';\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\n              responseText += 'qop=auth';\n\n              this.onChallenge = function () {\n                return \"\";\n              };\n\n              return responseText;\n            };\n            /** PrivateConstructor: SASLOAuthBearer\n             *  SASL OAuth Bearer authentication.\n             */\n\n\n            Strophe.SASLOAuthBearer = function () {};\n\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n              var auth_str = 'n,';\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + 'a=' + connection.authzid;\n              }\n\n              auth_str = auth_str + ',';\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + 'auth=Bearer ';\n              auth_str = auth_str + connection.pass;\n              auth_str = auth_str + \"\\x01\";\n              auth_str = auth_str + \"\\x01\";\n              return utils.utf16to8(auth_str);\n            };\n            /** PrivateConstructor: SASLExternal\n             *  SASL EXTERNAL authentication.\n             *\n             *  The EXTERNAL mechanism allows a client to request the server to use\n             *  credentials established by means external to the mechanism to\n             *  authenticate the client. The external means may be, for instance,\n             *  TLS services.\n             */\n\n\n            Strophe.SASLExternal = function () {};\n\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\n               * authcid contained or implied in the client certificate is the JID (i.e.\n               * authzid) with which the user wants to log in as.\n               *\n               * To NOT send the authzid, the user should therefore set the authcid equal\n               * to the JID when instantiating a new Strophe.Connection object.\n               */\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\n            };\n            /** PrivateConstructor: SASLXOAuth2\n             *  SASL X-OAuth2 authentication.\n             */\n\n\n            Strophe.SASLXOAuth2 = function () {};\n\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\n              return connection.pass !== null;\n            };\n\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n              var auth_str = \"\\0\";\n\n              if (connection.authcid !== null) {\n                auth_str = auth_str + connection.authzid;\n              }\n\n              auth_str = auth_str + \"\\0\";\n              auth_str = auth_str + connection.pass;\n              return utils.utf16to8(auth_str);\n            };\n            var core = {\n              'Strophe': Strophe,\n              '$build': $build,\n              '$iq': $iq,\n              '$msg': $msg,\n              '$pres': $pres,\n              'SHA1': SHA1,\n              'MD5': MD5,\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\n              'b64_sha1': SHA1.b64_sha1,\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\n              'str_sha1': SHA1.str_sha1\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$1 = core.Strophe;\n            var $build$1 = core.$build;\n            /** PrivateClass: Strophe.Request\n             *  _Private_ helper class that provides a cross implementation abstraction\n             *  for a BOSH related XMLHttpRequest.\n             *\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\n             *  information.  It is not meant to be used from user's code.\n             */\n\n            /** PrivateConstructor: Strophe.Request\n             *  Create and initialize a new Strophe.Request object.\n             *\n             *  Parameters:\n             *    (XMLElement) elem - The XML data to be sent in the request.\n             *    (Function) func - The function that will be called when the\n             *      XMLHttpRequest readyState changes.\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\n             *    (Integer) sends - The number of times this same request has been sent.\n             */\n\n            Strophe$1.Request = function (elem, func, rid, sends) {\n              this.id = ++Strophe$1._requestId;\n              this.xmlData = elem;\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\n              // from this one.\n\n              this.origFunc = func;\n              this.func = func;\n              this.rid = rid;\n              this.date = NaN;\n              this.sends = sends || 0;\n              this.abort = false;\n              this.dead = null;\n\n              this.age = function () {\n                if (!this.date) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.date) / 1000;\n              };\n\n              this.timeDead = function () {\n                if (!this.dead) {\n                  return 0;\n                }\n\n                var now = new Date();\n                return (now - this.dead) / 1000;\n              };\n\n              this.xhr = this._newXHR();\n            };\n\n            Strophe$1.Request.prototype = {\n              /** PrivateFunction: getResponse\n               *  Get a response from the underlying XMLHttpRequest.\n               *\n               *  This function attempts to get a response from the request and checks\n               *  for errors.\n               *\n               *  Throws:\n               *    \"parsererror\" - A parser error occured.\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\n               *\n               *  Returns:\n               *    The DOM element tree of the response.\n               */\n              getResponse: function getResponse() {\n                var node = null;\n\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n                  node = this.xhr.responseXML.documentElement;\n\n                  if (node.tagName === \"parsererror\") {\n                    Strophe$1.error(\"invalid response received\");\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\n                    throw new Error(\"parsererror\");\n                  }\n                } else if (this.xhr.responseText) {\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n\n                  if (!node) {\n                    throw new Error('Parsing produced null node');\n                  } else if (node.querySelector('parsererror')) {\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\n                    var error = new Error();\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\n                    throw error;\n                  }\n                }\n\n                return node;\n              },\n\n              /** PrivateFunction: _newXHR\n               *  _Private_ helper function to create XMLHttpRequests.\n               *\n               *  This function creates XMLHttpRequests across all implementations.\n               *\n               *  Returns:\n               *    A new XMLHttpRequest.\n               */\n              _newXHR: function _newXHR() {\n                var xhr = null;\n\n                if (window.XMLHttpRequest) {\n                  xhr = new XMLHttpRequest();\n\n                  if (xhr.overrideMimeType) {\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n                  }\n                } else if (window.ActiveXObject) {\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n                } // use Function.bind() to prepend ourselves as an argument\n\n\n                xhr.onreadystatechange = this.func.bind(null, this);\n                return xhr;\n              }\n            };\n            /** Class: Strophe.Bosh\n             *  _Private_ helper class that handles BOSH Connections\n             *\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: bosh.js\n             *  A JavaScript library to enable BOSH in Strophejs.\n             *\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n             *  More information on BOSH can be found in XEP 124.\n             */\n\n            /** PrivateConstructor: Strophe.Bosh\n             *  Create and initialize a Strophe.Bosh object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n             *\n             *  Returns:\n             *    A new Strophe.Bosh object.\n             */\n\n            Strophe$1.Bosh = function (connection) {\n              this._conn = connection;\n              /* request id for body tags */\n\n              this.rid = Math.floor(Math.random() * 4294967295);\n              /* The current session ID. */\n\n              this.sid = null; // default BOSH values\n\n              this.hold = 1;\n              this.wait = 60;\n              this.window = 5;\n              this.errors = 0;\n              this.inactivity = null;\n              this.lastResponseHeaders = null;\n              this._requests = [];\n            };\n\n            Strophe$1.Bosh.prototype = {\n              /** Variable: strip\n               *\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n               *\n               *  > Strophe.Bosh.prototype.strip = \"body\";\n               *\n               *  This will enable stripping of the body tag in both\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n               */\n              strip: null,\n\n              /** PrivateFunction: _buildBody\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <body/> element.\n               */\n              _buildBody: function _buildBody() {\n                var bodyWrap = $build$1('body', {\n                  'rid': this.rid++,\n                  'xmlns': Strophe$1.NS.HTTPBIND\n                });\n\n                if (this.sid !== null) {\n                  bodyWrap.attrs({\n                    'sid': this.sid\n                  });\n                }\n\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n                  this._cacheSession();\n                }\n\n                return bodyWrap;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection\n               */\n              _reset: function _reset() {\n                this.rid = Math.floor(Math.random() * 4294967295);\n                this.sid = null;\n                this.errors = 0;\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function that initializes the BOSH connection.\n               *\n               *  Creates and sends the Request that initializes the BOSH connection.\n               */\n              _connect: function _connect(wait, hold, route) {\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.errors = 0;\n\n                var body = this._buildBody().attrs({\n                  \"to\": this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"wait\": this.wait,\n                  \"hold\": this.hold,\n                  \"content\": \"text/xml; charset=utf-8\",\n                  \"ver\": \"1.6\",\n                  \"xmpp:version\": \"1.0\",\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                });\n\n                if (route) {\n                  body.attrs({\n                    'route': route\n                  });\n                }\n\n                var _connect_cb = this._conn._connect_cb;\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _attach\n               *  Attach to an already created and authenticated BOSH session.\n               *\n               *  This function is provided to allow Strophe to attach to BOSH\n               *  sessions which have been created externally, perhaps by a Web\n               *  application.  This is often used to support auto-login type features\n               *  without putting user credentials into the page.\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *    (String) sid - The SID of the BOSH session.\n               *    (String) rid - The current RID of the BOSH session.  This RID\n               *      will be used by the next request.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n                this._conn.jid = jid;\n                this.sid = sid;\n                this.rid = rid;\n                this._conn.connect_callback = callback;\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\n                this._conn.authenticated = true;\n                this._conn.connected = true;\n                this.wait = wait || this.wait;\n                this.hold = hold || this.hold;\n                this.window = wind || this.window;\n\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\n              },\n\n              /** PrivateFunction: _restore\n               *  Attempt to restore a cached BOSH session\n               *\n               *  Parameters:\n               *    (String) jid - The full JID that is bound by the session.\n               *      This parameter is optional but recommended, specifically in cases\n               *      where prebinded BOSH sessions are used where it's important to know\n               *      that the right session is being restored.\n               *    (Function) callback The connect callback function.\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n               *      time the server will wait before returning an empty result for\n               *      a request.  The default setting of 60 seconds is recommended.\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n               *      number of connections the server will hold at one time.  This\n               *      should almost always be set to 1 (the default).\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\n               *      allowed range of request ids that are valid.  The default is 5.\n               */\n              _restore: function _restore(jid, callback, wait, hold, wind) {\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\n                // we compare only the domains:\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\n                  this._conn.restored = true;\n\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n                } else {\n                  var error = new Error(\"_restore: no restoreable session.\");\n                  error.name = \"StropheSessionError\";\n                  throw error;\n                }\n              },\n\n              /** PrivateFunction: _cacheSession\n               *  _Private_ handler for the beforeunload event.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _cacheSession: function _cacheSession() {\n                if (this._conn.authenticated) {\n                  if (this._conn.jid && this.rid && this.sid) {\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                      'jid': this._conn.jid,\n                      'rid': this.rid,\n                      'sid': this.sid\n                    }));\n                  }\n                } else {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ handler for initial connection request.\n               *\n               *  This handler is used to process the Bosh-part of the initial request.\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var typ = bodyWrap.getAttribute(\"type\");\n\n                if (typ !== null && typ === \"terminate\") {\n                  // an error occurred\n                  var cond = bodyWrap.getAttribute(\"condition\");\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\n\n                  if (cond !== null) {\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                      cond = \"conflict\";\n                    }\n\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\n                  }\n\n                  this._conn._doDisconnect(cond);\n\n                  return Strophe$1.Status.CONNFAIL;\n                } // check to make sure we don't overwrite these if _connect_cb is\n                // called multiple times in the case of missing stream:features\n\n\n                if (!this.sid) {\n                  this.sid = bodyWrap.getAttribute(\"sid\");\n                }\n\n                var wind = bodyWrap.getAttribute('requests');\n\n                if (wind) {\n                  this.window = parseInt(wind, 10);\n                }\n\n                var hold = bodyWrap.getAttribute('hold');\n\n                if (hold) {\n                  this.hold = parseInt(hold, 10);\n                }\n\n                var wait = bodyWrap.getAttribute('wait');\n\n                if (wait) {\n                  this.wait = parseInt(wait, 10);\n                }\n\n                var inactivity = bodyWrap.getAttribute('inactivity');\n\n                if (inactivity) {\n                  this.inactivity = parseInt(inactivity, 10);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ part of Connection.disconnect for Bosh\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                this._sendTerminate(pres);\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Resets the SID and RID.\n               */\n              _doDisconnect: function _doDisconnect() {\n                this.sid = null;\n                this.rid = Math.floor(Math.random() * 4294967295);\n\n                if (this._conn._sessionCachingSupported()) {\n                  window.sessionStorage.removeItem('strophe-bosh-session');\n                }\n\n                this._conn.nextValidRid(this.rid);\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the Request queue is empty.\n               *\n               *  Returns:\n               *    True, if there are no Requests queued, False otherwise.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return this._requests.length === 0;\n              },\n\n              /** PrivateFunction: _callProtocolErrorHandlers\n               *  _Private_ function to call error handlers registered for HTTP errors.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n                var reqStatus = this._getRequestStatus(req);\n\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n\n                if (err_callback) {\n                  err_callback.call(this, reqStatus);\n                }\n              },\n\n              /** PrivateFunction: _hitError\n               *  _Private_ function to handle the error count.\n               *\n               *  Requests are resent automatically until their error count reaches\n               *  5.  Each time an error is encountered, this function is called to\n               *  increment the count and disconnect if the count is too high.\n               *\n               *  Parameters:\n               *    (Integer) reqStatus - The request status.\n               */\n              _hitError: function _hitError(reqStatus) {\n                this.errors++;\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\n\n                if (this.errors > 4) {\n                  this._conn._onDisconnectTimeout();\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received and sends a blank poll request.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\n\n                if (callback) {\n                  callback = callback.bind(this._conn);\n                } else {\n                  callback = this._conn._connect_cb.bind(this._conn);\n                }\n\n                var body = this._buildBody();\n\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  Cancels all remaining Requests and clears the queue.\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\n                this._abortAllRequests();\n              },\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {\n                while (this._requests.length > 0) {\n                  var req = this._requests.pop();\n\n                  req.abort = true;\n                  req.xhr.abort();\n\n                  req.xhr.onreadystatechange = function () {};\n                }\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ handler called by Strophe.Connection._onIdle\n               *\n               *  Sends all queued Requests or polls with empty Request if there are none.\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data; // if no requests are in progress, poll\n\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\n                  data.push(null);\n                }\n\n                if (this._conn.paused) {\n                  return;\n                }\n\n                if (this._requests.length < 2 && data.length > 0) {\n                  var body = this._buildBody();\n\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      if (data[i] === \"restart\") {\n                        body.attrs({\n                          \"to\": this._conn.domain,\n                          \"xml:lang\": \"en\",\n                          \"xmpp:restart\": \"true\",\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\n                        });\n                      } else {\n                        body.cnode(data[i]).up();\n                      }\n                    }\n                  }\n\n                  delete this._conn._data;\n                  this._conn._data = [];\n\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\n\n                  this._throttledRequestHandler();\n                }\n\n                if (this._requests.length > 0) {\n                  var time_elapsed = this._requests[0].age();\n\n                  if (this._requests[0].dead !== null) {\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                      this._throttledRequestHandler();\n                    }\n                  }\n\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\n\n                    this._throttledRequestHandler();\n                  }\n                }\n              },\n\n              /** PrivateFunction: _getRequestStatus\n               *\n               *  Returns the HTTP status code from a Strophe.Request\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The Strophe.Request instance.\n               *    (Integer) def - The default value that should be returned if no\n               *          status value was found.\n               */\n              _getRequestStatus: function _getRequestStatus(req, def) {\n                var reqStatus;\n\n                if (req.xhr.readyState === 4) {\n                  try {\n                    reqStatus = req.xhr.status;\n                  } catch (e) {\n                    // ignore errors from undefined status attribute. Works\n                    // around a browser bug\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\n                  }\n                }\n\n                if (typeof reqStatus === \"undefined\") {\n                  reqStatus = typeof def === 'number' ? def : 0;\n                }\n\n                return reqStatus;\n              },\n\n              /** PrivateFunction: _onRequestStateChange\n               *  _Private_ handler for Strophe.Request state changes.\n               *\n               *  This function is called when the XMLHttpRequest readyState changes.\n               *  It contains a lot of error handling logic for the many ways that\n               *  requests can fail, and calls the request callback when requests\n               *  succeed.\n               *\n               *  Parameters:\n               *    (Function) func - The handler for the request.\n               *    (Strophe.Request) req - The request that is changing readyState.\n               */\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\n\n                if (req.abort) {\n                  req.abort = false;\n                  return;\n                }\n\n                if (req.xhr.readyState !== 4) {\n                  // The request is not yet complete\n                  return;\n                }\n\n                var reqStatus = this._getRequestStatus(req);\n\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n\n                if (this.disconnecting && reqStatus >= 400) {\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  return;\n                }\n\n                var valid_request = reqStatus > 0 && reqStatus < 500;\n                var too_many_retries = req.sends > this._conn.maxRetries;\n\n                if (valid_request || too_many_retries) {\n                  // remove from internal queue\n                  this._removeRequest(req);\n\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\n                }\n\n                if (reqStatus === 200) {\n                  // request succeeded\n                  var reqIs0 = this._requests[0] === req;\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n                  // restart the other - both will be in the first spot, as the\n                  // completed request has been removed from the queue already\n\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\n                    this._restartRequest(0);\n                  }\n\n                  this._conn.nextValidRid(Number(req.rid) + 1);\n\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n                  func(req); // call handler\n\n                  this.errors = 0;\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\n                  // request failed\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n\n                  this._hitError(reqStatus);\n\n                  this._callProtocolErrorHandlers(req);\n\n                  if (reqStatus >= 400 && reqStatus < 500) {\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n                }\n\n                if (!valid_request && !too_many_retries) {\n                  this._throttledRequestHandler();\n                } else if (too_many_retries && !this._conn.connected) {\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\n                }\n              },\n\n              /** PrivateFunction: _processRequest\n               *  _Private_ function to process a request in the queue.\n               *\n               *  This function takes requests off the queue and sends them and\n               *  restarts dead requests.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _processRequest: function _processRequest(i) {\n                var _this = this;\n\n                var req = this._requests[i];\n\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\n\n\n                if (req.sends > this._conn.maxRetries) {\n                  this._conn._onDisconnectTimeout();\n\n                  return;\n                }\n\n                var time_elapsed = req.age();\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\n\n                if (primary_timeout || secondary_timeout || server_error) {\n                  if (secondary_timeout) {\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\n                  }\n\n                  req.abort = true;\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\n\n                  req.xhr.onreadystatechange = function () {};\n\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\n                  req = this._requests[i];\n                }\n\n                if (req.xhr.readyState === 0) {\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n                  try {\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                      // IE9 doesn't have setRequestHeader\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\n                    }\n\n                    if (this._conn.options.withCredentials) {\n                      req.xhr.withCredentials = true;\n                    }\n                  } catch (e2) {\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\n\n                    if (!this._conn.connected) {\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\n                    }\n\n                    this._conn.disconnect();\n\n                    return;\n                  } // Fires the XHR request -- may be invoked immediately\n                  // or on a gradually expanding retry window for reconnects\n\n\n                  var sendFunc = function sendFunc() {\n                    req.date = new Date();\n\n                    if (_this._conn.options.customHeaders) {\n                      var headers = _this._conn.options.customHeaders;\n\n                      for (var header in headers) {\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\n                          req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                      }\n                    }\n\n                    req.xhr.send(req.data);\n                  }; // Implement progressive backoff for reconnects --\n                  // First retry (send === 1) should also be instantaneous\n\n\n                  if (req.sends > 1) {\n                    // Using a cube of the retry number creates a nicely\n                    // expanding retry window\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\n                    setTimeout(function () {\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\n                      sendFunc();\n                    }, backoff);\n                  } else {\n                    sendFunc();\n                  }\n\n                  req.sends++;\n\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                    } else {\n                      this._conn.xmlOutput(req.xmlData);\n                    }\n                  }\n\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\n                    this._conn.rawOutput(req.data);\n                  }\n                } else {\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\n                }\n              },\n\n              /** PrivateFunction: _removeRequest\n               *  _Private_ function to remove a request from the queue.\n               *\n               *  Parameters:\n               *    (Strophe.Request) req - The request to remove.\n               */\n              _removeRequest: function _removeRequest(req) {\n                Strophe$1.debug(\"removing request\");\n\n                for (var i = this._requests.length - 1; i >= 0; i--) {\n                  if (req === this._requests[i]) {\n                    this._requests.splice(i, 1);\n                  }\n                } // IE6 fails on setting to null, so set to empty function\n\n\n                req.xhr.onreadystatechange = function () {};\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _restartRequest\n               *  _Private_ function to restart a request that is presumed dead.\n               *\n               *  Parameters:\n               *    (Integer) i - The index of the request in the queue.\n               */\n              _restartRequest: function _restartRequest(i) {\n                var req = this._requests[i];\n\n                if (req.dead === null) {\n                  req.dead = new Date();\n                }\n\n                this._processRequest(i);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * Tries to extract a stanza out of a Request Object.\n               * When this fails the current connection will be disconnected.\n               *\n               *  Parameters:\n               *    (Object) req - The Request.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(req) {\n                try {\n                  return req.getResponse();\n                } catch (e) {\n                  if (e.message !== \"parsererror\") {\n                    throw e;\n                  }\n\n                  this._conn.disconnect(\"strophe-parsererror\");\n                }\n              },\n\n              /** PrivateFunction: _sendTerminate\n               *  _Private_ function to send initial disconnect sequence.\n               *\n               *  This is the first step in a graceful disconnect.  It sends\n               *  the BOSH server a terminate body and includes an unavailable\n               *  presence if authentication has completed.\n               */\n              _sendTerminate: function _sendTerminate(pres) {\n                Strophe$1.debug(\"_sendTerminate was called\");\n\n                var body = this._buildBody().attrs({\n                  type: \"terminate\"\n                });\n\n                if (pres) {\n                  body.cnode(pres.tree());\n                }\n\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\n\n                this._requests.push(req);\n\n                this._throttledRequestHandler();\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for BOSH\n               *\n               * Just triggers the RequestHandler to send the messages that are in the queue\n               */\n              _send: function _send() {\n                var _this2 = this;\n\n                clearTimeout(this._conn._idleTimeout);\n\n                this._throttledRequestHandler();\n\n                this._conn._idleTimeout = setTimeout(function () {\n                  return _this2._conn._onIdle();\n                }, 100);\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                this._throttledRequestHandler();\n\n                clearTimeout(this._conn._idleTimeout);\n              },\n\n              /** PrivateFunction: _throttledRequestHandler\n               *  _Private_ function to throttle requests to the connection window.\n               *\n               *  This function makes sure we don't send requests so fast that the\n               *  request ids overflow the connection window in the case that one\n               *  request died.\n               */\n              _throttledRequestHandler: function _throttledRequestHandler() {\n                if (!this._requests) {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\n                } else {\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\n                }\n\n                if (!this._requests || this._requests.length === 0) {\n                  return;\n                }\n\n                if (this._requests.length > 0) {\n                  this._processRequest(0);\n                }\n\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\n                  this._processRequest(1);\n                }\n              }\n            };\n\n            /*\n                This program is distributed under the terms of the MIT license.\n                Please see the LICENSE file for details.\n\n                Copyright 2006-2008, OGG, LLC\n            */\n            var Strophe$2 = core.Strophe;\n            var $build$2 = core.$build;\n            /** Class: Strophe.WebSocket\n             *  _Private_ helper class that handles WebSocket Connections\n             *\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n             */\n\n            /** File: websocket.js\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n             *\n             *  This file implements XMPP over WebSockets for Strophejs.\n             *  If a Connection is established with a Websocket url (ws://...)\n             *  Strophe will use WebSockets.\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\n             *  http://tools.ietf.org/html/rfc7395\n             *\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n             */\n\n            /** PrivateConstructor: Strophe.Websocket\n             *  Create and initialize a Strophe.WebSocket object.\n             *  Currently only sets the connection Object.\n             *\n             *  Parameters:\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n             *\n             *  Returns:\n             *    A new Strophe.WebSocket object.\n             */\n\n            Strophe$2.Websocket = function (connection) {\n              this._conn = connection;\n              this.strip = \"wrapper\";\n              var service = connection.service;\n\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n                // If the service is not an absolute URL, assume it is a path and put the absolute\n                // URL together from options, current URL and the path.\n                var new_service = \"\";\n\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n                  new_service += \"ws\";\n                } else {\n                  new_service += \"wss\";\n                }\n\n                new_service += \"://\" + window.location.host;\n\n                if (service.indexOf(\"/\") !== 0) {\n                  new_service += window.location.pathname + service;\n                } else {\n                  new_service += service;\n                }\n\n                connection.service = new_service;\n              }\n            };\n\n            Strophe$2.Websocket.prototype = {\n              /** PrivateFunction: _buildStream\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\n               *\n               *  Returns:\n               *    A Strophe.Builder with a <stream> element.\n               */\n              _buildStream: function _buildStream() {\n                return $build$2(\"open\", {\n                  \"xmlns\": Strophe$2.NS.FRAMING,\n                  \"to\": this._conn.domain,\n                  \"version\": '1.0'\n                });\n              },\n\n              /** PrivateFunction: _check_streamerror\n               * _Private_ checks a message for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               *    connectstatus - The ConnectStatus that will be set on error.\n               *  Returns:\n               *     true if there was a streamerror, false otherwise.\n               */\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n                var errors;\n\n                if (bodyWrap.getElementsByTagNameNS) {\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\n                } else {\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\n                }\n\n                if (errors.length === 0) {\n                  return false;\n                }\n\n                var error = errors[0];\n                var condition = \"\";\n                var text = \"\";\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n\n                for (var i = 0; i < error.childNodes.length; i++) {\n                  var e = error.childNodes[i];\n\n                  if (e.getAttribute(\"xmlns\") !== ns) {\n                    break;\n                  }\n\n                  if (e.nodeName === \"text\") {\n                    text = e.textContent;\n                  } else {\n                    condition = e.nodeName;\n                  }\n                }\n\n                var errorString = \"WebSocket stream error: \";\n\n                if (condition) {\n                  errorString += condition;\n                } else {\n                  errorString += \"unknown\";\n                }\n\n                if (text) {\n                  errorString += \" - \" + text;\n                }\n\n                Strophe$2.error(errorString); // close the connection on stream_error\n\n                this._conn._changeConnectStatus(connectstatus, condition);\n\n                this._conn._doDisconnect();\n\n                return true;\n              },\n\n              /** PrivateFunction: _reset\n               *  Reset the connection.\n               *\n               *  This function is called by the reset function of the Strophe Connection.\n               *  Is not needed by WebSockets.\n               */\n              _reset: function _reset() {\n                return;\n              },\n\n              /** PrivateFunction: _connect\n               *  _Private_ function called by Strophe.Connection.connect\n               *\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\n               *  Does nothing if there already is a WebSocket.\n               */\n              _connect: function _connect() {\n                // Ensure that there is no open WebSocket from a previous Connection.\n                this._closeSocket(); // Create the new WobSocket\n\n\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\n                this.socket.onopen = this._onOpen.bind(this);\n                this.socket.onerror = this._onError.bind(this);\n                this.socket.onclose = this._onClose.bind(this);\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n              },\n\n              /** PrivateFunction: _connect_cb\n               *  _Private_ function called by Strophe.Connection._connect_cb\n               *\n               * checks for stream:error\n               *\n               *  Parameters:\n               *    (Strophe.Request) bodyWrap - The received stanza.\n               */\n              _connect_cb: function _connect_cb(bodyWrap) {\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\n\n                if (error) {\n                  return Strophe$2.Status.CONNFAIL;\n                }\n              },\n\n              /** PrivateFunction: _handleStreamStart\n               * _Private_ function that checks the opening <open /> tag for errors.\n               *\n               * Disconnects if there is an error and returns false, true otherwise.\n               *\n               *  Parameters:\n               *    (Node) message - Stanza containing the <open /> tag.\n               */\n              _handleStreamStart: function _handleStreamStart(message) {\n                var error = false; // Check for errors in the <open /> tag\n\n                var ns = message.getAttribute(\"xmlns\");\n\n                if (typeof ns !== \"string\") {\n                  error = \"Missing xmlns in <open />\";\n                } else if (ns !== Strophe$2.NS.FRAMING) {\n                  error = \"Wrong xmlns in <open />: \" + ns;\n                }\n\n                var ver = message.getAttribute(\"version\");\n\n                if (typeof ver !== \"string\") {\n                  error = \"Missing version in <open />\";\n                } else if (ver !== \"1.0\") {\n                  error = \"Wrong version in <open />: \" + ver;\n                }\n\n                if (error) {\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\n\n                  this._conn._doDisconnect();\n\n                  return false;\n                }\n\n                return true;\n              },\n\n              /** PrivateFunction: _connect_cb_wrapper\n               * _Private_ function that handles the first connection messages.\n               *\n               * On receiving an opening stream tag this callback replaces itself with the real\n               * message handler. On receiving a stream error the connection is terminated.\n               */\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n                  // Strip the XML Declaration, if there is one\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n                  if (data === '') return;\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n\n                  this._conn.xmlInput(streamStart);\n\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\n\n\n                  if (this._handleStreamStart(streamStart)) {\n                    //_connect_cb will check for stream:error and disconnect on error\n                    this._connect_cb(streamStart);\n                  }\n                } else if (message.data.indexOf(\"<close \") === 0) {\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n                  // Parse the raw string to an XML element\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\n\n                  this._conn.xmlInput(parsedMessage);\n\n                  this._conn.rawInput(message.data);\n\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n\n                  if (see_uri) {\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\n\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\n\n                    if (isSecureRedirect) {\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n\n                      this._conn.reset();\n\n                      this._conn.service = see_uri;\n\n                      this._connect();\n                    }\n                  } else {\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\n\n                    this._conn._doDisconnect();\n                  }\n                } else {\n                  var string = this._streamWrap(message.data);\n\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n                  this.socket.onmessage = this._onMessage.bind(this);\n\n                  this._conn._connect_cb(elem, null, message.data);\n                }\n              },\n\n              /** PrivateFunction: _disconnect\n               *  _Private_ function called by Strophe.Connection.disconnect\n               *\n               *  Disconnects and sends a last stanza if one is given\n               *\n               *  Parameters:\n               *    (Request) pres - This stanza will be sent before disconnecting.\n               */\n              _disconnect: function _disconnect(pres) {\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n                  if (pres) {\n                    this._conn.send(pres);\n                  }\n\n                  var close = $build$2(\"close\", {\n                    \"xmlns\": Strophe$2.NS.FRAMING\n                  });\n\n                  this._conn.xmlOutput(close.tree());\n\n                  var closeString = Strophe$2.serialize(close);\n\n                  this._conn.rawOutput(closeString);\n\n                  try {\n                    this.socket.send(closeString);\n                  } catch (e) {\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\n                  }\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _doDisconnect\n               *  _Private_ function to disconnect.\n               *\n               *  Just closes the Socket for WebSockets\n               */\n              _doDisconnect: function _doDisconnect() {\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\n\n                this._closeSocket();\n              },\n\n              /** PrivateFunction _streamWrap\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\n               */\n              _streamWrap: function _streamWrap(stanza) {\n                return \"<wrapper>\" + stanza + '</wrapper>';\n              },\n\n              /** PrivateFunction: _closeSocket\n               *  _Private_ function to close the WebSocket.\n               *\n               *  Closes the socket if it is still open and deletes it\n               */\n              _closeSocket: function _closeSocket() {\n                if (this.socket) {\n                  try {\n                    this.socket.onclose = null;\n                    this.socket.onerror = null;\n                    this.socket.onmessage = null;\n                    this.socket.close();\n                  } catch (e) {\n                    Strophe$2.debug(e.message);\n                  }\n                }\n\n                this.socket = null;\n              },\n\n              /** PrivateFunction: _emptyQueue\n               * _Private_ function to check if the message queue is empty.\n               *\n               *  Returns:\n               *    True, because WebSocket messages are send immediately after queueing.\n               */\n              _emptyQueue: function _emptyQueue() {\n                return true;\n              },\n\n              /** PrivateFunction: _onClose\n               * _Private_ function to handle websockets closing.\n               *\n               * Nothing to do here for WebSockets\n               */\n              _onClose: function _onClose(e) {\n                if (this._conn.connected && !this._conn.disconnecting) {\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\n\n                  this._conn._doDisconnect();\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n                  // in case the onError callback was not called (Safari 10 does not\n                  // call onerror when the initial connection fails) we need to\n                  // dispatch a CONNFAIL status update to be consistent with the\n                  // behavior on other browsers.\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\n\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                  this._conn._doDisconnect();\n                } else {\n                  Strophe$2.debug(\"Websocket closed\");\n                }\n              },\n\n              /** PrivateFunction: _no_auth_received\n               *\n               * Called on stream start/restart when no stream:features\n               * has been received.\n               */\n              _no_auth_received: function _no_auth_received(callback) {\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\n\n                if (callback) {\n                  callback.call(this._conn);\n                }\n\n                this._conn._doDisconnect();\n              },\n\n              /** PrivateFunction: _onDisconnectTimeout\n               *  _Private_ timeout handler for handling non-graceful disconnection.\n               *\n               *  This does nothing for WebSockets\n               */\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\n\n              /** PrivateFunction: _abortAllRequests\n               *  _Private_ helper function that makes sure all pending requests are aborted.\n               */\n              _abortAllRequests: function _abortAllRequests() {},\n\n              /** PrivateFunction: _onError\n               * _Private_ function to handle websockets errors.\n               *\n               * Parameters:\n               * (Object) error - The websocket error.\n               */\n              _onError: function _onError(error) {\n                Strophe$2.error(\"Websocket error \" + error);\n\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n\n                this._disconnect();\n              },\n\n              /** PrivateFunction: _onIdle\n               *  _Private_ function called by Strophe.Connection._onIdle\n               *\n               *  sends all queued stanzas\n               */\n              _onIdle: function _onIdle() {\n                var data = this._conn._data;\n\n                if (data.length > 0 && !this._conn.paused) {\n                  for (var i = 0; i < data.length; i++) {\n                    if (data[i] !== null) {\n                      var stanza = void 0;\n\n                      if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                      } else {\n                        stanza = data[i];\n                      }\n\n                      var rawStanza = Strophe$2.serialize(stanza);\n\n                      this._conn.xmlOutput(stanza);\n\n                      this._conn.rawOutput(rawStanza);\n\n                      this.socket.send(rawStanza);\n                    }\n                  }\n\n                  this._conn._data = [];\n                }\n              },\n\n              /** PrivateFunction: _onMessage\n               * _Private_ function to handle websockets messages.\n               *\n               * This function parses each of the messages as if they are full documents.\n               * [TODO : We may actually want to use a SAX Push parser].\n               *\n               * Since all XMPP traffic starts with\n               *  <stream:stream version='1.0'\n               *                 xml:lang='en'\n               *                 xmlns='jabber:client'\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\n               *                 id='3697395463'\n               *                 from='SERVER'>\n               *\n               * The first stanza will always fail to be parsed.\n               *\n               * Additionally, the seconds stanza will always be <stream:features> with\n               * the stream NS defined in the previous stanza, so we need to 'force'\n               * the inclusion of the NS in this stanza.\n               *\n               * Parameters:\n               * (string) message - The websocket message.\n               */\n              _onMessage: function _onMessage(message) {\n                var elem; // check for closing stream\n\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n\n                if (message.data === close) {\n                  this._conn.rawInput(close);\n\n                  this._conn.xmlInput(message);\n\n                  if (!this._conn.disconnecting) {\n                    this._conn._doDisconnect();\n                  }\n\n                  return;\n                } else if (message.data.search(\"<open \") === 0) {\n                  // This handles stream restarts\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n\n                  if (!this._handleStreamStart(elem)) {\n                    return;\n                  }\n                } else {\n                  var data = this._streamWrap(message.data);\n\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n                }\n\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\n                  return;\n                } //handle unavailable presence stanza before disconnecting\n\n\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n                  this._conn.xmlInput(elem);\n\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\n                  // wait for the </stream:stream> tag before we close the connection\n\n\n                  return;\n                }\n\n                this._conn._dataRecv(elem, message.data);\n              },\n\n              /** PrivateFunction: _onOpen\n               * _Private_ function to handle websockets connection setup.\n               *\n               * The opening stream tag is sent here.\n               */\n              _onOpen: function _onOpen() {\n                Strophe$2.debug(\"Websocket open\");\n\n                var start = this._buildStream();\n\n                this._conn.xmlOutput(start.tree());\n\n                var startString = Strophe$2.serialize(start);\n\n                this._conn.rawOutput(startString);\n\n                this.socket.send(startString);\n              },\n\n              /** PrivateFunction: _reqToData\n               * _Private_ function to get a stanza out of a request.\n               *\n               * WebSockets don't use requests, so the passed argument is just returned.\n               *\n               *  Parameters:\n               *    (Object) stanza - The stanza.\n               *\n               *  Returns:\n               *    The stanza that was passed.\n               */\n              _reqToData: function _reqToData(stanza) {\n                return stanza;\n              },\n\n              /** PrivateFunction: _send\n               *  _Private_ part of the Connection.send function for WebSocket\n               *\n               * Just flushes the messages that are in the queue\n               */\n              _send: function _send() {\n                this._conn.flush();\n              },\n\n              /** PrivateFunction: _sendRestart\n               *\n               *  Send an xmpp:restart stanza.\n               */\n              _sendRestart: function _sendRestart() {\n                clearTimeout(this._conn._idleTimeout);\n\n                this._conn._onIdle.bind(this._conn)();\n              }\n            };\n\n            global$1.Strophe = core.Strophe;\n            global$1.$build = core.$build;\n            global$1.$iq = core.$iq;\n            global$1.$msg = core.$msg;\n            global$1.$pres = core.$pres;\n\n            return core;\n\n}));\n","/**\n * The events for the conference.\n */\n\n/**\n * Event indicates that the current conference audio input switched between audio\n * input states,i.e. with or without audio input.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * A participant avatar has changed.\n */\nexport const AVATAR_CHANGED = 'conference.avatarChanged';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * UTC conference timestamp when first participant joined.\n */\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * Event indicates that the current selected input device has no signal\n */\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\n\n/**\n * Event indicates that the current microphone used by the conference is noisy.\n */\nexport const NOISY_MIC = 'conference.noisy_mic';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import EventEmitter from 'events';\n\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport RTPStats from './RTPStatsCollector';\n\nimport browser from '../browser';\nimport ScriptUtil from '../util/ScriptUtil';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as StatisticsEvents from '../../service/statistics/Events';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl\n                || 'https://api.callstats.io/static/callstats-ws.min.js',\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.userName,\n        aliasName: options.aliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n    if (typeof options.pcStatsInterval === 'number') {\n        Statistics.pcStatsInterval = options.pcStatsInterval;\n    }\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} aliasName - The alias name to use when initializing callstats.\n * @property {string} userName - The user name to use when initializing callstats.\n * @property {string} callStatsConfIDNamespace - A namespace to prepend the\n * callstats conference ID with.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        this.callStatsApplicationLogsDisabled\n            = this.options.callStatsApplicationLogsDisabled;\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n\n        if (!this.options.callStatsConfIDNamespace) {\n            logger.warn('\"callStatsConfIDNamespace\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.pcStatsInterval = 10000;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                Statistics.pcStatsInterval,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this._getCallStatsConfID(),\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Constructs the CallStats conference ID based on the options currently\n * configured in this instance.\n * @return {string}\n * @private\n */\nStatistics.prototype._getCallStatsConfID = function() {\n    // The conference ID is case sensitive!!!\n    return this.options.callStatsConfIDNamespace\n        ? `${this.options.callStatsConfIDNamespace}/${this.options.roomName}`\n        : this.options.roomName;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callStatsApplicationLogsDisabled) {\n            return;\n        }\n\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this._getCallStatsConfID(), overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport RandomUtil from '../util/RandomUtil';\nimport browser from '../browser';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribute is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by\n     *  moving it to the beginning of the payload types\n     *  list (modifies the given mline in place).  If there\n     *  are multiple options within the same codec (multiple h264\n     *  profiles, for instance), this will prefer the first one\n     *  that is found.\n     * @param {object} videoMLine the video mline object from\n     *  an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferVideoCodec(videoMLine, codecName) {\n        let payloadType = null;\n\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        for (let i = 0; i < videoMLine.rtp.length; ++i) {\n            const rtp = videoMLine.rtp[i];\n\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                payloadType = rtp.payload;\n                break;\n            }\n        }\n        if (payloadType) {\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const payloadTypes\n                = videoMLine.payloads\n                    .toString()\n                    .split(' ')\n                    .map(p => parseInt(p, 10));\n            const payloadIndex = payloadTypes.indexOf(payloadType);\n\n            payloadTypes.splice(payloadIndex, 1);\n            payloadTypes.unshift(payloadType);\n            videoMLine.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} videoMLine the video mline object from an sdp as parsed\n     * by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     */\n    stripVideoCodec(videoMLine, codecName) {\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        const removePts = [];\n\n        for (const rtp of videoMLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                removePts.push(rtp.payload);\n            }\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = videoMLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = videoMLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other video codecs, disable the stream.\n                videoMLine.port = 0;\n                videoMLine.direction = 'inactive';\n                videoMLine.payloads = '*';\n            } else {\n                videoMLine.payloads = keepPts.join(' ');\n            }\n\n            videoMLine.rtp = videoMLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            videoMLine.fmtp = videoMLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (videoMLine.rtcpFb) {\n                videoMLine.rtcpFb = videoMLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\n * because the mandatory requirements were not met.\n * @type {string}\n */\nexport const ACTION_P2P_DECLINED = 'decline';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates a conference event.\n *\n * @param {string} action - The action of the event.\n * @param {Object} attributes - The attributes to be added to the event.\n * @returns {{type: string, source: string, action: string, attributes: object}}\n */\nexport function createConferenceEvent(action, attributes) {\n    return {\n        action,\n        attributes,\n        source: 'conference',\n        type: TYPE_OPERATIONAL\n    };\n}\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function() {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted'\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the local and remote ICE candidate types\n * for the transport that is currently selected.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createTransportStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'transport.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\n\n    IS_SELECTED_CHANGED: 'rtc.is_selected_change',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The presenter type.\n */\nexport const PRESENTER = 'presenter';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport screenObtainer from './ScreenObtainer';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default resolution to obtain for video tracks if no resolution is specified.\n * This default is used for old gum flow only, as new gum flow uses\n * {@link DEFAULT_CONSTRAINTS}.\n */\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\n\n/**\n * Default devices to obtain when no specific devices are specified. This\n * default is used for old gum flow only.\n */\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 240\n        }\n    }\n};\n\n/**\n * The default frame rate for Screen Sharing.\n */\nconst SS_DEFAULT_FRAME_RATE = 5;\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Disables Highpass Filter\nlet disableHPF = false;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices;\nlet availableDevicesPollTimer;\n\n/**\n * Initialize wrapper function for enumerating devices.\n * TODO: remove this, it should no longer be needed.\n *\n * @returns {?Function}\n */\nfunction initEnumerateDevicesWithCallback() {\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n        return callback => {\n            navigator.mediaDevices.enumerateDevices()\n                .then(callback, () => callback([]));\n        };\n    }\n}\n\n/**\n *\n * @param constraints\n * @param isNewStyleConstraintsSupported\n * @param resolution\n */\nfunction setResolutionConstraints(\n        constraints,\n        isNewStyleConstraintsSupported,\n        resolution) {\n    if (Resolutions[resolution]) {\n        if (isNewStyleConstraintsSupported) {\n            constraints.video.width = {\n                ideal: Resolutions[resolution].width\n            };\n            constraints.video.height = {\n                ideal: Resolutions[resolution].height\n            };\n        }\n\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\n    }\n\n    if (constraints.video.mandatory.minWidth) {\n        constraints.video.mandatory.maxWidth\n            = constraints.video.mandatory.minWidth;\n    }\n\n    if (constraints.video.mandatory.minHeight) {\n        constraints.video.mandatory.maxHeight\n            = constraints.video.mandatory.minHeight;\n    }\n}\n\n/**\n * @param {string[]} um required user media types\n *\n * @param {Object} [options={}] optional parameters\n * @param {string} options.resolution\n * @param {number} options.bandwidth\n * @param {number} options.fps\n * @param {string} options.desktopStream\n * @param {string} options.cameraDeviceId\n * @param {string} options.micDeviceId\n * @param {CameraFacingMode} options.facingMode\n * @param {bool} firefox_fake_device\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @param {bool}   options.screenShareAudio - Used by electron clients to\n * enable system audio screen sharing.\n */\nfunction getConstraints(um, options = {}) {\n    const constraints = {\n        audio: false,\n        video: false\n    };\n\n    // Don't mix new and old style settings for Chromium as this leads\n    // to TypeError in new Chromium versions. @see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\n    // This is a temporary solution, in future we will fully split old and\n    // new style constraints when new versions of Chromium and Firefox will\n    // have stable support of new constraints format. For more information\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\n    const isNewStyleConstraintsSupported\n        = browser.isFirefox()\n            || browser.isSafariWithVP8()\n            || browser.isReactNative();\n\n    if (um.indexOf('video') >= 0) {\n        // same behaviour as true\n        constraints.video = { mandatory: {},\n            optional: [] };\n\n        if (options.cameraDeviceId) {\n            if (isNewStyleConstraintsSupported) {\n                // New style of setting device id.\n                constraints.video.deviceId = options.cameraDeviceId;\n            }\n\n            // Old style.\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\n        } else {\n            // Prefer the front i.e. user-facing camera (to the back i.e.\n            // environment-facing camera, for example).\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\n            // but this probably needs to be decided when updating other\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            if (isNewStyleConstraintsSupported) {\n                constraints.video.facingMode = facingMode;\n            }\n            constraints.video.optional.push({\n                facingMode\n            });\n        }\n\n        if (options.minFps || options.maxFps || options.fps) {\n            // for some cameras it might be necessary to request 30fps\n            // so they choose 30fps mjpg over 10fps yuy2\n            if (options.minFps || options.fps) {\n                // Fall back to options.fps for backwards compatibility\n                options.minFps = options.minFps || options.fps;\n                constraints.video.mandatory.minFrameRate = options.minFps;\n            }\n            if (options.maxFps) {\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\n            }\n        }\n\n        setResolutionConstraints(\n            constraints, isNewStyleConstraintsSupported, options.resolution);\n    }\n    if (um.indexOf('audio') >= 0) {\n        if (browser.isReactNative()) {\n            // The react-native-webrtc project that we're currently using\n            // expects the audio constraint to be a boolean.\n            constraints.audio = true;\n        } else if (browser.isFirefox()) {\n            if (options.micDeviceId) {\n                constraints.audio = {\n                    mandatory: {},\n                    deviceId: options.micDeviceId, // new style\n                    optional: [ {\n                        sourceId: options.micDeviceId // old style\n                    } ] };\n            } else {\n                constraints.audio = true;\n            }\n        } else {\n            // same behaviour as true\n            constraints.audio = { mandatory: {},\n                optional: [] };\n            if (options.micDeviceId) {\n                if (isNewStyleConstraintsSupported) {\n                    // New style of setting device id.\n                    constraints.audio.deviceId = options.micDeviceId;\n                }\n\n                // Old style.\n                constraints.audio.optional.push({\n                    sourceId: options.micDeviceId\n                });\n            }\n\n            // if it is good enough for hangouts...\n            constraints.audio.optional.push(\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    }\n    if (um.indexOf('screen') >= 0) {\n        if (browser.isChrome()) {\n            constraints.video = {\n                mandatory: getSSConstraints({\n                    ...options,\n                    source: 'screen'\n                }),\n                optional: []\n            };\n\n        } else if (browser.isFirefox()) {\n            constraints.video = {\n                mozMediaSource: 'window',\n                mediaSource: 'window',\n                frameRate: options.frameRate || {\n                    min: SS_DEFAULT_FRAME_RATE,\n                    max: SS_DEFAULT_FRAME_RATE\n                }\n            };\n\n        } else {\n            const errmsg\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\n                    + ' and Firefox';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n        }\n    }\n    if (um.indexOf('desktop') >= 0) {\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            }),\n            optional: []\n        };\n\n        // Audio screen sharing for electron only works for screen type devices.\n        // i.e. when the user shares the whole desktop.\n        if (browser.isElectron() && options.screenShareAudio\n            && (options.desktopStream.indexOf('screen') >= 0)) {\n\n            // Provide constraints as described by the electron desktop capturer\n            // documentation here:\n            // https://www.electronjs.org/docs/api/desktop-capturer\n            constraints.audio = { mandatory: {\n                chromeMediaSource: constraints.video.mandatory.chromeMediaSource\n            } };\n\n            delete constraints.video.mandatory.chromeMediaSourceId;\n        }\n    }\n\n    if (options.bandwidth) {\n        if (!constraints.video) {\n            // same behaviour as true\n            constraints.video = { mandatory: {},\n                optional: [] };\n        }\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\n    }\n\n    // we turn audio for both audio and video tracks, the fake audio & video\n    // seems to work only when enabled in one getUserMedia call, we cannot get\n    // fake audio separate by fake video this later can be a problem with some\n    // of the tests\n    if (browser.isFirefox() && options.firefox_fake_device) {\n        // seems to be fixed now, removing this experimental fix, as having\n        // multiple audio tracks brake the tests\n        // constraints.audio = true;\n        constraints.fake = true;\n    }\n\n    return constraints;\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted\n * types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video\n * capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use\n * as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which\n * to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is\n * pointing to.\n * @param {string} options.micDeviceId - The device id for the audio capture\n * device to get audio from.\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @private\n * @returns {Object}\n */\nfunction newGetConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = JSON.parse(JSON.stringify(\n        options.constraints || DEFAULT_CONSTRAINTS));\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        // NOTE(brian): the new-style ('advanced' instead of 'optional')\n        // doesn't seem to carry through the googXXX constraints\n        // Changing back to 'optional' here (even with video using\n        // the 'advanced' style) allows them to be passed through\n        // but also requires the device id to capture to be set in optional\n        // as sourceId otherwise the constraints are considered malformed.\n        if (!constraints.audio.optional) {\n            constraints.audio.optional = [];\n        }\n\n        constraints.audio.optional.push(\n            { sourceId: options.micDeviceId },\n            { echoCancellation: !disableAEC && !disableAP },\n            { googEchoCancellation: !disableAEC && !disableAP },\n            { googAutoGainControl: !disableAGC && !disableAP },\n            { googNoiseSuppression: !disableNS && !disableAP },\n            { googHighpassFilter: !disableHPF && !disableAP },\n            { googNoiseSuppression2: !disableNS && !disableAP },\n            { googEchoCancellation2: !disableAEC && !disableAP },\n            { googAutoGainControl2: !disableAGC && !disableAP }\n        );\n    } else {\n        constraints.audio = false;\n    }\n\n    if (um.indexOf('desktop') >= 0) {\n        if (!constraints.video || typeof constraints.video === 'boolean') {\n            constraints.video = {};\n        }\n\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            })\n        };\n    }\n\n    return constraints;\n}\n\n/**\n * Generates GUM constraints for screen sharing.\n *\n * @param {Object} options - The options passed to\n * <tt>obtainAudioAndVideoPermissions</tt>.\n * @returns {Object} - GUM constraints.\n *\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\n * should make it work for all use cases.\n */\nfunction getSSConstraints(options = {}) {\n    const {\n        desktopStream,\n        frameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: SS_DEFAULT_FRAME_RATE\n        }\n    } = options;\n    const { max, min } = frameRate;\n\n    const constraints = {\n        chromeMediaSource: options.source,\n        maxWidth: window.screen.width,\n        maxHeight: window.screen.height\n    };\n\n    if (typeof min === 'number') {\n        constraints.minFrameRate = min;\n    }\n\n    if (typeof max === 'number') {\n        constraints.maxFrameRate = max;\n    }\n\n    if (typeof desktopStream !== 'undefined') {\n        constraints.chromeMediaSourceId = desktopStream;\n    }\n\n    return constraints;\n}\n\n/**\n * Generates constraints for screen sharing when using getDisplayMedia.\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\n *\n * @returns {Object} - MediaTrackConstraints constraints.\n */\nfunction getTrackSSConstraints(options = {}) {\n    // we used to set height and width in the constraints, but this can lead\n    // to inconsistencies if the browser is on a lower resolution screen\n    // and we share a screen with bigger resolution, so they are now not set\n    const constraints = {\n        frameRate: SS_DEFAULT_FRAME_RATE\n    };\n    const { desktopSharingFrameRate } = options;\n\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\n        constraints.frameRate = desktopSharingFrameRate.max;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info(\n        'list of media devices has changed:',\n        availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\n}\n\n/**\n * Handles the newly created Media Streams.\n * @param streams the new Media Streams\n * @param resolution the resolution of the video streams\n * @returns {*[]} object that describes the new streams\n */\nfunction handleLocalStream(streams, resolution) {\n    let audioStream, desktopStream, videoStream;\n    const res = [];\n\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\n    // the browser, its capabilities, etc. and has taken the decision whether to\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\n    // the specified streams and figure out what we've received based on\n    // obtainAudioAndVideoPermissions' decision.\n    if (streams) {\n        // As mentioned above, certian types of browser (e.g. Chrome) support\n        // (with a result which meets our requirements expressed bellow) calling\n        // getUserMedia once for both audio and video.\n        const audioVideo = streams.audioVideo;\n\n        if (audioVideo) {\n            const audioTracks = audioVideo.getAudioTracks();\n\n            if (audioTracks.length) {\n                audioStream = new MediaStream();\n                for (let i = 0; i < audioTracks.length; i++) {\n                    audioStream.addTrack(audioTracks[i]);\n                }\n            }\n\n            const videoTracks = audioVideo.getVideoTracks();\n\n            if (videoTracks.length) {\n                videoStream = new MediaStream();\n                for (let j = 0; j < videoTracks.length; j++) {\n                    videoStream.addTrack(videoTracks[j]);\n                }\n            }\n        } else {\n            // On other types of browser (e.g. Firefox) we choose (namely,\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\n            // (type).\n            audioStream = streams.audio;\n            videoStream = streams.video;\n        }\n\n        desktopStream = streams.desktop;\n    }\n\n    if (desktopStream) {\n        const { stream, sourceId, sourceType } = desktopStream;\n\n        res.push({\n            stream,\n            sourceId,\n            sourceType,\n            track: stream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.DESKTOP\n        });\n    }\n    if (audioStream) {\n        res.push({\n            stream: audioStream,\n            track: audioStream.getAudioTracks()[0],\n            mediaType: MediaType.AUDIO,\n            videoType: null\n        });\n    }\n    if (videoStream) {\n        res.push({\n            stream: videoStream,\n            track: videoStream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.CAMERA,\n            resolution\n        });\n    }\n\n    return res;\n}\n\n/**\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\n * source of a video element that tries to be browser-agnostic through feature\n * checking. Note though that it was not completely clear from the predating\n * browser-specific implementations what &quot;videoSrc&quot; was because one\n * implementation of {@link RTCUtils#getVideoSrc} would return\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\n * appear to be used anywhere. Generally, the implementation will try to follow\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\n * properties of the specified <tt>element</tt> taking into account vender\n * prefixes.\n *\n * @param element the element whose video source/src is to be set to the\n * specified <tt>stream</tt>\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\n * source/src of <tt>element</tt>\n */\nfunction defaultSetVideoSrc(element, stream) {\n    // srcObject\n    let srcObjectPropertyName = 'srcObject';\n\n    if (!(srcObjectPropertyName in element)) {\n        srcObjectPropertyName = 'mozSrcObject';\n        if (!(srcObjectPropertyName in element)) {\n            srcObjectPropertyName = null;\n        }\n    }\n    if (srcObjectPropertyName) {\n        element[srcObjectPropertyName] = stream;\n\n        return;\n    }\n\n    // src\n    let src;\n\n    if (stream) {\n        src = stream.jitsiObjectURL;\n\n        // Save the created URL for stream so we can reuse it and not keep\n        // creating URLs.\n        if (!src) {\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\n        }\n    }\n    element.src = src || '';\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.disableHPF === 'boolean') {\n            disableHPF = options.disableHPF;\n            logger.info(`Disable HPF: ${disableHPF}`);\n        }\n\n        availableDevices = undefined;\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\n\n        if (browser.usesNewGumFlow()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        } else if (browser.isChromiumBased() // this is chrome < 61\n                || browser.isReactNative()) {\n\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    defaultSetVideoSrc(element, stream);\n\n                    return element;\n                });\n\n            this.getStreamID = function({ id }) {\n                // A. MediaStreams from FF endpoints have the characters '{' and\n                // '}' that make jQuery choke.\n                // B. The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n\n            if (!MediaStream.prototype.getVideoTracks) {\n                MediaStream.prototype.getVideoTracks = function() {\n                    return this.videoTracks;\n                };\n            }\n            if (!MediaStream.prototype.getAudioTracks) {\n                MediaStream.prototype.getAudioTracks = function() {\n                    return this.audioTracks;\n                };\n            }\n        } else {\n            const message = 'Endpoint does not appear to be WebRTC-capable';\n\n            logger.error(message);\n            throw new Error(message);\n        }\n\n        this._initPCConstraints(options);\n\n        screenObtainer.init(\n            options,\n            this.getUserMediaWithConstraints.bind(this));\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.splice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n\n                // Use a shared callback to handle both the devicechange event\n                // and the polling implementations. This prevents duplication\n                // and works around a chrome bug (verified to occur on 68) where\n                // devicechange fires twice in a row, which can cause async post\n                // devicechange processing to collide.\n                const updateKnownDevices = () => this.enumerateDevices(pds => {\n                    if (compareAvailableMediaDevices(pds)) {\n                        onMediaDevicesListChanged(pds);\n                    }\n                });\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        updateKnownDevices);\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        updateKnownDevices,\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     * Creates instance objects for peer connection constraints both for p2p\n     * and outside of p2p.\n     *\n     * @params {Object} options - Configuration for setting RTCUtil's instance\n     * objects for peer connection constraints.\n     * @params {boolean} options.useIPv6 - Set to true if IPv6 should be used.\n     * @params {Object} options.testing - Additional configuration for work in\n     * development.\n     * @params {Object} options.testing.forceP2PSuspendVideoRatio - True if\n     * video should become suspended if bandwidth estimation becomes low while\n     * in peer to peer connection mode.\n     */\n    _initPCConstraints(options) {\n        if (browser.isFirefox()) {\n            this.pcConstraints = {};\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\n            this.pcConstraints = { optional: [\n                { googHighStartBitrate: 0 },\n                { googPayloadPadding: true },\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true },\n                { googCpuOveruseEncodeUsage: true },\n                { googCpuUnderuseThreshold: 55 },\n                { googCpuOveruseThreshold: 85 }\n            ] };\n\n            if (options.useIPv6) {\n                // https://code.google.com/p/webrtc/issues/detail?id=2828\n                this.pcConstraints.optional.push({ googIPv6: true });\n            }\n\n            this.p2pPcConstraints\n                = JSON.parse(JSON.stringify(this.pcConstraints));\n        }\n\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n    * @param {string[]} um required user media types\n    * @param {Object} [options] optional parameters\n    * @param {string} options.resolution\n    * @param {number} options.bandwidth\n    * @param {number} options.fps\n    * @param {string} options.desktopStream\n    * @param {string} options.cameraDeviceId\n    * @param {string} options.micDeviceId\n    * @param {Object} options.frameRate - used only for dekstop sharing.\n    * @param {Object} options.frameRate.min - Minimum fps\n    * @param {Object} options.frameRate.max - Maximum fps\n    * @param {bool}   options.screenShareAudio - Used by electron clients to\n    * enable system audio screen sharing.\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\n    * on failure.\n    **/\n    getUserMediaWithConstraints(um, options = {}) {\n        const constraints = getConstraints(um, options);\n\n        logger.info('Get media constraints', constraints);\n\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n            .then(stream => {\n                logger.log('onUserMediaSuccess');\n                updateGrantedPermissions(um, stream);\n                resolve(stream);\n            })\n            .catch(error => {\n                logger.warn('Failed to get access to local media. '\n                    + ` ${error} ${constraints} `);\n                updateGrantedPermissions(um, undefined);\n                reject(new JitsiTrackError(error, constraints, um));\n            });\n        });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @returns {Promise}\n     */\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(umDevices, undefined);\n                    reject(new JitsiTrackError(error, constraints, umDevices));\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_newGetUserMediaWithConstraints.\n     *\n     * @param {Object} options\n     * @param {Object} options.desktopSharingExtensionExternalInstallation\n     * @param {string[]} options.desktopSharingSources\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _newGetDesktopMedia(options) {\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                this._parseDesktopSharingOptions(options),\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {Object} [options] optional parameters\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    obtainAudioAndVideoPermissions(options = {}) {\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\n\n        const requestingDesktop = options.devices.includes('desktop');\n\n        if (requestingDesktop && !screenObtainer.isSupported()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return this._getAudioAndVideoStreams(options).then(streams =>\n            handleLocalStream(streams, options.resolution));\n    }\n\n    /**\n     * Performs one call to getUserMedia for audio and/or video and another call\n     * for desktop.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreams(options) {\n        const requestingDesktop = options.devices.includes('desktop');\n\n        options.devices = options.devices.filter(device =>\n            device !== 'desktop');\n\n        const gumPromise = options.devices.length\n            ? this.getUserMediaWithConstraints(options.devices, options)\n            : Promise.resolve(null);\n\n        return gumPromise\n            .then(avStream => {\n                // If any requested devices are missing, call gum again in\n                // an attempt to obtain the actual error. For example, the\n                // requested video device is missing or permission was\n                // denied.\n                const missingTracks\n                    = this._getMissingTracks(options.devices, avStream);\n\n                if (missingTracks.length) {\n                    this.stopMediaStream(avStream);\n\n                    return this.getUserMediaWithConstraints(\n                        missingTracks, options)\n\n                        // GUM has already failed earlier and this success\n                        // handling should not be reached.\n                        .then(() => Promise.reject(new JitsiTrackError(\n                            { name: 'UnknownError' },\n                            getConstraints(options.devices, options),\n                            missingTracks)));\n                }\n\n                return avStream;\n            })\n            .then(audioVideo => {\n                if (!requestingDesktop) {\n                    return { audioVideo };\n                }\n\n                if (options.desktopSharingSourceDevice) {\n                    this.stopMediaStream(audioVideo);\n\n                    throw new Error('Using a camera as screenshare source is'\n                        + 'not supported on this browser.');\n                }\n\n                return new Promise((resolve, reject) => {\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options),\n                        desktop => resolve({\n                            audioVideo,\n                            desktop\n                        }),\n                        error => {\n                            if (audioVideo) {\n                                this.stopMediaStream(audioVideo);\n                            }\n                            reject(error);\n                        });\n                });\n            });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Returns an object formatted for specifying desktop sharing parameters.\n     *\n     * @param {Object} options - Takes in the same options object as\n     * {@link obtainAudioAndVideoPermissions}.\n     * @returns {Object}\n     */\n    _parseDesktopSharingOptions(options) {\n        return {\n            ...options.desktopSharingExtensionExternalInstallation,\n            desktopSharingSources: options.desktopSharingSources,\n            gumOptions: {\n                frameRate: options.desktopSharingFrameRate\n            },\n            trackOptions: getTrackSSConstraints(options)\n        };\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    newObtainAudioAndVideoPermissions(options) {\n        logger.info('Using the new gUM flow');\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = options.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            } = options;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n\n                if (!matchingDevice) {\n                    return Promise.reject(new JitsiTrackError(\n                        { name: 'ConstraintNotSatisfiedError' },\n                        {},\n                        [ desktopSharingSourceDevice ]\n                    ));\n                }\n\n                const requestedDevices = [ 'video' ];\n\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\n                // get constraints for the desktop stream.\n                const { gumOptions, trackOptions }\n                    = this._parseDesktopSharingOptions(options);\n\n                const constraints = {\n                    video: {\n                        ...gumOptions,\n                        deviceId: matchingDevice.deviceId\n                    }\n                };\n\n                return this._newGetUserMediaWithConstraints(\n                    requestedDevices, constraints)\n                    .then(stream => {\n                        const track = stream && stream.getTracks()[0];\n                        const applyConstrainsPromise\n                            = track && track.applyConstraints\n                                ? track.applyConstraints(trackOptions)\n                                : Promise.resolve();\n\n                        return applyConstrainsPromise\n                            .then(() => {\n                                return {\n                                    sourceType: 'device',\n                                    stream\n                                };\n                            });\n                    });\n            }\n\n            return this._newGetDesktopMedia({\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            const desktopAudioTracks = stream.getAudioTracks();\n\n            if (desktopAudioTracks.length) {\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopAudioStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopAudioStream.getAudioTracks()[0]\n                });\n            }\n\n            const desktopVideoTracks = stream.getVideoTracks();\n\n            if (desktopVideoTracks.length) {\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: desktopVideoStream,\n                    sourceId,\n                    sourceType,\n                    track: desktopVideoStream.getVideoTracks()[0],\n                    videoType: VideoType.DESKTOP\n                });\n            }\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = options.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device =>\n                device === 'audio'\n                || (device === 'video' && browser.supportsVideo()));\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = newGetConstraints(\n                requestedCaptureDevices, options);\n\n            logger.info('Got media constraints: ', constraints);\n\n            return this._newGetUserMediaWithConstraints(\n                requestedCaptureDevices, constraints);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: options.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: options.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : !browser.isSafariWithVP8();\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n\n        // if we have done createObjectURL, lets clean it\n        const url = mediaStream.jitsiObjectURL;\n\n        if (url) {\n            delete mediaStream.jitsiObjectURL;\n            URL.revokeObjectURL(url);\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport BridgeChannel from './BridgeChannel';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RTCUtils from './RTCUtils';\nimport Statistics from '../statistics/statistics';\nimport TraceablePeerConnection from './TraceablePeerConnection';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n *\n * @param tracksInfo\n * @param options\n */\nfunction createLocalTracks(tracksInfo, options) {\n    const newTracks = [];\n    let deviceId = null;\n\n    tracksInfo.forEach(trackInfo => {\n        if (trackInfo.mediaType === MediaType.AUDIO) {\n            deviceId = options.micDeviceId;\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\n            deviceId = options.cameraDeviceId;\n        }\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n        const localTrack = new JitsiLocalTrack({\n            ...trackInfo,\n            deviceId,\n            facingMode: options.facingMode,\n            rtcId: rtcTrackIdCounter,\n            effects: options.effects\n        });\n\n        newTracks.push(localTrack);\n    });\n\n    return newTracks;\n}\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        // A flag whether we had received that the channel had opened we can\n        // get this flag out of sync if for some reason channel got closed\n        // from server, a desired behaviour so we can see errors when this\n        // happen.\n        // @private\n        // @type {boolean}\n        this._channelOpen = false;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = -1;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\n         * no user is pinned.\n         * @type {string|null}\n         * @private\n         */\n        this._pinnedEndpoint = null;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = [];\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n            this._updateAudioOutputForAudioTracks\n        );\n\n        RTCUtils.removeListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            this._onDeviceListChanged\n        );\n\n        this.removeListener(\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener\n        );\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static newCreateLocalTracks(tracksInfo) {\n        return _newCreateLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        const usesNewGumFlow = browser.usesNewGumFlow();\n        const obtainMediaPromise = usesNewGumFlow\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\n\n        return obtainMediaPromise.then(tracksInfo => {\n            if (usesNewGumFlow) {\n                if(options.stream) {\n                    tracksInfo = [{\n                        stream: options.stream,\n                        track: options.stream.getVideoTracks()[0],\n                        videoType: 'desktop',\n                        sourceId: 'canvas'\n                    }]\n                }\n                console.log('++++++++++++++++++++',tracksInfo);\n                return _newCreateLocalTracks(tracksInfo);\n            }\n            return createLocalTracks(tracksInfo, options);\n        });\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(\n            peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            // Mark that channel as opened.\n            this._channelOpen = true;\n\n            // When the channel becomes available, tell the bridge about\n            // video selections so that it can do adaptive simulcast,\n            // we want the notification to trigger even if userJid\n            // is undefined, or null.\n            try {\n                this._channel.sendPinnedEndpointMessage(\n                    this._pinnedEndpoint);\n                this._channel.sendSelectedEndpointsMessage(\n                    this._selectedEndpoints);\n\n                if (typeof this._maxFrameHeight !== 'undefined') {\n                    this._channel.sendReceiverVideoConstraintMessage(\n                        this._maxFrameHeight);\n                }\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    `Cannot send selected(${this._selectedEndpoint})`\n                    + `pinned(${this._pinnedEndpoint})`\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\n                    error);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener);\n            this._channelOpenListener = null;\n\n            // If setLastN was invoked before the bridge channel completed\n            // opening, apply the specified value now that the channel\n            // is open. NOTE that -1 is the default value assumed by both\n            // RTC module and the JVB.\n            if (this._lastN !== -1) {\n                this._channel.sendSetLastNMessage(this._lastN);\n            }\n        };\n\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\n            this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n            this._channelOpen = false;\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     * Elects the participant with the given id to be the pinned participant in\n     * order to always receive video for this participant (even when last n is\n     * enabled).\n     * @param {stirng} id The user id.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     */\n    pinEndpoint(id) {\n        // Cache the value if channel is missing, till we open it.\n        this._pinnedEndpoint = id;\n        if (this._channel && this._channelOpen) {\n            this._channel.sendPinnedEndpointMessage(id);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = RTC.getPCConstraints(isP2P);\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n        if (browser.supportsSdpSemantics()) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\n        // The default policy generates separate ice candidates for audio and video connections.\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\n        iceConfig.bundlePolicy = 'max-bundle';\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Returns the current value for \"lastN\" - the amount of videos are going\n     * to be delivered. When set to -1 for unlimited or all available videos.\n     * @return {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\n     * (resource part of the JID). Returns array of removed tracks.\n     *\n     * @param {string} Owner The resource part of the MUC JID.\n     * @returns {JitsiRemoteTrack[]}\n     */\n    removeRemoteTracks(owner) {\n        let removedTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\n\n            removedTracks = removedTracks.concat(pcRemovedTracks);\n        }\n\n        logger.debug(\n            `Removed remote tracks for ${owner}`\n                + ` count: ${removedTracks.length}`);\n\n        return removedTracks;\n    }\n\n    /**\n     *\n     */\n    static getPCConstraints(isP2P) {\n        const pcConstraints\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\n\n        if (!pcConstraints) {\n            return {};\n        }\n\n        return JSON.parse(JSON.stringify(pcConstraints));\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channelOpen = false;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channelOpen) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * Generic error for jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_GENERIC_ERROR\n    = 'gum.chrome_extension_generic_error';\n\n/**\n * An error which indicates that the jidesha extension for Chrome is\n * failed to install.\n */\nexport const CHROME_EXTENSION_INSTALLATION_ERROR\n    = 'gum.chrome_extension_installation_error';\n\n/**\n * This error indicates that the attempt to start screensharing was initiated by\n * a script which did not originate in user gesture handler. It means that\n * you should to trigger the action again in response to a button click for\n * example.\n * @type {string}\n */\nexport const CHROME_EXTENSION_USER_GESTURE_REQUIRED\n    = 'gum.chrome_extension_user_gesture_required';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog in jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_USER_CANCELED\n    = 'gum.chrome_extension_user_canceled';\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * An error which indicates that the jidesha extension for Firefox is\n * needed to proceed with screen sharing, and that it is not installed.\n */\nexport const FIREFOX_EXTENSION_NEEDED = 'gum.firefox_extension_needed';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR]\n    = 'Failed to install Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[\n    JitsiTrackErrors.CHROME_EXTENSION_USER_GESTURE_REQUIRED]\n    = 'Failed to install Chrome extension - installations can only be initiated'\n        + ' by a user gesture.';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED]\n    = 'User canceled Chrome\\'s screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR]\n    = 'Unknown error from Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/* global $ */\n\nimport browser from '../browser';\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const self = this;\n    const mediaSSRCs = {};\n    let tmp;\n\n    for (let mediaindex = 0; mediaindex < self.media.length; mediaindex++) {\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc:');\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(self.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n        tmp.forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc-group:');\n        tmp.forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// remove iSAC and CN from SDP\nSDP.prototype.mangle = function() {\n    let i, j, lines, mline, newdesc, rtpmap;\n\n    for (i = 0; i < this.media.length; i++) {\n        lines = this.media[i].split('\\r\\n');\n        lines.pop(); // remove empty last element\n        mline = SDPUtil.parseMLine(lines.shift());\n        if (mline.media !== 'audio') {\n            continue; // eslint-disable-line no-continue\n        }\n        newdesc = '';\n        mline.fmt.length = 0;\n        for (j = 0; j < lines.length; j++) {\n            if (lines[j].substr(0, 9) === 'a=rtpmap:') {\n                rtpmap = SDPUtil.parseRTPMap(lines[j]);\n                if (rtpmap.name === 'CN' || rtpmap.name === 'ISAC') {\n                    continue; // eslint-disable-line no-continue\n                }\n                mline.fmt.push(rtpmap.id);\n            }\n            newdesc += `${lines[j]}\\r\\n`;\n        }\n        this.media[i] = `${SDPUtil.buildMLine(mline)}\\r\\n${newdesc}`;\n    }\n    this.raw = this.session + this.media.join('');\n};\n\n// remove lines matching prefix from session section\nSDP.prototype.removeSessionLines = function(prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.session, prefix);\n\n    lines.forEach(line => {\n        self.session = self.session.replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// remove lines matching prefix from a media section specified by mediaindex\n// TODO: non-numeric mediaindex could match mid\nSDP.prototype.removeMediaLines = function(mediaindex, prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.media[mediaindex], prefix);\n\n    lines.forEach(line => {\n        self.media[mediaindex]\n            = self.media[mediaindex].replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    let i, j, k, lines, mline, rtpmap, ssrc, tmp;\n\n    // new bundle plan\n\n    lines = SDPUtil.findLines(this.session, 'a=group:');\n    if (lines.length) {\n        for (i = 0; i < lines.length; i++) {\n            tmp = lines[i].split(' ');\n            const semantics = tmp.shift().substr(8);\n\n            elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n                semantics });\n            for (j = 0; j < tmp.length; j++) {\n                elem.c('content', { name: tmp[j] }).up();\n            }\n            elem.up();\n        }\n    }\n    for (i = 0; i < this.media.length; i++) {\n        mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (SDPUtil.findLine(this.media[i], 'a=rtpmap:').length) {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (j = 0; j < mline.fmt.length; j++) {\n                rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    tmp = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (k = 0; k < tmp.length; k++) {\n                        elem.c('parameter', tmp[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n            const crypto\n                = SDPUtil.findLines(this.media[i], 'a=crypto:', this.session);\n\n            if (crypto.length) {\n                elem.c('encryption', { required: 1 });\n                crypto.forEach(\n                    line => elem.c('crypto', SDPUtil.parseCrypto(line)).up());\n                elem.up(); // end of encryption\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\n\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            lines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n            if (lines.length) {\n                for (j = 0; j < lines.length; j++) {\n                    tmp = SDPUtil.parseExtmap(lines[j]);\n                    elem.c('rtp-hdrext', {\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                        uri: tmp.uri,\n                        id: tmp.value\n                    });\n\n                    // eslint-disable-next-line max-depth\n                    if (tmp.hasOwnProperty('direction')) {\n\n                        // eslint-disable-next-line max-depth\n                        switch (tmp.direction) {\n                        case 'sendonly':\n                            elem.attrs({ senders: 'responder' });\n                            break;\n                        case 'recvonly':\n                            elem.attrs({ senders: 'initiator' });\n                            break;\n                        case 'sendrecv':\n                            elem.attrs({ senders: 'both' });\n                            break;\n                        case 'inactive':\n                            elem.attrs({ senders: 'none' });\n                            break;\n                        }\n                    }\n\n                    // TODO: handle params\n                    elem.up();\n                }\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\n        // The port is automatically set to 0 when bundle-only is used.\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    let tmp;\n    const self = this;\n\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', self.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        tmp = SDPUtil.parseFingerprint(line);\n        tmp.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(tmp.fingerprint);\n        delete tmp.fingerprint;\n\n        // eslint-disable-next-line no-param-reassign\n        line\n            = SDPUtil.findLine(\n                self.media[mediaindex],\n                'a=setup:',\n                self.session);\n        if (line) {\n            tmp.setup = line.substr(8);\n        }\n        elem.attrs(tmp);\n        elem.up(); // end of fingerprint\n    });\n    tmp = SDPUtil.iceparams(this.media[mediaindex], this.session);\n    if (tmp) {\n        tmp.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(tmp);\n\n        // XEP-0176\n        const lines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        if (lines.length) { // add any a=candidate lines\n            lines.forEach(line => {\n                const candidate = SDPUtil.candidateToJingle(line);\n\n                if (self.failICE) {\n                    candidate.ip = '1.1.1.1';\n                }\n                const protocol\n                    = candidate && typeof candidate.protocol === 'string'\n                        ? candidate.protocol.toLowerCase()\n                        : '';\n\n                if ((self.removeTcpCandidates\n                        && (protocol === 'tcp' || protocol === 'ssltcp'))\n                    || (self.removeUdpCandidates && protocol === 'udp')) {\n                    return;\n                }\n                elem.c('candidate', candidate).up();\n            });\n        }\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const tmp = SDPUtil.parseRTCPFB(line);\n\n        if (tmp.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: tmp.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: tmp.type\n            });\n            if (tmp.params.length > 0) {\n                elem.attrs({ 'subtype': tmp.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let media = '';\n    let tmp\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (tmp.length) {\n        media += 'a=rtcp-fb:* trr-int ';\n        if (tmp.attr('value')) {\n            media += tmp.attr('value');\n        } else {\n            media += '0';\n        }\n        media += '\\r\\n';\n    }\n    tmp = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `a=rtcp-fb:${payloadtype} ${$(this).attr('type')}`;\n        if ($(this).attr('subtype')) {\n            media += ` ${$(this).attr('subtype')}`;\n        }\n        media += '\\r\\n';\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const self = this;\n    const sessionId = Date.now();\n\n    // Use a unique session id for every TPC.\n    this.raw = 'v=0\\r\\n'\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                self.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each(function() {\n        // eslint-disable-next-line no-invalid-this\n        const m = self.jingle2media($(this));\n\n        self.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('description');\n    let media = '';\n    const self = this;\n    const sctp = content.find(\n        '>transport>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    let tmp = { media: desc.attr('media') };\n\n    tmp.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        tmp.port = '0';\n    }\n    if (content.find('>transport>fingerprint').length\n            || desc.find('encryption').length) {\n        tmp.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        tmp.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        media += `m=application ${tmp.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        media += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            media += ` ${streamCount}\\r\\n`;\n        } else {\n            media += '\\r\\n';\n        }\n    } else {\n        tmp.fmt\n            = desc\n                .find('payload-type')\n                .map(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    return this.getAttribute('id');\n                })\n                .get();\n        media += `${SDPUtil.buildMLine(tmp)}\\r\\n`;\n    }\n\n    media += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        media += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n    tmp\n        = content.find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    if (tmp.length) {\n        if (tmp.attr('ufrag')) {\n            media += `${SDPUtil.buildICEUfrag(tmp.attr('ufrag'))}\\r\\n`;\n        }\n        if (tmp.attr('pwd')) {\n            media += `${SDPUtil.buildICEPwd(tmp.attr('pwd'))}\\r\\n`;\n        }\n        tmp.find('>fingerprint').each(function() {\n            /* eslint-disable no-invalid-this */\n            // FIXME: check namespace at some point\n            media += `a=fingerprint:${this.getAttribute('hash')}`;\n            media += ` ${$(this).text()}`;\n            media += '\\r\\n';\n            if (this.getAttribute('setup')) {\n                media += `a=setup:${this.getAttribute('setup')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    switch (content.attr('senders')) {\n    case 'initiator':\n        media += 'a=sendonly\\r\\n';\n        break;\n    case 'responder':\n        media += 'a=recvonly\\r\\n';\n        break;\n    case 'none':\n        media += 'a=inactive\\r\\n';\n        break;\n    case 'both':\n        media += 'a=sendrecv\\r\\n';\n        break;\n    }\n    media += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('rtcp-mux').length) {\n        media += 'a=rtcp-mux\\r\\n';\n    }\n\n    if (desc.find('encryption').length) {\n        desc.find('encryption>crypto').each(function() {\n            /* eslint-disable no-invalid-this */\n            media += `a=crypto:${this.getAttribute('tag')}`;\n            media += ` ${this.getAttribute('crypto-suite')}`;\n            media += ` ${this.getAttribute('key-params')}`;\n            if (this.getAttribute('session-params')) {\n                media += ` ${this.getAttribute('session-params')}`;\n            }\n            media += '\\r\\n';\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    desc.find('payload-type').each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `${SDPUtil.buildRTPMap(this)}\\r\\n`;\n        if ($(this).find('>parameter').length) {\n            media += `a=fmtp:${this.getAttribute('id')} `;\n            media\n                += $(this)\n                    .find('parameter')\n                    .map(function() {\n                        const name = this.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + this.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            media += '\\r\\n';\n        }\n\n        // xep-0293\n        media += self.rtcpFbFromJingle($(this), this.getAttribute('id'));\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    // xep-0293\n    media += self.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    tmp\n        = desc.find(\n            '>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media\n            += `a=extmap:${this.getAttribute('id')} ${\n                this.getAttribute('uri')}\\r\\n`;\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    content\n        .find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]'\n                + '>candidate')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            let protocol = this.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((self.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (self.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (self.failICE) {\n                this.setAttribute('ip', '1.1.1.1');\n            }\n\n            media += SDPUtil.candidateFromJingle(this);\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    content\n        .find('description>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            const semantics = this.getAttribute('semantics');\n            const ssrcs\n                = $(this)\n                    .find('>source')\n                    .map(function() {\n                        return this.getAttribute('ssrc');\n                    })\n                    .get();\n\n            if (ssrcs.length) {\n                media += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    tmp\n        = content.find(\n            'description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        const ssrc = this.getAttribute('ssrc');\n\n        // eslint-disable-next-line newline-per-chained-call\n        $(this).find('>parameter').each(function() {\n            const name = this.getAttribute('name');\n            let value = this.getAttribute('value');\n\n            value = SDPUtil.filterSpecialChars(value);\n            media += `a=ssrc:${ssrc} ${name}`;\n            if (value && value.length) {\n                media += `:${value}`;\n            }\n            media += '\\r\\n';\n        });\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that the conference setup failed.\n */\nexport const SETUP_FAILED = 'conference.setup_failed';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","/**\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\n * versa.\n * @event\n * @type {boolean} - true when service has changed to active false otherwise.\n */\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\n\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\n * it starts receiving audio levels !== 0 after being in a state of no audio.\n * @event\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\n */\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\n\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\n * for a period of time, meaning that the device is either broken or hardware/software muted.\n * @event\n * @type {void}\n */\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\n\n/**\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\n *  @event\n *  @type {Object}\n */\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\n\n/**\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\n * The generated objects are of type Array<Object>, one score for each monitored device.\n * @event VAD_REPORT_PUBLISHED\n * @type Array<Object> with the following structure:\n * @property {Date} timestamp - Timestamp at which the compute took place.\n * @property {number} avgVAD - Average VAD score over monitored period of time.\n * @property {string} deviceId - Associate local audio device ID.\n */\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\n\n/**\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\n *\n * @event\n * @type {Object}\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n * @property {string} deviceId - Device id of the associated track.\n */\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\n\n/**\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\n *\n *  @event\n *  @type {Object}\n */\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import Bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n *\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\n * it too. We need to check explicitly for chromium based Edge first and then\n * detect other chromium based browsers.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n    const browserInfo = {\n        name: UNKNOWN,\n        version: undefined\n    };\n\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\n        if (userAgent.match(/Edg/)) {\n            const version = userAgent.match(/Edg\\/([\\d.]+)/)[1];\n\n            if (Number.parseInt(version, 10) > 72) {\n                browserInfo.name = CHROME;\n                browserInfo.version = version;\n            }\n        } else {\n            browserInfo.name = CHROME;\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n        }\n    }\n\n    return browserInfo;\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n * @param {Object} - The bowser instance.\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect(bowser) {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const name = bowser.getBrowserName();\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version: bowser.getBrowserVersion()\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        this._bowser = Bowser.getParser(navigator.userAgent);\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect(this._bowser);\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Check if the parsed browser matches the passed condition.\n     *\n     * @param {Object} checkTree - It's one or two layered object, which can include a\n     * platform or an OS on the first layer and should have browsers specs on the\n     * bottom layer.\n     * Eg. { chrome: '>71.1.0' }\n     *     { windows: { chrome: '<70.2' } }\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\n     * conditions, false if not and undefined when the browser is not defined in the\n     * checktree object or when the current browser's version is unknown.\n     * @private\n     */\n    _checkCondition(checkTree) {\n        if (this._version) {\n            return this._bowser.satisfies(checkTree);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this._checkCondition({ [this._name]: `>${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this._checkCondition({ [this._name]: `<${version}` });\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\n     */\n    isVersionEqualTo(version) {\n        return this._checkCondition({ [this._name]: `~${version}` });\n    }\n}\n","export * from './browser-capabilities';\nexport * from './browser-detection';\nexport * from './avatar';\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     * @returns {Function} - The unsubscribe function.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n\n        return () => this.removeEventListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","\n\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n\n/**\n * Calculates the average value of am Array of numbers.\n *\n * @param {Float32Array} valueArray - Array of numbers.\n * @returns {number} - Number array average.\n */\nexport function calculateAverage(valueArray) {\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\n}\n\n\n/**\n * Returns only the positive values from an array of numbers.\n *\n * @param {Float32Array} valueArray - Array of vad scores.\n * @returns {Array} - Array of positive numbers.\n */\nexport function filterPositiveValues(valueArray) {\n    return valueArray.filter(value => value >= 0);\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","const Resolutions = {\n    '1080': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    '720': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    'hd': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    '960': {\n        width: 960,\n        height: 720,\n        order: 6\n    },\n    '540': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n    'qhd': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n\n    // 16:9 resolution first.\n    '360': {\n        width: 640,\n        height: 360,\n        order: 4\n    },\n    '640': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n    'vga': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n\n    // 16:9 resolution first.\n    '180': {\n        width: 320,\n        height: 180,\n        order: 2\n    },\n    '320': {\n        width: 320,\n        height: 240,\n        order: 1\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection the the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _callStatsUserName = localStorage.getItem('callStatsUserName');\n            }\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                if (localStorage) {\n                    localStorage.setItem(\n                        'callStatsUserName',\n                        _callStatsUserName);\n                }\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _machineId = localStorage.getItem('jitsiMeetId');\n            }\n            if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                if (localStorage) {\n                    localStorage.setItem('jitsiMeetId', _machineId);\n                }\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        const localStorage = getLocalStorage();\n\n        return localStorage ? localStorage.getItem('sessionId') : undefined;\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        const localStorage = getLocalStorage();\n\n        if (localStorage) {\n            if (sessionId) {\n                localStorage.setItem('sessionId', sessionId);\n            } else {\n                localStorage.removeItem('sessionId');\n            }\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n * Gets the localStorage of the browser. (Technically, gets the localStorage of\n * the global object because there may be no browser but React Native for\n * example).\n * @returns {Storage} the local Storage object (if any)\n */\nfunction getLocalStorage() {\n    let storage;\n\n    try {\n        // eslint-disable-next-line no-invalid-this\n        storage = (window || this).localStorage;\n    } catch (error) {\n        logger.error(error);\n    }\n\n    return storage;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport RandomUtil from '../util/RandomUtil';\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport browser from '../browser';\nimport MucConnectionPlugin from './strophe.emuc';\nimport JingleConnectionPlugin from './strophe.jingle';\nimport initStropheUtil from './strophe.util';\nimport PingConnectionPlugin from './strophe.ping';\nimport RayoConnectionPlugin from './strophe.rayo';\nimport initStropheLogger from './strophe.logger';\nimport Listenable from '../util/Listenable';\nimport Caps from './Caps';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Creates XMPP connection.\n *\n * @param {Object} options\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\n * Prosody).\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\n * @returns {XmppConnection}\n */\nfunction createConnection({ enableWebsocketResume, serviceUrl = '/http-bind', token, websocketKeepAlive }) {\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    return new XmppConnection({\n        enableWebsocketResume,\n        serviceUrl,\n        websocketKeepAlive\n    });\n}\n\n/**\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\n * {@link XmppConnection} wrapper.\n *\n * @returns {void}\n */\nfunction initStropheNativePlugins() {\n    initStropheUtil();\n    initStropheLogger();\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n    { urls: 'stun:stun2.l.google.com:19302' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\n     * connection with the server.\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\n     * module try to resume the session in case the Websocket connection breaks.\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\n     * constructor for more details.\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n\n        initStropheNativePlugins();\n\n        this.connection = createConnection({\n            enableWebsocketResume: options.enableWebsocketResume,\n\n            // FIXME remove deprecated bosh option at some point\n            serviceUrl: options.serviceUrl || options.bosh,\n            token,\n            websocketKeepAlive: options.websocketKeepAlive\n        });\n\n        this._initStrophePlugins();\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        if (!this.options.disableRtx && browser.supportsRtx()) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChrome() && this.options.enableLipSync === true) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n    }\n\n    /**\n     * Returns {@code true} if the PING functionality is supported by the server\n     * or {@code false} otherwise.\n     * @returns {boolean}\n     */\n    isPingSupported() {\n        return this._pingSupported !== false;\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED\n            || status === Strophe.Status.ATTACHED) {\n            if (this.options.useStunTurn\n                || (this.options.p2p && this.options.p2p.useStunTurn)) {\n                this.connection.jingle.getStunAndTurnCredentials();\n            }\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            this.lastErrorMsg = undefined;\n\n            // Schedule ping ?\n            const pingJid = this.connection.domain;\n\n            // FIXME no need to do it again on stream resume\n            this.caps.getFeaturesAndIdentities(pingJid)\n                .then(({ features, identities }) => {\n                    if (features.has(Strophe.NS.PING)) {\n                        this._pingSupported = true;\n                        this.connection.ping.startInterval(pingJid);\n                    } else {\n                        logger.warn(`Ping NOT supported by ${pingJid}`);\n                    }\n\n                    // check for speakerstats\n                    identities.forEach(identity => {\n                        if (identity.type === 'speakerstats') {\n                            this.speakerStatsComponentAddress = identity.name;\n                        }\n\n                        if (identity.type === 'conference_duration') {\n                            this.conferenceDurationComponentAddress = identity.name;\n                        }\n                    });\n\n                    if (this.speakerStatsComponentAddress\n                        || this.conferenceDurationComponentAddress) {\n                        this.connection.addHandler(\n                            this._onPrivateMessage.bind(this), null,\n                            'message', null, null);\n                    }\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.ERROR) {\n            this.lastErrorMsg = msg;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\n            const errMsg = msg || this.lastErrorMsg;\n\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg,\n                credentials);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this._resetState();\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        this._resetState();\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log('(TIME) Strophe Attaching:\\t', now);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     * Resets any state/flag before starting a new connection.\n     * @private\n     */\n    _resetState() {\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.disconnectInProgress = undefined;\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        let roomjid = `${roomName}@${this.options.hosts.muc}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server. Remember to check {@link isPingSupported} before using\n     * this method.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            if (this.isPingSupported()) {\n                this.connection.ping\n                    .ping(this.connection.domain, resolve, reject, timeout);\n            } else {\n                reject('PING operation is not supported by the server');\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress) {\n            return this.disconnectInProgress;\n        } else if (!this.connection) {\n            return Promise.resolve();\n        }\n\n        this.disconnectInProgress = new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n        });\n\n        this._cleanupXmppConnection(ev);\n\n        return this.disconnectInProgress;\n    }\n\n    /**\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\n     * (e.g. beforeunload, unload).\n     * @private\n     * @returns {void}\n     */\n    _cleanupXmppConnection(ev) {\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\n        // possible.\n        !this.connection.isUsingWebSocket && this.connection.flush();\n\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\n            const evType = ev.type;\n\n            if (evType === 'beforeunload' || evType === 'unload') {\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\n                // depending on whether we want to run with it for some time.\n                this.connection.options.sync = true;\n\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\n                if (this.connection.sendUnavailableBeacon()) {\n\n                    return;\n                }\n            }\n        }\n\n        this.connection.disconnect();\n\n        if (this.connection.options.sync !== true) {\n            this.connection.flush();\n        }\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\n        this.connection.addConnectionPlugin('ping', new PingConnectionPlugin(this));\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from plugins component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!(from === this.speakerStatsComponentAddress\n            || from === this.conferenceDurationComponentAddress)) {\n            return;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\n            && parsedJson.users) {\n            this.eventEmitter.emit(\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        }\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\n            && parsedJson.created_timestamp) {\n            this.eventEmitter.emit(\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\n        }\n\n        return true;\n    }\n}\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $pres, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-stream-management';\n\nimport Listenable from '../util/Listenable';\nimport { getJitterDelay } from '../util/Retry';\n\nimport LastSuccessTracker from './StropheLastSuccess';\n\nconst logger = getLogger(__filename);\n\n/**\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\n */\nexport default class XmppConnection extends Listenable {\n    /**\n     * The list of {@link XmppConnection} events.\n     *\n     * @returns {Object}\n     */\n    static get Events() {\n        return {\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED'\n        };\n    }\n\n    /**\n     * The list of Xmpp connection statuses.\n     *\n     * @returns {Strophe.Status}\n     */\n    static get Status() {\n        return Strophe.Status;\n    }\n\n    /**\n     * Initializes new connection instance.\n     *\n     * @param {Object} options\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\n     * It will enable automatically by default if supported by the XMPP server.\n     * @param {Number} [options.websocketKeepAlive=240000] - The websocket keep alive interval. It's 4 minutes by\n     * default with jitter. Pass -1 to disable. The actual interval equation is:\n     * jitterDelay = (interval * 0.2) + (0.8 * interval * Math.random())\n     * The keep alive is HTTP GET request to the {@link options.serviceUrl}.\n     */\n    constructor({ enableWebsocketResume, websocketKeepAlive, serviceUrl }) {\n        super();\n        this._options = {\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 4 * 60 * 1000 : Number(websocketKeepAlive)\n        };\n\n        /**\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\n         * @type {number}\n         * @private\n         */\n        this._resumeRetryN = 0;\n        this._stropheConn = new Strophe.Connection(serviceUrl);\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\n\n        // The default maxRetries is 5, which is too long.\n        this._stropheConn.maxRetries = 3;\n\n        this._lastSuccessTracker = new LastSuccessTracker();\n        this._lastSuccessTracker.startTracking(this._stropheConn);\n    }\n\n    /**\n     * A getter for the connected state.\n     *\n     * @returns {boolean}\n     */\n    get connected() {\n        return this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED;\n    }\n\n    /**\n     * Retrieves the feature discovery plugin instance.\n     *\n     * @returns {Strophe.Connection.disco}\n     */\n    get disco() {\n        return this._stropheConn.disco;\n    }\n\n    /**\n     * A getter for the disconnecting state.\n     *\n     * @returns {boolean}\n     */\n    get disconnecting() {\n        return this._stropheConn.disconnecting === true;\n    }\n\n    /**\n     * A getter for the domain.\n     *\n     * @returns {string|null}\n     */\n    get domain() {\n        return this._stropheConn.domain;\n    }\n\n    /**\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\n     * for BOSH.\n     * @returns {boolean}\n     */\n    get isUsingWebSocket() {\n        return this._usesWebsocket;\n    }\n\n    /**\n     * A getter for the JID.\n     *\n     * @returns {string|null}\n     */\n    get jid() {\n        return this._stropheConn.jid;\n    }\n\n    /**\n     * Returns headers for the last BOSH response received.\n     *\n     * @returns {string}\n     */\n    get lastResponseHeaders() {\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\n    }\n\n    /**\n     * A getter for the logger plugin instance.\n     *\n     * @returns {*}\n     */\n    get logger() {\n        return this._stropheConn.logger;\n    }\n\n    /**\n     * A getter for the connection options.\n     *\n     * @returns {*}\n     */\n    get options() {\n        return this._stropheConn.options;\n    }\n\n    /**\n     * A getter for the service URL.\n     *\n     * @returns {string}\n     */\n    get service() {\n        return this._stropheConn.service;\n    }\n\n    /**\n     * Returns the current connection status.\n     *\n     * @returns {Strophe.Status}\n     */\n    get status() {\n        return this._status;\n    }\n\n    /**\n     * Adds a connection plugin to this instance.\n     *\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\n     * instance.\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\n     */\n    addConnectionPlugin(name, plugin) {\n        this[name] = plugin;\n        plugin.init(this);\n    }\n\n    /**\n     * See {@link Strophe.Connection.addHandler}\n     *\n     * @returns {void}\n     */\n    addHandler(...args) {\n        this._stropheConn.addHandler(...args);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.attach} for the params description.\n     *\n     * @returns {void}\n     */\n    attach(jid, sid, rid, callback, ...args) {\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /**\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\n     * See {@link Strophe.Connection.connect} for the params description.\n     *\n     * @returns {void}\n     */\n    connect(jid, pass, callback, ...args) {\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Handles {@link Strophe.Status} updates for the current connection.\n     *\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\n     * the connect methods.\n     * @param {Strophe.Status} status - The new connection status.\n     * @param {*} args - The rest of the arguments passed by Strophe.\n     * @private\n     */\n    _stropheConnectionCb(targetCallback, status, ...args) {\n        this._status = status;\n\n        let blockCallback = false;\n\n        if (status === Strophe.Status.CONNECTED) {\n            this._maybeEnableStreamResume();\n            this._maybeStartWSKeepAlive();\n            this._resumeRetryN = 0;\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\n            blockCallback = this._tryResumingConnection();\n            if (!blockCallback) {\n                clearTimeout(this._wsKeepAlive);\n            }\n        }\n\n        if (!blockCallback) {\n            targetCallback(status, ...args);\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\n        }\n    }\n\n    /**\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\n     *\n     * @returns {void}\n     */\n    closeWebsocket() {\n        this._stropheConn._proto && this._stropheConn._proto.socket && this._stropheConn._proto.socket.close();\n    }\n\n    /**\n     * See {@link Strophe.Connection.disconnect}.\n     *\n     * @returns {void}\n     */\n    disconnect(...args) {\n        clearTimeout(this._resumeTimeout);\n        clearTimeout(this._wsKeepAlive);\n        this._stropheConn.disconnect(...args);\n    }\n\n    /**\n     * See {@link Strophe.Connection.flush}.\n     *\n     * @returns {void}\n     */\n    flush(...args) {\n        this._stropheConn.flush(...args);\n    }\n\n    /**\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccessTracker.getTimeSinceLastSuccess();\n    }\n\n    /**\n     * Requests a resume token from the server if enabled and all requirements are met.\n     *\n     * @private\n     */\n    _maybeEnableStreamResume() {\n        if (!this._options.enableWebsocketResume) {\n\n            return;\n        }\n\n        const { streamManagement } = this._stropheConn;\n\n        if (!this.isUsingWebSocket) {\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\n        } else if (!streamManagement) {\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\n        } else if (!streamManagement.isSupported()) {\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\n        } else if (!streamManagement.getResumeToken()) {\n            logger.info('Enabling XEP-0198 stream management');\n            streamManagement.enable(/* resume */ true);\n        }\n    }\n\n    /**\n     * Starts the Websocket keep alive if enabled.\n     *\n     * @private\n     * @returns {void}\n     */\n    _maybeStartWSKeepAlive() {\n        const { websocketKeepAlive } = this._options;\n\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\n            clearTimeout(this._wsKeepAlive);\n\n            const intervalWithJitter\n                = /* base */ (websocketKeepAlive * 0.2) + /* jitter */ (Math.random() * 0.8 * websocketKeepAlive);\n\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\n\n            this._wsKeepAlive = setTimeout(() => {\n                const url = this.service.replace('wss', 'https').replace('ws', 'http');\n\n                fetch(url).catch(\n                    error => {\n                        logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\n                    })\n                    .then(() => this._maybeStartWSKeepAlive());\n            }, intervalWithJitter);\n        }\n    }\n\n    /**\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\n     *\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\n     * @returns {void}\n     */\n    send(stanza) {\n        if (!this.connected) {\n            throw new Error('Not connected');\n        }\n        this._stropheConn.send(stanza);\n    }\n\n    /**\n     * Helper function to send IQ stanzas.\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the IQ.\n     */\n    sendIQ(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\n    }\n\n    /**\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\n     *\n     * @param {Element} elem - The stanza to send.\n     * @param {Function} callback - The callback function for a successful request.\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\n     * be null.\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\n     * @returns {number} - The id used to send the presence.\n     */\n    sendPresence(elem, callback, errback, timeout) {\n        if (!this.connected) {\n            errback('Not connected');\n\n            return;\n        }\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\n    }\n\n    /**\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\n     *\n     * @returns {boolean} - true if the beacon was sent.\n     */\n    sendUnavailableBeacon() {\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\n            return false;\n        }\n\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\n        this._stropheConn.disconnecting = true;\n\n        const body = this._stropheConn._proto._buildBody()\n            .attrs({\n                type: 'terminate'\n            });\n        const pres = $pres({\n            xmlns: Strophe.NS.CLIENT,\n            type: 'unavailable'\n        });\n\n        body.cnode(pres.tree());\n\n        const res = navigator.sendBeacon(\n            `https:${this.service}`,\n            Strophe.serialize(body.tree()));\n\n        logger.info(`Successfully send unavailable beacon ${res}`);\n\n        this._stropheConn._proto._abortAllRequests();\n        this._stropheConn._doDisconnect();\n\n        return true;\n    }\n\n    /**\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\n     * the token is present it means the connection can be resumed.\n     *\n     * @private\n     * @returns {boolean}\n     */\n    _tryResumingConnection() {\n        const { streamManagement } = this._stropheConn;\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\n\n        if (resumeToken) {\n            clearTimeout(this._resumeTimeout);\n\n            // FIXME detect internet offline\n            // The retry delay will be:\n            //   1st retry: 1.5s - 3s\n            //   2nd retry: 3s - 9s\n            //   3rd retry: 3s - 27s\n            this._resumeRetryN = Math.min(3, this._resumeRetryN + 1);\n            const retryTimeout = getJitterDelay(this._resumeRetryN, 1500, 3);\n\n            logger.info(`Will try to resume the XMPP connection in ${retryTimeout}ms`);\n\n            this._resumeTimeout = setTimeout(() => {\n                logger.info('Trying to resume the XMPP connection');\n\n                const url = new URL(this._stropheConn.service);\n                let { search } = url;\n\n                search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\n\n                url.search = search;\n\n                this._stropheConn.service = url.toString();\n\n                streamManagement.resume();\n            }, retryTimeout);\n\n            return true;\n        }\n\n        return false;\n    }\n}\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* global chrome, $, alert */\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\n/**\n * Indicates whether the Chrome desktop sharing extension is installed.\n * @type {boolean}\n */\nlet chromeExtInstalled = false;\n\n/**\n * Indicates whether an update of the Chrome desktop sharing extension is\n * required.\n * @type {boolean}\n */\nlet chromeExtUpdateRequired = false;\n\nlet gumFunction = null;\n\n/**\n * The error message returned by chrome when the extension is installed.\n */\nconst CHROME_NO_EXTENSION_ERROR_MSG // eslint-disable-line no-unused-vars\n    = 'Could not establish connection. Receiving end does not exist.';\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n    intChromeExtPromise: null,\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     * @param {boolean} [options.desktopSharingChromeDisabled]\n     * @param {boolean} [options.desktopSharingChromeExtId]\n     * @param {boolean} [options.desktopSharingFirefoxDisabled]\n     * @param {Function} gum GUM method\n     */\n    init(options = {\n        desktopSharingChromeDisabled: false,\n        desktopSharingChromeExtId: null,\n        desktopSharingFirefoxDisabled: false\n    }, gum) {\n        this.options = options;\n        gumFunction = gum;\n\n        this.obtainStream = this._createObtainStreamMethod(options);\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @param {object} options passed from {@link init} - check description\n     * there\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod(options) {\n        if (browser.isNWJS()) {\n            return (_, onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isChrome() || browser.isOpera()) {\n            if (browser.supportsGetDisplayMedia()\n                    && !options.desktopSharingChromeDisabled) {\n\n                return this.obtainScreenFromGetDisplayMedia;\n            } else if (options.desktopSharingChromeDisabled\n                || !options.desktopSharingChromeExtId) {\n\n                return null;\n            }\n\n            logger.info('Using Chrome extension for desktop sharing');\n            this.intChromeExtPromise\n                = initChromeExtension(options).then(() => {\n                    this.intChromeExtPromise = null;\n                });\n\n            return this.obtainScreenFromExtension;\n        } else if (browser.isFirefox()) {\n            if (options.desktopSharingFirefoxDisabled) {\n                return null;\n            } else if (browser.supportsGetDisplayMedia()) {\n                // Firefox 66 support getDisplayMedia\n                return this.obtainScreenFromGetDisplayMedia;\n            }\n\n            // Legacy Firefox\n            return this.obtainScreenOnFirefox;\n        }\n\n        logger.log(\n            'Screen sharing not supported by the current browser: ',\n            browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Firefox.\n     * @param callback\n     * @param errorCallback\n     */\n    obtainScreenOnFirefox(options, callback, errorCallback) {\n        obtainWebRTCScreen(options.gumOptions, callback, errorCallback);\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param {Object} [options] - Screen sharing options.\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\n     * sources that have to be displayed in the desktop picker window ('screen',\n     * 'window', etc.).\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingSources, gumOptions } = options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources\n                        || this.options.desktopSharingChromeSources\n                },\n                (streamId, streamType, screenShareAudio = false) =>\n                    onGetStreamResponse(\n                        {\n                            response: {\n                                streamId,\n                                streamType,\n                                screenShareAudio\n                            },\n                            gumOptions\n                        },\n                        onSuccess,\n                        onFailure\n                    ),\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Asks Chrome extension to call chooseDesktopMedia and gets chrome\n     * 'desktop' stream for returned stream token.\n     */\n    obtainScreenFromExtension(options, streamCallback, failCallback) {\n        if (this.intChromeExtPromise !== null) {\n            this.intChromeExtPromise.then(() => {\n                this.obtainScreenFromExtension(\n                    options, streamCallback, failCallback);\n            });\n\n            return;\n        }\n\n        const {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources\n        } = this.options;\n\n        const {\n            gumOptions\n        } = options;\n\n        const doGetStreamFromExtensionOptions = {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources:\n                options.desktopSharingSources || desktopSharingChromeSources,\n            gumOptions\n        };\n\n        if (chromeExtInstalled) {\n            doGetStreamFromExtension(\n                doGetStreamFromExtensionOptions,\n                streamCallback,\n                failCallback);\n        } else {\n            if (chromeExtUpdateRequired) {\n                /* eslint-disable no-alert */\n                alert(\n                    'Jitsi Desktop Streamer requires update. '\n                    + 'Changes will take effect after next Chrome restart.');\n\n                /* eslint-enable no-alert */\n            }\n\n            this.handleExternalInstall(options, streamCallback,\n                failCallback);\n        }\n    },\n\n    /* eslint-disable max-params */\n\n    handleExternalInstall(options, streamCallback, failCallback, e) {\n        const webStoreInstallUrl = getWebStoreInstallUrl(this.options);\n\n        options.listener('waitingForExtension', webStoreInstallUrl);\n        this.checkForChromeExtensionOnInterval(options, streamCallback,\n            failCallback, e);\n    },\n\n    /* eslint-enable max-params */\n\n    checkForChromeExtensionOnInterval(options, streamCallback, failCallback) {\n        if (options.checkAgain() === false) {\n            failCallback(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR));\n\n            return;\n        }\n        waitForExtensionAfterInstall(this.options, options.interval, 1)\n            .then(() => {\n                chromeExtInstalled = true;\n                options.listener('extensionFound');\n                this.obtainScreenFromExtension(options,\n                    streamCallback, failCallback);\n            })\n            .catch(() => {\n                this.checkForChromeExtensionOnInterval(options,\n                    streamCallback, failCallback);\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        getDisplayMedia({ video: true,\n            audio: true })\n            .then(stream => {\n                let applyConstraintsPromise;\n\n                if (stream\n                    && stream.getTracks()\n                    && stream.getTracks().length > 0) {\n                    const videoTrack = stream.getVideoTracks()[0];\n\n                    // Apply video track constraint.\n                    if (videoTrack) {\n                        applyConstraintsPromise = videoTrack.applyConstraints(options.trackOptions);\n                    }\n                } else {\n                    applyConstraintsPromise = Promise.resolve();\n                }\n\n                applyConstraintsPromise.then(() =>\n                    callback({\n                        stream,\n                        sourceId: stream.id\n                    }));\n            })\n            .catch(() =>\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .CHROME_EXTENSION_USER_CANCELED)));\n    }\n};\n\n/**\n * Obtains a desktop stream using getUserMedia.\n * For this to work on Chrome, the\n * 'chrome://flags/#enable-usermedia-screen-capture' flag must be enabled.\n *\n * On firefox, the document's domain must be white-listed in the\n * 'media.getusermedia.screensharing.allowed_domains' preference in\n * 'about:config'.\n */\nfunction obtainWebRTCScreen(options, streamCallback, failCallback) {\n    gumFunction([ 'screen' ], options)\n        .then(stream => streamCallback({ stream }), failCallback);\n}\n\n/**\n * Constructs inline install URL for Chrome desktop streaming extension.\n * The 'chromeExtensionId' must be defined in options parameter.\n * @param options supports \"desktopSharingChromeExtId\"\n * @returns {string}\n */\nfunction getWebStoreInstallUrl(options) {\n    return (\n        `https://chrome.google.com/webstore/detail/${\n            options.desktopSharingChromeExtId}`);\n}\n\n/**\n * Checks whether an update of the Chrome extension is required.\n * @param minVersion minimal required version\n * @param extVersion current extension version\n * @returns {boolean}\n */\nfunction isUpdateRequired(minVersion, extVersion) {\n    try {\n        const s1 = minVersion.split('.');\n        const s2 = extVersion.split('.');\n\n        const len = Math.max(s1.length, s2.length);\n\n        for (let i = 0; i < len; i++) {\n            let n1 = 0,\n                n2 = 0;\n\n            if (i < s1.length) {\n                n1 = parseInt(s1[i], 10);\n            }\n            if (i < s2.length) {\n                n2 = parseInt(s2[i], 10);\n            }\n\n            if (isNaN(n1) || isNaN(n2)) {\n                return true;\n            } else if (n1 !== n2) {\n                return n1 > n2;\n            }\n        }\n\n        // will happen if both versions have identical numbers in\n        // their components (even if one of them is longer, has more components)\n        return false;\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error('Failed to parse extension version', e);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param callback\n * @param options\n */\nfunction checkChromeExtInstalled(callback, options) {\n    if (typeof chrome === 'undefined' || !chrome || !chrome.runtime) {\n        // No API, so no extension for sure\n        callback(false, false);\n\n        return;\n    }\n    chrome.runtime.sendMessage(\n        options.desktopSharingChromeExtId,\n        { getVersion: true },\n        response => {\n            if (!response || !response.version) {\n                // Communication failure - assume that no endpoint exists\n                logger.warn(\n                    'Extension not installed?: ', chrome.runtime.lastError);\n                callback(false, false);\n\n                return;\n            }\n\n            // Check installed extension version\n            const extVersion = response.version;\n\n            logger.log(`Extension version is: ${extVersion}`);\n            const updateRequired\n                = isUpdateRequired(\n                    options.desktopSharingChromeMinExtVersion,\n                    extVersion);\n\n            callback(!updateRequired, updateRequired);\n        }\n    );\n}\n\n/**\n *\n * @param options\n * @param streamCallback\n * @param failCallback\n */\nfunction doGetStreamFromExtension(options, streamCallback, failCallback) {\n    const {\n        desktopSharingChromeSources,\n        desktopSharingChromeExtId,\n        gumOptions\n    } = options;\n\n    // Sends 'getStream' msg to the extension.\n    // Extension id must be defined in the config.\n    chrome.runtime.sendMessage(\n        desktopSharingChromeExtId,\n        {\n            getStream: true,\n            sources: desktopSharingChromeSources\n        },\n        response => {\n            if (!response) {\n                // possibly re-wraping error message to make code consistent\n                const lastError = chrome.runtime.lastError;\n\n                failCallback(lastError instanceof Error\n                    ? lastError\n                    : new JitsiTrackError(\n                        JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n                        lastError));\n\n                return;\n            }\n            logger.log('Response from extension: ', response);\n            onGetStreamResponse(\n                {\n                    response,\n                    gumOptions\n                },\n                streamCallback,\n                failCallback\n            );\n        }\n    );\n}\n\n/**\n * Initializes <link rel=chrome-webstore-item /> with extension id set in\n * config.js to support inline installs. Host site must be selected as main\n * website of published extension.\n * @param options supports \"desktopSharingChromeExtId\"\n */\nfunction initInlineInstalls(options) {\n    if ($('link[rel=chrome-webstore-item]').length === 0) {\n        $('head').append('<link rel=\"chrome-webstore-item\">');\n    }\n    $('link[rel=chrome-webstore-item]').attr('href',\n        getWebStoreInstallUrl(options));\n}\n\n/**\n *\n * @param options\n *\n * @return {Promise} - a Promise resolved once the initialization process is\n * finished.\n */\nfunction initChromeExtension(options) {\n    // Initialize Chrome extension inline installs\n    initInlineInstalls(options);\n\n    return new Promise(resolve => {\n        // Check if extension is installed\n        checkChromeExtInstalled((installed, updateRequired) => {\n            chromeExtInstalled = installed;\n            chromeExtUpdateRequired = updateRequired;\n            logger.info(\n                `Chrome extension installed: ${\n                    chromeExtInstalled} updateRequired: ${\n                    chromeExtUpdateRequired}`);\n            resolve();\n        }, options);\n    });\n}\n\n/**\n * Checks \"retries\" times on every \"waitInterval\"ms whether the ext is alive.\n * @param {Object} options the options passed to ScreanObtainer.obtainStream\n * @param {int} waitInterval the number of ms between retries\n * @param {int} retries the number of retries\n * @returns {Promise} returns promise that will be resolved when the extension\n * is alive and rejected if the extension is not alive even after \"retries\"\n * checks\n */\nfunction waitForExtensionAfterInstall(options, waitInterval, retries) {\n    if (retries === 0) {\n        return Promise.reject();\n    }\n\n    return new Promise((resolve, reject) => {\n        let currentRetries = retries;\n        const interval = window.setInterval(() => {\n            checkChromeExtInstalled(installed => {\n                if (installed) {\n                    window.clearInterval(interval);\n                    resolve();\n                } else {\n                    currentRetries--;\n                    if (currentRetries === 0) {\n                        reject();\n                        window.clearInterval(interval);\n                    }\n                }\n            }, options);\n        }, waitInterval);\n    });\n}\n\n/**\n * Handles response from external application / extension and calls GUM to\n * receive the desktop streams or reports error.\n * @param {object} options\n * @param {object} options.response\n * @param {string} options.response.streamId - the streamId for the desktop\n * stream.\n * @param {bool}   options.response.screenShareAudio - Used by electron clients to\n * enable system audio screen sharing.\n * @param {string} options.response.error - error to be reported.\n * @param {object} options.gumOptions - options passed to GUM.\n * @param {Function} onSuccess - callback for success.\n * @param {Function} onFailure - callback for failure.\n * @param {object} gumOptions - options passed to GUM.\n */\nfunction onGetStreamResponse(\n        options = {\n            response: {},\n            gumOptions: {}\n        },\n        onSuccess,\n        onFailure) {\n    const { streamId, streamType, screenShareAudio, error } = options.response || {};\n\n    if (streamId) {\n        const gumOptions = {\n            desktopStream: streamId,\n            screenShareAudio,\n            ...options.gumOptions\n        };\n\n        gumFunction([ 'desktop' ], gumOptions)\n            .then(stream => onSuccess({\n                stream,\n                sourceId: streamId,\n                sourceType: streamType\n            }), onFailure);\n    } else {\n        // As noted in Chrome Desktop Capture API:\n        // If user didn't select any source (i.e. canceled the prompt)\n        // then the callback is called with an empty streamId.\n        if (streamId === '') {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED));\n\n            return;\n        }\n\n        onFailure(new JitsiTrackError(\n            JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n            error));\n    }\n}\n\nexport default ScreenObtainer;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.rtc.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            logger.debug('Assuming connection active by JVB - no notification');\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            initiator: jibriStatus.getAttribute('initiator'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","/* global __filename, $ */\n\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\nimport { integerHash } from '../util/StringUtils';\n\nimport browser from './../browser';\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport SDP from './SDP';\nimport SDPDiffer from './SDPDiffer';\nimport SDPUtil from './SDPUtil';\nimport SignalingLayerImpl from './SignalingLayerImpl';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} testing.enableFirefoxSimulcast - Described in the\n * config.js[1].\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which\n     * identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param mediaConstraints the media constraints object passed to\n     * createOffer/Answer, as defined by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\n     * standard.\n     * @param {boolean} isP2P indicates whether this instance is\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\n     * if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedOldLocalSdp = undefined;\n\n        /**\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\n         * used to update Jicofo once the XMPP connection goes back online.\n         * @type {SDP|undefined}\n         * @private\n         */\n        this._cachedNewLocalSdp = undefined;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n\n        this._xmppListeners = [];\n        this._xmppListeners.push(\n            connection.addEventListener(\n                XmppConnection.Events.CONN_STATUS_CHANGED,\n                this.onXmppStatusChanged.bind(this))\n        );\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n        pcOptions.capScreenshareBitrate = false;\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\n\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264);\n            pcOptions.preferH264 = options.preferH264;\n            pcOptions.enableFirefoxSimulcast\n                = options.testing && options.testing.enableFirefoxSimulcast;\n            pcOptions.enableLayerSuspension = options.enableLayerSuspension;\n\n            // disable simulcast for screenshare and set the max bitrate to\n            // 500Kbps if the testing flag is present in config.js.\n            if (options.testing\n                && options.testing.capScreenshareBitrate\n                && typeof options.testing.capScreenshareBitrate === 'number') {\n                pcOptions.capScreenshareBitrate\n                    = Math.random()\n                    < options.testing.capScreenshareBitrate;\n\n                // add the capScreenshareBitrate to the permanent properties so\n                // that it's included with every event that we send to the\n                // analytics backend.\n                Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\n            }\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\n                    + ` P2P? ${this.isP2P}:\\t`,\n                now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been\n                // restored.\n                if (this.peerconnection.signalingState === 'stable') {\n                    if (this.isReconnect) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                if (!this.wasConnected && this.wasstable) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n\n        /**\n         * The negotiationneeded event is fired whenever we shake the media on the\n         * RTCPeerConnection object.\n         */\n        this.peerconnection.onnegotiationneeded = () => {\n            const state = this.peerconnection.signalingState;\n            const remoteDescription = this.peerconnection.remoteDescription;\n\n            this.room.eventEmitter.emit(XMPPEvents.PEERCONNECTION_READY, this);\n            if (browser.usesUnifiedPlan() && state === 'stable'\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\n                logger.debug(`onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\n                const workFunction = finishedCallback => {\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                    this._renegotiate()\n                        .then(() => {\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                };\n\n                this.modificationQueue.push(\n                    workFunction,\n                    error => {\n                        if (error) {\n                            logger.error('onnegotiationneeded error', error);\n                        } else {\n                            logger.debug('onnegotiationneeded executed - OK');\n                        }\n                    });\n            }\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n\n        if (!this.isP2P && options.enableLayerSuspension) {\n            // If this is the bridge session, we'll listen for\n            // IS_SELECTED_CHANGED events and notify the peer connection\n            this.rtc.addListener(RTCEvents.IS_SELECTED_CHANGED,\n                isSelected => {\n                    this.peerconnection.setIsSelected(isSelected);\n                    logger.info('Doing local O/A due to '\n                        + 'IS_SELECTED_CHANGED event');\n                    this.modificationQueue.push(finishedCallback => {\n                        this._renegotiate()\n                            .then(finishedCallback)\n                            .catch(finishedCallback);\n                    });\n                }\n            );\n        }\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\n            const ice\n                = SDPUtil.iceparams(\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    // start 20ms callout\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, 20);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log('sendIceCandidate: last candidate.');\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log('sendIceCandidates', candidates);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ(\n            sessionInfo,\n            null,\n            this.newJingleErrorHandler(sessionInfo),\n            /*\n             * This message will be often sent when there are connectivity\n             * issues, so make it slightly longer than Prosody's default BOSH\n             * inactivity timeout of 60 seconds.\n             */ 65);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn('Ignored add ICE candidate when in closed state');\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug('addIceCandidate ok!'),\n                        err => logger.error('addIceCandidate failed!', err));\n            }\n\n            finishedCallback();\n        };\n\n        logger.debug(\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(\n                                    `Invalid SSRC ${ssrc} value received`\n                                        + ` for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(\n                'Unable to generate recvonly SSRC - no peerconnection');\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            for (const localTrack of localTracks) {\n                this.peerconnection.addTrack(localTrack, true /* isInitiator */);\n            }\n            this.peerconnection.createOffer(this.mediaConstraints)\n                .then(offerSdp => {\n                    this.peerconnection.setLocalDescription(offerSdp)\n                        .then(() => {\n                            // NOTE that the offer is obtained from\n                            // the localDescription getter as it needs to go\n                            // though the transformation chain.\n                            this.sendSessionInitiate(\n                                this.peerconnection.localDescription.sdp);\n                            finishedCallback();\n                        }, error => {\n                            logger.error(\n                                'Failed to set local SDP', error, offerSdp);\n                            finishedCallback(error);\n                        });\n                }, error => {\n                    logger.error(\n                        'Failed to create an offer',\n                        error,\n                        this.mediaConstraints);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('invite error', error);\n                } else {\n                    logger.debug('invite executed - OK');\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info('Session-initiate: ', init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info('Got RESULT for \"session-initiate\"');\n            },\n            error => {\n                logger.error('\"session-initiate\" error', error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info('setAnswer - succeeded');\n            },\n            error => {\n                logger.error('setAnswer failed: ', error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks) {\n        const workFunction = finishedCallback => {\n\n            if (localTracks) {\n                for (const track of localTracks) {\n                    this.peerconnection.addTrack(track);\n                }\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        if (this.isP2P && !this._localVideoActive) {\n                            this.sendContentModify(this._localVideoActive);\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n\n                    finishedCallback();\n                }, error => {\n                    logger.error(\n                        `Error renegotiating after setting new remote ${\n                            this.isInitiator ? 'answer: ' : 'offer: '}${error}`,\n                        newRemoteSdp);\n\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                error ? failure(error) : success();\n            });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\n            null);\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info('Sending session-accept', accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media.\n     * @param {boolean} videoTransferActive <tt>false</tt> to let the other peer\n     * know that we're not sending nor interested in receiving video contents.\n     * When set to <tt>true</tt> remote peer will be asked to resume video\n     * transfer.\n     * @private\n     */\n    sendContentModify(videoTransferActive) {\n        const newSendersValue = videoTransferActive ? 'both' : 'none';\n\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders: newSendersValue\n                });\n\n        logger.info(\n            `Sending content-modify, video senders: ${newSendersValue}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info('Sending transport-accept: ', transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info('Sending \\'transport-reject', transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success');\n\n            if (options && options.reasonDescription) {\n                sessionTerminate.up()\n                    .c('text')\n                    .t(options.reasonDescription);\n            }\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info('Sending session-terminate', sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`Skipped sending session-terminate for ${this}`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\n\n        this._xmppListeners.forEach(removeListener => removeListener());\n        this._xmppListeners = [];\n\n        this.close();\n    }\n\n    /**\n     * Handles XMPP connection state changes.\n     *\n     * @param {XmppConnection.Status} status - The new status.\n     */\n    onXmppStatusChanged(status) {\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\n            logger.info('Sending SSRC update on reconnect');\n            this.notifyMySSRCUpdate(\n                this._cachedOldLocalSdp,\n                this._cachedNewLocalSdp);\n        }\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(\n                        `Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`Processing ${logPrefix}`);\n            logger.log(\n                'ICE connection state: ',\n                this.peerconnection.iceConnectionState);\n\n            const oldLocalSdp\n                = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = browser.usesPlanB()\n            ? new SDP(this.peerconnection.remoteDescription.sdp)\n            : new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            if (browser.usesPlanB()) {\n                lines.forEach(line => {\n                    remoteSdp.media[idx]\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n                });\n            } else {\n                lines.forEach(line => {\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\n\n                    if (mid > -1) {\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\n\n                        // Change the direction to \"inactive\".\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace('a=sendonly', 'a=inactive');\n                    }\n                });\n            }\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: setting remote description');\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug('Renegotiate: creating answer');\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug('Renegotiate: setting local description');\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: creating offer');\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug('Renegotiate: setting local description');\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(\n                            'Renegotiate: setting remote description');\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            if (browser.usesPlanB()) {\n                // NOTE the code below assumes that no more than 1 video track\n                // can be added to the peer connection.\n                // Transition from camera to desktop share\n                // or transition from one camera source to another.\n                if (this.peerconnection.options.capScreenshareBitrate\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the old video stream.\n                    // 2. source-add for the new video stream.\n                    this.peerconnection.clearRecvonlySsrc();\n                }\n\n                // Transition from no video to video (unmute).\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                    // Clearing current primary SSRC will make\n                    // the SdpConsistency generate a new one which will result\n                    // with:\n                    // 1. source-remove for the recvonly\n                    // 2. source-add for the new video stream\n                    this.peerconnection.clearRecvonlySsrc();\n\n                // Transition from video to no video\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                    // Clearing current primary SSRC and generating the recvonly\n                    // will result in:\n                    // 1. source-remove for the old video stream\n                    // 2. source-add for the recvonly stream\n                    this.peerconnection.clearRecvonlySsrc();\n                    this.peerconnection.generateRecvonlySsrc();\n                }\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n                .then(shouldRenegotiate => {\n                    let promise = Promise.resolve();\n\n                    if (shouldRenegotiate\n                        && (oldTrack || newTrack)\n                        && this.state === JingleSessionState.ACTIVE) {\n                        promise = this._renegotiate().then(() => {\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\n                        },\n                        finishedCallback /* will be called with en error */);\n                    }\n\n                    // Wait for the renegotation to be done if needed (plan-b) before adjusting\n                    // the max bitrates on the video sender.\n                    promise.then(() => {\n                        // configure max bitrate only when media is routed\n                        // through JVB. For p2p case, browser takes care of\n                        // adjusting the uplink based on the feedback it\n                        // gets from the peer.\n                        if (newTrack && !this.isP2P) {\n                            this.peerconnection.setMaxBitRate(newTrack);\n                        }\n                        finishedCallback();\n                    }, finishedCallback /* will be called with en error */);\n                })\n                .catch(err => {\n                    finishedCallback(err);\n                });\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error('Replace track error:', error);\n                        reject(error);\n                    } else {\n                        logger.info('Replace track done!');\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(\n                `${this} - some SSRC were added on ${operationName}`,\n                addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(\n                `${this} - some SSRCs were removed on ${operationName}`,\n                removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track);\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const tpcOperation\n                = isMute\n                    ? tpc.removeTrackMute.bind(tpc, track)\n                    : tpc.addTrackUnmute.bind(tpc, track);\n\n            if (!tpcOperation()) {\n                finishedCallback(`${operationName} failed!`);\n\n            // Do not renegotiate when browser is running in Unified-plan mode.\n            } else if (!oldLocalSDP || !tpc.remoteDescription.sdp || browser.usesUnifiedPlan()) {\n                finishedCallback();\n            } else {\n                this._renegotiate()\n                    .then(() => {\n                        // The results are ignored, as this check failure is not\n                        // enough to fail the whole operation. It will log\n                        // an error inside.\n                        this._verifyNoSSRCChanged(\n                            operationName, new SDP(oldLocalSDP));\n                        finishedCallback();\n                    },\n                    finishedCallback /* will be called with an error */);\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify(videoActive);\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(\n            `${this} queued \"content-modify\" task`\n                + `(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('\"content-modify\" failed', error);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(\n                `${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        if (!this.connection.connected) {\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\n            if (!this._cachedOldLocalSdp) {\n                this._cachedOldLocalSdp = oldSDP;\n            }\n            this._cachedNewLocalSdp = newSDP;\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\n\n            return;\n        }\n\n        this._cachedOldLocalSdp = undefined;\n        this._cachedNewLocalSdp = undefined;\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info('Sending source-remove', remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        } else {\n            logger.log('removal not necessary');\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info('Sending source-add', add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        } else {\n            logger.log('addition not necessary');\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        if (this.peerconnection) {\n            this.peerconnection.onicecandidate = null;\n            this.peerconnection.oniceconnectionstatechange = null;\n            this.peerconnection.onnegotiationneeded = null;\n            this.peerconnection.onsignalingstatechange = null;\n        }\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n        });\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[p2p=${this.isP2P},`\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n\n    const self = this;\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            if (audioLevel !== self.audioLevel) {\n                self.audioLevel = animateLevel(audioLevel, self.audioLevel);\n                self.callback(self.audioLevel);\n            }\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Adds onended/oninactive handler to a MediaStream.\n * @param mediaStream a MediaStream to attach onended/oninactive handler\n * @param handler the handler\n */\nfunction addMediaStreamInactiveHandler(mediaStream, handler) {\n    mediaStream.oninactive = handler;\n}\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            addMediaStreamInactiveHandler(this.stream, undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                addMediaStreamInactiveHandler(\n                    this.stream, this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Check whether this is a local audio track.\n     *\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\n     */\n    isLocalAudioTrack() {\n        return this.isAudioTrack() && this.isLocal();\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack label\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this.track.label;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        if (this.audioLevel !== audioLevel) {\n            this.audioLevel = audioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel,\n                tpc);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","/**\n * Adapter that creates AudioContext objects depending on the browser.\n *\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\n */\nexport function createAudioContext(options) {\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\n\n    if (!AudioContextImpl) {\n        return undefined;\n    }\n\n    return new AudioContextImpl(options);\n}\n","import EventEmitter from 'events';\n\nimport RTC from '../RTC/RTC';\n\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\n\n/**\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\n * score is published to consumers via an EventEmitter.\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\n *\n * @fires VAD_SCORE_PUBLISHED\n */\nexport default class TrackVADEmitter extends EventEmitter {\n    /**\n     * Constructor.\n     *\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\n     */\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\n        super();\n\n        /**\n         * Sample rate of the ScriptProcessorNode.\n         */\n        this._procNodeSampleRate = procNodeSampleRate;\n\n        /**\n         * VAD Processor that allows us to calculate VAD score for PCM samples\n         */\n        this._vadProcessor = vadProcessor;\n\n        /**\n         * The JitsiLocalTrack instance.\n         */\n        this._localTrack = jitsiLocalTrack;\n\n        /**\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\n         */\n        this._bufferResidue = new Float32Array([]);\n\n        /**\n         * The AudioContext instance with the preferred sample frequency.\n         */\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\n\n        /**\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\n         * saves a couple of function calls.\n         */\n        this._vadSampleSize = vadProcessor.getSampleLength();\n\n        /**\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\n         * sample rate.\n         */\n        this._onAudioProcess = this._onAudioProcess.bind(this);\n\n        this._initializeAudioContext();\n    }\n\n    /**\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\n     *\n     * @param {string} micDeviceId - Target microphone device id.\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\n     * The processor needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\n     */\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\n        return RTC.obtainAudioAndVideoPermissions({\n            devices: [ 'audio' ],\n            micDeviceId\n        }).then(localTrack => {\n            // We only expect one audio track when specifying a device id.\n            if (!localTrack[0]) {\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\n            }\n\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\n\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\n            // life cycle is handled by whoever created this instance.\n        });\n    }\n\n    /**\n     * Sets up the audio graph in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _initializeAudioContext() {\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\n\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\n        // with audio worklet when it's mature enough and has more browser support.\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\n    }\n\n    /**\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\n     *\n     *\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\n     * @returns {void}\n     * @fires VAD_SCORE_PUBLISHED\n     */\n    _onAudioProcess(audioEvent) {\n        // Prepend the residue PCM buffer from the previous process callback.\n        const inData = audioEvent.inputBuffer.getChannelData(0);\n        const completeInData = [ ...this._bufferResidue, ...inData ];\n        const sampleTimestamp = Date.now();\n\n        let i = 0;\n\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\n\n            // The VAD processor might change the values inside the array so we make a copy.\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\n\n            this.emit(VAD_SCORE_PUBLISHED, {\n                timestamp: sampleTimestamp,\n                score: vadScore,\n                pcmData: pcmSample,\n                deviceId: this._localTrack.getDeviceId()\n            });\n        }\n\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\n    }\n\n    /**\n     * Connects the nodes in the AudioContext to start the flow of audio data.\n     *\n     * @returns {void}\n     */\n    _connectAudioGraph() {\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\n        this._audioSource.connect(this._audioProcessingNode);\n        this._audioProcessingNode.connect(this._audioContext.destination);\n    }\n\n    /**\n     * Disconnects the nodes in the AudioContext.\n     *\n     * @returns {void}\n     */\n    _disconnectAudioGraph() {\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\n        // resulting in calls with and uninitialized context.\n        // eslint-disable-next-line no-empty-function\n        this._audioProcessingNode.onaudioprocess = () => {};\n        this._audioProcessingNode.disconnect();\n        this._audioSource.disconnect();\n    }\n\n    /**\n     * Cleanup potentially acquired resources.\n     *\n     * @returns {void}\n     */\n    _cleanupResources() {\n        this._disconnectAudioGraph();\n        this._localTrack.stopStream();\n    }\n\n    /**\n     * Get the associated track device ID.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._localTrack.getDeviceId();\n    }\n\n\n    /**\n     * Get the associated track label.\n     *\n     * @returns {string}\n     */\n    getTrackLabel() {\n        return this._localTrack.getDeviceLabel();\n    }\n\n    /**\n     * Start the emitter by connecting the audio graph.\n     *\n     * @returns {void}\n     */\n    start() {\n        this._connectAudioGraph();\n    }\n\n    /**\n     * Stops the emitter by disconnecting the audio graph.\n     *\n     * @returns {void}\n     */\n    stop() {\n        this._disconnectAudioGraph();\n        this._bufferResidue = [];\n    }\n\n    /**\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\n     *\n     * @returns {void}\n     */\n    destroy() {\n        if (this._destroyed) {\n            return;\n        }\n\n        this._cleanupResources();\n        this._destroyed = true;\n    }\n}\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\nexport const ERROR_FEATURE_VERSION_MISMATCH = 'Feature version mismatch';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.versionToCapabilities = Object.create(null);\n        this.jidToVersion = Object.create(null);\n        this.version = '';\n        this.rooms = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\n\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    addFeature(feature, submit = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    removeFeature(feature, submit = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Returns a set with the features for a participant.\n     * @param {String} jid the jid of the participant\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(jid, timeout = 5000) {\n        const user\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\n\n        if (!user || !(user.version in this.versionToCapabilities)) {\n            const node = user ? `${user.node}#${user.version}` : null;\n\n            return this._getDiscoInfo(jid, node, timeout)\n                .then(({ features, identities }) => {\n                    if (user) {\n                        const sha = generateSha(\n                            Array.from(identities),\n                            Array.from(features)\n                        );\n                        const receivedNode = `${user.node}#${sha}`;\n\n                        if (receivedNode === node) {\n                            this.versionToCapabilities[receivedNode] = features;\n\n                            return features;\n                        }\n\n                        // Check once if it has been cached asynchronously.\n                        if (this.versionToCapabilities[receivedNode]) {\n                            return this.versionToCapabilities[receivedNode];\n                        }\n\n                        logger.error(`Expected node ${node} but received ${\n                            receivedNode}`);\n\n                        return Promise.reject(ERROR_FEATURE_VERSION_MISMATCH);\n                    }\n                });\n        }\n\n        return Promise.resolve(this.versionToCapabilities[user.version]);\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, timeout = 5000) {\n        return this._getDiscoInfo(jid, null, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                const features = new Set();\n                const identities = new Set();\n\n                $(response)\n                    .find('>query>feature')\n                    .each(\n                        (_, el) => features.add(el.getAttribute('var')));\n                $(response)\n                    .find('>query>identity')\n                    .each(\n                        (_, el) => identities.add({\n                            type: el.getAttribute('type'),\n                            name: el.getAttribute('name'),\n                            category: el.getAttribute('category')\n                        }));\n                resolve({\n                    features,\n                    identities });\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n        this._fixChatRoomPresenceMap(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addToPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n\n    /**\n     * Parses the \"c\" xml node from presence.\n     * @param {DOMElement} stanza the presence packet\n     */\n    _handleCaps(stanza) {\n        const from = stanza.getAttribute('from');\n        const caps = stanza.querySelector('c');\n        const version = caps.getAttribute('ver');\n        const node = caps.getAttribute('node');\n        const oldVersion = this.jidToVersion[from];\n\n        this.jidToVersion[from] = { version,\n            node };\n        if (oldVersion && oldVersion.version !== version) {\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n                from);\n        }\n\n        // return true to not remove the handler from Strophe\n        return true;\n    }\n\n    /**\n     * Removes entry from this.jidToVersion map.\n     * @param {String} jid the jid to be removed.\n     */\n    _removeJidToVersionEntry(jid) {\n        if (jid in this.jidToVersion) {\n            delete this.jidToVersion[jid];\n        }\n    }\n}\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","import { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\nconst logger = getLogger(__filename);\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\n\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/**\n * Handles track related operations on TraceablePeerConnection when browser is\n * running in unified plan mode.\n */\nexport class TPCUtils {\n    /**\n     * @constructor\n     */\n    constructor(peerconnection) {\n        this.pc = peerconnection;\n\n        /**\n         * The simulcast encodings that will be configured on the RTCRtpSender\n         * for the video tracks in the unified plan mode.\n         */\n        this.simulcastEncodings = [\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? 2500000 : 200000,\n                rid: SIM_LAYER_1_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\n            },\n            {\n                active: true,\n                maxBitrate: 700000,\n                rid: SIM_LAYER_2_RID,\n                scaleResolutionDownBy: 2.0\n            },\n            {\n                active: true,\n                maxBitrate: browser.isFirefox() ? 200000 : 2500000,\n                rid: SIM_LAYER_3_RID,\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\n            }\n        ];\n    }\n\n    /**\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\n     * plan since we have only one FID group per media description.\n     * @param {Object} description the webRTC session description instance for the remote\n     * description.\n     * @private\n     */\n    _ensureCorrectOrderOfSsrcs(description) {\n        const parsedSdp = transform.parse(description.sdp);\n\n        parsedSdp.media.forEach(mLine => {\n            if (mLine.type === 'audio') {\n                return;\n            }\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\n                return;\n            }\n            let reorderedSsrcs = [];\n\n            mLine.ssrcGroups[0].ssrcs.split(' ').forEach(ssrc => {\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\n\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\n            });\n            mLine.ssrcs = reorderedSsrcs;\n        });\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    /**\n     * Obtains stream encodings that need to be configured on the given track.\n     * @param {JitsiLocalTrack} localTrack\n     */\n    _getStreamEncodings(localTrack) {\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\n            return this.simulcastEncodings;\n        }\n\n        return [ { active: true } ];\n    }\n\n    /**\n     * Takes in a *unified plan* offer and inserts the appropriate\n     * parameters for adding simulcast receive support.\n     * @param {Object} desc - A session description object\n     * @param {String} desc.type - the type (offer/answer)\n     * @param {String} desc.sdp - the sdp content\n     *\n     * @return {Object} A session description (same format as above) object\n     * with its sdp field modified to advertise simulcast receive support\n     */\n    _insertUnifiedPlanSimulcastReceive(desc) {\n        // a=simulcast line is not needed on browsers where\n        // we munge SDP for turning on simulcast. Remove this check\n        // when we move to RID/MID based simulcast on all browsers.\n        if (browser.usesSdpMungingForSimulcast()) {\n            return desc;\n        }\n        const sdp = transform.parse(desc.sdp);\n        const idx = sdp.media.findIndex(mline => mline.type === 'video');\n\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\n            // Make sure we don't have the simulcast recv line on video descriptions other than the\n            // the first video description.\n            sdp.media.forEach((mline, i) => {\n                if (mline.type === 'video' && i !== idx) {\n                    sdp.media[i].rids = undefined;\n                    sdp.media[i].simulcast = undefined;\n                }\n            });\n        }\n\n        // In order of highest to lowest spatial quality\n        sdp.media[idx].rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\n        // eslint-disable-next-line max-len\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\n\n        // eslint-disable-next-line camelcase\n        sdp.media[idx].simulcast_03 = {\n            value: simulcastLine\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    }\n\n    /**\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\n    * @returns {boolean} Returns true if the operation is successful,\n    * false otherwise.\n    */\n    addTrack(localTrack, isInitiator = true) {\n        const track = localTrack.getTrack();\n\n        if (isInitiator) {\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\n            // to the peerconnection before a session-initiate is sent over to the peer.\n            const transceiverInit = {\n                direction: 'sendrecv',\n                streams: [ localTrack.getOriginalStream() ],\n                sendEncodings: []\n            };\n\n            if (!browser.isFirefox()) {\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\n            }\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\n        } else {\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\n            // unused \"recv-only\" transceiver.\n            this.pc.peerconnection.addTrack(track);\n        }\n    }\n\n    /**\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\n     * @returns {boolean} Returns true if the operation is successful,\n     * false otherwise.\n     */\n    addTrackUnmute(localTrack) {\n        const mediaType = localTrack.getType();\n        const track = localTrack.getTrack();\n\n        // The assumption here is that the first transceiver of the specified\n        // media type is that of the local track.\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n\n        if (!transceiver) {\n            logger.error(`RTCRtpTransceiver for ${mediaType} on ${this.pc} not found`);\n\n            return false;\n        }\n        logger.debug(`Adding ${localTrack} on ${this.pc}`);\n\n        // If the client starts with audio/video muted setting, the transceiver direction\n        // will be set to 'recvonly'. Use addStream here so that a MSID is generated for the stream.\n        if (transceiver.direction === 'recvonly') {\n            this.pc.peerconnection.addStream(localTrack.getOriginalStream());\n            this.setEncodings(localTrack);\n            this.pc.localTracks.set(localTrack.rtcId, localTrack);\n            transceiver.direction = 'sendrecv';\n\n            return true;\n        }\n        transceiver.sender.replaceTrack(track)\n            .then(() => {\n                this.pc.localTracks.set(localTrack.rtcId, localTrack);\n\n                return true;\n            })\n            .catch(err => {\n                logger.error(`Unmute track failed for ${mediaType} track on ${this.pc}, ${err}`);\n\n                return false;\n            });\n    }\n\n    /**\n     * Removes the track from the RTCRtpSender as part of the mute operation.\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\n     * @returns {boolean} Returns true if the operation is successful,\n     * false otherwise.\n     */\n    removeTrackMute(localTrack) {\n        const mediaType = localTrack.getType();\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.sender && t.sender.track && t.sender.track.id === localTrack.getTrackId());\n\n        if (!transceiver) {\n            logger.error(`RTCRtpTransceiver for ${mediaType} on ${this.pc} not found`);\n\n            return false;\n        }\n\n        logger.debug(`Removing ${localTrack} on ${this.pc}`);\n        transceiver.sender.replaceTrack(null)\n            .then(() => {\n                this.pc.localTracks.delete(localTrack.rtcId);\n                this.pc.localSSRCs.delete(localTrack.rtcId);\n\n                return true;\n            })\n            .catch(err => {\n                logger.error(`Mute track failed for ${mediaType} track on ${this.pc}, ${err}`);\n\n                return false;\n            });\n    }\n\n    /**\n     * Replaces the existing track on a RTCRtpSender with the given track.\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\n     * @returns {Promise<false>} Promise that resolves with false as we don't want\n     * renegotiation to be triggered automatically after this operation. Renegotiation is\n     * done when the browser fires the negotiationeeded event.\n     */\n    replaceTrack(oldTrack, newTrack) {\n        if (oldTrack && newTrack) {\n            const mediaType = newTrack.getType();\n            const stream = newTrack.getOriginalStream();\n            const track = stream.getVideoTracks()[0];\n            const transceiver = this.pc.peerconnection.getTransceivers()\n                .find(t => t.receiver.track.kind === mediaType && !t.stopped);\n\n            if (!transceiver) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            logger.debug(`Replacing ${oldTrack} with ${newTrack} on ${this.pc}`);\n\n            return transceiver.sender.replaceTrack(track)\n                .then(() => {\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\n\n                    this.pc.localTracks.delete(oldTrack.rtcId);\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\n\n                    this.pc._addedStreams.push(stream);\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n                    this.pc.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n                        newTrack,\n                        this.pc._extractPrimarySSRC(ssrc));\n                });\n        } else if (oldTrack && !newTrack) {\n            if (!this.removeTrackMute(oldTrack)) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            this.pc.localTracks.delete(oldTrack.rtcId);\n            this.pc.localSSRCs.delete(oldTrack.rtcId);\n        } else if (newTrack && !oldTrack) {\n            const ssrc = this.pc.localSSRCs.get(newTrack.rtcId);\n\n            if (!this.addTrackUnmute(newTrack)) {\n                return Promise.reject(new Error('replace track failed'));\n            }\n            newTrack.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack);\n            this.pc.localTracks.set(newTrack.rtcId, newTrack);\n            this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\n        }\n\n        return Promise.resolve(false);\n    }\n\n    /**\n    * Enables/disables audio transmission on the peer connection. When\n    * disabled the audio transceiver direction will be set to 'inactive'\n    * which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable audio media transmission or\n    * false to disable.\n    * @returns {false} - returns false always so that renegotiation is not automatically\n    * triggered after this operation.\n    */\n    setAudioTransferActive(active) {\n        return this.setMediaTransferActive('audio', active);\n    }\n\n    /**\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\n     * @param {JitsiLocalTrack} track - the current track in use for which\n     * the encodings are to be set.\n     */\n    setEncodings(track) {\n        const transceiver = this.pc.peerconnection.getTransceivers()\n            .find(t => t.sender && t.sender.track && t.sender.track.kind === track.getType());\n        const parameters = transceiver.sender.getParameters();\n\n        parameters.encodings = this._getStreamEncodings(track);\n        transceiver.sender.setParameters(parameters);\n    }\n\n    /**\n     * Enables/disables media transmission on the peerconnection by changing the direction\n     * on the transceiver for the specified media type.\n     * @param {String} mediaType - 'audio' or 'video'\n     * @param {boolean} active - true to enable media transmission or false\n     * to disable.\n     * @returns {false} - returns false always so that renegotiation is not automatically\n     * triggered after this operation\n     */\n    setMediaTransferActive(mediaType, active) {\n        const transceivers = this.pc.peerconnection.getTransceivers()\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\n        const localTracks = Array.from(this.pc.localTracks.values())\n            .filter(track => track.getType() === mediaType);\n\n        if (active) {\n            transceivers.forEach(transceiver => {\n                if (localTracks.length) {\n                    transceiver.direction = 'sendrecv';\n                    const parameters = transceiver.sender.getParameters();\n\n                    if (parameters && parameters.encodings && parameters.encodings.length) {\n                        parameters.encodings.forEach(encoding => {\n                            encoding.active = true;\n                        });\n                        transceiver.sender.setParameters(parameters);\n                    }\n                } else {\n                    transceiver.direction = 'recvonly';\n                }\n            });\n        } else {\n            transceivers.forEach(transceiver => {\n                transceiver.direction = 'inactive';\n            });\n        }\n\n        return false;\n    }\n\n    /**\n    * Enables/disables video media transmission on the peer connection. When\n    * disabled the SDP video media direction in the local SDP will be adjusted to\n    * 'inactive' which means that no data will be sent nor accepted, but\n    * the connection should be kept alive.\n    * @param {boolean} active - true to enable video media transmission or\n    * false to disable.\n    * @returns {false} - returns false always so that renegotiation is not automatically\n    * triggered after this operation.\n    */\n    setVideoTransferActive(active) {\n        return this.setMediaTransferActive('video', active);\n    }\n}\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport JitsiTrack from './JitsiTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCUtils from './RTCUtils';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        if (browser.usesNewGumFlow()) {\n            // Get the resolution from the track itself because it cannot be\n            // certain which resolution webrtc has fallen back to using.\n            this.resolution = track.getSettings().height;\n\n            // Cache the constraints of the track in case of any this track\n            // model needs to call getUserMedia again, such as when unmuting.\n            this._constraints = track.getConstraints();\n        } else {\n            // FIXME Currently, Firefox is ignoring our constraints about\n            // resolutions so we do not store it, to avoid wrong reporting of\n            // local track resolution.\n            this.resolution = browser.isFirefox() ? null : resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\n        if (this.isMuted() && !this.isAudioTrack()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        if (browser.usesUnifiedPlan()) {\n            this._switchStreamEffect(effect);\n            if (this.isVideoTrack()) {\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n            }\n\n            return conference.replaceTrack(this, this)\n                .then(() => {\n                    this._setEffectInProgress = false;\n                })\n                .catch(error => {\n                    this._setEffectInProgress = false;\n                    this._switchStreamEffect();\n                    logger.error('Failed to switch to the new stream!', error);\n                    throw error;\n                });\n        }\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n            if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            if (browser.usesNewGumFlow()) {\n                promise\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\n                        {},\n                        streamOptions,\n                        { constraints: { video: this._constraints } }));\n            } else {\n                if (this.resolution) {\n                    streamOptions.resolution = this.resolution;\n                }\n\n                promise\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\n            }\n\n            promise.then(streamsInfo => {\n                // The track kind for presenter track is video as well.\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\n                const streamInfo\n                    = browser.usesNewGumFlow()\n                        ? streamsInfo.find(\n                            info => info.track.kind === mediaType)\n                        : streamsInfo.find(\n                            info => info.mediaType === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        this._switchStreamEffect();\n\n        let promise = Promise.resolve();\n\n        if (this.conference) {\n            promise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            let trackSettings;\n\n            try {\n                trackSettings = this.track.getSettings();\n            } catch (e) {\n                // XXX React-native-webrtc, for example, defines\n                // MediaStreamTrack#getSettings() but the implementation throws\n                // a \"Not implemented\" Error.\n            }\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { EventEmitter } from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\nimport TrackVADEmitter from './TrackVADEmitter';\n\nconst logger = getLogger(__filename);\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\n\n/**\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\n */\nexport default class VADAudioAnalyser extends EventEmitter {\n    /**\n     * Creates <tt>VADAudioAnalyser</tt>\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\n     * needs to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @constructor\n     */\n    constructor(conference, createVADProcessor) {\n        super();\n\n        /**\n         * Member function that instantiates a VAD processor.\n         */\n        this._createVADProcessor = createVADProcessor;\n\n        /**\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\n         * period voice probability scores.\n         */\n        this._vadEmitter = null;\n\n        /**\n         * Current state of the _vadEmitter\n         */\n        this._isVADEmitterRunning = false;\n\n        /**\n         * Array of currently attached VAD processing services.\n         */\n        this._detectionServices = [];\n\n        /**\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\n         * coming from the conference.\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\n         * i.e. (TRACK_MUTE_CHANGED event callback).\n         */\n        this._vadInitTracker = Promise.resolve();\n\n        /**\n         * Listens for {@link TrackVADEmitter} events and processes them.\n         */\n        this._processVADScore = this._processVADScore.bind(this);\n\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\n    }\n\n    /**\n     * Attach a VAD detector service to the analyser and handle it's state changes.\n     *\n     * @param {Object} vadTMDetector\n     */\n    addVADDetectionService(vadService) {\n        this._detectionServices.push(vadService);\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\n            // When the state of a detector changes check if there are any active detectors attached so that\n            // the _vadEmitter doesn't run needlessly.\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\n\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\n            // that needs it.\n            if (!activeDetector.length && this._isVADEmitterRunning) {\n                this._stopVADEmitter();\n            } else if (!this._isVADEmitterRunning) {\n                this._startVADEmitter();\n            }\n        });\n    }\n\n    /**\n     * Start the {@link TrackVADEmitter} and attach the event listener.\n     * @returns {void}\n     */\n    _startVADEmitter() {\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.start();\n        this._isVADEmitterRunning = true;\n    }\n\n    /**\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\n     * @returns {void}\n     */\n    _stopVADEmitter() {\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\n        this._vadEmitter.stop();\n        this._isVADEmitterRunning = false;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    _processVADScore(vadScore) {\n        for (const detector of this._detectionServices) {\n            detector.processVADScore(vadScore);\n        }\n    }\n\n    /**\n     * Change the isMuted state of all attached detection services.\n     *\n     * @param {boolean} isMuted\n     */\n    _changeDetectorsMuteState(isMuted) {\n        for (const detector of this._detectionServices) {\n            detector.changeMuteState(isMuted);\n        }\n    }\n\n    /**\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\n     * Only take into account local audio tracks.\n     * @param {JitsiTrack} track - The added track.\n     * @returns {void}\n     * @listens TRACK_ADDED\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\n            // destroy/create the processing context in the proper order.\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\n                .then(vadProcessor =>\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\n                )\n                .then(vadEmitter => {\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\n\n                    this._vadEmitter = vadEmitter;\n\n                    // Iterate through the detection services and set their appropriate mute state, depending on\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\n                    this._changeDetectorsMuteState(track.isMuted());\n                });\n        }\n    }\n\n    /**\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\n     * local audio tracks.\n     * @param {JitsiTrack} track - The track whose mute state has changed.\n     * @returns {void}\n     * @listens TRACK_MUTE_CHANGED\n     */\n    _trackMuteChanged(track) {\n        if (track.isLocalAudioTrack()) {\n            // On a mute toggle reset the state.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                // Set mute status for the attached detection services.\n                this._changeDetectorsMuteState(track.isMuted());\n            });\n        }\n    }\n\n    /**\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\n     *\n     * @param {JitsiTrack} track - The removed track.\n     * @returns {void}\n     * @listens TRACK_REMOVED\n     */\n    _trackRemoved(track) {\n        if (track.isLocalAudioTrack()) {\n            // Use the promise to make sure operations are in sequence.\n            this._vadInitTracker = this._vadInitTracker.then(() => {\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\n\n                // Track was removed, clean up and set appropriate states.\n                if (this._vadEmitter) {\n                    this._stopVADEmitter();\n                    this._vadEmitter.destroy();\n                    this._vadEmitter = null;\n                }\n\n                // Reset state of detectors when active track is removed.\n                for (const detector of this._detectionServices) {\n                    detector.reset();\n                }\n            });\n        }\n    }\n\n\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the initiator of the session instance.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\n     */\n    getInitiator() {\n        return this._initiator;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the jid of the participant that stopped the session.\n     *\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\n     */\n    getTerminator() {\n        return this._terminator;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sets the creator's jid of the session.\n     * @param {JitsiParticipant} participant - The creator of the session.\n     */\n    setInitiator(participant) {\n        this._initiator = participant;\n    }\n\n    /**\n     * Sets the jid of the participant that stopped the session.\n     * @param {JitsiParticipant} participant  - The participant's jid,\n     * that stopped the session.\n     */\n    setTerminator(participant) {\n        this._terminator = participant;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as MediaType from './service/RTC/MediaType';\nimport browser from './modules/browser';\nimport RTC from './modules/RTC/RTC';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport Statistics from './modules/statistics/statistics';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._grantedPermissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n        RTC.addListener(\n            RTCEvents.GRANTED_PERMISSIONS,\n            grantedPermissions =>\n                this._handleGrantedPermissions(grantedPermissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and\n        // 'microphone' permissions are implemented. (Testing for at least one\n        // of them seems sufficient).\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(() => resolve(true), () => resolve(false));\n        });\n    }\n\n    /**\n     * Updated the local granted permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} grantedPermissions - Array with the permissions\n     * which were granted.\n     */\n    _handleGrantedPermissions(grantedPermissions) {\n        this._grantedPermissions = {\n            ...this._grantedPermissions,\n            ...grantedPermissions\n        };\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._grantedPermissions) {\n                resolve(this._grantedPermissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        // The status attribute is deprecated, and state\n                        // should be used instead, but check both for now\n                        // for backwards compatibility.\n                        const grantStatus = permissionStatus.state\n                            || permissionStatus.status;\n\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices && availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // Defer to the browser capabilities to allow exposure of the api to the\n        // consumer but prevent other files from having to import\n        // JitsiMediaDevices.\n        return browser.supportsVideo();\n    }\n}\n\nexport default new JitsiMediaDevices();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*jslint latedef:false*/\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\n            getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            logPrefixes.push(new Date().toISOString());\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = createEmptyStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * Creates a empty MediaStream object which can be used\n * to add MediaStreamTracks to\n * @returns MediaStream\n */\nfunction createEmptyStream() {\n    if (typeof MediaStream !== 'undefined') {\n        return new MediaStream();\n    }\n    throw new Error('cannot create a clean mediaStream');\n}\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport RTC from '../RTC/RTC';\nimport Statistics from '../statistics/statistics';\n\n\nconst logger = getLogger(__filename);\n\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\n// i.e. audioLevel > 0.008\nconst DETECTION_TIMEOUT = 3000;\n\n\n/**\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n *\n * @returns Promise<Object> - Object containing information about the found device.\n */\nexport default function getActiveAudioDevice() {\n\n    return new Promise(resolve => {\n        RTC.enumerateDevices(devices => {\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\n            const devicePromiseArray = [];\n\n\n            for (const micDevice of audioDevices) {\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\n\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\n                    // that's  why only take p.value[0].\n                    const track = tracks[0];\n                    const originalStream = track.getOriginalStream();\n\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\n                        Statistics.stopLocalStats(originalStream);\n                    });\n\n                    return track;\n                });\n\n                devicePromiseArray.push(devicePromise);\n            }\n\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\n\n\n                const availableDevices = successfulPromises.map(p => p.value);\n                const rejectReasons = rejectedPromises.map(p => p.value);\n\n                for (const reason of rejectReasons) {\n                    logger.error('Failed to acquire audio device with error: ', reason);\n                }\n\n                // Setup event handlers for monitored devices.\n                for (const device of availableDevices) {\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\n                        // no input.\n                        if (audioLevel > 0.008) {\n                            stopActiveDevices(availableDevices);\n                            resolve({ deviceId: device.deviceId,\n                                deviceLabel: device.track.label });\n                        }\n                    });\n                }\n\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\n                setTimeout(() => {\n                    stopActiveDevices(availableDevices);\n                    resolve({\n                        deviceId: '',\n                        deviceLabel: '' }\n                    );\n                }, DETECTION_TIMEOUT);\n\n            });\n\n        });\n    });\n}\n\n/**\n * Stop the streams of the provided JitsiLocalTracks.\n *\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\n * @returns {void}\n */\nfunction stopActiveDevices(deviceList) {\n    for (const device of deviceList) {\n        device.stopStream();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} eventEmitter EventEmitter instance.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError(\n                'At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError(\n                'Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        const jsonObject = {\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        };\n\n        this._send(jsonObject);\n        logger.log(`Channel lastN set to: ${value}`);\n    }\n\n    /**\n     * Sends a \"pinned endpoint changed\" message via the channel.\n     * @param {string} endpointId The id of the pinned endpoint.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendPinnedEndpointMessage(endpointId) {\n        logger.log(\n            'sending pinned changed notification to the bridge for endpoint ',\n            endpointId);\n\n        this._send({\n            colibriClass: 'PinnedEndpointChangedEvent',\n            pinnedEndpoint: endpointId || null\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(\n            'sending selected changed notification to the bridge for endpoints',\n            endpointIds);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log('sending a ReceiverVideoConstraint message with '\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to parse channel message as JSON: ',\n                    data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                // Endpoint ID from the Videobridge.\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\n\n                logger.info(\n                    'Channel new dominant speaker event: ',\n                    dominantSpeakerEndpoint);\n                emitter.emit(\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\n                    dominantSpeakerEndpoint);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(\n                    `Endpoint connection status changed: ${endpoint} active ? ${\n                        isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n                    endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\n                    obj.msgPayload);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs.\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info('Channel new last-n event: ',\n                    lastNEndpoints, obj);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                    lastNEndpoints, obj);\n\n                break;\n            }\n            case 'SelectedUpdateEvent': {\n                const isSelected = obj.isSelected;\n\n                logger.info(`SelectedUpdateEvent isSelected? ${isSelected}`);\n                emitter.emit(RTCEvents.IS_SELECTED_CHANGED, isSelected);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","import {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport browser from '../browser';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","import { getLogger } from 'jitsi-meet-logger';\nimport { BrowserDetection } from 'js-utils';\n\nconst logger = getLogger(__filename);\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return this.isChromiumBased();\n    }\n\n    /**\n     * Check whether or not the current browser support peer to peer connections\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\n     * otherwise.\n     */\n    supportsP2P() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports native webrtc.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithWebrtc() {\n        return this.isSafari()\n            && !this.isVersionLessThan('11');\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports VP8.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithVP8() {\n        return this.isSafari()\n            && !this.isVersionLessThan('12.1');\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return this.isChromiumBased()\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return (this.isFirefox() && this.isVersionLessThan('68')) || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox();\n    }\n\n    /**\n     * Checks whether the browser supports RTPSender.\n     *\n     * @returns {boolean}\n     */\n    supportsRtpSender() {\n        return this.isFirefox() || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks whether the browser supports RTX.\n     *\n     * @returns {boolean}\n     */\n    supportsRtx() {\n        return !this.isFirefox() && !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // FIXME: Check if we can use supportsVideoOut and supportsVideoIn. I\n        // leave the old implementation here in order not to brake something.\n\n        // Older versions of Safari using webrtc/adapter do not support video\n        // due in part to Safari only supporting H264 and the bridge sending VP8\n        // Newer Safari support VP8 and other WebRTC features.\n        return !this.isSafariWithWebrtc()\n            || (this.isSafariWithVP8() && this.usesPlanB());\n    }\n\n    /**\n     * Checks if the browser uses plan B.\n     *\n     * @returns {boolean}\n     */\n    usesPlanB() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the browser uses SDP munging for turning on simulcast.\n     *\n     * @returns {boolean}\n     */\n    usesSdpMungingForSimulcast() {\n        return this.isChromiumBased() || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the browser uses unified plan.\n     *\n     * @returns {boolean}\n     */\n    usesUnifiedPlan() {\n        if (this.isFirefox()) {\n            return true;\n        }\n\n        if (this.isSafariWithVP8() && typeof window.RTCRtpTransceiver !== 'undefined') {\n            // eslint-disable-next-line max-len\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n            // eslint-disable-next-line no-undef\n            return Object.keys(RTCRtpTransceiver.prototype)\n                   .indexOf('currentDirection') > -1;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not the current browser should be using the new\n     * getUserMedia flow, which utilizes the adapter shim. This method should\n     * be temporary and used while migrating all browsers to use adapter and\n     * the new getUserMedia.\n     *\n     * @returns {boolean}\n     */\n    usesNewGumFlow() {\n        const REQUIRED_CHROME_VERSION = 61;\n\n        if (this.isChrome()) {\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\n        }\n\n        if (this.isFirefox() || this.isSafariWithWebrtc()) {\n            return true;\n        }\n\n        if (this.isChromiumBased()) {\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\n     * getUserMedia flow and Edge.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return this.usesNewGumFlow();\n    }\n\n    /**\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\n     * to the bridge instead of the ssrcs.\n     */\n    usesRidsForSimulcast() {\n        return false;\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\n     * https://webrtc.org/web-apis/chrome/unified-plan/\n     *\n     * @returns {boolean}\n     */\n    supportsSdpSemantics() {\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import browser from '../browser';\nimport { browsers } from 'js-utils';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\n * reported by RTCPeerConnection#getStats mapped by browser.\n */\nconst KEYS_BY_BROWSER_TYPE = {};\n\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsLost': 'packetsLost',\n    'packetsSent': 'packetsSent',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'framerateMean': 'framerateMean',\n    'ip': 'ipAddress',\n    'port': 'portNumber',\n    'protocol': 'transport'\n};\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'googRemoteAddress',\n    'transportType': 'googTransportType',\n    'localAddress': 'googLocalAddress',\n    'activeConnection': 'googActiveConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googFrameHeightReceived': 'googFrameHeightReceived',\n    'googFrameWidthReceived': 'googFrameWidthReceived',\n    'googFrameHeightSent': 'googFrameHeightSent',\n    'googFrameWidthSent': 'googFrameWidthSent',\n    'googFrameRateReceived': 'googFrameRateReceived',\n    'googFrameRateSent': 'googFrameRateSent',\n    'audioInputLevel': 'audioInputLevel',\n    'audioOutputLevel': 'audioOutputLevel',\n    'currentRoundTripTime': 'googRtt',\n    'remoteCandidateType': 'googRemoteCandidateType',\n    'localCandidateType': 'googLocalCandidateType',\n    'ip': 'ip',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(\n        peerconnection,\n        audioLevelsInterval,\n        statsInterval,\n        eventEmitter) {\n    // StatsCollector depends entirely on the format of the reports returned by\n    // RTCPeerConnection#getStats. Given that the value of\n    // browser#getName() is very unlikely to change at runtime, it\n    // makes sense to discover whether StatsCollector supports the executing\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\n    // needlessly check a \"static\" condition multiple times very very often and\n    // (2) the lack of support for the executing browser would be discovered and\n    // reported multiple times very very often too late in the execution in some\n    // totally unrelated callback.\n    /**\n     * The browser type supported by this StatsCollector. In other words, the\n     * type of the browser which initialized this StatsCollector\n     * instance.\n     * @private\n     */\n    this._browserType = browser.getName();\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\n\n    if (!keys) {\n        // eslint-disable-next-line no-throw-literal\n        throw `The browser type '${this._browserType}' isn't supported!`;\n    }\n\n    /**\n     * Whether to use the Promise-based getStats API or not.\n     * @type {boolean}\n     */\n    this._usesPromiseGetStats\n        = browser.isSafariWithWebrtc() || browser.isFirefox();\n\n    /**\n     * The function which is to be used to retrieve the value associated in a\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\n     * browser-agnostic name/key.\n     *\n     * @function\n     * @private\n     */\n    this._getStatValue\n        = this._usesPromiseGetStats\n            ? this._defineNewGetStatValueMethod(keys)\n            : this._defineGetStatValueMethod(keys);\n\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/* eslint-enable max-params */\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    const self = this;\n\n    if (startAudioLevelStats) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            results = report;\n                        } else {\n                            results = report.result();\n                        }\n                        self.currentAudioLevelsReport = results;\n                        if (this._usesPromiseGetStats) {\n                            self.processNewAudioLevelReport();\n                        } else {\n                            self.processAudioLevelReport();\n                        }\n\n                        self.baselineAudioLevelsReport\n                            = self.currentAudioLevelsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.audioLevelsIntervalMilis\n        );\n    }\n\n    this.statsIntervalId = setInterval(\n        () => {\n            // Interval updates\n            self.peerconnection.getStats(\n                report => {\n                    let results = null;\n\n                    if (!report || !report.result\n                        || typeof report.result !== 'function') {\n                        // firefox\n                        results = report;\n                    } else {\n                        // chrome\n                        results = report.result();\n                    }\n\n                    self.currentStatsReport = results;\n                    try {\n                        if (this._usesPromiseGetStats) {\n                            self.processNewStatsReport();\n                        } else {\n                            self.processStatsReport();\n                        }\n                    } catch (e) {\n                        GlobalOnErrorHandler.callErrorHandler(e);\n                        logger.error(`Unsupported key:${e}`, e);\n                    }\n\n                    self.previousStatsReport = self.currentStatsReport;\n                },\n                error => self.errorCallback(error)\n            );\n        },\n        self.statsIntervalMilis\n    );\n};\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Define the function which retrieves the value from a specific report\n    // returned by RTCPeerConnection#getStats associated with a given\n    // browser-specific key.\n    let itemStatByKey;\n\n    switch (this._browserType) {\n    case browsers.CHROME:\n    case browsers.OPERA:\n    case browsers.NWJS:\n    case browsers.ELECTRON:\n        // TODO What about other types of browser which are based on Chrome such\n        // as NW.js? Every time we want to support a new type browser we have to\n        // go and add more conditions (here and in multiple other places).\n        // Cannot we do a feature detection instead of a browser type check? For\n        // example, if item has a stat property of type function, then it's very\n        // likely that whoever defined it wanted you to call it in order to\n        // retrieve the value associated with a specific key.\n        itemStatByKey = (item, key) => item.stat(key);\n        break;\n    case browsers.REACT_NATIVE:\n        // The implementation provided by react-native-webrtc follows the\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\n        // Array in which each element is a key-value pair.\n        itemStatByKey = function(item, key) {\n            let value;\n\n            item.values.some(pair => {\n                if (pair.hasOwnProperty(key)) {\n                    value = pair[key];\n\n                    return true;\n                }\n\n                return false;\n\n            });\n\n            return value;\n        };\n        break;\n    default:\n        itemStatByKey = (item, key) => item[key];\n    }\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => itemStatByKey(item, keyFromName(name));\n};\n\n/**\n * Obtains a stat value from given stat and converts it to a non-negative\n * number. If the value is either invalid or negative then 0 will be returned.\n * @param report\n * @param {string} name\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\n    let value = this._getStatValue(report, name);\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/* eslint-disable no-continue */\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    for (const idx in this.currentStatsReport) {\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n        const now = this.currentStatsReport[idx];\n\n        // The browser API may return \"undefined\" values in the array\n        if (!now) {\n            continue;\n        }\n\n        try {\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\n\n            if (receiveBandwidth || sendBandwidth) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(receiveBandwidth / 1000),\n                    'upload': Math.round(sendBandwidth / 1000)\n                };\n            }\n        } catch (e) { /* not supported*/ }\n\n        if (now.type === 'googCandidatePair') {\n            let active, ip, localCandidateType, localip,\n                remoteCandidateType, rtt, type;\n\n            try {\n                active = getStatValue(now, 'activeConnection');\n                if (!active) {\n                    continue;\n                }\n\n                ip = getStatValue(now, 'remoteAddress');\n                type = getStatValue(now, 'transportType');\n                localip = getStatValue(now, 'localAddress');\n                localCandidateType = getStatValue(now, 'localCandidateType');\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\n            } catch (e) { /* not supported*/ }\n            if (!ip || !type || !localip || active !== 'true') {\n                continue;\n            }\n\n            // Save the address unless it has been saved already.\n            const conferenceStatsTransport = this.conferenceStats.transport;\n\n            if (!conferenceStatsTransport.some(\n                    t =>\n                        t.ip === ip\n                            && t.type === type\n                            && t.localip === localip)) {\n                conferenceStatsTransport.push({\n                    ip,\n                    type,\n                    localip,\n                    p2p: this.peerconnection.isP2P,\n                    localCandidateType,\n                    remoteCandidateType,\n                    rtt\n                });\n            }\n            continue;\n        }\n\n        if (now.type === 'candidatepair') {\n            // we need succeeded and selected pairs only\n            if (now.state !== 'succeeded' || !now.selected) {\n                continue;\n            }\n\n            const local = this.currentStatsReport[now.localCandidateId];\n            const remote = this.currentStatsReport[now.remoteCandidateId];\n\n            this.conferenceStats.transport.push({\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\n                type: local.transport,\n                localip: `${local.ipAddress}:${local.portNumber}`,\n                p2p: this.peerconnection.isP2P,\n                localCandidateType: local.candidateType,\n                remoteCandidateType: remote.candidateType\n            });\n        }\n\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.previousStatsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        // If type=\"track\", take the first SSRC from ssrcIds.\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before || !ssrc) {\n            continue;\n        }\n\n        // isRemote is available only in FF and is ignored in case of chrome\n        // according to the spec\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\n        // when isRemote is true indicates that the measurements were done at\n        // the remote endpoint and reported in an RTCP RR/XR.\n        // Fixes a problem where we are calculating local stats wrong adding\n        // the sent bytes to the local download bitrate.\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\n        // property.\n        if (now.isRemote === true || now.remoteSource === true) {\n            continue;\n        }\n\n        let ssrcStats = this.ssrc2stats.get(ssrc);\n\n        if (!ssrcStats) {\n            ssrcStats = new SsrcStats();\n            this.ssrc2stats.set(ssrc, ssrcStats);\n        }\n\n        let isDownloadStream = true;\n        let key = 'packetsReceived';\n        let packetsNow = getStatValue(now, key);\n\n        if (typeof packetsNow === 'undefined'\n            || packetsNow === null || packetsNow === '') {\n            isDownloadStream = false;\n            key = 'packetsSent';\n            packetsNow = getStatValue(now, key);\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\n                logger.warn('No packetsReceived nor packetsSent stat found');\n            }\n        }\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = this.getNonNegativeStat(before, key);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow\n            = this.getNonNegativeStat(now, 'packetsLost');\n        const packetsLostBefore\n            = this.getNonNegativeStat(before, 'packetsLost');\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        ssrcStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream\n        });\n\n        const bytesReceivedNow\n            = this.getNonNegativeStat(now, 'bytesReceived');\n        const bytesReceivedBefore\n            = this.getNonNegativeStat(before, 'bytesReceived');\n        const bytesReceived\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\n\n        let bytesSent = 0;\n\n        // TODO: clean this mess up!\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\n\n        if (typeof nowBytesTransmitted === 'number'\n            || typeof nowBytesTransmitted === 'string') {\n            nowBytesTransmitted = Number(nowBytesTransmitted);\n            if (!isNaN(nowBytesTransmitted)) {\n                byteSentStats[ssrc] = nowBytesTransmitted;\n                if (nowBytesTransmitted > 0) {\n                    bytesSent = nowBytesTransmitted\n                        - getStatValue(before, 'bytesSent');\n                }\n            }\n        }\n        bytesSent = Math.max(0, bytesSent);\n\n        const timeMs = now.timestamp - before.timestamp;\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\n\n        if (timeMs > 0) {\n            // TODO is there any reason to round here?\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\n        }\n\n        ssrcStats.addBitrate({\n            'download': bitrateReceivedKbps,\n            'upload': bitrateSentKbps\n        });\n\n        const resolution = {\n            height: null,\n            width: null\n        };\n\n        try {\n            let height, width;\n\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\n                resolution.height = height;\n                resolution.width = width;\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\n                resolution.height = height;\n                resolution.width = width;\n            }\n        } catch (e) { /* not supported*/ }\n\n        // Tries to get frame rate\n        let frameRate;\n\n        try {\n            frameRate = getStatValue(now, 'googFrameRateReceived')\n                || getStatValue(now, 'googFrameRateSent') || 0;\n        } catch (e) {\n            // if it fails with previous properties(chrome),\n            // let's try with another one (FF)\n            try {\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\n            } catch (err) { /* not supported*/ }\n        }\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n        if (resolution.height && resolution.width) {\n            ssrcStats.setResolution(resolution);\n        } else {\n            ssrcStats.setResolution(null);\n        }\n    }\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n\n    for (const idx in this.currentAudioLevelsReport) {\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n\n        const now = this.currentAudioLevelsReport[idx];\n\n        if (now.type !== 'ssrc' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.baselineAudioLevelsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before) {\n            logger.warn(`${ssrc} not enough data`);\n            continue;\n        }\n\n        if (!ssrc) {\n            if ((Date.now() - now.timestamp) < 3000) {\n                logger.warn('No ssrc: ');\n            }\n            continue;\n        }\n\n        // Audio level\n        let audioLevel;\n\n        try {\n            audioLevel\n                = getStatValue(now, 'audioInputLevel')\n                    || getStatValue(now, 'audioOutputLevel');\n        } catch (e) { /* not supported*/\n            logger.warn('Audio Levels are not available in the statistics.');\n            clearInterval(this.audioLevelsIntervalId);\n\n            return;\n        }\n\n        if (audioLevel) {\n            let isLocal;\n\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\n            if (now.type === 'ssrc') {\n                isLocal = !getStatValue(now, 'packetsReceived');\n\n            // If type=\"track\", check remoteSource boolean property.\n            } else {\n                isLocal = !now.remoteSource;\n            }\n\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\n            // 0..1 range (0 == silence). However browsers don't behave that\n            // way so we must convert it to 0..1.\n            // TODO: Can't find specs about what this value really is, but it\n            // seems to vary between 0 and around 32k.\n            audioLevel = audioLevel / 32767;\n\n            if (!(ssrc in this.audioLevelReportHistory)) {\n                this.audioLevelReportHistory[ssrc] = {\n                    isLocal,\n                    data: []\n                };\n            }\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    }\n};\n\n/* eslint-enable no-continue */\n\n/**\n * New promised based getStats report processing.\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\n * frameRate stat is missing and calculating it using framesSent,\n * gives values double the values seen in webrtc-internals.\n * https://w3c.github.io/webrtc-stats/\n */\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\n * Promised based getStats.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => item[keyFromName(name)];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing new getStats logic.\n */\nStatsCollector.prototype.processNewStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n\n        // RTCIceCandidatePairStats\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair'\n            && now.nominated\n            && now.state === 'succeeded') {\n\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate\n                = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate\n                = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            // safari currently does not provide ice candidates in stats\n            if (remoteUsedCandidate && localUsedCandidate) {\n                // FF uses non-standard ipAddress, portNumber, transport\n                // instead of ip, port, protocol\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\n                const localPort = getStatValue(localUsedCandidate, 'port');\n\n                const localIp = `${localIpAddress}:${localPort}`;\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(\n                        t =>\n                            t.ip === ip\n                            && t.type === type\n                            && t.localip === localIp)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localIp,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow\n                = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore\n                = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff\n                = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            if (now.type === 'inbound-rtp') {\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(\n                                    now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n\n                // RTCInboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\n                // TODO: can we use framesDecoded for frame rate, available\n                // in chrome\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(\n                                now, before, 'bytesSent')\n                });\n\n                // RTCOutboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\n                // TODO: can we use framesEncoded for frame rate, available\n                // in chrome\n            }\n\n            // FF has framerateMean out of spec\n            const framerateMean = now.framerateMean;\n\n            if (framerateMean) {\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\n            }\n\n        // track for resolution\n        // RTCVideoHandlerStats\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track') {\n\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n\n            // Tries to get frame rate\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                // we need to calculate it\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore\n                            = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            const trackIdentifier = now.trackIdentifier;\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            } else {\n                ssrcStats.setResolution(null);\n            }\n        }\n    });\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processNewAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n/**\n * End new promised based getStats processing methods.\n */\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction fixStatsType(stat) {\n  return {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  }[stat.type] || stat.type;\n}\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\n  e.code = {\n    NotSupportedError: 9,\n    InvalidStateError: 11,\n    InvalidAccessError: 15,\n    TypeError: undefined,\n    OperationError: undefined\n  }[name];\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this._localDescription = null;\n    this._remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.connectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\n    configurable: true,\n    get: function() {\n      return this._localDescription;\n    }\n  });\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\n    configurable: true,\n    get: function() {\n      return this._remoteDescription;\n    }\n  });\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    if (!doNotAdd) {\n      this.transceivers.push(transceiver);\n    }\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        // also the usernameFragment. TODO: update SDP to take both variants.\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\n\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n\n        event.candidate.candidate = serializedCandidate;\n        event.candidate.toJSON = function() {\n          return {\n            candidate: event.candidate.candidate,\n            sdpMid: event.candidate.sdpMid,\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\n            usernameFragment: event.candidate.usernameFragment\n          };\n        };\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc._localDescription.sdp =\n          SDPUtils.getDescription(pc._localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateIceConnectionState();\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.rejected) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc._localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\n          protocol === 'UDP/DTLS/SCTP'))) {\n        // TODO: this is dangerous in the case where a non-rejected m-line\n        //     becomes rejected.\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          kind: kind,\n          protocol: protocol,\n          rejected: true\n        };\n        return;\n      }\n\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\n          pc.transceivers[sdpMLineIndex].rejected) {\n        // recycle a rejected transceiver.\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        // If the offer contained RTX but the answer did not,\n        // remove RTX from sendEncodingParameters.\n        var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\n          return c.name.toLowerCase() === 'rtx';\n        }).length;\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n          delete transceiver.sendEncodingParameters[0].rtx;\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc._remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the ice connection state.\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n      }\n    });\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.checking > 0) {\n      newState = 'checking';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    } else if (states.completed > 0) {\n      newState = 'completed';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\n          !transceiver.rejected) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      }\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.connectionState) {\n      this.connectionState = newState;\n      var event = new Event('connectionstatechange');\n      this._dispatchEvent('connectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    if (!(pc.signalingState === 'have-remote-offer' ||\n        pc.signalingState === 'have-local-pranswer')) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc._remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.rejected) {\n        if (transceiver.kind === 'application') {\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\n          } else {\n            sdp += 'm=application 0 ' + transceiver.protocol +\n                ' webrtc-datachannel\\r\\n';\n          }\n        } else if (transceiver.kind === 'audio') {\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\n              'a=rtpmap:0 PCMU/8000\\r\\n';\n        } else if (transceiver.kind === 'video') {\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\n              'a=rtpmap:120 VP8/90000\\r\\n';\n        }\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=inactive\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc._remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].rejected) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.rejected) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc._remoteDescription.sdp =\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\n              sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function(selector) {\n    if (selector && selector instanceof window.MediaStreamTrack) {\n      var senderOrReceiver = null;\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.rtpSender &&\n            transceiver.rtpSender.track === selector) {\n          senderOrReceiver = transceiver.rtpSender;\n        } else if (transceiver.rtpReceiver &&\n            transceiver.rtpReceiver.track === selector) {\n          senderOrReceiver = transceiver.rtpReceiver;\n        }\n      });\n      if (!senderOrReceiver) {\n        throw makeError('InvalidAccessError', 'Invalid selector.');\n      }\n      return senderOrReceiver.getStats();\n    }\n\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    return Promise.all(promises).then(function(allStats) {\n      var results = new Map();\n      allStats.forEach(function(stats) {\n        stats.forEach(function(stat) {\n          results.set(stat.id, stat);\n        });\n      });\n      return results;\n    });\n  };\n\n  // fix low-level stat names and return Map instead of object.\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\n    'RTCIceTransport', 'RTCDtlsTransport'];\n  ortcObjects.forEach(function(ortcObjectName) {\n    var obj = window[ortcObjectName];\n    if (obj && obj.prototype && obj.prototype.getStats) {\n      var nativeGetstats = obj.prototype.getStats;\n      obj.prototype.getStats = function() {\n        return nativeGetstats.apply(this)\n        .then(function(nativeStats) {\n          var mapStats = new Map();\n          Object.keys(nativeStats).forEach(function(id) {\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\n            mapStats.set(id, nativeStats[id]);\n          });\n          return mapStats;\n        });\n      };\n    }\n  });\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/* global __filename, RTCSessionDescription */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Interop } from '@jitsi/sdp-interop';\nimport transform from 'sdp-transform';\n\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport LocalSdpMunger from './LocalSdpMunger';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RtxModifier from '../xmpp/RtxModifier';\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\n\n// FIXME SDP tools should end up in some kind of util module\nimport SDP from '../xmpp/SDP';\nimport SdpConsistency from '../xmpp/SdpConsistency';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\n\nconst logger = getLogger(__filename);\nconst MAX_BITRATE = 2500000;\nconst DESKSTOP_SHARE_RATE = 500000;\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used\n * in a peer to peer connection\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\n * the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\n * @param {boolean} options.enableFirefoxSimulcast if set to 'true' will enable\n * experimental simulcast support on Firefox.\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\n * stream.\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\n *      disabled by removing it from the SDP.\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\n * over other video codecs.\n * @param {boolean} options.enableLayerSuspension if set to 'true', we will\n * cap the video send bitrate when we are told we have not been selected by\n * any endpoints (and therefore the non-thumbnail streams are not in use).\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * The DTMF sender instance used to send DTMF tones.\n     *\n     * @type {RTCDTMFSender|undefined}\n     * @private\n     */\n    this._dtmfSender = undefined;\n\n    /**\n     * @typedef {Object} TouchToneRequest\n     * @property {string} tones - The DTMF tones string as defined by\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n     * @property {number} duration - The amount of time in milliseconds that\n     * each DTMF should last.\n     * @property {string} interToneGap - The length of time in miliseconds to\n     * wait between tones.\n     */\n    /**\n     * TouchToneRequests which are waiting to be played. This queue is filled\n     * if there are touch tones currently being played.\n     *\n     * @type {Array<TouchToneRequest>}\n     * @private\n     */\n    this._dtmfTonesQueue = [];\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, constraints);\n    this.tpcUtils = new TPCUtils(this);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast(\n        {\n            numOfLayers: SIM_LAYER_RIDS.length,\n            explodeRemoteSimulcast: false,\n            usesUnifiedPlan: browser.usesUnifiedPlan()\n        });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this);\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n\n    // Use stream events in plan-b and track events in unified plan.\n    if (browser.usesPlanB()) {\n        this.peerconnection.onaddstream\n            = event => this._remoteStreamAdded(event.stream);\n        this.peerconnection.onremovestream\n            = event => this._remoteStreamRemoved(event.stream);\n    } else {\n        this.peerconnection.ontrack = event => {\n            const stream = event.streams[0];\n\n            this._remoteTrackAdded(stream, event.track, event.transceiver);\n            stream.onremovetrack = evt => {\n                this._remoteTrackRemoved(stream, evt.track);\n            };\n        };\n    }\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats(stats => {\n                if (stats.result\n                    && typeof stats.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            }, () => {\n\n                // empty error callback\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\n        mediaType) {\n    let mediaTransferActive = true;\n\n    if (mediaType === MediaType.AUDIO) {\n        mediaTransferActive = this.audioTransferActive;\n    } else if (mediaType === MediaType.VIDEO) {\n        mediaTransferActive = this.videoTransferActive;\n    }\n    if (mediaTransferActive) {\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\n    }\n\n    return 'inactive';\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast;\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error('On peerMuteChanged - no endpoint ID');\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant.\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\n * for the remote participant in unified plan.\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n    logger.info(`${this} remote track added:`, streamId, mediaType);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = browser.usesPlanB()\n        ? new SDP(this.remoteDescription.sdp)\n        : new SDP(this.peerconnection.remoteDescription.sdp);\n    let mediaLines;\n\n    if (browser.usesUnifiedPlan()) {\n        if (transceiver && transceiver.mid) {\n            const mid = transceiver.mid;\n\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\n        } else {\n            mediaLines = remoteSDP.media.filter(mls => {\n                const msid = SDPUtil.findLine(mls, 'a=msid');\n\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\n            });\n        }\n    } else {\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n    }\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No media lines for type ${\n                    mediaType} found in remote SDP for remote track: ${\n                    streamId}`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC lines for streamId ${\n                    streamId} for remote track, media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for: ${\n                    trackSsrc} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `${this}: no peer media info available for ${\n                    ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from\n        // 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(\n            `${this} ignored duplicated remote track added event for: `\n                + `${ownerEndpointId}, ${mediaType}`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(\n            `${this} overwriting remote track for`\n                + `${ownerEndpointId} ${mediaType}`);\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(\n            `${this} Removed track not found for msid: ${streamId},\n             track id: ${trackId}`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n\n    logger.debug(\n        `${this} removed remote tracks for ${owner} count: ${\n            removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * @typedef {Object} SSRCGroupInfo\n * @property {Array<number>} ssrcs group's SSRCs\n * @property {string} semantics\n */\n/**\n * @typedef {Object} TrackSSRCInfo\n * @property {Array<number>} ssrcs track's SSRCs\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\n */\n/**\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\n * @param {Object} desc the WebRTC SDP instance.\n * @return {Map<string,TrackSSRCInfo>}\n */\nfunction extractSSRCMap(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    for (const mLine of session.media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs\n                        = group.ssrcs.split(' ').map(\n                            ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n        for (const ssrc of mLine.ssrcs) {\n            if (ssrc.attribute !== 'msid') {\n                continue; // eslint-disable-line no-continue\n            }\n\n            const msid = ssrc.value;\n            let ssrcInfo = ssrcMap.get(msid);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid\n                };\n                ssrcMap.set(msid, ssrcInfo);\n            }\n\n            const ssrcNumber = ssrc.id;\n\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `recvonly-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia('audio');\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\n        if (options.startSilent) {\n            audioMedia.direction = 'inactive';\n        } else {\n            audioMedia.direction = 'sendrecv';\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\n        videoMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * NOTE: unlike plan B simulcast, the ssrcs in this inject ssrc-group will\n * NOT necessarily be in order of quality (low to high) because:\n * a) when translating between unified plan and plan b the order of the ssrcs\n * is not preserved and\n * b) it isn't guaranteed that firefox will give them to us in order to begin\n * with\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        if (video.simulcast) {\n            const ssrcs = [];\n\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n            video.ssrcGroups = video.ssrcGroups || [];\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug('getLocalDescription no localDescription found');\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        } else {\n            if (browser.doesVideoMuteByStreamRemove()) {\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n                logger.debug(\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\n            }\n\n            // What comes out of this getter will be signalled over Jingle to\n            // the other peer, so we need to make sure the media direction is\n            // 'sendrecv' because we won't change the direction later and don't want\n            // the other peer to think we can't send or receive.\n            //\n            // Note that the description we set in chrome does have the accurate\n            // direction (e.g. 'recvonly'), since that is technically what is\n            // happening (check setLocalDescription impl).\n            desc = enforceSendRecv(desc, this.options);\n        }\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        if (!desc) {\n            logger.debug('getRemoteDescription no remoteDescription found');\n\n            return {};\n        }\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace(\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n        }\n\n        return desc;\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n */\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\n    const rtcId = track.rtcId;\n\n    logger.info(`add ${track} to: ${this}`);\n\n    if (this.localTracks.has(rtcId)) {\n        logger.error(`${track} is already in ${this}`);\n\n        return;\n    }\n\n    this.localTracks.set(rtcId, track);\n    if (browser.usesUnifiedPlan() && isInitiator) {\n        return this.tpcUtils.addTrack(track, isInitiator);\n    }\n\n    const webrtcStream = track.getOriginalStream();\n\n    if (webrtcStream) {\n        this._addStream(webrtcStream);\n\n    // It's not ok for a track to not have a WebRTC stream if:\n    } else if (!browser.doesVideoMuteByStreamRemove()\n                || track.isAudioTrack()\n                || (track.isVideoTrack() && !track.isMuted())) {\n        logger.error(`${this} no WebRTC stream for: ${track}`);\n    }\n\n    // Muted video tracks do not have WebRTC stream\n    if (browser.usesPlanB() && browser.doesVideoMuteByStreamRemove()\n            && track.isVideoTrack() && track.isMuted()) {\n        const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n        this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n        const simGroup\n            = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n        if (simGroup) {\n            this.simulcast.setSsrcCache(simGroup.ssrcs);\n        }\n        const fidGroups\n            = ssrcInfo.groups.filter(\n                groupInfo => groupInfo.semantics === 'FID');\n\n        if (fidGroups) {\n            const rtxSsrcMapping = new Map();\n\n            fidGroups.forEach(fidGroup => {\n                const primarySsrc = fidGroup.ssrcs[0];\n                const rtxSsrc = fidGroup.ssrcs[1];\n\n                rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n            });\n            this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n        }\n    }\n    if (browser.usesUnifiedPlan() && !browser.usesSdpMungingForSimulcast()) {\n        this.tpcUtils.setEncodings(track);\n    }\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {boolean} <tt>true</tt> if the state of underlying PC has changed and\n * the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return false;\n    }\n\n    logger.info(`Adding ${track} as unmute to ${this}`);\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.addTrackUnmute(track);\n    }\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\n\n        return false;\n    }\n    this._addStream(webRtcStream);\n\n    return true;\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    if (browser.supportsRtpSender()) {\n        this._handleSenderRemoveStream(mediaStream);\n    } else {\n        this.peerconnection.removeStream(mediaStream);\n    }\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(\n            `${methodName}: ${localTrack} does not belong to ${this}`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.removeTrack(localTrack);\n    }\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        if (browser.supportsRtpSender()) {\n            this._handleSenderRemoveStream(webRtcStream);\n        } else {\n            this.peerconnection.removeStream(webRtcStream);\n        }\n    }\n};\n\n/**\n * Returns the sender corresponding to the given media type.\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\n};\n\n/**\n * Returns the sender corresponding to the given MediaStream.\n *\n * @param {MediaStream} stream - The media stream used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByStream = function(stream) {\n    const track = stream.getTracks()[0];\n\n    if (!track) {\n        logger.error('Cannot find sender: no tracks.');\n\n        return;\n    }\n\n    // Find the right sender (for audio or video)\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.replaceTrack(oldTrack, newTrack);\n    }\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        this.addTrack(newTrack);\n    }\n\n    return Promise.resolve(true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {boolean} <tt>true</tt> if the underlying PeerConnection's state has\n * changed and the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return false;\n    }\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.removeTrackMute(localTrack);\n    }\n    if (webRtcStream) {\n        logger.info(\n            `Removing ${localTrack} as mute from ${this}`);\n        this._removeStream(webRtcStream);\n\n        return true;\n    }\n\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\n\n    return false;\n};\n\n/**\n * Remove stream handling for browsers supporting RTPSender\n * @param stream: webrtc media stream\n */\nTraceablePeerConnection.prototype._handleSenderRemoveStream = function(\n        stream) {\n    if (!stream) {\n        // There is nothing to be changed\n        return;\n    }\n\n    const sender = this.findSenderByStream(stream);\n\n    if (sender) {\n        this.peerconnection.removeTrack(sender);\n    } else {\n        logger.log('Cannot remove tracks: no RTPSender.');\n    }\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {Object} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\n        localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia('audio');\n\n    if (audioMedia) {\n        const desiredAudioDirection\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"audio\" media found int the local description');\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia) {\n        const desiredVideoDirection\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(\n                `Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"video\" media found in the local description');\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    if (this.options.disableH264 || this.options.preferH264) {\n        const parsedSdp = transform.parse(localSdp.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        if (this.options.disableH264) {\n            SDPUtil.stripVideoCodec(videoMLine, 'h264');\n        } else {\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n        }\n\n        localSdp = new RTCSessionDescription({\n            type: localSdp.type,\n            sdp: transform.write(parsedSdp)\n        });\n\n        this.trace('setLocalDescription::postTransform (H264)',\n            dumpSDP(localSdp));\n    }\n\n    if (browser.usesPlanB()) {\n        localSdp = this._adjustLocalMediaDirection(localSdp);\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n    } else {\n\n        // if we're using unified plan, transform to it first.\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.setAudioTransferActive(active);\n    }\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Sets the max bitrate on the RTCRtpSender so that the\n * bitrate of the enocder doesn't exceed the configured value.\n * This is needed for the desktop share until spec-complaint\n * simulcast is implemented.\n * @param {JitsiLocalTrack} localTrack - the local track whose\n * max bitrate is to be configured.\n */\nTraceablePeerConnection.prototype.setMaxBitRate = function(localTrack) {\n    const mediaType = localTrack.type;\n\n    // No need to set max bitrates on the streams in the following cases.\n    // 1. When an audio track has been replaced.\n    // 2. When a 'camera' track is replaced in plan-b mode, since its a new sender.\n    // 3. When the config.js option for capping the SS bitrate is not enabled.\n    if ((mediaType === MediaType.AUDIO)\n        || (browser.usesPlanB() && !this.options.capScreenshareBitrate)\n        || (browser.usesPlanB() && localTrack.videoType === 'camera')) {\n        return;\n    }\n    if (!this.peerconnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTCRtpSender');\n\n        return;\n    }\n    const videoType = localTrack.videoType;\n    const trackId = localTrack.track.id;\n\n    this.peerconnection.getSenders()\n        .filter(s => s.track && s.track.id === trackId)\n        .forEach(sender => {\n            try {\n                const parameters = sender.getParameters();\n\n                if (!parameters.encodings || !parameters.encodings.length) {\n                    return;\n                }\n                logger.debug('Setting max bitrate on video stream');\n                for (const encoding in parameters.encodings) {\n                    if (parameters.encodings.hasOwnProperty(encoding)) {\n                        parameters.encodings[encoding].maxBitrate\n                            = videoType === 'desktop' && browser.usesPlanB()\n                                ? DESKSTOP_SHARE_RATE\n\n                                // In unified plan, simulcast for SS is on by default.\n                                // When simulcast is disabled through a config.js option,\n                                // we cap the bitrate on desktop and camera tracks to 2500 Kbps.\n                                : this.isSimulcastOn()\n                                    ? this.tpcUtils.simulcastEncodings[encoding].maxBitrate\n                                    : MAX_BITRATE;\n                    }\n                }\n                sender.setParameters(parameters);\n            } catch (err) {\n                logger.error('Browser does not support getParameters/setParamters '\n                    + 'or setting max bitrate on the encodings: ', err);\n            }\n        });\n};\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    if (browser.usesPlanB()) {\n        // TODO the focus should squeze or explode the remote simulcast\n        // eslint-disable-next-line no-param-reassign\n        description = this.simulcast.mungeRemoteDescription(description);\n        this.trace(\n            'setRemoteDescription::postTransform (simulcast)',\n            dumpSDP(description));\n\n        if (this.options.preferH264) {\n            const parsedSdp = transform.parse(description.sdp);\n            const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n\n            // eslint-disable-next-line no-param-reassign\n            description = new RTCSessionDescription({\n                type: description.type,\n                sdp: transform.write(parsedSdp)\n            });\n        }\n\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    } else {\n        const currentDescription = this.peerconnection.remoteDescription;\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description, currentDescription);\n        this.trace(\n            'setRemoteDescription::postTransform (Unified)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this.simulcast.mungeRemoteDescription(description);\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils._insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n\n            // eslint-disable-next-line no-param-reassign\n            description = this.tpcUtils._ensureCorrectOrderOfSsrcs(description);\n        }\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    if (browser.usesUnifiedPlan()) {\n        return this.tpcUtils.setVideoTransferActive(active);\n    }\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Sends DTMF tones if possible.\n *\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\n *\n * @returns {void}\n */\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\n    if (!this._dtmfSender) {\n        if (this.peerconnection.getSenders) {\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\n\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\n        }\n\n        if (!this._dtmfSender) {\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\n\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\n            }\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\n        }\n\n        if (this._dtmfSender) {\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\n        }\n    }\n\n    if (this._dtmfSender) {\n        if (this._dtmfSender.toneBuffer) {\n            this._dtmfTonesQueue.push({\n                tones,\n                duration,\n                interToneGap\n            });\n\n            return;\n        }\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    } else {\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\n    }\n};\n\n/**\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\n * a single tone.\n *\n * @param {Object} event - The tonechange event which indicates what characters\n * are left to be played for the current tone.\n * @private\n * @returns {void}\n */\nTraceablePeerConnection.prototype._onToneChange = function(event) {\n    // An empty event.tone indicates the current tones have finished playing.\n    // Automatically start playing any queued tones on finish.\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\n\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\n    }\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info('Clearing primary video SSRC!');\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    this._dtmfSender = null;\n    this._dtmfTonesQueue = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error('RTC._removePeerConnection returned false');\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`Closing ${this}...`);\n    this.peerconnection.close();\n};\n\n/**\n * Modifies the values of the setup attributes (defined by\n * {@link http://tools.ietf.org/html/rfc4145#section-4}) of a specific SDP\n * answer in order to overcome a delay of 1 second in the connection\n * establishment between some devices and Videobridge.\n *\n * @param {SDP} offer - the SDP offer to which the specified SDP answer is\n * being prepared to respond\n * @param {SDP} answer - the SDP to modify\n * @private\n */\nconst _fixAnswerRFC4145Setup = function(offer, answer) {\n    if (!(browser.isChromiumBased() || browser.isReactNative())) {\n        // It looks like Firefox doesn't agree with the fix (at least in its\n        // current implementation) because it effectively remains active even\n        // after we tell it to become passive. Apart from Firefox which I tested\n        // after the fix was deployed, I tested Chrome only. In order to prevent\n        // issues with other browsers, limit the fix to known devices for the\n        // time being.\n        return;\n    }\n\n    // XXX Videobridge is the (SDP) offerer and WebRTC (e.g. Chrome) is the\n    // answerer (as orchestrated by Jicofo). In accord with\n    // http://tools.ietf.org/html/rfc5245#section-5.2 and because both peers\n    // are ICE FULL agents, Videobridge will take on the controlling role and\n    // WebRTC will take on the controlled role. In accord with\n    // https://tools.ietf.org/html/rfc5763#section-5, Videobridge will use the\n    // setup attribute value of setup:actpass and WebRTC will be allowed to\n    // choose either the setup attribute value of setup:active or\n    // setup:passive. Chrome will by default choose setup:active because it is\n    // RECOMMENDED by the respective RFC since setup:passive adds additional\n    // latency. The case of setup:active allows WebRTC to send a DTLS\n    // ClientHello as soon as an ICE connectivity check of its succeeds.\n    // Unfortunately, Videobridge will be unable to respond immediately because\n    // may not have WebRTC's answer or may have not completed the ICE\n    // connectivity establishment. Even more unfortunate is that in the\n    // described scenario Chrome's DTLS implementation will insist on\n    // retransmitting its ClientHello after a second (the time is in accord\n    // with the respective RFC) and will thus cause the whole connection\n    // establishment to exceed at least 1 second. To work around Chrome's\n    // idiosyncracy, don't allow it to send a ClientHello i.e. change its\n    // default choice of setup:active to setup:passive.\n    if (offer && answer\n            && offer.media && answer.media\n            && offer.media.length === answer.media.length) {\n        answer.media.forEach((a, i) => {\n            if (SDPUtil.findLine(\n                    offer.media[i],\n                    'a=setup:actpass',\n                    offer.session)) {\n                answer.media[i]\n                    = a.replace(/a=setup:active/g, 'a=setup:passive');\n            }\n        });\n        answer.raw = answer.session + answer.media.join('');\n    }\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\n/**\n * Checks if a camera track has been added to the peerconnection\n * @param {TraceablePeerConnection} peerConnection\n * @return {boolean} <tt>true</tt> if the peerconnection has\n * a camera track for its video source <tt>false</tt> otherwise.\n */\nfunction hasCameraTrack(peerConnection) {\n    return peerConnection.getLocalTracks()\n        .some(t => t.videoType === 'camera');\n}\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            if (browser.usesPlanB()) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // configure simulcast for camera tracks always and for\n            // desktop tracks only when the testing flag for maxbitrates\n            // in config.js is disabled.\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\n                && (!this.options.capScreenshareBitrate\n                || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.supportsRtx()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Fix the setup attribute (see _fixAnswerRFC4145Setup for\n            //  details)\n            if (!isOffer) {\n                const remoteDescription\n                    = new SDP(this.remoteDescription.sdp);\n                const localDescription = new SDP(resultSdp.sdp);\n\n                _fixAnswerRFC4145Setup(remoteDescription, localDescription);\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: localDescription.raw\n                });\n            }\n\n            const ssrcMap = extractSSRCMap(resultSdp);\n\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n};\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const trackMSID = track.storedMSID;\n\n        if (ssrcMap.has(trackMSID)) {\n            const newSSRC = ssrcMap.get(trackMSID);\n\n            if (!newSSRC) {\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                if (oldSSRCNum === null) {\n                    logger.info(\n                        `Storing new local SSRC for ${track} in ${this}`,\n                        newSSRC);\n                } else {\n                    logger.error(\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\n                        } with: `, newSSRC);\n                }\n                this.localSSRCs.set(track.rtcId, newSSRC);\n\n                this.eventEmitter.emit(\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            } else {\n                logger.debug(\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\n                     + `is still up to date in ${this}`);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @param {Function} callback - The function to invoke after successfully\n * obtaining stats.\n * @param {Function} errback - The function to invoke after failing to obtain\n * stats.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\n    // accounting for different getStats apis, making the browser-checking-if\n    // unnecessary.\n    if (browser.isSafariWithWebrtc() || browser.isFirefox()\n            || browser.isReactNative()) {\n        // uses the new Promise based getStats\n        this.peerconnection.getStats()\n            .then(callback)\n            .catch(errback || (() => {\n\n                // Making sure that getStats won't fail if error callback is\n                // not passed.\n            }));\n    } else {\n        this.peerconnection.getStats(callback);\n    }\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\n    }\n\n    // configure simulcast for camera tracks always and for\n    // desktop tracks only when the testing flag for maxbitrates\n    // in config.js is disabled.\n    if (this.isSimulcastOn()\n        && (!this.options.capScreenshareBitrate\n        || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx && browser.supportsRtx()) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\nconst handleLayerSuspension = function(peerConnection, isSelected) {\n    if (!peerConnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTPSender');\n\n        return;\n    }\n\n    const videoSender = peerConnection.getSenders()\n        .find(sender => sender.track.kind === 'video');\n\n    if (!videoSender) {\n        logger.warn('handleLayerSuspension unable to find video sender');\n\n        return;\n    }\n    if (!videoSender.getParameters) {\n        logger.debug('Browser doesn\\'t support RTPSender parameters');\n\n        return;\n    }\n    const parameters = videoSender.getParameters();\n\n    if (isSelected) {\n        logger.debug('Currently selected, enabling all sim layers');\n\n        // Make sure all encodings are enabled\n        parameters.encodings.forEach(e => {\n            e.active = true;\n        });\n    } else {\n        logger.debug('Not currently selected, disabling upper layers');\n\n        // Turn off the upper simulcast layers\n        [ 1, 2 ].forEach(simIndex => {\n            if (parameters.encodings[simIndex]) {\n                parameters.encodings[simIndex].active = false;\n            }\n        });\n    }\n    videoSender.setParameters(parameters);\n};\n\n/**\n * Set whether or not the endpoint is 'selected' by other endpoints, meaning\n * it appears on their main stage\n */\nTraceablePeerConnection.prototype.setIsSelected = function(isSelected) {\n    if (this.options.enableLayerSuspension) {\n        logger.debug('Layer suspension enabled,'\n            + `currently selected? ${isSelected}`);\n        handleLayerSuspension(this.peerconnection, isSelected);\n    }\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\n};\n","import { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiTrack from './JitsiTrack';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\n];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        logger.debug(`Track has been attached to a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        logger.debug(`Track has been detached from a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     */\n    constructor(tpc) {\n        this.tpc = tpc;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            logger.debug(\n                `${this.tpc} ${videoTrack} muted: ${\n                    muted}, is in PeerConnection: ${\n                    isInPeerConnection} => should fake sdp ? : ${\n                    shouldFakeSdp}`);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = 'sendrecv';\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                logger.debug(\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\n                        videoTrack}`);\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    logger.debug(\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\n                        group);\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n\n                        ssrcLine.value\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\n                    } else {\n                        logger.warn(\n                            'Unable to munge local MSID'\n                                + `- weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\nimport SDPUtil from './SDPUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    logger.debug(\n        `Updating mline to associate ${rtxSsrc}`\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\n\n        return;\n    }\n    if (previousRtxSSRC) {\n        logger.debug(\n            `${primarySsrc} was previously associated with rtx`\n            + `${previousRtxSSRC}, removing all references to it`);\n\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\n        logger.debug(mLine.dumpSSRCGroups());\n\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return false;\n        }\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\n            ' making sure all have rtx streams');\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (correspondingRtxSsrc) {\n                logger.debug(\n                    'Already have an associated rtx ssrc for'\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\n            } else {\n                logger.debug(\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\n\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    logger.debug(\n                        `Rtx stream ${previousAssociatedRtxStream} `\n                        + 'already existed in the sdp as an rtx stream for '\n                        + `${ssrc}`);\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\n                                 + `for ssrc ${ssrc}`);\n                }\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\n                             + `for video ssrc ${ssrc}`);\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.logPrefix} no 'video' media found in the sdp: `\n                    + `${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(\n                    `${this.logPrefix} no SSRC found for the recvonly video`\n                        + 'stream!');\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency couldn't`\n                        + ' parse new primary ssrc');\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\n                        + `${newPrimarySsrc} with cached `\n                        + `${this.cachedPrimarySsrc}`);\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n                logger.info(\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\n                        + `${this.cachedPrimarySsrc}`);\n            }\n\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global\n    __filename\n*/\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createAudioContext } from './WebAudioUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\n * MediaStream.\n */\nexport default class AudioMixer {\n    /**\n     * Create AudioMixer instance.\n     */\n    constructor() {\n        this._started = false;\n        this._streamsToMix = [];\n        this._streamMSSArray = [];\n    }\n\n    /**\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\n     *\n     * @param {MediaStream} stream - MediaStream to be mixed.\n     */\n    addMediaStream(stream) {\n        if (!stream.getAudioTracks()) {\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\n        }\n\n        this._streamsToMix.push(stream);\n    }\n\n    /**\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\n     * it; the resulting mixed MediaStream is returned.\n     *\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\n     * is added.\n     */\n    start() {\n        // If the mixer was already started just return the existing mixed stream.\n        if (this._started) {\n            return this._mixedMSD.stream;\n        }\n\n        this._audioContext = createAudioContext();\n\n        if (!this._streamsToMix.length) {\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\n\n            return null;\n        }\n\n        this._started = true;\n\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\n\n        for (const stream of this._streamsToMix) {\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\n\n            streamMSS.connect(this._mixedMSD);\n\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\n            this._streamMSSArray.push(streamMSS);\n        }\n\n        return this._mixedMSD.stream;\n    }\n\n    /**\n     * Disconnect MediaStreamAudioSourceNode and clear references.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._started = false;\n        this._streamsToMix = [];\n\n        // Clean up created MediaStreamAudioSourceNode.\n        for (const streamMSS of this._streamMSSArray) {\n            streamMSS.disconnect();\n        }\n\n        this._streamMSSArray = [];\n\n        if (this._audioContext) {\n            this._audioContext = undefined;\n        }\n    }\n}\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","import {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    return this.xmpp.caps.addFeature(feature, submit);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    return this.xmpp.caps.removeFeature(feature, submit);\n};\n","/* global __filename, $, Promise */\nimport { Strophe } from 'strophe.js';\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\nimport RTC from './modules/RTC/RTC';\nimport TalkMutedDetection from './modules/detection/TalkMutedDetection';\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedNotification\n    from './modules/connectivity/IceFailedNotification';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport RttMonitor from './modules/rttmonitor/rttmonitor';\nimport Settings from './modules/settings/Settings';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_DECLINED,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createConferenceEvent,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\n * (don't open any channel).\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n    this._conferenceJoinAnalyticsEventSent = false;\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\n    this.room = this.xmpp.createRoom(\n        this.options.name, {\n            ...config,\n            statsId: this._statsCurrentId\n        },\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n    this.rttMonitor = new RttMonitor(config.rttMonitor || {});\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    if (!this.statistics) {\n        this.statistics = new Statistics(this.xmpp, {\n            aliasName: this._statsCurrentId,\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\n            callStatsConfIDNamespace: this.connection.options.hosts.domain,\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\n            roomName: this.options.name,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n        Statistics.analytics.addPermanentProperties({\n            'callstats_name': this._statsCurrentId\n        });\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    if (config.enableTalkWhileMuted) {\n\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\n        // based detection.\n        if (config.createVADProcessor) {\n            logger.info('Using VAD detection for generating talk while muted events');\n\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\n\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\n\n\n        } else {\n            logger.info('Using audio level based detection for generating talk while muted events');\n            this._talkWhileMutedDetection = new TalkMutedDetection(\n                this, () => this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n        }\n    }\n\n    if (config.enableNoisyMicDetection) {\n        if (config.createVADProcessor) {\n            if (!this._audioAnalyser) {\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\n            }\n\n            const vadNoiseDetection = new VADNoiseDetection();\n\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\n\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\n        } else {\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\n        }\n    }\n\n    // Generates events based on no audio input detector.\n    if (config.enableNoAudioDetection) {\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\n        });\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\n        });\n    }\n\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n */\nJitsiConference.prototype.join = function(password) {\n    if (this.room) {\n        this.room.join(password).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.rttMonitor) {\n        this.rttMonitor.stop();\n        this.rttMonitor = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\n\n        this.room.sendMessage(message, elementName, displayName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addToPresence(name, values);\n        this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        // remove previously set nickname\n        this.room.removeFromPresence('nick');\n\n        this.room.addToPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        });\n        this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (track.isVideoTrack()) {\n        // Ensure there's exactly 1 local video track in the conference.\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\n\n        if (localVideoTrack) {\n            // Don't be excessively harsh and severe if the API client happens\n            // to attempt to add the same local video track twice.\n            if (track === localVideoTrack) {\n                return Promise.resolve(track);\n            }\n\n            return Promise.reject(new Error(\n                'cannot add second video track to the conference'));\n\n        }\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the\n                // JitsiConference level\n                this._setupNewTrack(newTrack);\n            }\n\n            return Promise.resolve();\n        }, error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        this.removeCommand('videoType');\n        this.sendCommand('videoType', {\n            value: newTrack.videoType,\n            attributes: {\n                xmlns: 'http://jitsi.org/jitmeet/video'\n            }\n        });\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no P2P Jingle session started yet');\n    }\n\n    return Promise.all(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(\n            this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(\n            this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.all(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.rtc.selectEndpoints(participantIds);\n};\n\n/**\n * Elects the participant with the given id to be the pinned participant in\n * order to always receive video for this participant (even when last n is\n * enabled).\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n */\nJitsiConference.prototype.pinParticipant = function(participantId) {\n    this.rtc.pinEndpoint(participantId);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.rtc.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.rtc.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.keys(this.participants).map(function(key) {\n        return this.participants[key];\n    }, this);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid());\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant._role = role;\n    participant._botType = botType;\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    this._maybeStartOrStopP2P();\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\n                participant.setProperty('features_jigasi', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant._botType = botType;\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant._botType) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    const removedTracks = this.rtc.removeRemoteTracks(id);\n\n    removedTracks.forEach(\n        track =>\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\n\n    // there can be no participant in case the member that left is focus\n    if (participant) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\n    this._maybeClearSITimeout();\n};\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n */\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant._role = role;\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n        this.p2pJingleSession.setAnswer(answer);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if (!browser.supportsP2P()) {\n        rejectReason = {\n            reason: 'unsupported-applications',\n            reasonDescription: 'P2P not supported',\n            errorMsg: 'This client does not support P2P connections'\n        };\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    } else if (!this._shouldBeInP2PMode()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P requirements not met',\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\n        };\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n    try {\n        jingleSession.initialize(this.room, this.rtc, this.options.config);\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    // Add local tracks to the session\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            this.getLocalTracks()\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    let bridgeChannelType;\n\n    switch (this.options.config.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        bridgeChannelType = 'datachannel';\n        break;\n    case 'websocket':\n        bridgeChannelType = 'websocket';\n        break;\n    }\n\n    if (bridgeChannelType === 'datachannel') {\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    const peerConnection = this.getActivePeerConnection();\n\n    if (peerConnection) {\n        peerConnection.sendTones(tones, duration, pause);\n    } else {\n        logger.warn('cannot sendTones: no peer connection');\n    }\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Returns the meeting unique ID if any.\n *\n * @returns {string|undefined}\n */\nJitsiConference.prototype.getMeetingUniqueId = function() {\n    if (this.room) {\n        return this.room.getMeetingId();\n    }\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection;\n    }\n\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.removeFromPresence('startmuted');\n    this.room.addToPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    });\n    this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConference.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        if (this.xmpp.isPingSupported()) {\n            this._delayedIceFailed = new IceFailedNotification(this);\n            this._delayedIceFailed.start(session);\n        } else {\n            // Let Jicofo know that the JVB's ICE connection has failed\n            logger.info('PING not supported - sending ICE failed immediately');\n            session.sendIceFailedNotification();\n        }\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms',\n            'octo-enabled'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.rtc.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n    this._sendConferenceJoinAnalyticsEvent();\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    const participant = this.participants[remoteID];\n\n    if (participant) {\n        remoteID = participant.getStatsID() || remoteID;\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    // NOTE one may consider to start P2P with the local tracks detached,\n    // but no data will be sent until ICE succeeds anyway. And we switch\n    // immediately once the P2P ICE connects.\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!browser.supportsP2P()\n        || !this.isP2PEnabled()\n        || this.isP2PTestModeEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = this._shouldBeInP2PMode();\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Tells whether or not this conference should be currently in the P2P mode.\n *\n * @private\n * @returns {boolean}\n */\nJitsiConference.prototype._shouldBeInP2PMode = function() {\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const hasBotPeer = peers.find(p => p._botType === 'poltergeist') !== undefined;\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\n\n    return shouldBeInP2P;\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(\n        maxFrameHeight) {\n    this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n\n/**\n * Sends a conference.join analytics event.\n *\n * @returns {void}\n */\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\n    const meetingId = this.getMeetingUniqueId();\n\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\n        return;\n    }\n\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\n        meetingId,\n        participantId: `${meetingId}.${this._statsCurrentId}`\n    }));\n    this._conferenceJoinAnalyticsEventSent = true;\n};\n","/* global __filename */\nimport { Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport Statistics from './modules/statistics/statistics';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\n        (session, jid) => {\n\n            if (jid) {\n                const participant = conference.getParticipantById(\n                    Strophe.getResourceFromJid(jid));\n\n                if (session.getStatus() === 'off') {\n                    session.setTerminator(participant);\n                } else if (session.getStatus() === 'on') {\n                    session.setInitiator(participant);\n                }\n            }\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                session);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts, displayName);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        id => {\n            if (conference.lastDominantSpeaker !== id && conference.room) {\n                conference.lastDominantSpeaker = id;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\n\n                if (conference.statistics && conference.myUserId() === id) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(\n                        conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}:\\t`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    conference.xmpp.caps.removeListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    const featuresChangedListener = from => {\n        const participant\n            = conference.getParticipantById(\n            Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\n                participant);\n        }\n    };\n\n    conference.xmpp.caps.addListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        featuresChangedListener);\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\n        = featuresChangedListener;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\n        createdTimestamp => {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","\nimport { Strophe } from 'strophe.js';\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport { ERROR_FEATURE_VERSION_MISMATCH } from './modules/xmpp/Caps';\nimport * as MediaType from './service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(timeout = 5000) {\n        if (this._getFeaturesPromise) {\n            return this._getFeaturesPromise;\n        }\n\n        this._getFeaturesPromise = this._conference.xmpp.caps.getFeatures(this._jid, timeout)\n            .catch(error => {\n                // Retry on feature version mismatch\n                if (error === ERROR_FEATURE_VERSION_MISMATCH) {\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\n                }\n\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\n\n                return Promise.reject(error);\n            });\n\n        return this._getFeaturesPromise\n            .then(result => {\n                this._getFeaturesPromise = undefined;\n\n                return result;\n            }, error => {\n                this._getFeaturesPromise = undefined;\n\n                throw error;\n            });\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport Moderator from './moderator';\nimport XmppConnection from './XmppConnection';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param {XmppConnection} connection - The XMPP connection instance.\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room. This is intended to be used only by\n     * jitsi-meet-spot.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this._removeConnListeners = [];\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.statsId) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': options.statsId\n            });\n        }\n\n        // We need to broadcast 'videomuted' status from the beginning, cause\n        // Jicofo makes decisions based on that. Initialize it with 'false'\n        // here.\n        this.addVideoInfoToPresence(false);\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n    }\n\n    /**\n     * Joins the chat room.\n     * @param password\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password) {\n        this.password = password;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info('Conference focus disabled');\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                this._removeConnListeners.push(\n                    this.connection.addEventListener(\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\n                        this.onConnStatusChanged.bind(this))\n                );\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\n        !this.connection.isUsingWebSocket && this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n\n            const meetingIdValEl\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\n\n            if (meetingIdValEl.length) {\n                this.setMeetingId(meetingIdValEl.text());\n            } else {\n                logger.trace('No meeting ID from backend');\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     * Sets the meeting unique Id (received from the backend).\n     *\n     * @param {string} meetingId - The new meetings id.\n     * @returns {void}\n     */\n    setMeetingId(meetingId) {\n        if (this.meetingId !== meetingId) {\n            if (this.meetingId) {\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\n            }\n            this.meetingId = meetingId;\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\n        }\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        const self = this;\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: self.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            self.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     * Handles Xmpp Connection status updates.\n     *\n     * @param {Strophe.Status} status - The Strophe connection status.\n     */\n    onConnStatusChanged(status) {\n        // Send cached presence when the XMPP connection is re-established.\n        if (status === XmppConnection.Status.CONNECTED) {\n            this.sendPresence();\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                this.sendPresence();\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n\n                // Now let's check the disco-info to retrieve the\n                // meeting Id if any\n                this.discoRoomInfo();\n            }\n        } else if (jid === undefined) {\n            logger.info('Ignoring member with undefined JID');\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, jid);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                memberOfThis.isFocus = true;\n                this._initFocus(from, jid);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param mucJid the jid of the focus in the muc\n     */\n    _initFocus(from, mucJid) {\n        this.focusMucJid = from;\n\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendMessage(message, elementName, nickname) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendPrivateMessage(id, message, elementName, nickname) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>destroy').length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            // if no member is found this is the case we had kicked someone\n            // and we are not in the list of members\n            if (membersKeys.find(jid => Strophe.getResourceFromJid(jid) === actorNick)) {\n                // we first fire the kicked so we can show the participant\n                // who kicked, before notifying that participant left\n                // we fire kicked for us and for any participant kicked\n                this.eventEmitter.emit(\n                    XMPPEvents.KICKED,\n                    isSelfPresence,\n                    actorNick,\n                    Strophe.getResourceFromJid(from));\n            }\n        }\n\n        if (!isSelfPresence) {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        } else if (membersKeys.length > 0) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const nick\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\n                .text()\n            || Strophe.getResourceFromJid(from);\n\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            const errorMsg = $(msg).find('>error>text').text();\n\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\n\n            return true;\n        }\n\n        const txt = $(msg).find('>body').text();\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid\n                && $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\n            this.discoRoomInfo();\n        }\n        const jsonMessage = $(msg).find('>json-message').text();\n        const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n        // We emit this event if the message is a valid json, and is not\n        // delivered after a delay, i.e. stamp is undefined.\n        // e.g. - subtitles should not be displayed if delayed.\n        if (parsedJson && stamp === undefined) {\n            this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                from, parsedJson);\n\n            return;\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    kick(jid) {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t('You have been kicked.').up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field',\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\n                        .c('value')\n                        .t(key === null || key.length === 0 ? '0' : '1')\n                        .up()\n                        .up();\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param key\n     * @param values\n     */\n    addToPresence(key, values) {\n        values.tagName = key;\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n    }\n\n    /**\n     * Retreives a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     *\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        this.removeFromPresence('audiomuted');\n        this.addToPresence(\n            'audiomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        this.addAudioInfoToPresence(mute);\n\n        // FIXME resend presence on CONNECTED\n        this.sendPresence();\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        this.removeFromPresence('videomuted');\n        this.addToPresence(\n            'videomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute);\n        this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: false, // unmuted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Returns the meeting unique ID if any came from backend.\n     *\n     * @returns {string} - The meeting ID.\n     */\n    getMeetingId() {\n        return this.meetingId;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     */\n    muteParticipant(jid, mute) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: 'http://jitsi.org/jitmeet/audio',\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            this._removeConnListeners.forEach(remove => remove());\n            this._removeConnListeners = [];\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $, Promise */\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nimport { $iq, Strophe } from 'strophe.js';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nimport Settings from '../settings/Settings';\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\n    // it will be enabled automatically if focus detects the component through\n    // service discovery.\n    this.sipGatewayEnabled\n        = this.options.connection.hosts\n            && this.options.connection.hosts.call_control !== undefined;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n    if (this.options.connection.enforcedBridge !== undefined) {\n        elem.c(\n            'property', {\n                name: 'enforcedBridge',\n                value: this.options.connection.enforcedBridge\n            }).up();\n    }\n\n    // Tell the focus we have Jigasi configured\n    if (this.options.connection.hosts !== undefined\n        && this.options.connection.hosts.call_control !== undefined) {\n        elem.c(\n            'property', {\n                name: 'call_control',\n                value: this.options.connection.hosts.call_control\n            }).up();\n    }\n    if (config.channelLastN !== undefined) {\n        elem.c(\n            'property', {\n                name: 'channelLastN',\n                value: config.channelLastN\n            }).up();\n    }\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.enableTcc !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableTcc',\n                    value: Boolean(config.enableTcc)\n                }).up();\n    }\n    if (config.enableRemb !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableRemb',\n                    value: Boolean(config.enableRemb)\n                }).up();\n    }\n    if (config.minParticipants !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'minParticipants',\n                    value: config.minParticipants\n                }).up();\n    }\n\n    elem.c(\n        'property', {\n            name: 'enableLipSync',\n            value: this.options.connection.enableLipSync === true\n        }).up();\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n    if (config.testing && config.testing.octo\n        && typeof config.testing.octo.probability === 'number') {\n        if (Math.random() < config.testing.octo.probability) {\n            elem.c(\n                'property', {\n                    name: 'octo',\n                    value: true\n                }).up();\n        }\n    }\n\n    let openSctp;\n\n    switch (this.options.conference.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        openSctp = true;\n        break;\n    case 'websocket':\n        openSctp = false;\n        break;\n    }\n\n    elem.c(\n        'property', {\n            name: 'openSctp',\n            value: openSctp\n        }).up();\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    if (this.options.conference.stereo !== undefined) {\n        elem.c(\n            'property', {\n                name: 'stereo',\n                value: this.options.conference.stereo\n            }).up();\n    }\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\n        elem.c(\n            'property', {\n                name: 'useRoomAsSharedDocumentName',\n                value: this.options.conference.useRoomAsSharedDocumentName\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if focus has auto-detected Jigasi component(this will be also\n    // included if we have passed our host from the config)\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","/**\n* Gets next timeout using the full jitter pattern.\n*\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\n*\n* @param {number} retry - The retry number.\n* @param {number} minDelay - The minimal delay in milliseconds.\n* @param {number} base - The exponent base.\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\n* @private\n*/\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\n}\n","/**\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._lastSuccess = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(stropheConnection) {\n        const originalRawInput = stropheConnection.rawInput;\n\n        stropheConnection.rawInput = function(...args) {\n            this._lastSuccess = Date.now();\n            originalRawInput.apply(stropheConnection, args);\n        };\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? Date.now() - this._lastSuccess\n            : null;\n    }\n}\n","/* global $, __filename */\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\nimport Statistics from '../statistics/statistics';\n\nimport JingleSessionPC from './JingleSessionPC';\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n                    isP2P ? this.p2pIceConfig : this.jvbIceConfig,\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace:\\t', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success:\\t', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.connection.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n            res => {\n                const iceservers = [];\n\n                $(res).find('>services>service').each((idx, el) => {\n                    // eslint-disable-next-line no-param-reassign\n                    el = $(el);\n                    const dict = {};\n                    const type = el.attr('type');\n\n                    switch (type) {\n                    case 'stun':\n                        dict.urls = `stun:${el.attr('host')}`;\n                        if (el.attr('port')) {\n                            dict.urls += `:${el.attr('port')}`;\n                        }\n                        iceservers.push(dict);\n                        break;\n                    case 'turn':\n                    case 'turns': {\n                        dict.urls = `${type}:`;\n                        const username = el.attr('username');\n\n                        // https://code.google.com/p/webrtc/issues/detail\n                        // ?id=1508\n\n                        if (username) {\n                            const match\n                                = navigator.userAgent.match(\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\n\n                            if (match && parseInt(match[2], 10) < 28) {\n                                dict.urls += `${username}@`;\n                            } else {\n                                // only works in M28\n                                dict.username = username;\n                            }\n                        }\n                        dict.urls += el.attr('host');\n                        const port = el.attr('port');\n\n                        if (port) {\n                            dict.urls += `:${el.attr('port')}`;\n                        }\n                        const transport = el.attr('transport');\n\n                        if (transport && transport !== 'udp') {\n                            dict.urls += `?transport=${transport}`;\n                        }\n\n                        dict.credential = el.attr('password')\n                                || dict.credential;\n                        iceservers.push(dict);\n                        break;\n                    }\n                    }\n                });\n\n                const options = this.xmpp.options;\n\n                if (options.useStunTurn) {\n                    // we want to filter and leave only tcp/turns candidates\n                    // which make sense for the jvb connections\n                    this.jvbIceConfig.iceServers\n                        = iceservers.filter(s => s.urls.startsWith('turns'));\n                }\n\n                if (options.p2p && options.p2p.useStunTurn) {\n                    this.p2pIceConfig.iceServers = iceservers;\n                }\n\n            }, err => {\n                logger.warn('getting turn credentials failed', err);\n                logger.warn('is mod_turncredentials or similar installed?');\n            });\n\n        // implement push?\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {Strophe.Connection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import async from 'async';\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        task(finishedCallback);\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.BINDREQUIRED:\n            return 'BINDREQUIRED';\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Ping every 10 sec\n */\nconst PING_INTERVAL = 10000;\n\n/**\n * Ping timeout error after 15 sec of waiting.\n */\nconst PING_TIMEOUT = 15000;\n\n/**\n * Will close the connection after 3 consecutive ping errors.\n */\nconst PING_THRESHOLD = 3;\n\n/**\n * The number of timestamps of send pings to keep.\n * The current value is 2 minutes.\n * @type {number} number of timestamps.\n */\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nexport default class PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Contructs new object\n     * @param {XMPP} xmpp the xmpp module.\n     * @constructor\n     */\n    constructor(xmpp) {\n        super();\n        this.failedPings = 0;\n        this.xmpp = xmpp;\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ(iq, success, error, timeout);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     * @param interval task interval in ms.\n     */\n    startInterval(remoteJid, interval = PING_INTERVAL) {\n        clearInterval(this.intervalId);\n        this.intervalId = window.setInterval(() => {\n            this.ping(remoteJid, () => {\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= PING_THRESHOLD) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n\n                    // FIXME it doesn't help to disconnect when 3rd PING\n                    // times out, it only stops Strophe from retrying.\n                    // Not really sure what's the right thing to do in that\n                    // situation, but just closing the connection makes no\n                    // sense.\n                    // self.connection.disconnect();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, PING_TIMEOUT);\n        }, interval);\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= PING_INTERVAL;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport RTCEvents from '../../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * Detect user trying to speek while is locally muted and fires an event.\n */\nexport default class TalkMutedDetection {\n    /**\n     * Creates TalkMutedDetection\n     * @param conference the JitsiConference instance that created us.\n     * @param callback the callback to call when detected that the local user is\n     * talking while her microphone is muted.\n     * @constructor\n     */\n    constructor(conference, callback) {\n        /**\n         * The callback to call when detected that the local user is talking\n         * while her microphone is muted.\n         *\n         * @private\n         */\n        this._callback = callback;\n\n        /**\n         * The indicator which determines whether <tt>callback</tt> has been\n         * invoked for the current local audio track of <tt>conference</tt> so\n         * that it is invoked once only.\n         *\n         * @private\n         */\n        this._eventFired = false;\n\n        // XXX I went back and forth on the subject of where to put the access\n        // to statistics. On the one had, (1) statistics is likely intended to\n        // be private to conference and (2) there is a desire to keep the\n        // dependencies of modules to the minimum (i.e. not have\n        // TalkMutedDetection depend on statistics). On the other hand, (1)\n        // statistics is technically not private because\n        // JitsiConferenceEventManager accesses it and (2) TalkMutedDetection\n        // works exactly because it knows that there are no audio levels for\n        // JitsiLocalTrack but there are audio levels for the local participant\n        // through statistics.\n        conference.statistics.addAudioLevelListener(\n            this._audioLevel.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n        conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            this._trackAdded.bind(this));\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Receives audio level events for all send and receive streams.\n     *\n     * @param {TraceablePeerConnection} pc - WebRTC PeerConnection object of the\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of\n     * the endpoint/participant/stream being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt>.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> represents a\n     * local/send stream or <tt>false</tt> for a remote/receive stream.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio stream only and if event is not\n        // sent yet.\n        if (!isLocal || !this.audioTrack || this._eventFired) {\n            return;\n        }\n\n        if (this.audioTrack.isMuted()\n            && audioLevel > SPEECH_DETECT_THRESHOLD) {\n            this._eventFired = true;\n            this._callback();\n        }\n    }\n    /* eslint-enable max-params */\n\n    /**\n     * Determines whether a specific {@link JitsiTrack} represents a local audio\n     * track.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> to be checked whether\n     * it represents a local audio track.\n     * @private\n     * @return {boolean} - <tt>true</tt> if the specified <tt>track</tt>\n     * represents a local audio track; otherwise, <tt>false</tt>.\n     */\n    _isLocalAudioTrack(track) {\n        return track.isAudioTrack() && track.isLocal();\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that a {@link JitsiTrack} was\n     * added to the associated {@link JitsiConference}. Looks for the local\n     * audio track only.\n     *\n     * @param {JitsiTrack} track - The added <tt>JitsiTrack</tt>.\n     * @private\n     */\n    _trackAdded(track) {\n        if (this._isLocalAudioTrack(track)) {\n            this.audioTrack = track;\n        }\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that the mute state of a\n     * {@link JitsiTrack} has changed. Looks for the local audio track only.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> whose mute state has\n     * changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (this._isLocalAudioTrack(track) && track.isMuted()) {\n            this._eventFired = false;\n        }\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage } from '../util/MathUtil';\n\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n\n/**\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\n * @type {number}\n */\nconst VAD_AVG_THRESHOLD = 0.6;\n\n/**\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\n * @type {number}\n */\nconst VAD_VOICE_LEVEL = 0.9;\n\n/**\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\n * @type {number}\n */\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\n\n/**\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\n */\nexport default class VADTalkMutedDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADTalkMutedDetection</tt>\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Current mute state of the audio track being monitored.\n         */\n        this._active = false;\n\n        this._calculateVADScore = this._calculateVADScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * @returns {void}\n     * @fires VAD_TALK_WHILE_MUTED\n     */\n    _calculateVADScore() {\n        const score = calculateAverage(this._scoreArray);\n\n        if (score > VAD_AVG_THRESHOLD) {\n            this.emit(VAD_TALK_WHILE_MUTED);\n\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is muted.\n        this._setActiveState(isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            this._scoreArray.push(vadScore.score);\n\n            return;\n        }\n\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\n        // there is no need to check for rogue events.\n        if (vadScore.score > VAD_VOICE_LEVEL) {\n            this._processing = true;\n            this._scoreArray.push(vadScore.score);\n\n            // Start gathering VAD scores for the configured period of time.\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\n        }\n    }\n\n    /**\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        clearTimeout(this._processTimeout);\n    }\n}\n","import { EventEmitter } from 'events';\n\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\n\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\n\n/**\n * The average value VAD needs to be under over a period of time to be considered noise.\n * @type {number}\n */\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\n\n/**\n * The average values that audio input need to be over to be considered loud.\n * @type {number}\n */\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst VAD_SCORE_TRIGGER = 0.2;\n\n/**\n * The value that a VAD score needs to be under in order for processing to begin.\n * @type {number}\n */\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\n\n/**\n * Time span over which we calculate an average score used to determine if we trigger the event.\n * @type {number}\n */\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\n\n/**\n * Detect if provided VAD score and PCM data is considered noise.\n */\nexport default class VADNoiseDetection extends EventEmitter {\n    /**\n     * Creates <tt>VADNoiseDetection</tt>\n     *\n     * @constructor\n     */\n    constructor() {\n        super();\n\n        /**\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\n         * ongoing.\n         */\n        this._processing = false;\n\n        /**\n         * Buffer that keeps the VAD scores for a period of time.\n         */\n        this._scoreArray = [];\n\n        /**\n         * Buffer that keeps audio level samples for a period of time.\n         */\n        this._audioLvlArray = [];\n\n        /**\n         * Current state of the service, if it's not active no processing will occur.\n         */\n        this._active = false;\n\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\n    }\n\n    /**\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\n     * If the score is above the set threshold fire the event.\n     * @returns {void}\n     * @fires VAD_NOISY_DEVICE\n     */\n    _calculateNoisyScore() {\n        const scoreAvg = calculateAverage(this._scoreArray);\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\n\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\n            this.emit(VAD_NOISY_DEVICE);\n\n            this._setActiveState(false);\n        }\n\n        // We reset the context in case a new process phase needs to be triggered.\n        this.reset();\n    }\n\n    /**\n     * Record the vad score and average volume in the appropriate buffers.\n     *\n     * @param {number} vadScore\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\n     */\n    _recordValues(vadScore, avgAudioLvl) {\n        this._scoreArray.push(vadScore);\n        this._audioLvlArray.push(avgAudioLvl);\n    }\n\n    /**\n     * Set the active state of the detection service and notify any listeners.\n     *\n     * @param {boolean} active\n     * @fires DETECTOR_STATE_CHANGE\n     */\n    _setActiveState(active) {\n        this._active = active;\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\n    }\n\n    /**\n     * Change the state according to the muted status of the tracked device.\n     *\n     * @param {boolean} isMuted - Is the device muted or not.\n     */\n    changeMuteState(isMuted) {\n        // This service only needs to run when the microphone is not muted.\n        this._setActiveState(!isMuted);\n        this.reset();\n    }\n\n    /**\n     * Check whether or not the service is active or not.\n     *\n     * @returns {boolean}\n     */\n    isActive() {\n        return this._active;\n    }\n\n    /**\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\n     *\n     * @returns {void}\n     */\n    reset() {\n        this._processing = false;\n        this._scoreArray = [];\n        this._audioLvlArray = [];\n        clearTimeout(this._processTimeout);\n    }\n\n    /**\n     * Listens for {@link TrackVADEmitter} events and processes them.\n     *\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\n     * @param {string} vadScore.deviceId - Device id of the associated track.\n     * @listens VAD_SCORE_PUBLISHED\n     */\n    processVADScore(vadScore) {\n        if (!this._active) {\n            return;\n        }\n\n        // There is a processing phase on going, add score to buffer array.\n        if (this._processing) {\n            // Filter and calculate sample average so we don't have to process one large array at a time.\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\n\n            return;\n        }\n\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\n        // noise\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\n            const avgAudioLvl = calculateAverage(posAudioLevels);\n\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\n                this._processing = true;\n                this._recordValues(vadScore.score, avgAudioLvl);\n\n                // Once the preset timeout executes the final score will be calculated.\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\n            }\n        }\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nimport * as DetectionEvents from './DetectionEvents';\n\n// We wait a certain time interval for constant silence input from the current device to account for\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\n// an audio track is added to the tcr.\n// Potential improvement - add this as a configurable parameter.\nconst SILENCE_PERIOD_MS = 4000;\n\n/**\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\n * state must be constant for a configured amount of time in order for the event to be triggered.\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n * @fires DetectionEvents.NO_AUDIO_INPUT\n */\nexport default class NoAudioSignalDetection extends EventEmitter {\n    /**\n     * Creates new NoAudioSignalDetection.\n     *\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        super();\n\n        this._conference = conference;\n        this._timeoutTrigger = null;\n        this._hasAudioInput = null;\n\n        conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\n    }\n\n    /**\n     * Clear the timeout state.\n     */\n    _clearTriggerTimeout() {\n        clearTimeout(this._timeoutTrigger);\n        this._timeoutTrigger = null;\n    }\n\n\n    /**\n     * Generated event triggered by a change in the current conference audio input state.\n     *\n     * @param {*} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\n     */\n    _handleAudioInputStateChange(audioLevel) {\n        // Current audio input state of the active local track in the conference, true for audio input false for no\n        // audio input.\n        const status = audioLevel !== 0;\n\n        // If this is the first audio event picked up or the current status is different from the previous trigger\n        // the event.\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\n            this._hasAudioInput = status;\n\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\n        }\n    }\n\n    /**\n     * Generate event triggered by a prolonged period of no audio input.\n     *\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @fires DetectionEvents.NO_AUDIO_INPUT\n     */\n    _handleNoAudioInputDetection(audioLevel) {\n        if (this._eventFired) {\n            return;\n        }\n\n        if (audioLevel === 0 && !this._timeoutTrigger) {\n            this._timeoutTrigger = setTimeout(() => {\n                this._eventFired = true;\n\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\n            }, SILENCE_PERIOD_MS);\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\n            this._clearTriggerTimeout();\n        }\n    }\n\n    /**\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\n     *\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\n     * being reported.\n     * @param {number} audioLevel - The audio level of the ssrc.\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio streams\n        if (!isLocal || !this._audioTrack) {\n            return;\n        }\n\n        // Get currently active local tracks from the TraceablePeerConnection\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\n\n\n        // Only target the current active track in the tpc. For some reason audio levels for previous\n        // devices are also picked up from the PeerConnection so we filter them out.\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\n            return;\n        }\n\n        // First handle audio input state change. In case the state changed to no input the no audio input event\n        // can try to fire again.\n        this._handleAudioInputStateChange(audioLevel);\n        this._handleNoAudioInputDetection(audioLevel);\n\n    }\n\n    /**\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\n     * Only take into account local audio tracks.\n     *\n     * @param {JitsiTrack} track - The added JitsiTrack.\n     */\n    _trackAdded(track) {\n        if (track.isLocalAudioTrack()) {\n            // Reset state for the new track.\n            this._audioTrack = track;\n            this._eventFired = false;\n            this._clearTriggerTimeout();\n        }\n    }\n}\n","import * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst VideoType = require('../../service/RTC/VideoType');\nconst Resolutions = require('../../service/RTC/Resolutions');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * See media/engine/simulcast.ss from webrtc.org\n */\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        max: 5000,\n        target: 4000,\n        min: 800 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        max: 2500,\n        target: 2500,\n        min: 600 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        max: 900,\n        target: 900,\n        min: 450 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        max: 700,\n        target: 500,\n        min: 150 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        max: 450,\n        target: 350,\n        min: 150 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        max: 200,\n        target: 150,\n        min: 30 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n\n/**\n * The current cap (in kbps) put on the video stream (or null if there isn't\n * a cap).  If there is a cap, we'll take it into account when calculating\n * the current quality.\n */\nlet videoBitrateCap = null;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video started.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    if (simulcast) {\n        // Find the first format with height no bigger than ours.\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n        if (simulcastFormat) {\n            // Sum the target fields from all simulcast layers for the given\n            // resolution (e.g. 720p + 360p + 180p).\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\n                const targetHeight = height;\n\n                simulcastFormat\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\n                if (simulcastFormat) {\n                    target += simulcastFormat.target;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        // See GetMaxDefaultVideoBitrateKbps in\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\n        const pixels = resolution.width * resolution.height;\n\n        if (pixels <= 320 * 240) {\n            target = 600;\n        } else if (pixels <= 640 * 480) {\n            target = 1700;\n        } else if (pixels <= 960 * 540) {\n            target = 2000;\n        } else {\n            target = 2500;\n        }\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second.\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        /**\n         * The time at which a video bitrate cap was last removed.  We use\n         * this to calculate how much time we, as a sender, have had to\n         * ramp-up\n         */\n        this._timeLastBwCapRemoved = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\n            startBitrate = options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module\n        // and update the _localStats field.\n        // Oh, and by the way, the resolutions of all remote participants are\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\n        // if one carefully reads the *code* (but not the docs) in\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\n        // jitsi-meet\n        // TODO: We should keep track of the remote resolution in _remoteStats,\n        // and notify about changes via separate events.\n        conference.statistics.addConnectionStatsListener(\n            this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or\n     * a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the\n     * camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the sending bitrate.\n\n            // Figure out if simulcast is in use\n            const activeTPC = this._conference.getActivePeerConnection();\n            const isSimulcastOn\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\n\n            const newVideoBitrateCap\n                = activeTPC && activeTPC.bandwidthLimiter\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\n\n            // If we had a cap set but there isn't one now, then it has\n            // just been 'lifted', so we should treat this like a new\n            // ramp up.\n            if (!newVideoBitrateCap && videoBitrateCap) {\n                this._timeLastBwCapRemoved = window.performance.now();\n\n                // Set the start bitrate to whatever we were just capped to\n                startBitrate = videoBitrateCap;\n            }\n            videoBitrateCap = newVideoBitrateCap;\n\n            // time since sending of video was enabled.\n            const millisSinceStart = window.performance.now()\n                - Math.max(this._timeVideoUnmuted,\n                    this._timeIceConnected,\n                    this._timeLastBwCapRemoved);\n\n            // expected sending bitrate in perfect conditions\n            let target\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\n\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\n\n            if (videoBitrateCap) {\n                target = Math.min(target, videoBitrateCap);\n            }\n\n            quality = 100 * this._localStats.bitrate.upload / target;\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\n                    / 1000;\n\n            quality\n                = Math.min(\n                    quality,\n                    prevConnectionQuality\n                        + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.broadcastEndpointMessage({\n                type: STATS_MESSAGE_TYPE,\n                values: data });\n        } catch (e) {\n            // We often hit this in the beginning of a call, before the data\n            // channel is ready. It is not a big problem, because we will\n            // send the statistics again after a few seconds, and the error is\n            // already logged elsewhere. So just ignore it.\n\n            // let errorMsg = \"Failed to broadcast local stats\";\n            // logger.error(errorMsg, e);\n            // GlobalOnErrorHandler.callErrorHandler(\n            //    new Error(errorMsg + \": \" + e));\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack ? localVideoTrack.resolution : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A delayed ICE failed notification which is triggered only if the ICE\n * connection does not recover soon after or before the XMPP connection is\n * restored (if it was ever broken). If ICE fails while the XMPP connection is\n * not broken then the notifications will be sent after 2 seconds delay. This\n * extra delay is not intentional just a side effect of the code.\n * NOTE that this delayed task can only be used if PING is supported by the XMPP\n * server.\n */\nexport default class IceFailedNotification {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * Starts the task.\n     * @param {JingleSessionPC} session - the JVB Jingle session.\n     */\n    start(session) {\n        // The 65 seconds are greater than the default Prosody's BOSH\n        // timeout of 60. This gives some time for the XMPP connection\n        // to recover.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (this._canceled) {\n                    return;\n                }\n\n                if (this._conference.isJvbConnectionInterrupted) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        logger.info(\n                            'Sending ICE failed'\n                            + ' - the connection has not recovered');\n                        this._iceFailedTimeout = undefined;\n                        session.sendIceFailedNotification();\n                    }, 2000);\n                } else {\n                    logger.info(\n                        'ICE connection restored - not sending ICE failed');\n                }\n            },\n            error => {\n                logger.error(\n                    'PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        if (this._iceFailedTimeout) {\n            window.clearTimeout(this._iceFailedTimeout);\n        }\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\n     */\n    _emitSessionUpdate(session, initiator) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session, initiator);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import browser from '../browser';\nimport { createRttByRegionEvent }\n    from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport RTCUtils from '../RTC/RTCUtils';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The options to pass to createOffer (we need to offer to receive *something*\n * for the PC to gather candidates.\n */\nconst offerOptions = {\n    offerToReceiveAudio: 1,\n    offerToReceiveVideo: 0\n};\n\n\n/**\n * The interval at which the webrtc engine sends STUN keep alive requests.\n * @type {number}\n */\nconst stunKeepAliveIntervalMs = 10000;\n\n/**\n * Wraps a PeerConnection with one specific STUN server and measures the RTT\n * to the STUN server.\n */\nclass PCMonitor {\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {String} region - The region of the STUN server.\n     * @param {String} address - The address of the STUN server.\n     * @param {number} getStatsIntervalMs how often to call getStats.\n     * @param {number} delay the delay after which the PeerConnection will be\n     * started (that is, createOffer and setLocalDescription will be invoked).\n     *\n     */\n    constructor(region, address, getStatsIntervalMs, delay) {\n        /* eslint-disable max-params */\n        this.region = region;\n        this.getStatsIntervalMs = getStatsIntervalMs;\n        this.getStatsInterval = null;\n\n        // What we consider the current RTT. It is Math.min(this.rtts).\n        this.rtt = Infinity;\n\n        // The RTT measurements we've made from the latest getStats() calls.\n        this.rtts = [];\n\n        const iceServers = [ { 'url': `stun:${address}` } ];\n\n        this.pc = new RTCUtils.RTCPeerConnectionType(\n            {\n                'iceServers': iceServers\n            });\n\n        // Maps a key consisting of the IP address, port and priority of a\n        // candidate to some state related to it. If we have more than one\n        // network interface we will might multiple srflx candidates and this\n        // helps to distinguish between then.\n        this.candidates = {};\n\n        this.stopped = false;\n\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.startStatsInterval = this.startStatsInterval.bind(this);\n        this.handleCandidateRtt = this.handleCandidateRtt.bind(this);\n\n        window.setTimeout(this.start, delay);\n    }\n\n    /**\n     * Starts this PCMonitor. That is, invokes createOffer and\n     * setLocalDescription on the PeerConnection and starts an interval which\n     * calls getStats.\n     */\n    start() {\n        if (this.stopped) {\n            return;\n        }\n\n        this.pc.createOffer(offerOptions).then(offer => {\n            this.pc.setLocalDescription(\n                offer,\n                () => {\n                    logger.info(\n                        `setLocalDescription success for ${this.region}`);\n                    this.startStatsInterval();\n                },\n                error => {\n                    logger.warn(\n                        `setLocalDescription failed for ${this.region}: ${\n                            error}`);\n                }\n            );\n        });\n    }\n\n    /**\n     * Starts an interval which invokes getStats on the PeerConnection and\n     * measures the RTTs for the different candidates.\n     */\n    startStatsInterval() {\n        this.getStatsInterval = window.setInterval(\n            () => {\n                // Note that the data that we use to measure the RTT is only\n                // available in the legacy (callback based) getStats API.\n                this.pc.getStats(stats => {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n                        const rttTotal\n                            = Number(res.stat('stunKeepaliveRttTotal'));\n\n                        // We recognize the results that we care for (local\n                        // candidates of type srflx) by the existance of the\n                        // stunKeepaliveRttTotal stat.\n                        if (rttTotal > 0) {\n                            const candidateKey\n                                = `${res.stat('ipAddress')}_${\n                                    res.stat('portNumber')}_${\n                                    res.stat('priority')}`;\n\n                            this.handleCandidateRtt(\n                                candidateKey,\n                                rttTotal,\n                                Number(\n                                    res.stat('stunKeepaliveResponsesReceived')),\n                                Number(\n                                    res.stat('stunKeepaliveRequestsSent')));\n                        }\n                    }\n\n                    // After we've measured the RTT for all candidates we,\n                    // update the state of the PC with the shortest one.\n                    let rtt = Infinity;\n\n                    for (const key in this.candidates) {\n                        if (this.candidates.hasOwnProperty(key)\n                            && this.candidates[key].rtt > 0) {\n                            rtt = Math.min(rtt, this.candidates[key].rtt);\n                        }\n                    }\n\n                    // We keep the last 6 measured RTTs and choose the shortest\n                    // one to export to analytics. This is because we often see\n                    // failures get a real measurement which end up as Infinity.\n                    this.rtts.push(rtt);\n                    if (this.rtts.length > 6) {\n                        this.rtts = this.rtts.splice(1, 7);\n                    }\n                    this.rtt = Math.min(...this.rtts);\n                });\n            },\n            this.getStatsIntervalMs\n        );\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Updates the RTT for a candidate identified by \"key\" based on the values\n     * from getStats() and the previously saved state (i.e. old values).\n     *\n     * @param {String} key the ID for the candidate\n     * @param {number} rttTotal the value of the 'stunKeepaliveRttTotal' just\n     * measured.\n     * @param {number} responsesReceived the value of the\n     * 'stunKeepaliveResponsesReceived' stat just measured.\n     * @param {number} requestsSent the value of the 'stunKeepaliveRequestsSent'\n     * stat just measured.\n     */\n    handleCandidateRtt(key, rttTotal, responsesReceived, requestsSent) {\n        /* eslist-enable max-params */\n        if (!this.candidates[key]) {\n            this.candidates[key] = {\n                rttTotal: 0,\n                responsesReceived: 0,\n                requestsSent: 0,\n                rtt: NaN\n            };\n        }\n\n        const rttTotalDiff = rttTotal - this.candidates[key].rttTotal;\n        const responsesReceivedDiff\n            = responsesReceived - this.candidates[key].responsesReceived;\n\n        // We observe that when the difference between the number of requests\n        // and responses has grown (i.q. when the value below is positive), the\n        // the RTT measurements are incorrect (too low). For this reason we\n        // ignore these measurement (setting rtt=NaN), but update our state.\n        const requestsResponsesDiff\n            = (requestsSent - responsesReceived)\n            - (this.candidates[key].requestsSent\n                - this.candidates[key].responsesReceived);\n        let rtt = NaN;\n\n        if (responsesReceivedDiff > 0 && requestsResponsesDiff === 0) {\n            rtt = rttTotalDiff / responsesReceivedDiff;\n        }\n\n        this.candidates[key].rttTotal = rttTotal;\n        this.candidates[key].responsesReceived = responsesReceived;\n        this.candidates[key].requestsSent = requestsSent;\n        this.candidates[key].rtt = rtt;\n    }\n\n\n    /**\n     * Stops this PCMonitor, clearing its intervals and stopping the\n     * PeerConnection.\n     */\n    stop() {\n        if (this.getStatsInterval) {\n            window.clearInterval(this.getStatsInterval);\n        }\n\n        this.pc.close();\n\n        this.stopped = true;\n    }\n}\n\n/**\n * A class which monitors the round-trip time (RTT) to a set of STUN servers.\n * The measured RTTs are sent as analytics events. It uses a separate\n * PeerConnection (represented as a PCMonitor) for each STUN server.\n */\nexport default class RttMonitor {\n    /**\n     * Initializes a new RttMonitor.\n     * @param {Object} config the object holding the configuration.\n     */\n    constructor(config) {\n        if (!config || !config.enabled\n            || !browser.supportsLocalCandidateRttStatistics()) {\n            return;\n        }\n\n        // Maps a region to the PCMonitor instance for that region.\n        this.pcMonitors = {};\n\n        this.startPCMonitors = this.startPCMonitors.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n        this.stop = this.stop.bind(this);\n\n        this.analyticsInterval = null;\n        this.stopped = false;\n\n        const initialDelay = config.initialDelay || 60000;\n\n\n        logger.info(\n            `Starting RTT monitor with an initial delay of ${initialDelay}`);\n\n\n        window.setTimeout(\n            () => this.startPCMonitors(config),\n            initialDelay);\n    }\n\n    /**\n     * Starts the PCMonitors according to the configuration.\n     */\n    startPCMonitors(config) {\n        if (!config.stunServers) {\n            logger.warn('No stun servers configured.');\n\n            return;\n        }\n\n        if (this.stopped) {\n            return;\n        }\n\n        const getStatsIntervalMs\n            = config.getStatsInterval || stunKeepAliveIntervalMs;\n        const analyticsIntervalMs\n            = config.analyticsInterval || getStatsIntervalMs;\n        const count = Object.keys(config.stunServers).length;\n        const offset = getStatsIntervalMs / count;\n\n        // We delay the initialization of each PC so that they are uniformly\n        // distributed across the getStatsIntervalMs.\n        let i = 0;\n\n        for (const region in config.stunServers) {\n            if (config.stunServers.hasOwnProperty(region)) {\n                const address = config.stunServers[region];\n\n                this.pcMonitors[region]\n                    = new PCMonitor(\n                        region,\n                        address,\n                        getStatsIntervalMs,\n                        offset * i);\n                i++;\n            }\n        }\n\n        window.setTimeout(\n            () => {\n                if (!this.stopped) {\n                    this.analyticsInterval\n                        = window.setInterval(\n                        this.sendAnalytics, analyticsIntervalMs);\n                }\n            },\n            1000);\n    }\n\n    /**\n     * Sends an analytics event with the measured RTT to each region/STUN\n     * server.\n     */\n    sendAnalytics() {\n        const rtts = {};\n\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                const rtt = this.pcMonitors[region].rtt;\n\n                if (!isNaN(rtt) && rtt !== Infinity) {\n                    rtts[region.replace('-', '_')] = rtt;\n                }\n            }\n        }\n\n        if (rtts) {\n            Statistics.sendAnalytics(createRttByRegionEvent(rtts));\n        }\n    }\n\n    /**\n     * Stops this RttMonitor, clearing all intervals and closing all\n     * PeerConnections.\n     */\n    stop() {\n        logger.info('Stopping RttMonitor.');\n        this.stopped = true;\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                this.pcMonitors[region].stop();\n            }\n        }\n        this.pcMonitors = {};\n\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n}\n","/* global __filename */\nimport isEqual from 'lodash.isequal';\n\nimport {\n    createRtpStatsEvent,\n    createTransportStatsEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport Statistics from './statistics';\nimport * as VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._cachedTransportStats = undefined;\n\n        this._onLocalStatsUpdated = data => {\n            this._calculateAvgStats(data);\n            this._maybeSendTransportAnalyticsEvent(data);\n        };\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Sends the 'transport.stats' analytics event whenever we detect that\n     * there is a change in the local or remote candidate type on the transport\n     * that is currently selected.\n     * @param {*} data\n     * @private\n     */\n    _maybeSendTransportAnalyticsEvent(data) {\n        if (!data || !data.transport || !data.transport.length) {\n            return;\n        }\n        const transportStats = {\n            p2p: data.transport[0].p2p,\n            'local_candidate_type': data.transport[0].localCandidateType,\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\n            'transport_type': data.transport[0].type\n        };\n\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\n            this._cachedTransportStats = transportStats;\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\n        }\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport SpeakerStats from './SpeakerStats';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        if (participant.isHidden()) {\n            return;\n        }\n\n        if (!this.stats.users[userId]) {\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n            const newParticipant = this.conference.getParticipantById(userId);\n\n            // we want to ignore hidden participants\n            if (!newParticipant || !newParticipant.isHidden()) {\n                if (this.stats.users[userId]) {\n                    speakerStatsToUpdate = this.stats.users[userId];\n\n                    if (!speakerStatsToUpdate.getDisplayName()) {\n                        speakerStatsToUpdate\n                            .setDisplayName(newStats[userId].displayName);\n                    }\n                } else {\n                    speakerStatsToUpdate = new SpeakerStats(\n                        userId, newStats[userId].displayName);\n                    this.stats.users[userId] = speakerStatsToUpdate;\n                    speakerStatsToUpdate.markAsHasLeft();\n                }\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio the the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTC from '../RTC/RTC';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\n            // spot has no signalling it will not be in a meeting where this is used.\n            connected: true,\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage,\n\n            // Returns empty function, because it does not add any listeners for real\n            // eslint-disable-next-line no-empty-function\n            addEventListener: () => () => { }\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference} to be passed in. {@code ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(this, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport transform from 'sdp-transform';\n\n/**\n * Rewrites the source information in the way sdp-transform expects.\n * Source information is split into multiple ssrc objects each containing\n * an id, attribute and value.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst write = function(session, opts) {\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            if (mLine.sources && mLine.sources.length) {\n                mLine.ssrcs = [];\n                mLine.sources.forEach(source => {\n                    Object.keys(source).forEach(attribute => {\n                        if (attribute === 'id') {\n                            return;\n                        }\n                        mLine.ssrcs.push({\n                            id: source.id,\n                            attribute,\n                            value: source[attribute]\n                        });\n                    });\n                });\n                delete mLine.sources;\n            }\n\n            // join ssrcs in ssrc groups\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\n                    && Array.isArray(ssrcGroup.ssrcs)) {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return transform.write(session, opts);\n};\n\n/**\n * Rewrites the source information that we get from sdp-transform.\n * All the ssrc lines with different attributes that belong to the\n * same ssrc are grouped into a single soure object with multiple key value pairs.\n * @param {Object} media - media description to be modified.\n * @returns {void}\n */\nconst parse = function(sdp) {\n    const session = transform.parse(sdp);\n\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n            // group sources attributes by ssrc\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n                mLine.sources = [];\n                mLine.ssrcs.forEach(ssrc => {\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\n\n                    if (found > -1) {\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\n                    } else {\n                        const src = { id: ssrc.id };\n\n                        src[ssrc.attribute] = ssrc.value;\n                        mLine.sources.push(src);\n                    }\n                });\n                delete mLine.ssrcs;\n            }\n\n            // split ssrcs in ssrc groups\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(ssrcGroup => {\n                    if (typeof ssrcGroup.ssrcs === 'string') {\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n                    }\n                });\n            }\n        });\n    }\n\n    return session;\n};\n\nexport default {\n    write,\n    parse\n};\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport clonedeep from 'lodash.clonedeep';\nimport transform from './transform.js';\n\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\n\n/**\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\n * to the m-line.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\n * the m-line.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n */\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\n    if (!mLine || !simGroup) {\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    simGroup.ssrcs.forEach(src => {\n        mLine.sources.push(findSourcebyId(src));\n\n        // find the related FID group member for this ssrc.\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\n\n        if (relatedFidGroup) {\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\n\n            mLine.sources.push(findSourcebyId(relatedSsrc));\n            mLine.ssrcGroups.push(relatedFidGroup);\n        }\n    });\n\n    // Add the SIM group last.\n    mLine.ssrcGroups.push(simGroup);\n}\n\n/**\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\n * group and the other ssrcs from the related FID groups are added to the same\n * m-line since they all belong to the same remote source. Since the ssrcs are\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\n * if not, just add the FID group.\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\n * @param {Object} ssrc - the primary ssrc.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} sourceList - array containing all the sources.\n * @returns {void}\n */\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\n    if (!mLine || !ssrc) {\n        return;\n    }\n    mLine.sources = [];\n    mLine.ssrcGroups = [];\n\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\n    if (!sourceGroups[ssrc.id]) {\n        mLine.sources.push(ssrc);\n        mLine.msid = ssrc.msid;\n\n        return;\n    }\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\n\n    // Find the SIM and FID groups that this ssrc belongs to.\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\n    if (simGroup) {\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\n    } else if (fidGroup) {\n        // check if the other ssrc from this FID group is part of a SIM group\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\n\n        if (simGroup2) {\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\n        } else {\n            // Add the FID group ssrcs.\n            fidGroup.ssrcs.forEach(src => {\n                mLine.sources.push(findSourcebyId(src));\n            });\n            mLine.ssrcGroups.push(fidGroup);\n        }\n    }\n\n    // Set the msid for the media description using the msid attribute of the ssrcs.\n    mLine.msid = mLine.sources[0].msid;\n}\n\n/**\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\n * so we also check if mline for that ssrc exists.\n * For example:\n * If the following ssrcs are in a SIM group,\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\n *        <source ssrc=\\\"1806330949\\\"/>\n *        <source ssrc=\\\"4173145196\\\"/>\n *        <source ssrc=\\\"2002632207\\\"/>\n * </ssrc-group>\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\n * @param {Object} ssrc - ssrc to check.\n * @param {Object} sourceGroups - inverted source-group map.\n * @param {Array<Object>} mlines - mlines in the description\n\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\n * exists, returns false otherwise.\n */\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\n    const findMatchingMline = mline => {\n        if (mline.sources) {\n            return mline.sources.some(source => source.id === ssrc.id);\n        }\n\n        return false;\n    };\n\n    if (!mlines.find(findMatchingMline)) {\n        // check if this ssrc is member of a SIM group. If so, check if there\n        // is a matching m-line for the primary ssrc of the SIM group.\n        if (!sourceGroups[ssrc.id]) {\n            return false;\n        }\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\n\n        if (simGroup) {\n            return mlines.some(mline => mline.sources\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\n\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\n\n        }\n\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Create an inverted sourceGroup map to put all the grouped ssrcs\n * in the same m-line.\n * @param {Array<Object>} sourceGroups\n * @returns {Object} - An inverted sourceGroup map.\n */\nfunction createSourceGroupMap(sourceGroups) {\n    const ssrc2group = {};\n\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\n        return ssrc2group;\n    }\n    sourceGroups.forEach(group => {\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\n            group.ssrcs.forEach(ssrc => {\n                if (typeof ssrc2group[ssrc] === 'undefined') {\n                    ssrc2group[ssrc] = [];\n                }\n                ssrc2group[ssrc].push(group);\n            });\n        }\n    });\n\n    return ssrc2group;\n}\n\n/**\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\n * vice versa.\n */\nexport class Interop {\n    /**\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toPlanB(description) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a unified plan sdp\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\n            console.warn('The description does not look like unified plan sdp');\n\n            return description;\n        }\n\n        const media = {};\n        const sessionMedia = session.media;\n\n        session.media = [];\n        sessionMedia.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                mLine.mid = 'data';\n                media[mLine.mid] = mLine;\n\n                return;\n            }\n            if (typeof media[type] === 'undefined') {\n                const bLine = clonedeep(mLine);\n\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\n                if (bLine.sources && Array.isArray(bLine.sources)) {\n                    bLine.sources.forEach(source => {\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\n                    });\n                }\n                if (!bLine.ssrcGroups) {\n                    bLine.ssrcGroups = [];\n                }\n                delete bLine.msid;\n                bLine.mid = type;\n                media[type] = bLine;\n            } else if (mLine.msid) {\n                // Add sources and source-groups to the existing m-line of the same media type.\n                if (mLine.sources && Array.isArray(mLine.sources)) {\n                    media[type].sources = media[type].sources.concat(mLine.sources);\n                }\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\n                }\n            }\n        });\n        session.media = Object.values(media);\n\n        // Bundle the media only if it is active.\n        const bundle = [];\n\n        Object.values(media).forEach(mline => {\n            if (mline.direction !== 'inactive') {\n                bundle.push(mline.mid);\n            }\n        });\n\n        // We regenerate the BUNDLE group with the new mids.\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = bundle.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n        const resStr = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resStr\n        });\n    }\n\n    /**\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\n     * @param {RTCSessionDescription} description - The description in plan-b format.\n     * @param {RTCSessionDescription} current - The current description set on\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\n     * remoteDescription on the RTCPeerConnection object.\n     * @returns RTCSessionDescription - The transformed session description.\n     */\n    toUnifiedPlan(description, current = null) {\n        if (!description || typeof description.sdp !== 'string') {\n            console.warn('An empty description was passed as an argument.');\n\n            return description;\n        }\n\n        // Objectify the SDP for easier manipulation.\n        const session = transform.parse(description.sdp);\n\n        // If the SDP contains no media, there's nothing to transform.\n        if (!session.media || !session.media.length) {\n            console.warn('The description has no media.');\n\n            return description;\n        }\n\n        // Make sure this is a plan-b sdp.\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\n            console.warn('The description does not look like plan-b');\n\n            return description;\n        }\n        const currentDesc = current ? transform.parse(current.sdp) : null;\n        const media = {};\n\n        session.media.forEach(mLine => {\n            const type = mLine.type;\n\n            if (type === 'application') {\n                if (!currentDesc || !currentDesc.media) {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    media[mLine.mid] = newMline;\n\n                    return;\n                }\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\n\n                if (mLineForData) {\n                    currentDesc.media[mLineForData] = mLine;\n                }\n\n                return;\n            }\n\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\n\n            if (!mLine.sources) {\n                return;\n            }\n            mLine.sources.forEach((ssrc, idx) => {\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\n                // These ssrcs do not have the \"msid\" attribute set.\n                if (!ssrc.msid) {\n                    return;\n                }\n\n                // If there is no description set on the peerconnection, create new m-lines.\n                if (!currentDesc || !currentDesc.media) {\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\n                        return;\n                    }\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = Object.keys(media).length.toString();\n                    newMline.direction = idx\n                        ? 'sendonly'\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\n                    newMline.bundleOnly = undefined;\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    media[newMline.mid] = newMline;\n\n                    return;\n                }\n\n                // Create and append the m-lines to the existing description.\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\n                    return;\n                }\n\n                // check if there is a m-line that is inactive and is of the same media type\n                const inactiveMid = currentDesc.media\n                    .findIndex(cmLine => cmLine.direction\n                        && cmLine.direction === 'inactive'\n                        && cmLine.type === type);\n\n                if (inactiveMid > -1) {\n                    currentDesc.media[inactiveMid].direction = 'sendonly';\n                    addSourcesToMline(currentDesc.media[inactiveMid], ssrc, ssrc2group, mLine.sources);\n                } else {\n                    const newMline = clonedeep(mLine);\n\n                    newMline.mid = currentDesc.media.length.toString();\n                    newMline.direction = 'sendonly';\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\n                    currentDesc.media.push(newMline);\n                }\n            });\n        });\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\n        const mids = [];\n\n        session.media.forEach(mLine => {\n            mids.push(mLine.mid);\n        });\n\n        // We regenerate the BUNDLE group (since we regenerated the mids)\n        session.groups.forEach(group => {\n            if (group.type === 'BUNDLE') {\n                group.mids = mids.join(' ');\n            }\n        });\n\n        // msid semantic\n        session.msidSemantic = {\n            semantic: 'WMS',\n            token: '*'\n        };\n\n        // Increment the session version every time.\n        session.origin.sessionVersion++;\n        const resultSdp = transform.write(session);\n\n        return new RTCSessionDescription({\n            type: description.type,\n            sdp: resultSdp\n        });\n    }\n}\n","/* Copyright @ 2015 - Present, 8x8 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './interop';\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/* global __filename */\n\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\nimport AudioMixer from './modules/webaudio/AudioMixer';\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport AuthUtil from './modules/util/AuthUtil';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport Logger from 'jitsi-meet-logger';\nimport * as MediaType from './service/RTC/MediaType';\nimport Resolutions from './service/RTC/Resolutions';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport Statistics from './modules/statistics/statistics';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\n\n/**\n * Gets the next lowest desirable resolution to try for a camera. If the given\n * resolution is already the lowest acceptable resolution, returns {@code null}.\n *\n * @param resolution the current resolution\n * @return the next lowest resolution from the given one, or {@code null} if it\n * is already the lowest acceptable resolution.\n */\nfunction getLowerResolution(resolution) {\n    if (!Resolutions[resolution]) {\n        return null;\n    }\n    const order = Resolutions[resolution].order;\n    let res = null;\n    let resName = null;\n\n    Object.keys(Resolutions).forEach(r => {\n        const value = Resolutions[r];\n\n        if (!res || (res.order < value.order && value.order < order)) {\n            resName = r;\n            res = value;\n        }\n    });\n\n    if (resName === resolution) {\n        resName = null;\n    }\n\n    return resName;\n}\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        detection: DetectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {object} options.desktopSharingExtensionExternalInstallation -\n     * enables external installation process for desktop sharing extension if\n     * the inline installation is not posible. The following properties should\n     * be provided:\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param originalOptions - internal use only, to be able to store the\n     * originally requested options.\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\n        let promiseFulfilled = false;\n\n        if (firePermissionPromptIsShownEvent === true) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                        browser.getName());\n                }\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(options)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(options)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                // set the contentHint to \"detail\" for desktop tracks\n                // eslint-disable-next-line prefer-const\n                for (const track of tracks) {\n                    if (track.type === MediaType.VIDEO\n                        && track.videoType === 'desktop') {\n                        this.setVideoTrackContentHints(track.track, 'detail');\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\n                    && !browser.usesNewGumFlow()) {\n                    const oldResolution = options.resolution || '720';\n                    const newResolution = getLowerResolution(oldResolution);\n\n                    if (newResolution !== null) {\n                        options.resolution = newResolution;\n\n                        logger.debug(\n                            'Retry createLocalTracks with resolution',\n                            newResolution);\n\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\n                            'warning',\n                            {\n                                'old_resolution': oldResolution,\n                                'new_resolution': newResolution,\n                                reason: 'unsupported resolution'\n                            }));\n\n                        return this.createLocalTracks(\n                            options,\n                            undefined,\n                            originalOptions || Object.assign({}, options));\n                    }\n\n                    // We tried everything. If there is a mandatory device id,\n                    // remove it and let gum find a device to use.\n                    if (originalOptions\n                        && error.gum.constraints\n                        && error.gum.constraints.video\n                        && error.gum.constraints.video.mandatory\n                        && error.gum.constraints.video.mandatory.sourceId) {\n                        originalOptions.cameraDeviceId = undefined;\n\n                        return this.createLocalTracks(originalOptions);\n                    }\n                }\n\n                if (error.name\n                        === JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'chrome_extension_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\n     * order to obtain VAD scores for individual PCM audio samples.\n     * @param {string} localAudioDeviceId - The target local audio device.\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\n     * longer calls, lowers values mean more calls but shorter.\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\n     * to implement the following functions:\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\n     * i.e. (16KHz, 44.1 KHz etc.)\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\n     * @returns {Promise<TrackVADEmitter>}\n     */\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\n    },\n\n    /**\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\n     * user to mix multiple MediaStreams into a single one.\n     *\n     * @returns {AudioMixer}\n     */\n    createAudioMixer() {\n        return new AudioMixer();\n    },\n\n    /**\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\n     *\n     * @returns Promise<Object> - Object containing information about the found device.\n     */\n    getActiveAudioDevice() {\n        return getActiveAudioDevice();\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /**\n     * Set the contentHint on the transmitted stream track to indicate\n     * charaterstics in the video stream, which informs PeerConnection\n     * on how to encode the track (to prefer motion or individual frame detail)\n     * @param {MediaStreamTrack} track - the track that is transmitted\n     * @param {String} hint - contentHint value that needs to be set on the track\n     */\n    setVideoTrackContentHints(track, hint) {\n        if ('contentHint' in track) {\n            track.contentHint = hint;\n            if (track.contentHint !== hint) {\n                logger.debug('Invalid video track contentHint');\n            }\n        } else {\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\n        }\n    },\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function () {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return '[object with circular refs?]';\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage = function (\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\n            typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i !== len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var timestamp = arguments[1];\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage = this.queue[this.queue.length - 1];\n        var prevMessageText = prevMessage && prevMessage.text;\n        if (prevMessageText === msg) {\n            prevMessage.count += 1;\n        } else {\n            this.queue.push({\n                text: msg,\n                timestamp: timestamp,\n                count: 1\n            });\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID = window.setTimeout(\n        this._flush.bind(\n            this, false /* do not force */, true /* reschedule */),\n        this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ );\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || !Array.isArray(mLine.invalid)) {\n        return;\n    }\n\n    var i = mLine.invalid.length;\n    while (i--) {\n        if (mLine.invalid[i].value == 'x-google-flag:conference') {\n            mLine.invalid.splice(i, 1);\n        }\n    }\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\n        primarySsrcMsid = mLine.msid;\n        var primarySsrcs = mLine.ssrcs;\n        primarySsrcs.forEach(ssrc => {\n            mLine.ssrcs.push({\n                id: ssrc.id,\n                attribute: \"msid\",\n                value: primarySsrcMsid\n            });\n        });\n    }\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Make sure that we ALWAYS add the conference flag to the remote\n        // description: That flag is deprecated but, as of this writing\n        // (09/2019), it's still used in jitsi-meet to enable legacy simulcast\n        // when screen-sharing (https://cs.chromium.org/chromium/src/third_party/webrtc/media/base/media_channel.h?rcl=f2773b54647633d5725fa25dea883f99dd1b400c&l=838).\n        //\n        // We've observed the following chain of events that almost always\n        // results in connectivity issues at the receiver:\n        //\n        // 1. The user joins a call with startVideoMuted=true, so there's no\n        //    jitsi track created.\n        // 2. The user enables screen-sharing. At this point we do a\n        //    renegotiation (which starts with an sRD); the ssrcCache is empty,\n        //    so the conference flag is not added to the remote description SDP.\n        // 3. The next step of the re-negotiation is to set the answer, so\n        //    mungeLocalDescription is called, and because now we have a track\n        //    due to the user enabling screen-sharing, it enables simulcast.\n        // 4. sLD is called with simulcast ssrcs, but the sRD call of step 2\n        //    didn't add the conference flag in the SDP, so the screen-sharing\n        //    is without simulcast.\n        // 5. Any subsequent re-negotiation (for example, due to a participant\n        //    joining/leaving the call) will enable simulcast and this switch\n        //    almost always results in a broken stream at the receiver.\n        if (!self.options.usesUnifiedPlan) {\n            assertGoogConference(mLine);\n        }\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(global = global || self, factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\n\t/**\n\t* StropheJS - Stream Management XEP-0198\n\t*\n\t* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n\t* Note: Resumption is not supported in this current implementation.\n\t*\n\t* Reference: http://xmpp.org/extensions/xep-0198.html\n\t*\n\t* @class streamManagement\n\t*/\n\tstrophe_js.Strophe.addConnectionPlugin('streamManagement', {\n\n\t\t/**\n\t\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t\t*/\n\t\tlogging: false,\n\n\t\t/**\n\t\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t\t* @default false\n\t\t* @public\n\t\t*/\n\t\tautoSendCountOnEveryIncomingStanza: false,\n\n\t\t/**\n\t\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t\t* number of stanzas sent. Set to 0 to disable.\n\t\t* @default 5\n\t\t* @public\n\t\t*/\n\t\trequestResponseInterval: 5,\n\n\t\t/**\n\t\t* @property {Pointer} _c: Strophe connection instance.\n\t\t* @private\n\t\t*/\n\t\t_c: null,\n\n\t\t/**\n\t\t* @property {String} _NS XMPP Namespace.\n\t\t* @private\n\t\t*/\n\t\t_NS: 'urn:xmpp:sm:3',\n\n\t\t/**\n\t\t* @property {Boolean} _isStreamManagementEnabled\n\t\t* @private\n\t\t*/\n\t\t_isStreamManagementEnabled: false,\n\n\t\t/**\n\t\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t\t* from the server.\n\t\t* @private\n\t\t*/\n\t\t_serverProcesssedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t\t* the server.\n\t\t* @private\n\t\t*/\n\t\t_clientProcessedStanzasCounter: null,\n\n\t\t/**\n\t\t* @property {Integer} _clientSentStanzasCounter\n\t\t* @private\n\t\t*/\n\t\t_clientSentStanzasCounter: null,\n\n\t\t/**\n\t\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t\t* @method _originalXMLOutput\n\t\t* @type {Handler}\n\t\t* @private\n\t\t*/\n\t\t_originalXMLOutput: null,\n\n\t\t/**\n\t\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t\t* @private\n\t\t*/\n\t\t_requestHandler: null,\n\n\t\t/**\n\t\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t\t* @private\n\t\t*/\n\t\t_incomingHandler: null,\n\n\t\t/**\n\t\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t\t*/\n\t\t_requestResponseIntervalCount: 0,\n\n\t\t/**\n\t\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t\t * management namespace.\n\t\t */\n\t\t_isSupported: false,\n\n\t\t/**\n\t\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t\t*/\n\t\t_unacknowledgedStanzas: [],\n\n\t\t/**\n\t\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t\t* Provides the packet id of the stanza as a parameter.\n\t\t* @private\n\t\t*/\n\t\t_acknowledgedStanzaListeners: [],\n\n\t\taddAcknowledgedStanzaListener: function(listener) {\n\t\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t\t},\n\n\t\tenable: function(resume) {\n\t\t\tif (!this._isSupported) {\n\t\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t\t}\n\t\t\tthis._c.send(strophe_js.$build('enable', { xmlns: this._NS, resume }));\n\t\t\tthis._c.flush();\n\t\t\tthis._c.pause();\n\t\t},\n\n\t\tgetResumeToken: function() {\n\t\t\treturn this._resumeToken;\n\t\t},\n\n\t\tisSupported() {\n\t\t\treturn this._isSupported;\n\t\t},\n\n\t\tresume: function() {\n\t\t\tif (!this.getResumeToken()) {\n\t\t\t\tthrow new Error('No resume token');\n\t\t\t}\n\t\t\t// FIXME add a check for proto/connection state DISCONNECTED\n\n\t\t\tthis._c.options.explicitResourceBinding = true;\n\t\t\tthis._resuming = true;\n\n\t\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t\t},\n\n\t\trequestAcknowledgement: function() {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\tthis._c.send(strophe_js.$build('r', { xmlns: this._NS }));\n\t\t},\n\n\t\tgetOutgoingCounter: function() {\n\t\t\treturn this._clientSentStanzasCounter;\n\t\t},\n\n\t\tgetIncomingCounter: function() {\n\t\t\treturn this._clientProcessedStanzasCounter;\n\t\t},\n\n\t\tinit: function(conn) {\n\t\t\tthis._c = conn;\n\t\t\tstrophe_js.Strophe.addNamespace('SM', this._NS);\n\n\t\t\t// Storing original xmlOutput function to use additional logic\n\t\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\t\tthis._originalConnect = this._c.connect;\n\t\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\t\tthis._originalDisconnect = this._c.disconnect;\n\t\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t\t},\n\n\t\t_interceptDisconnect: function() {\n\t\t\tthis._resumeToken = undefined;\n\t\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptDoDisconnect: function() {\n\t\t\tif (this.getResumeToken()\n\t\t\t\t\t&& !this._resuming\n\t\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\t\tthis._resumeState = {\n\t\t\t\t\thandlers: this._c.handlers,\n\t\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t\t};\n\t\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t\t}\n\n\t\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_interceptConnectArgs: function() {\n\t\t\tthis._connectArgs = arguments;\n\n\t\t\tthis._originalConnect.apply(this._c, arguments);\n\t\t},\n\n\t\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t\t},\n\n\t\tstatusChanged: function (status) {\n\t\t\tif (!this.getResumeToken()\n\t\t\t\t&& (status === strophe_js.Strophe.Status.CONNECTED || status === strophe_js.Strophe.Status.DISCONNECTED)) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM reset state');\n\n\t\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t\t// FIXME not described in JSDocs\n\t\t\t\tthis._resuming = false;\n\n\t\t\t\tif (status === strophe_js.Strophe.Status.DISCONNECTED) {\n\t\t\t\t\tthis._isSupported = false;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\t\tif (this._requestHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t\t}\n\n\t\t\t\tif (this._incomingHandler) {\n\t\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t\t}\n\n\t\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t\t// FIXME handler instances stored, but never used\n\t\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t\t} else if (status === strophe_js.Strophe.Status.BINDREQUIRED)  {\n\t\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t\t// Restore Strophe handlers\n\t\t\t\tfor (const property in this._resumeState) {\n\t\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t\t}\n\n\t\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\t\tthis._c.send(strophe_js.$build('resume', {\n\t\t\t\t\txmlns: this._NS,\n\t\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\t\tprevid: this._resumeToken\n\t\t\t\t}));\n\t\t\t\tthis._c.flush();\n\t\t\t} else if (status === strophe_js.Strophe.Status.ERROR) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM cleared resume token on error');\n\t\t\t\tthis._resumeToken = undefined;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t* This method overrides the send method implemented by Strophe.Connection\n\t\t* to count outgoing stanzas\n\t\t*\n\t\t* @method Send\n\t\t* @public\n\t\t*/\n\t\txmlOutput: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'presence') ||\n\t\t\t\tstrophe_js.Strophe.isTagEqual(elem, 'message')) {\n\t\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t\t}\n\n\t\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t\t},\n\n\t\t_handleEnabled: function(elem) {\n\t\t\tthis._isStreamManagementEnabled = true;\n\t\t\t// FIXME fail if requested, but not enabled\n\t\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\t\tthis._c.resume();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumeFailed: function(elem) {\n\t\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.ERROR, error, elem);\n\t\t\tthis._c._doDisconnect();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleResumed: function(elem) {\n\t\t\t// FIXME check if in the correct state\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\tthis._resuming = false;\n\t\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\t\tthis._c.authenticated = true;\n\t\t\tthis._c.restored = true;\n\n\t\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\t\tthis._c.send(stanza);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.logging && strophe_js.Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._c._changeConnectStatus(strophe_js.Strophe.Status.CONNECTED, null);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_incomingStanzaHandler: function(elem) {\n\t\t\tif (strophe_js.Strophe.isTagEqual(elem, 'iq') || strophe_js.Strophe.isTagEqual(elem, 'presence') || strophe_js.Strophe.isTagEqual(elem, 'message'))  {\n\t\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\t\tif (delta < 0) {\n\t\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < delta; i++) {\n\t\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\t\tstrophe_js.Strophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\t}\n\n\t\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t\t}\n\t\t},\n\n\t\t_handleServerRequestHandler: function() {\n\t\t\tthis._answerProcessedStanzas();\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_handleServerAck: function(elem){\n\t\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\t\treturn true;\n\t\t},\n\n\t\t_answerProcessedStanzas: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._c.send(strophe_js.$build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t\t}\n\t\t},\n\n\t\t_increaseSentStanzasCounter: function(elem) {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_increaseReceivedStanzasCounter: function() {\n\t\t\tif (this._isStreamManagementEnabled) {\n\t\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t\t}\n\t\t},\n\n\t\t_throwError: function(msg) {\n\t\t\tstrophe_js.Strophe.error(msg);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t});\n\n})));\n//# sourceMappingURL=strophe.stream-management.js.map\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst TranscriptionService = require('./AbstractTranscriptionService');\nconst Word = require('../word');\nconst audioRecorder = require('./../audioRecorder');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nlet logDisabled_ = true;\nlet deprecationWarnings_ = true;\n\n/**\n * Extract browser version out of the provided user agent string.\n *\n * @param {!string} uastring userAgent string.\n * @param {!string} expr Regular expression used as match criteria.\n * @param {!number} pos position in the version string to be returned.\n * @return {!number} browser version.\n */\nexport function extractVersion(uastring, expr, pos) {\n  const match = uastring.match(expr);\n  return match && match.length >= pos && parseInt(match[pos], 10);\n}\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object (or false to prevent\n// the event).\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  const nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    const wrappedCallback = (e) => {\n      const modifiedEvent = wrapper(e);\n      if (modifiedEvent) {\n        cb(modifiedEvent);\n      }\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  const nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    const unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get() {\n      return this['_on' + eventNameToWrap];\n    },\n    set(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n}\n\nexport function disableLog(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  logDisabled_ = bool;\n  return (bool) ? 'adapter.js logging disabled' :\n      'adapter.js logging enabled';\n}\n\n/**\n * Disable or enable deprecation warnings\n * @param {!boolean} bool set to true to disable warnings.\n */\nexport function disableWarnings(bool) {\n  if (typeof bool !== 'boolean') {\n    return new Error('Argument type: ' + typeof bool +\n        '. Please use a boolean.');\n  }\n  deprecationWarnings_ = !bool;\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n}\n\nexport function log() {\n  if (typeof window === 'object') {\n    if (logDisabled_) {\n      return;\n    }\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\n      console.log.apply(console, arguments);\n    }\n  }\n}\n\n/**\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\n */\nexport function deprecated(oldMethod, newMethod) {\n  if (!deprecationWarnings_) {\n    return;\n  }\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n      ' instead.');\n}\n\n/**\n * Browser detector.\n *\n * @return {object} result containing browser and version\n *     properties.\n */\nexport function detectBrowser(window) {\n  const {navigator} = window;\n\n  // Returned result object.\n  const result = {browser: null, version: null};\n\n  // Fail early if it's not a browser\n  if (typeof window === 'undefined' || !window.navigator) {\n    result.browser = 'Not a browser.';\n    return result;\n  }\n\n  if (navigator.mozGetUserMedia) { // Firefox.\n    result.browser = 'firefox';\n    result.version = extractVersion(navigator.userAgent,\n        /Firefox\\/(\\d+)\\./, 1);\n  } else if (navigator.webkitGetUserMedia ||\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\n       !window.RTCIceGatherer)) {\n    // Chrome, Chromium, Webview, Opera.\n    // Version matches Chrome/WebRTC version.\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\n    // more complicated fallback to webkitRTCPeerConnection.\n    result.browser = 'chrome';\n    result.version = extractVersion(navigator.userAgent,\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\n  } else if (navigator.mediaDevices &&\n      navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n    result.browser = 'edge';\n    result.version = extractVersion(navigator.userAgent,\n        /Edge\\/(\\d+).(\\d+)$/, 2);\n  } else if (window.RTCPeerConnection &&\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\n    result.browser = 'safari';\n    result.version = extractVersion(navigator.userAgent,\n        /AppleWebKit\\/(\\d+)\\./, 1);\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\n  } else { // Default fallthrough: not supported.\n    result.browser = 'Not a supported browser.';\n    return result;\n  }\n\n  return result;\n}\n\n/**\n * Checks if something is an object.\n *\n * @param {*} val The something you want to check.\n * @return true if val is an object, false otherwise.\n */\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Remove all empty objects and undefined values\n * from a nested object -- an enhanced and vanilla version\n * of Lodash's `compact`.\n */\nexport function compactObject(data) {\n  if (!isObject(data)) {\n    return data;\n  }\n\n  return Object.keys(data).reduce(function(accumulator, key) {\n    const isObj = isObject(data[key]);\n    const value = isObj ? compactObject(data[key]) : data[key];\n    const isEmptyObject = isObj && !Object.keys(value).length;\n    if (value === undefined || isEmptyObject) {\n      return accumulator;\n    }\n    return Object.assign(accumulator, {[key]: value});\n  }, {});\n}\n\n/* iterates the stats graph recursively. */\nexport function walkStats(stats, base, resultSet) {\n  if (!base || resultSet.has(base.id)) {\n    return;\n  }\n  resultSet.set(base.id, base);\n  Object.keys(base).forEach(name => {\n    if (name.endsWith('Id')) {\n      walkStats(stats, stats.get(base[name]), resultSet);\n    } else if (name.endsWith('Ids')) {\n      base[name].forEach(id => {\n        walkStats(stats, stats.get(id), resultSet);\n      });\n    }\n  });\n}\n\n/* filter getStats for a sender/receiver track. */\nexport function filterStats(result, track, outbound) {\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\n  const filteredResult = new Map();\n  if (track === null) {\n    return filteredResult;\n  }\n  const trackStats = [];\n  result.forEach(value => {\n    if (value.type === 'track' &&\n        value.trackIdentifier === track.id) {\n      trackStats.push(value);\n    }\n  });\n  trackStats.forEach(trackStat => {\n    result.forEach(stats => {\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\n        walkStats(result, stats, filteredResult);\n      }\n    });\n  });\n  return filteredResult;\n}\n\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\nconst logging = utils.log;\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (!navigator.mediaDevices) {\n    return;\n  }\n\n  const browserDetails = utils.detectBrowser(window);\n\n  const constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    const cc = {};\n    Object.keys(c).forEach(key => {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      const oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        let oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(mix => {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  const shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      const remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      let face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      const getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        let matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(devices => {\n            devices = devices.filter(d => d.kind === 'videoinput');\n            let dev = devices.find(d => matches.some(match =>\n              d.label.toLowerCase().includes(match)));\n            if (!dev && devices.length && matches.includes('back')) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  const shimError_ = function(e) {\n    if (browserDetails.version >= 64) {\n      return e;\n    }\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        PermissionDismissedError: 'NotAllowedError',\n        InvalidStateError: 'NotAllowedError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\n        TabCaptureError: 'AbortError',\n        ScreenCaptureError: 'AbortError',\n        DeviceCaptureError: 'AbortError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint || e.constraintName,\n      toString() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, c => {\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\n\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n  // function which returns a Promise, it does not accept spec-style\n  // constraints.\n  if (navigator.mediaDevices.getUserMedia) {\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n          throw new DOMException('', 'NotFoundError');\n        }\n        return stream;\n      }, e => Promise.reject(shimError_(e))));\n    };\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\nexport function shimGetDisplayMedia(window, getSourceId) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  // getSourceId is a function that returns a promise resolving with\n  // the sourceId of the screen/window/tab to be shared.\n  if (typeof getSourceId !== 'function') {\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\n        'a function');\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      return getSourceId(constraints)\n        .then(sourceId => {\n          const widthSpecified = constraints.video && constraints.video.width;\n          const heightSpecified = constraints.video &&\n            constraints.video.height;\n          const frameRateSpecified = constraints.video &&\n            constraints.video.frameRate;\n          constraints.video = {\n            mandatory: {\n              chromeMediaSource: 'desktop',\n              chromeMediaSourceId: sourceId,\n              maxFrameRate: frameRateSpecified || 3\n            }\n          };\n          if (widthSpecified) {\n            constraints.video.mandatory.maxWidth = widthSpecified;\n          }\n          if (heightSpecified) {\n            constraints.video.mandatory.maxHeight = heightSpecified;\n          }\n          return window.navigator.mediaDevices.getUserMedia(constraints);\n        });\n    };\n}\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nimport * as utils from '../utils.js';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimMediaStream(window) {\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\n}\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n      window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n      get() {\n        return this._ontrack;\n      },\n      set(f) {\n        if (this._ontrack) {\n          this.removeEventListener('track', this._ontrack);\n        }\n        this.addEventListener('track', this._ontrack = f);\n      },\n      enumerable: true,\n      configurable: true\n    });\n    const origSetRemoteDescription =\n        window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        if (!this._ontrackpoly) {\n          this._ontrackpoly = (e) => {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', te => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === te.track.id);\n              } else {\n                receiver = {track: te.track};\n              }\n\n              const event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(track => {\n              let receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = this.getReceivers()\n                  .find(r => r.track && r.track.id === track.id);\n              } else {\n                receiver = {track};\n              }\n              const event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            });\n          };\n          this.addEventListener('addstream', this._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(this, arguments);\n      };\n  } else {\n    // even if RTCRtpTransceiver is in window, it is only used and\n    // emitted in unified-plan. Unfortunately this means we need\n    // to unconditionally wrap the event.\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      if (!e.transceiver) {\n        Object.defineProperty(e, 'transceiver',\n          {value: {receiver: e.receiver}});\n      }\n      return e;\n    });\n  }\n}\n\nexport function shimGetSendersWithDtmf(window) {\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n  if (typeof window === 'object' && window.RTCPeerConnection &&\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\n    const shimSenderWithDtmf = function(pc, track) {\n      return {\n        track,\n        get dtmf() {\n          if (this._dtmf === undefined) {\n            if (track.kind === 'audio') {\n              this._dtmf = pc.createDTMFSender(track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        },\n        _pc: pc\n      };\n    };\n\n    // augment addTrack when getSenders is not available.\n    if (!window.RTCPeerConnection.prototype.getSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        this._senders = this._senders || [];\n        return this._senders.slice(); // return a copy of the internal state.\n      };\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addTrack =\n        function addTrack(track, stream) {\n          let sender = origAddTrack.apply(this, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(this, track);\n            this._senders.push(sender);\n          }\n          return sender;\n        };\n\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n      window.RTCPeerConnection.prototype.removeTrack =\n        function removeTrack(sender) {\n          origRemoveTrack.apply(this, arguments);\n          const idx = this._senders.indexOf(sender);\n          if (idx !== -1) {\n            this._senders.splice(idx, 1);\n          }\n        };\n    }\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      this._senders = this._senders || [];\n      origAddStream.apply(this, [stream]);\n      stream.getTracks().forEach(track => {\n        this._senders.push(shimSenderWithDtmf(this, track));\n      });\n    };\n\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        this._senders = this._senders || [];\n        origRemoveStream.apply(this, [stream]);\n\n        stream.getTracks().forEach(track => {\n          const sender = this._senders.find(s => s.track === track);\n          if (sender) { // remove sender\n            this._senders.splice(this._senders.indexOf(sender), 1);\n          }\n        });\n      };\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\n             'getSenders' in window.RTCPeerConnection.prototype &&\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\n             window.RTCRtpSender &&\n             !('dtmf' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = this._pc.createDTMFSender(this.track);\n          } else {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n}\n\nexport function shimGetStats(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n\n    // If selector is a function then we are in the old style stats so just\n    // pass back the original getStats format to avoid breaking old users.\n    if (arguments.length > 0 && typeof selector === 'function') {\n      return origGetStats.apply(this, arguments);\n    }\n\n    // When spec-style getStats is supported, return those when called with\n    // either no arguments or the selector argument is null.\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\n        typeof selector !== 'function')) {\n      return origGetStats.apply(this, []);\n    }\n\n    const fixChromeStats_ = function(response) {\n      const standardReport = {};\n      const reports = response.result();\n      reports.forEach(report => {\n        const standardStats = {\n          id: report.id,\n          timestamp: report.timestamp,\n          type: {\n            localcandidate: 'local-candidate',\n            remotecandidate: 'remote-candidate'\n          }[report.type] || report.type\n        };\n        report.names().forEach(name => {\n          standardStats[name] = report.stat(name);\n        });\n        standardReport[standardStats.id] = standardStats;\n      });\n\n      return standardReport;\n    };\n\n    // shim getStats with maplike support\n    const makeMapStats = function(stats) {\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\n    };\n\n    if (arguments.length >= 2) {\n      const successCallbackWrapper_ = function(response) {\n        onSucc(makeMapStats(fixChromeStats_(response)));\n      };\n\n      return origGetStats.apply(this, [successCallbackWrapper_,\n        selector]);\n    }\n\n    // promise-support\n    return new Promise((resolve, reject) => {\n      origGetStats.apply(this, [\n        function(response) {\n          resolve(makeMapStats(fixChromeStats_(response)));\n        }, reject]);\n    }).then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\n    return;\n  }\n\n  // shim sender stats.\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n    if (origGetSenders) {\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n        const senders = origGetSenders.apply(this, []);\n        senders.forEach(sender => sender._pc = this);\n        return senders;\n      };\n    }\n\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n    if (origAddTrack) {\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n        const sender = origAddTrack.apply(this, arguments);\n        sender._pc = this;\n        return sender;\n      };\n    }\n    window.RTCRtpSender.prototype.getStats = function getStats() {\n      const sender = this;\n      return this._pc.getStats().then(result =>\n        /* Note: this will include stats of all senders that\n         *   send a track with the same id as sender.track as\n         *   it is not possible to identify the RTCRtpSender.\n         */\n        utils.filterStats(result, sender.track, true));\n    };\n  }\n\n  // shim receiver stats.\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n    if (origGetReceivers) {\n      window.RTCPeerConnection.prototype.getReceivers =\n        function getReceivers() {\n          const receivers = origGetReceivers.apply(this, []);\n          receivers.forEach(receiver => receiver._pc = this);\n          return receivers;\n        };\n    }\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\n      e.receiver._pc = e.srcElement;\n      return e;\n    });\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\n      const receiver = this;\n      return this._pc.getStats().then(result =>\n        utils.filterStats(result, receiver.track, false));\n    };\n  }\n\n  if (!('getStats' in window.RTCRtpSender.prototype &&\n      'getStats' in window.RTCRtpReceiver.prototype)) {\n    return;\n  }\n\n  // shim RTCPeerConnection.getStats(track).\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    if (arguments.length > 0 &&\n        arguments[0] instanceof window.MediaStreamTrack) {\n      const track = arguments[0];\n      let sender;\n      let receiver;\n      let err;\n      this.getSenders().forEach(s => {\n        if (s.track === track) {\n          if (sender) {\n            err = true;\n          } else {\n            sender = s;\n          }\n        }\n      });\n      this.getReceivers().forEach(r => {\n        if (r.track === track) {\n          if (receiver) {\n            err = true;\n          } else {\n            receiver = r;\n          }\n        }\n        return r.track === track;\n      });\n      if (err || (sender && receiver)) {\n        return Promise.reject(new DOMException(\n          'There are more than one sender or receiver for the track.',\n          'InvalidAccessError'));\n      } else if (sender) {\n        return sender.getStats();\n      } else if (receiver) {\n        return receiver.getStats();\n      }\n      return Promise.reject(new DOMException(\n        'There is no sender or receiver for the track.',\n        'InvalidAccessError'));\n    }\n    return origGetStats.apply(this, arguments);\n  };\n}\n\nexport function shimAddTrackRemoveTrackWithNative(window) {\n  // shim addTrack/removeTrack with native variants in order to make\n  // the interactions with legacy getLocalStreams behave as in other browsers.\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      return Object.keys(this._shimmedLocalStreams)\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\n    };\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (!stream) {\n        return origAddTrack.apply(this, arguments);\n      }\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n      const sender = origAddTrack.apply(this, arguments);\n      if (!this._shimmedLocalStreams[stream.id]) {\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\n        this._shimmedLocalStreams[stream.id].push(sender);\n      }\n      return sender;\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    const existingSenders = this.getSenders();\n    origAddStream.apply(this, arguments);\n    const newSenders = this.getSenders()\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      delete this._shimmedLocalStreams[stream.id];\n      return origRemoveStream.apply(this, arguments);\n    };\n\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\n      if (sender) {\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\n          if (idx !== -1) {\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\n          }\n          if (this._shimmedLocalStreams[streamId].length === 1) {\n            delete this._shimmedLocalStreams[streamId];\n          }\n        });\n      }\n      return origRemoveTrack.apply(this, arguments);\n    };\n}\n\nexport function shimAddTrackRemoveTrack(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  // shim addTrack and removeTrack.\n  if (window.RTCPeerConnection.prototype.addTrack &&\n      browserDetails.version >= 65) {\n    return shimAddTrackRemoveTrackWithNative(window);\n  }\n\n  // also shim pc.getLocalStreams when addTrack is shimmed\n  // to return the original streams.\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\n      .getLocalStreams;\n  window.RTCPeerConnection.prototype.getLocalStreams =\n    function getLocalStreams() {\n      const nativeStreams = origGetLocalStreams.apply(this);\n      this._reverseStreams = this._reverseStreams || {};\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\n    };\n\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n    this._streams = this._streams || {};\n    this._reverseStreams = this._reverseStreams || {};\n\n    stream.getTracks().forEach(track => {\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n    });\n    // Add identity mapping for consistency with addTrack.\n    // Unless this is being used with a stream from addTrack.\n    if (!this._reverseStreams[stream.id]) {\n      const newStream = new window.MediaStream(stream.getTracks());\n      this._streams[stream.id] = newStream;\n      this._reverseStreams[newStream.id] = stream;\n      stream = newStream;\n    }\n    origAddStream.apply(this, [stream]);\n  };\n\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\n      delete this._reverseStreams[(this._streams[stream.id] ?\n          this._streams[stream.id].id : stream.id)];\n      delete this._streams[stream.id];\n    };\n\n  window.RTCPeerConnection.prototype.addTrack =\n    function addTrack(track, stream) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      const streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(t => t === track)) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      const alreadyExists = this.getSenders().find(s => s.track === track);\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      this._streams = this._streams || {};\n      this._reverseStreams = this._reverseStreams || {};\n      const oldStream = this._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(() => {\n          this.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        const newStream = new window.MediaStream([track]);\n        this._streams[stream.id] = newStream;\n        this._reverseStreams[newStream.id] = stream;\n        this.addStream(newStream);\n      }\n      return this.getSenders().find(s => s.track === track);\n    };\n\n  // replace the internal stream id with the external one and\n  // vice versa.\n  function replaceInternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n          externalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  function replaceExternalStreamId(pc, description) {\n    let sdp = description.sdp;\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\n      const externalStream = pc._reverseStreams[internalId];\n      const internalStream = pc._streams[externalStream.id];\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n          internalStream.id);\n    });\n    return new RTCSessionDescription({\n      type: description.type,\n      sdp\n    });\n  }\n  ['createOffer', 'createAnswer'].forEach(function(method) {\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\n    const methodObj = {[method]() {\n      const args = arguments;\n      const isLegacyCall = arguments.length &&\n          typeof arguments[0] === 'function';\n      if (isLegacyCall) {\n        return nativeMethod.apply(this, [\n          (description) => {\n            const desc = replaceInternalStreamId(this, description);\n            args[0].apply(null, [desc]);\n          },\n          (err) => {\n            if (args[1]) {\n              args[1].apply(null, err);\n            }\n          }, arguments[2]\n        ]);\n      }\n      return nativeMethod.apply(this, arguments)\n      .then(description => replaceInternalStreamId(this, description));\n    }};\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\n  });\n\n  const origSetLocalDescription =\n      window.RTCPeerConnection.prototype.setLocalDescription;\n  window.RTCPeerConnection.prototype.setLocalDescription =\n    function setLocalDescription() {\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(this, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\n      return origSetLocalDescription.apply(this, arguments);\n    };\n\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\n      window.RTCPeerConnection.prototype, 'localDescription');\n  Object.defineProperty(window.RTCPeerConnection.prototype,\n      'localDescription', {\n        get() {\n          const description = origLocalDescription.get.apply(this);\n          if (description.type === '') {\n            return description;\n          }\n          return replaceInternalStreamId(this, description);\n        }\n      });\n\n  window.RTCPeerConnection.prototype.removeTrack =\n    function removeTrack(sender) {\n      if (this.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      const isLocal = sender._pc === this;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      this._streams = this._streams || {};\n      let stream;\n      Object.keys(this._streams).forEach(streamid => {\n        const hasTrack = this._streams[streamid].getTracks()\n          .find(track => sender.track === track);\n        if (hasTrack) {\n          stream = this._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          this.removeStream(this._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        this.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\n  }\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n\n  const addIceCandidateNullSupported =\n    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;\n\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n  if (browserDetails.version < 53) {\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  const nativeAddIceCandidate =\n      window.RTCPeerConnection.prototype.addIceCandidate;\n  window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!addIceCandidateNullSupported && !arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions. Native support planned for Chrome M77.\n      if (browserDetails.version < 78 &&\n        arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n}\n\nexport function fixNegotiationNeeded(window) {\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\n    const pc = e.target;\n    if (pc.signalingState !== 'stable') {\n      return;\n    }\n    return e;\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  const shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  const origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));\n  };\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window) {\n  if (!('getDisplayMedia' in window.navigator)) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    window.navigator.getDisplayMedia.bind(window.navigator);\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nimport {filterIceServers} from './filtericeservers';\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\n\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (window.RTCIceGatherer) {\n    if (!window.RTCIceCandidate) {\n      window.RTCIceCandidate = function RTCIceCandidate(args) {\n        return args;\n      };\n    }\n    if (!window.RTCSessionDescription) {\n      window.RTCSessionDescription = function RTCSessionDescription(args) {\n        return args;\n      };\n    }\n    // this adds an additional event listener to MediaStrackTrack that signals\n    // when a tracks enabled property was changed. Workaround for a bug in\n    // addStream, see below. No longer required in 15025+\n    if (browserDetails.version < 15025) {\n      const origMSTEnabled = Object.getOwnPropertyDescriptor(\n          window.MediaStreamTrack.prototype, 'enabled');\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n        set(value) {\n          origMSTEnabled.set.call(this, value);\n          const ev = new Event('enabled');\n          ev.enabled = value;\n          this.dispatchEvent(ev);\n        }\n      });\n    }\n  }\n\n  // ORTC defines the DTMF sender a bit different.\n  // https://github.com/w3c/ortc/issues/714\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n      get() {\n        if (this._dtmf === undefined) {\n          if (this.track.kind === 'audio') {\n            this._dtmf = new window.RTCDtmfSender(this);\n          } else if (this.track.kind === 'video') {\n            this._dtmf = null;\n          }\n        }\n        return this._dtmf;\n      }\n    });\n  }\n  // Edge currently only implements the RTCDtmfSender, not the\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\n    window.RTCDTMFSender = window.RTCDtmfSender;\n  }\n\n  const RTCPeerConnectionShim = shimRTCPeerConnection(window,\n      browserDetails.version);\n  window.RTCPeerConnection = function RTCPeerConnection(config) {\n    if (config && config.iceServers) {\n      config.iceServers = filterIceServers(config.iceServers,\n        browserDetails.version);\n      utils.log('ICE servers after filtering:', config.iceServers);\n    }\n    return new RTCPeerConnectionShim(config);\n  };\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\n}\n\nexport function shimReplaceTrack(window) {\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n  if (window.RTCRtpSender &&\n      !('replaceTrack' in window.RTCRtpSender.prototype)) {\n    window.RTCRtpSender.prototype.replaceTrack =\n        window.RTCRtpSender.prototype.setTrack;\n  }\n}\n","/*\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nexport function filterIceServers(iceServers, edgeVersion) {\n  let hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(server => {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n      }\n      const isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(url => {\n        // filter STUN unconditionally.\n        if (url.indexOf('stun:') === 0) {\n          return false;\n        }\n\n        const validTurn = url.startsWith('turn') &&\n            !url.startsWith('turn:[') &&\n            url.includes('transport=udp');\n        if (validTurn && !hasTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return validTurn && !hasTurn;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\n\nexport function shimGetUserMedia(window) {\n  const browserDetails = utils.detectBrowser(window);\n  const navigator = window && window.navigator;\n  const MediaStreamTrack = window && window.MediaStreamTrack;\n\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    const remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        const obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      const nativeApplyConstraints =\n        MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n}\n","/*\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\n  if (window.navigator.mediaDevices &&\n    'getDisplayMedia' in window.navigator.mediaDevices) {\n    return;\n  }\n  if (!(window.navigator.mediaDevices)) {\n    return;\n  }\n  window.navigator.mediaDevices.getDisplayMedia =\n    function getDisplayMedia(constraints) {\n      if (!(constraints && constraints.video)) {\n        const err = new DOMException('getDisplayMedia without video ' +\n            'constraints is undefined');\n        err.name = 'NotFoundError';\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\n        err.code = 8;\n        return Promise.reject(err);\n      }\n      if (constraints.video === true) {\n        constraints.video = {mediaSource: preferredMediaSource};\n      } else {\n        constraints.video.mediaSource = preferredMediaSource;\n      }\n      return window.navigator.mediaDevices.getUserMedia(constraints);\n    };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport * as utils from '../utils';\nexport {shimGetUserMedia} from './getusermedia';\nexport {shimGetDisplayMedia} from './getdisplaymedia';\n\nexport function shimOnTrack(window) {\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      ('receiver' in window.RTCTrackEvent.prototype) &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimPeerConnection(window) {\n  const browserDetails = utils.detectBrowser(window);\n\n  if (typeof window !== 'object' ||\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\n    return; // probably media.peerconnection.enabled=false in about:config\n  }\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\n    // very basic support for old versions.\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\n  }\n\n  if (browserDetails.version < 53) {\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\n          const methodObj = {[method]() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          }};\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\n        });\n  }\n\n  // support for addIceCandidate(null or undefined)\n  // as well as ignoring {sdpMid, candidate: \"\"}\n  if (browserDetails.version < 68) {\n    const nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate =\n    function addIceCandidate() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\n      // in older versions.\n      if (arguments[0] && arguments[0].candidate === '') {\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n\n  const modernStatsTypes = {\n    inboundrtp: 'inbound-rtp',\n    outboundrtp: 'outbound-rtp',\n    candidatepair: 'candidate-pair',\n    localcandidate: 'local-candidate',\n    remotecandidate: 'remote-candidate'\n  };\n\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\n    const [selector, onSucc, onErr] = arguments;\n    return nativeGetStats.apply(this, [selector || null])\n      .then(stats => {\n        if (browserDetails.version < 53 && !onSucc) {\n          // Shim only promise getStats with spec-hyphens in type names\n          // Leave callback version alone; misc old uses of forEach before Map\n          try {\n            stats.forEach(stat => {\n              stat.type = modernStatsTypes[stat.type] || stat.type;\n            });\n          } catch (e) {\n            if (e.name !== 'TypeError') {\n              throw e;\n            }\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n            stats.forEach((stat, i) => {\n              stats.set(i, Object.assign({}, stat, {\n                type: modernStatsTypes[stat.type] || stat.type\n              }));\n            });\n          }\n        }\n        return stats;\n      })\n      .then(onSucc, onErr);\n  };\n}\n\nexport function shimSenderGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\n    return;\n  }\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n  if (origGetSenders) {\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\n      const senders = origGetSenders.apply(this, []);\n      senders.forEach(sender => sender._pc = this);\n      return senders;\n    };\n  }\n\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n  if (origAddTrack) {\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\n      const sender = origAddTrack.apply(this, arguments);\n      sender._pc = this;\n      return sender;\n    };\n  }\n  window.RTCRtpSender.prototype.getStats = function getStats() {\n    return this.track ? this._pc.getStats(this.track) :\n        Promise.resolve(new Map());\n  };\n}\n\nexport function shimReceiverGetStats(window) {\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\n      window.RTCRtpSender)) {\n    return;\n  }\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\n    return;\n  }\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\n  if (origGetReceivers) {\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\n      const receivers = origGetReceivers.apply(this, []);\n      receivers.forEach(receiver => receiver._pc = this);\n      return receivers;\n    };\n  }\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\n    e.receiver._pc = e.srcElement;\n    return e;\n  });\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\n    return this._pc.getStats(this.track);\n  };\n}\n\nexport function shimRemoveStream(window) {\n  if (!window.RTCPeerConnection ||\n      'removeStream' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  window.RTCPeerConnection.prototype.removeStream =\n    function removeStream(stream) {\n      utils.deprecated('removeStream', 'removeTrack');\n      this.getSenders().forEach(sender => {\n        if (sender.track && stream.getTracks().includes(sender.track)) {\n          this.removeTrack(sender);\n        }\n      });\n    };\n}\n\nexport function shimRTCDataChannel(window) {\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\n  if (window.DataChannel && !window.RTCDataChannel) {\n    window.RTCDataChannel = window.DataChannel;\n  }\n}\n\nexport function shimAddTransceiver(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\n  if (origAddTransceiver) {\n    window.RTCPeerConnection.prototype.addTransceiver =\n      function addTransceiver() {\n        this.setParametersPromises = [];\n        const initParameters = arguments[1];\n        const shouldPerformCheck = initParameters &&\n                                  'sendEncodings' in initParameters;\n        if (shouldPerformCheck) {\n          // If sendEncodings params are provided, validate grammar\n          initParameters.sendEncodings.forEach((encodingParam) => {\n            if ('rid' in encodingParam) {\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\n              if (!ridRegex.test(encodingParam.rid)) {\n                throw new TypeError('Invalid RID value provided.');\n              }\n            }\n            if ('scaleResolutionDownBy' in encodingParam) {\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\n              }\n            }\n            if ('maxFramerate' in encodingParam) {\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\n                throw new RangeError('max_framerate must be >= 0.0');\n              }\n            }\n          });\n        }\n        const transceiver = origAddTransceiver.apply(this, arguments);\n        if (shouldPerformCheck) {\n          // Check if the init options were applied. If not we do this in an\n          // asynchronous way and save the promise reference in a global object.\n          // This is an ugly hack, but at the same time is way more robust than\n          // checking the sender parameters before and after the createOffer\n          // Also note that after the createoffer we are not 100% sure that\n          // the params were asynchronously applied so we might miss the\n          // opportunity to recreate offer.\n          const {sender} = transceiver;\n          const params = sender.getParameters();\n          if (!('encodings' in params)) {\n            params.encodings = initParameters.sendEncodings;\n            this.setParametersPromises.push(\n              sender.setParameters(params)\n              .catch(() => {})\n            );\n          }\n        }\n        return transceiver;\n      };\n  }\n}\n\nexport function shimCreateOffer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateOffer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateOffer.apply(this, arguments);\n  };\n}\n\nexport function shimCreateAnswer(window) {\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\n    return;\n  }\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\n    if (this.setParametersPromises && this.setParametersPromises.length) {\n      return Promise.all(this.setParametersPromises)\n      .then(() => {\n        return origCreateAnswer.apply(this, arguments);\n      })\n      .finally(() => {\n        this.setParametersPromises = [];\n      });\n    }\n    return origCreateAnswer.apply(this, arguments);\n  };\n}","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nimport * as utils from '../utils';\n\nexport function shimLocalStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getLocalStreams =\n      function getLocalStreams() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n  }\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\n      if (!this._localStreams) {\n        this._localStreams = [];\n      }\n      if (!this._localStreams.includes(stream)) {\n        this._localStreams.push(stream);\n      }\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\n      // Safari orders by track id.\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\n        stream));\n    };\n\n    window.RTCPeerConnection.prototype.addTrack =\n      function addTrack(track) {\n        const stream = arguments[1];\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (!this._localStreams.includes(stream)) {\n            this._localStreams.push(stream);\n          }\n        }\n        return _addTrack.apply(this, arguments);\n      };\n  }\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.removeStream =\n      function removeStream(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        const index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        const tracks = stream.getTracks();\n        this.getSenders().forEach(sender => {\n          if (tracks.includes(sender.track)) {\n            this.removeTrack(sender);\n          }\n        });\n      };\n  }\n}\n\nexport function shimRemoteStreamsAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n    window.RTCPeerConnection.prototype.getRemoteStreams =\n      function getRemoteStreams() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n  }\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n      get() {\n        return this._onaddstream;\n      },\n      set(f) {\n        if (this._onaddstream) {\n          this.removeEventListener('addstream', this._onaddstream);\n          this.removeEventListener('track', this._onaddstreampoly);\n        }\n        this.addEventListener('addstream', this._onaddstream = f);\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\n          e.streams.forEach(stream => {\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.includes(stream)) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            const event = new Event('addstream');\n            event.stream = stream;\n            this.dispatchEvent(event);\n          });\n        });\n      }\n    });\n    const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n      function setRemoteDescription() {\n        const pc = this;\n        if (!this._onaddstreampoly) {\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            e.streams.forEach(stream => {\n              if (!pc._remoteStreams) {\n                pc._remoteStreams = [];\n              }\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\n                return;\n              }\n              pc._remoteStreams.push(stream);\n              const event = new Event('addstream');\n              event.stream = stream;\n              pc.dispatchEvent(event);\n            });\n          });\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n  }\n}\n\nexport function shimCallbacksAPI(window) {\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\n    return;\n  }\n  const prototype = window.RTCPeerConnection.prototype;\n  const origCreateOffer = prototype.createOffer;\n  const origCreateAnswer = prototype.createAnswer;\n  const setLocalDescription = prototype.setLocalDescription;\n  const setRemoteDescription = prototype.setRemoteDescription;\n  const addIceCandidate = prototype.addIceCandidate;\n\n  prototype.createOffer =\n    function createOffer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  prototype.createAnswer =\n    function createAnswer(successCallback, failureCallback) {\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      const promise = origCreateAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n  let withCallback = function(description, successCallback, failureCallback) {\n    const promise = setLocalDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setLocalDescription = withCallback;\n\n  withCallback = function(description, successCallback, failureCallback) {\n    const promise = setRemoteDescription.apply(this, [description]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.setRemoteDescription = withCallback;\n\n  withCallback = function(candidate, successCallback, failureCallback) {\n    const promise = addIceCandidate.apply(this, [candidate]);\n    if (!failureCallback) {\n      return promise;\n    }\n    promise.then(successCallback, failureCallback);\n    return Promise.resolve();\n  };\n  prototype.addIceCandidate = withCallback;\n}\n\nexport function shimGetUserMedia(window) {\n  const navigator = window && window.navigator;\n\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n    // shim not needed in Safari 12.1\n    const mediaDevices = navigator.mediaDevices;\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\n    navigator.mediaDevices.getUserMedia = (constraints) => {\n      return _getUserMedia(shimConstraints(constraints));\n    };\n  }\n\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\n    navigator.mediaDevices.getUserMedia) {\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\n      navigator.mediaDevices.getUserMedia(constraints)\n      .then(cb, errcb);\n    }.bind(navigator);\n  }\n}\n\nexport function shimConstraints(constraints) {\n  if (constraints && constraints.video !== undefined) {\n    return Object.assign({},\n      constraints,\n      {video: utils.compactObject(constraints.video)}\n    );\n  }\n\n  return constraints;\n}\n\nexport function shimRTCIceServerUrls(window) {\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n  const OrigPeerConnection = window.RTCPeerConnection;\n  window.RTCPeerConnection =\n    function RTCPeerConnection(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        const newIceServers = [];\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\n          let server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n  // wrap static methods. Currently just generateCertificate.\n  if ('generateCertificate' in window.RTCPeerConnection) {\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n      get() {\n        return OrigPeerConnection.generateCertificate;\n      }\n    });\n  }\n}\n\nexport function shimTrackEventTransceiver(window) {\n  // Add event.transceiver member over deprecated event.receiver\n  if (typeof window === 'object' && window.RTCTrackEvent &&\n      'receiver' in window.RTCTrackEvent.prototype &&\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n      get() {\n        return {receiver: this.receiver};\n      }\n    });\n  }\n}\n\nexport function shimCreateOfferLegacy(window) {\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n  window.RTCPeerConnection.prototype.createOffer =\n    function createOffer(offerOptions) {\n      if (offerOptions) {\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveAudio =\n            !!offerOptions.offerToReceiveAudio;\n        }\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'audio');\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('sendonly');\n            } else {\n              audioTransceiver.direction = 'sendonly';\n            }\n          } else if (audioTransceiver.direction === 'recvonly') {\n            if (audioTransceiver.setDirection) {\n              audioTransceiver.setDirection('inactive');\n            } else {\n              audioTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          this.addTransceiver('audio');\n        }\n\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\n          // support bit values\n          offerOptions.offerToReceiveVideo =\n            !!offerOptions.offerToReceiveVideo;\n        }\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\n          transceiver.receiver.track.kind === 'video');\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('sendonly');\n            } else {\n              videoTransceiver.direction = 'sendonly';\n            }\n          } else if (videoTransceiver.direction === 'recvonly') {\n            if (videoTransceiver.setDirection) {\n              videoTransceiver.setDirection('inactive');\n            } else {\n              videoTransceiver.direction = 'inactive';\n            }\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          this.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(this, arguments);\n    };\n}\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n'use strict';\n\nimport SDPUtils from 'sdp';\nimport * as utils from './utils';\n\nexport function shimRTCIceCandidate(window) {\n  // foundation is arbitrarily chosen as an indicator for full support for\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\n      window.RTCIceCandidate.prototype)) {\n    return;\n  }\n\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\n    // Remove the a= which shouldn't be part of the candidate string.\n    if (typeof args === 'object' && args.candidate &&\n        args.candidate.indexOf('a=') === 0) {\n      args = JSON.parse(JSON.stringify(args));\n      args.candidate = args.candidate.substr(2);\n    }\n\n    if (args.candidate && args.candidate.length) {\n      // Augment the native candidate with the parsed fields.\n      const nativeCandidate = new NativeRTCIceCandidate(args);\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      const augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function toJSON() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    }\n    return new NativeRTCIceCandidate(args);\n  };\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\n\n  // Hook up the augmented candidate in onicecandidate and\n  // addEventListener('icecandidate', ...)\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\n    if (e.candidate) {\n      Object.defineProperty(e, 'candidate', {\n        value: new window.RTCIceCandidate(e.candidate),\n        writable: 'false'\n      });\n    }\n    return e;\n  });\n}\n\nexport function shimMaxMessageSize(window) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\n      get() {\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\n      }\n    });\n  }\n\n  const sctpInDescription = function(description) {\n    if (!description || !description.sdp) {\n      return false;\n    }\n    const sections = SDPUtils.splitSections(description.sdp);\n    sections.shift();\n    return sections.some(mediaSection => {\n      const mLine = SDPUtils.parseMLine(mediaSection);\n      return mLine && mLine.kind === 'application'\n          && mLine.protocol.indexOf('SCTP') !== -1;\n    });\n  };\n\n  const getRemoteFirefoxVersion = function(description) {\n    // TODO: Is there a better solution for detecting Firefox?\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\n    if (match === null || match.length < 2) {\n      return -1;\n    }\n    const version = parseInt(match[1], 10);\n    // Test for NaN (yes, this is ugly)\n    return version !== version ? -1 : version;\n  };\n\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\n    // Every implementation we know can send at least 64 KiB.\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\n    //       data does not reach the other peer reliably.\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\n    let canSendMaxMessageSize = 65536;\n    if (browserDetails.browser === 'firefox') {\n      if (browserDetails.version < 57) {\n        if (remoteIsFirefox === -1) {\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\n          // fragmentation.\n          canSendMaxMessageSize = 16384;\n        } else {\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\n          // messages. Thus, supporting ~2 GiB when sending.\n          canSendMaxMessageSize = 2147483637;\n        }\n      } else if (browserDetails.version < 60) {\n        // Currently, all FF >= 57 will reset the remote maximum message size\n        // to the default value when a data channel is created at a later\n        // stage. :(\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n        canSendMaxMessageSize =\n          browserDetails.version === 57 ? 65535 : 65536;\n      } else {\n        // FF >= 60 supports sending ~2 GiB\n        canSendMaxMessageSize = 2147483637;\n      }\n    }\n    return canSendMaxMessageSize;\n  };\n\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\n    //       every implementation we know supports receiving 65536 bytes.\n    let maxMessageSize = 65536;\n\n    // FF 57 has a slightly incorrect default remote max message size, so\n    // we need to adjust it here to avoid a failure when sending.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\n    if (browserDetails.browser === 'firefox'\n         && browserDetails.version === 57) {\n      maxMessageSize = 65535;\n    }\n\n    const match = SDPUtils.matchPrefix(description.sdp,\n      'a=max-message-size:');\n    if (match.length > 0) {\n      maxMessageSize = parseInt(match[0].substr(19), 10);\n    } else if (browserDetails.browser === 'firefox' &&\n                remoteIsFirefox !== -1) {\n      // If the maximum message size is not present in the remote SDP and\n      // both local and remote are Firefox, the remote peer can receive\n      // ~2 GiB.\n      maxMessageSize = 2147483637;\n    }\n    return maxMessageSize;\n  };\n\n  const origSetRemoteDescription =\n      window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n    function setRemoteDescription() {\n      this._sctp = null;\n      // Chrome decided to not expose .sctp in plan-b mode.\n      // As usual, adapter.js has to do an 'ugly worakaround'\n      // to cover up the mess.\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\n        const {sdpSemantics} = this.getConfiguration();\n        if (sdpSemantics === 'plan-b') {\n          Object.defineProperty(this, 'sctp', {\n            get() {\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n      }\n\n      if (sctpInDescription(arguments[0])) {\n        // Check if the remote is FF.\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\n\n        // Get the maximum message size the local peer is capable of sending\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\n\n        // Get the maximum message size of the remote peer.\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\n\n        // Determine final maximum message size\n        let maxMessageSize;\n        if (canSendMMS === 0 && remoteMMS === 0) {\n          maxMessageSize = Number.POSITIVE_INFINITY;\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\n        } else {\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\n        }\n\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\n        // attribute.\n        const sctp = {};\n        Object.defineProperty(sctp, 'maxMessageSize', {\n          get() {\n            return maxMessageSize;\n          }\n        });\n        this._sctp = sctp;\n      }\n\n      return origSetRemoteDescription.apply(this, arguments);\n    };\n}\n\nexport function shimSendThrowTypeError(window) {\n  if (!(window.RTCPeerConnection &&\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\n    return;\n  }\n\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\n  //       message size can be reset for all data channels at a later stage.\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\n\n  function wrapDcSend(dc, pc) {\n    const origDataChannelSend = dc.send;\n    dc.send = function send() {\n      const data = arguments[0];\n      const length = data.length || data.size || data.byteLength;\n      if (dc.readyState === 'open' &&\n          pc.sctp && length > pc.sctp.maxMessageSize) {\n        throw new TypeError('Message too large (can send a maximum of ' +\n          pc.sctp.maxMessageSize + ' bytes)');\n      }\n      return origDataChannelSend.apply(dc, arguments);\n    };\n  }\n  const origCreateDataChannel =\n    window.RTCPeerConnection.prototype.createDataChannel;\n  window.RTCPeerConnection.prototype.createDataChannel =\n    function createDataChannel() {\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\n      wrapDcSend(dataChannel, this);\n      return dataChannel;\n    };\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\n    wrapDcSend(e.channel, e.target);\n    return e;\n  });\n}\n\n\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\n * since DTLS failures would be hidden. See\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\n * for the Firefox tracking bug.\n */\nexport function shimConnectionState(window) {\n  if (!window.RTCPeerConnection ||\n      'connectionState' in window.RTCPeerConnection.prototype) {\n    return;\n  }\n  const proto = window.RTCPeerConnection.prototype;\n  Object.defineProperty(proto, 'connectionState', {\n    get() {\n      return {\n        completed: 'connected',\n        checking: 'connecting'\n      }[this.iceConnectionState] || this.iceConnectionState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(proto, 'onconnectionstatechange', {\n    get() {\n      return this._onconnectionstatechange || null;\n    },\n    set(cb) {\n      if (this._onconnectionstatechange) {\n        this.removeEventListener('connectionstatechange',\n            this._onconnectionstatechange);\n        delete this._onconnectionstatechange;\n      }\n      if (cb) {\n        this.addEventListener('connectionstatechange',\n            this._onconnectionstatechange = cb);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\n    const origMethod = proto[method];\n    proto[method] = function() {\n      if (!this._connectionstatechangepoly) {\n        this._connectionstatechangepoly = e => {\n          const pc = e.target;\n          if (pc._lastConnectionState !== pc.connectionState) {\n            pc._lastConnectionState = pc.connectionState;\n            const newEvent = new Event('connectionstatechange', e);\n            pc.dispatchEvent(newEvent);\n          }\n          return e;\n        };\n        this.addEventListener('iceconnectionstatechange',\n          this._connectionstatechangepoly);\n      }\n      return origMethod.apply(this, arguments);\n    };\n  });\n}\n\nexport function removeAllowExtmapMixed(window) {\n  /* remove a=extmap-allow-mixed for Chrome < M71 */\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  const browserDetails = utils.detectBrowser(window);\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\n    return;\n  }\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\n  window.RTCPeerConnection.prototype.setRemoteDescription =\n  function setRemoteDescription(desc) {\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\n      desc.sdp = desc.sdp.split('\\n').filter((line) => {\n        return line.trim() !== 'a=extmap-allow-mixed';\n      }).join('\\n');\n    }\n    return nativeSRD.apply(this, arguments);\n  };\n}\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n/* eslint-env node */\n\n'use strict';\n\nimport {adapterFactory} from './adapter_factory.js';\n\nconst adapter = adapterFactory({window});\nexport default adapter;\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nimport * as utils from './utils';\n\n  // Browser shims.\nimport * as chromeShim from './chrome/chrome_shim';\nimport * as edgeShim from './edge/edge_shim';\nimport * as firefoxShim from './firefox/firefox_shim';\nimport * as safariShim from './safari/safari_shim';\nimport * as commonShim from './common_shim';\n\n// Shimming starts here.\nexport function adapterFactory({window} = {}, options = {\n  shimChrome: true,\n  shimFirefox: true,\n  shimEdge: true,\n  shimSafari: true,\n}) {\n  // Utils.\n  const logging = utils.log;\n  const browserDetails = utils.detectBrowser(window);\n\n  const adapter = {\n    browserDetails,\n    commonShim,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n      chromeShim.shimGetStats(window);\n      chromeShim.shimSenderReceiverGetStats(window);\n      chromeShim.fixNegotiationNeeded(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n      firefoxShim.shimRemoveStream(window);\n      firefoxShim.shimSenderGetStats(window);\n      firefoxShim.shimReceiverGetStats(window);\n      firefoxShim.shimRTCDataChannel(window);\n      firefoxShim.shimAddTransceiver(window);\n      firefoxShim.shimCreateOffer(window);\n      firefoxShim.shimCreateAnswer(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimConnectionState(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimGetDisplayMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCreateOfferLegacy(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      commonShim.shimMaxMessageSize(window);\n      commonShim.shimSendThrowTypeError(window);\n      commonShim.removeAllowExtmapMixed(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n}\n"],"sourceRoot":""}